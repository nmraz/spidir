# run: isel-regalloc

extfunc @source:f32()
extfunc @sink(f32)
extfunc @large_sink(f32, f32, f32, f32, f32, f32, f32, f32, f32)
extfunc @larger_sink(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)

func @caller(f32) {
    # check: function `caller`:
    # nextln: clobbers: rax, rcx, rdx, rdi, rsi, r8, r9, r10, r11, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0001:     CallRm $$rax, $$xmm0
    # nextln: 0002:     Ret

    %0:ctrl, %1:f32 = entry
    %2:ctrl = call @sink %0, %1
    return %2
}

func @large_caller(f32) {
    # check: function `large_caller`:
    # nextln: clobbers: rax, rcx, rdx, rdi, rsi, r8, r9, r10, r11, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     AddSp(-16)
    # nextln: 0001:     MovsMR(Single, [rsp + 0]) $$xmm0
    # nextln: 0002:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln:           $$xmm7:xmm32 = $$xmm0
    # nextln:           $$xmm6:xmm32 = $$xmm0
    # nextln:           $$xmm5:xmm32 = $$xmm0
    # nextln:           $$xmm4:xmm32 = $$xmm0
    # nextln:           $$xmm3:xmm32 = $$xmm0
    # nextln:           $$xmm2:xmm32 = $$xmm0
    # nextln:           $$xmm1:xmm32 = $$xmm0
    # nextln: 0003:     CallRm $$rax, $$xmm0, $$xmm1, $$xmm2, $$xmm3, $$xmm4, $$xmm5, $$xmm6, $$xmm7
    # nextln: 0004:     AddSp(16)
    # nextln: 0005:     Ret

    %0:ctrl, %1:f32 = entry
    %2:ctrl = call @large_sink %0, %1, %1, %1, %1, %1, %1, %1, %1, %1
    return %2
}

func @larger_caller(f32, f32) {
    # check: function `larger_caller`:
    # nextln: clobbers: rax, rcx, rdx, rdi, rsi, r8, r9, r10, r11, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     AddSp(-16)
    # nextln: 0001:     MovsMR(Single, [rsp + 0]) $$xmm0
    # nextln: 0002:     MovsMR(Single, [rsp + 8]) $$xmm1
    # nextln: 0003:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln:           $$xmm7:xmm32 = $$xmm0
    # nextln:           $$xmm6:xmm32 = $$xmm0
    # nextln:           $$xmm5:xmm32 = $$xmm0
    # nextln:           $$xmm4:xmm32 = $$xmm0
    # nextln:           $$xmm3:xmm32 = $$xmm0
    # nextln:           $$xmm2:xmm32 = $$xmm0
    # nextln:           $$xmm1:xmm32 = $$xmm0
    # nextln: 0004:     CallRm $$rax, $$xmm0, $$xmm1, $$xmm2, $$xmm3, $$xmm4, $$xmm5, $$xmm6, $$xmm7
    # nextln: 0005:     AddSp(16)
    # nextln: 0006:     Ret

    %0:ctrl, %1:f32, %2:f32 = entry
    %3:ctrl = call @larger_sink %0, %1, %1, %1, %1, %1, %1, %1, %1, %1, %2
    return %3
}

func @source_sink() {
    # check: function `source_sink`:
    # nextln: clobbers: rax, rcx, rdx, rdi, rsi, r8, r9, r10, r11, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln: 0001:     $$xmm0 = CallRm $$rax
    # nextln: 0002:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0003:     CallRm $$rax, $$xmm0
    # nextln: 0004:     Ret

    %0:ctrl = entry
    %1:ctrl, %2:f32 = call @source %0
    %3:ctrl = call @sink %1, %2
    return %3
}
