# run: isel

func @sint32tofloat64:f64(i32) {
    # check: function `sint32tofloat64`:
    # nextln:       block0[%1:gpr32($$rdi)]:
    # nextln: 0000:      %0:xmm64(reg)[late] = Cvtsi2s(S32, Double) %1(any)[early]
    # nextln: 0001:      Ret %0($$xmm0)[early]

    %0:ctrl, %1:i32 = entry
    %2:f64 = sinttofloat %1
    return %0, %2
}

func @sint64tofloat64:f64(i64) {
    # check: function `sint64tofloat64`:
    # nextln:       block0[%1:gpr64($$rdi)]:
    # nextln: 0000:      %0:xmm64(reg)[late] = Cvtsi2s(S64, Double) %1(any)[early]
    # nextln: 0001:      Ret %0($$xmm0)[early]

    %0:ctrl, %1:i64 = entry
    %2:f64 = sinttofloat %1
    return %0, %2
}

func @sint32tofloat32:f32(i32) {
    # check: function `sint32tofloat32`:
    # nextln:       block0[%1:gpr32($$rdi)]:
    # nextln: 0000:      %0:xmm32(reg)[late] = Cvtsi2s(S32, Single) %1(any)[early]
    # nextln: 0001:      Ret %0($$xmm0)[early]

    %0:ctrl, %1:i32 = entry
    %2:f32 = sinttofloat %1
    return %0, %2
}

func @sint64tofloat32:f32(i64) {
    # check: function `sint64tofloat32`:
    # nextln:       block0[%1:gpr64($$rdi)]:
    # nextln: 0000:      %0:xmm32(reg)[late] = Cvtsi2s(S64, Single) %1(any)[early]
    # nextln: 0001:      Ret %0($$xmm0)[early]

    %0:ctrl, %1:i64 = entry
    %2:f32 = sinttofloat %1
    return %0, %2
}
