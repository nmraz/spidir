# run: codegen

func @func00000001:i64(i32) {
    # check: function `func00000001`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: b8 01 00 00 00                  mov eax, 1
    # nextln: 000009: 85 ff                           test edi, edi
    # nextln: 00000b: 0f 8e cf 00 00 00               jle 0xe0
    # nextln: 000011: 83 c7 01                        add edi, 1
    # nextln: 000014: 48 89 fa                        mov rdx, rdi
    # nextln: 000017: 48 83 c2 fe                     add rdx, -2
    # nextln: 00001b: 48 89 fe                        mov rsi, rdi
    # nextln: 00001e: 48 83 c6 ff                     add rsi, -1
    # nextln: 000022: 48 89 f1                        mov rcx, rsi
    # nextln: 000025: 48 83 e1 07                     and rcx, 7
    # nextln: 000029: 48 83 fa 06                     cmp rdx, 6
    # nextln: 00002d: 0f 86 85 00 00 00               jbe 0xb8
    # nextln: 000033: 48 83 c7 f7                     add rdi, -9
    # nextln: 000037: 48 83 e6 f8                     and rsi, 0xfffffffffffffff8
    # nextln: 00003b: 48 89 fa                        mov rdx, rdi
    # nextln: 00003e: 48 83 e2 f8                     and rdx, 0xfffffffffffffff8
    # nextln: 000042: 48 f7 de                        neg rsi
    # nextln: 000045: bf 08 00 00 00                  mov edi, 8
    # nextln: 00004a: 49 89 f8                        mov r8, rdi
    # nextln: 00004d: 49 83 c0 f9                     add r8, -7
    # nextln: 000051: 49 0f af c0                     imul rax, r8
    # nextln: 000055: 49 89 f8                        mov r8, rdi
    # nextln: 000058: 49 83 c0 fa                     add r8, -6
    # nextln: 00005c: 49 0f af c0                     imul rax, r8
    # nextln: 000060: 49 89 f8                        mov r8, rdi
    # nextln: 000063: 49 83 c0 fb                     add r8, -5
    # nextln: 000067: 49 0f af c0                     imul rax, r8
    # nextln: 00006b: 49 89 f8                        mov r8, rdi
    # nextln: 00006e: 49 83 c0 fc                     add r8, -4
    # nextln: 000072: 49 0f af c0                     imul rax, r8
    # nextln: 000076: 49 89 f8                        mov r8, rdi
    # nextln: 000079: 49 83 c0 fd                     add r8, -3
    # nextln: 00007d: 49 0f af c0                     imul rax, r8
    # nextln: 000081: 49 89 f8                        mov r8, rdi
    # nextln: 000084: 49 83 c0 fe                     add r8, -2
    # nextln: 000088: 49 0f af c0                     imul rax, r8
    # nextln: 00008c: 49 89 f8                        mov r8, rdi
    # nextln: 00008f: 49 83 c0 ff                     add r8, -1
    # nextln: 000093: 49 0f af c0                     imul rax, r8
    # nextln: 000097: 48 0f af c7                     imul rax, rdi
    # nextln: 00009b: 48 83 c7 08                     add rdi, 8
    # nextln: 00009f: 49 89 f0                        mov r8, rsi
    # nextln: 0000a2: 4c 03 c7                        add r8, rdi
    # nextln: 0000a5: 49 83 f8 08                     cmp r8, 8
    # nextln: 0000a9: 0f 85 9b ff ff ff               jne 0x4a
    # nextln: 0000af: 48 83 c2 09                     add rdx, 9
    # nextln: 0000b3: e9 03 00 00 00                  jmp 0xbb
    # nextln: 0000b8: 48 89 c2                        mov rdx, rax
    # nextln: 0000bb: 48 85 c9                        test rcx, rcx
    # nextln: 0000be: 0f 84 1a 00 00 00               je 0xde
    # nextln: 0000c4: 48 83 c1 ff                     add rcx, -1
    # nextln: 0000c8: 48 0f af c2                     imul rax, rdx
    # nextln: 0000cc: 48 85 c9                        test rcx, rcx
    # nextln: 0000cf: 0f 84 09 00 00 00               je 0xde
    # nextln: 0000d5: 48 83 c2 01                     add rdx, 1
    # nextln: 0000d9: e9 e6 ff ff ff                  jmp 0xc4
    # nextln: 0000de: 5d                              pop rbp
    # nextln: 0000df: c3                              ret
    # nextln: 0000e0: 5d                              pop rbp
    # nextln: 0000e1: c3                              ret

    %0:ctrl, %1:i32 = entry
    %2:i64 = iconst 1
    %3:i64 = iconst 9
    %4:i64 = iconst 18446744073709551608
    %5:i64 = iconst 18446744073709551607
    %7:i32 = iconst 1
    %8:i32 = iadd %1, %7
    %9:i64 = iext %8
    %11:i64 = iadd %9, %5
    %12:i64 = and %11, %4
    %15:i64 = iconst 8
    %6:i64 = iconst 18446744073709551615
    %13:i64 = iadd %9, %6
    %14:i64 = and %13, %4
    %16:i64 = iconst 0
    %17:i64 = isub %16, %14
    %18:i64 = iconst 18446744073709551614
    %19:i64 = iadd %9, %18
    %20:i64 = iconst 18446744073709551613
    %21:i64 = iconst 18446744073709551612
    %22:i64 = iconst 18446744073709551611
    %23:i64 = iconst 18446744073709551610
    %24:i64 = iconst 18446744073709551609
    %25:i64 = iconst 7
    %26:i64 = and %13, %25
    %27:i64 = iconst 6
    %28:i32 = icmp ult %27, %19
    %29:i32 = iconst 0
    %30:i32 = icmp slt %29, %1
    %31:ctrl, %32:ctrl = brcond %0, %30
    %33:ctrl, %34:ctrl = brcond %31, %28
    %35:ctrl, %36:phisel = region %33, %45
    %41:i64 = phi %36, %15, %42
    %53:i64 = iadd %41, %24
    %52:i64 = iadd %41, %23
    %51:i64 = iadd %41, %22
    %50:i64 = iadd %41, %21
    %49:i64 = iadd %41, %20
    %48:i64 = iadd %41, %18
    %47:i64 = iadd %41, %6
    %60:i64 = imul %59, %47
    %61:i64 = imul %60, %41
    %62:i64 = phi %36, %2, %61
    %54:i64 = imul %62, %53
    %55:i64 = imul %54, %52
    %56:i64 = imul %55, %51
    %57:i64 = imul %56, %50
    %58:i64 = imul %57, %49
    %59:i64 = imul %58, %48
    %42:i64 = iadd %41, %15
    %40:i64 = phi %36, %26, %40
    %39:i64 = phi %36, %17, %39
    %43:i64 = iadd %39, %42
    %44:i32 = icmp ne %43, %15
    %45:ctrl, %46:ctrl = brcond %35, %44
    %37:i64 = phi %36, %12, %37
    %38:i64 = iadd %37, %3
    %63:ctrl, %64:phisel = region %34, %46
    %79:i64 = phi %64, %2, %38
    %78:i64 = phi %64, %2, %61
    %65:i64 = phi %64, %26, %40
    %66:i32 = icmp eq %65, %16
    %67:ctrl, %68:ctrl = brcond %63, %66
    %69:ctrl, %70:phisel = region %68, %74
    %80:i64 = phi %70, %79, %81
    %82:i64 = imul %84, %80
    %84:i64 = phi %70, %78, %82
    %81:i64 = iadd %80, %2
    %71:i64 = phi %70, %65, %72
    %72:i64 = iadd %71, %6
    %73:i32 = icmp ne %72, %16
    %74:ctrl, %75:ctrl = brcond %69, %73
    %76:ctrl, %77:phisel = region %67, %75
    %83:i64 = phi %77, %78, %82
    return %76, %83
    return %32, %2
}
