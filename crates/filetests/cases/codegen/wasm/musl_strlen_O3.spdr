# run: codegen

func @func00000001:i32(i32) {
    # check: function `func00000001`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 89 f8                           mov eax, edi
    # nextln: 000006: 83 e0 03                        and eax, 3
    # nextln: 000009: 33 c9                           xor ecx, ecx
    # nextln: 00000b: 85 c0                           test eax, eax
    # nextln: 00000d: 0f 85 07 00 00 00               jne 0x1a
    # nextln: 000013: 89 f8                           mov eax, edi
    # nextln: 000015: e9 80 00 00 00                  jmp 0x9a
    # nextln: 00001a: 8b c7                           mov eax, edi
    # nextln: 00001c: 48 03 c1                        add rax, rcx
    # nextln: 00001f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000022: 85 c0                           test eax, eax
    # nextln: 000024: 0f 84 c0 00 00 00               je 0xea
    # nextln: 00002a: 8d 47 01                        lea eax, [rdi + 1]
    # nextln: 00002d: 89 c2                           mov edx, eax
    # nextln: 00002f: 83 e2 03                        and edx, 3
    # nextln: 000032: 85 d2                           test edx, edx
    # nextln: 000034: 0f 84 60 00 00 00               je 0x9a
    # nextln: 00003a: 8b d0                           mov edx, eax
    # nextln: 00003c: 48 03 d1                        add rdx, rcx
    # nextln: 00003f: 0f b6 12                        movzx edx, byte ptr [rdx]
    # nextln: 000042: 85 d2                           test edx, edx
    # nextln: 000044: 0f 84 9c 00 00 00               je 0xe6
    # nextln: 00004a: 8d 47 02                        lea eax, [rdi + 2]
    # nextln: 00004d: 89 c2                           mov edx, eax
    # nextln: 00004f: 83 e2 03                        and edx, 3
    # nextln: 000052: 85 d2                           test edx, edx
    # nextln: 000054: 0f 84 40 00 00 00               je 0x9a
    # nextln: 00005a: 8b d0                           mov edx, eax
    # nextln: 00005c: 48 03 d1                        add rdx, rcx
    # nextln: 00005f: 0f b6 12                        movzx edx, byte ptr [rdx]
    # nextln: 000062: 85 d2                           test edx, edx
    # nextln: 000064: 0f 84 7c 00 00 00               je 0xe6
    # nextln: 00006a: 8d 47 03                        lea eax, [rdi + 3]
    # nextln: 00006d: 89 c2                           mov edx, eax
    # nextln: 00006f: 83 e2 03                        and edx, 3
    # nextln: 000072: 85 d2                           test edx, edx
    # nextln: 000074: 0f 84 20 00 00 00               je 0x9a
    # nextln: 00007a: 8b d0                           mov edx, eax
    # nextln: 00007c: 48 03 d1                        add rdx, rcx
    # nextln: 00007f: 0f b6 12                        movzx edx, byte ptr [rdx]
    # nextln: 000082: 85 d2                           test edx, edx
    # nextln: 000084: 0f 84 5c 00 00 00               je 0xe6
    # nextln: 00008a: 8d 47 04                        lea eax, [rdi + 4]
    # nextln: 00008d: 89 c2                           mov edx, eax
    # nextln: 00008f: 83 e2 03                        and edx, 3
    # nextln: 000092: 85 d2                           test edx, edx
    # nextln: 000094: 0f 85 4c 00 00 00               jne 0xe6
    # nextln: 00009a: 8d 50 fc                        lea edx, [rax - 4]
    # nextln: 00009d: 83 c0 fb                        add eax, -5
    # nextln: 0000a0: 83 c2 04                        add edx, 4
    # nextln: 0000a3: 83 c0 04                        add eax, 4
    # nextln: 0000a6: 8b f2                           mov esi, edx
    # nextln: 0000a8: 48 03 f1                        add rsi, rcx
    # nextln: 0000ab: 8b 36                           mov esi, dword ptr [rsi]
    # nextln: 0000ad: 41 b8 00 01 01 01               mov r8d, 0x1010100
    # nextln: 0000b3: 44 2b c6                        sub r8d, esi
    # nextln: 0000b6: 41 0b f0                        or esi, r8d
    # nextln: 0000b9: 81 e6 80 80 80 80               and esi, 0x80808080
    # nextln: 0000bf: 81 fe 80 80 80 80               cmp esi, 0x80808080
    # nextln: 0000c5: 0f 84 d5 ff ff ff               je 0xa0
    # nextln: 0000cb: 83 c0 01                        add eax, 1
    # nextln: 0000ce: 8b f2                           mov esi, edx
    # nextln: 0000d0: 48 03 f1                        add rsi, rcx
    # nextln: 0000d3: 0f b6 36                        movzx esi, byte ptr [rsi]
    # nextln: 0000d6: 85 f6                           test esi, esi
    # nextln: 0000d8: 0f 84 08 00 00 00               je 0xe6
    # nextln: 0000de: 83 c2 01                        add edx, 1
    # nextln: 0000e1: e9 e5 ff ff ff                  jmp 0xcb
    # nextln: 0000e6: 2b c7                           sub eax, edi
    # nextln: 0000e8: 5d                              pop rbp
    # nextln: 0000e9: c3                              ret
    # nextln: 0000ea: 33 c0                           xor eax, eax
    # nextln: 0000ec: 5d                              pop rbp
    # nextln: 0000ed: c3                              ret

    %0:ctrl, %1:i32 = entry
    %31:i64 = iext %1
    %2:i32 = iconst 0
    %43:i32 = iconst 1
    %44:i32 = iadd %1, %43
    %52:i64 = iext %44
    %99:i32 = iconst 4
    %100:i32 = iadd %1, %99
    %108:i32 = iconst 4294967291
    %17:i32 = iconst 3
    %101:i32 = and %100, %17
    %81:i32 = iadd %1, %17
    %89:i64 = iext %81
    %82:i32 = and %81, %17
    %83:i32 = icmp eq %82, %2
    %45:i32 = and %44, %17
    %46:i32 = icmp eq %45, %2
    %18:i32 = and %1, %17
    %19:i32 = icmp eq %18, %2
    %22:ctrl, %23:ctrl = brcond %0, %19
    %62:i32 = iconst 2
    %63:i32 = iadd %1, %62
    %71:i64 = iext %63
    %64:i32 = and %63, %17
    %65:i32 = icmp eq %64, %2
    %32:i64 = iconst 4294967295
    %90:i64 = and %89, %32
    %72:i64 = and %71, %32
    %53:i64 = and %52, %32
    %33:i64 = and %31, %32
    %106:i32 = iconst 4294967292
    %34:ptr = iconst 0
    %91:ptr = ptroff %34, %90
    %73:ptr = ptroff %34, %72
    %54:ptr = ptroff %34, %53
    %35:ptr = ptroff %34, %33
    %36:ctrl, %37:i32 = load.1 %23, %35
    %40:ctrl, %41:ctrl = brcond %36, %37
    %49:ctrl, %50:ctrl = brcond %40, %46
    %55:ctrl, %56:i32 = load.1 %50, %54
    %57:i32 = icmp eq %56, %2
    %60:ctrl, %61:ctrl = brcond %55, %57
    %68:ctrl, %69:ctrl = brcond %61, %65
    %74:ctrl, %75:i32 = load.1 %69, %73
    %76:i32 = icmp eq %75, %2
    %79:ctrl, %80:ctrl = brcond %74, %76
    %86:ctrl, %87:ctrl = brcond %80, %83
    %92:ctrl, %93:i32 = load.1 %87, %91
    %94:i32 = icmp eq %93, %2
    %97:ctrl, %98:ctrl = brcond %92, %94
    %104:ctrl, %105:ctrl = brcond %98, %101
    %11:ctrl, %12:phisel = region %22, %49, %68, %86, %105
    %14:i32 = phi %12, %1, %44, %63, %81, %100
    %109:i32 = iadd %14, %108
    %107:i32 = iadd %14, %106
    return %41, %2
    %127:i32 = iconst 2155905152
    %117:i32 = iconst 16843008
    %125:i32 = isub %117, %124
    %126:i32 = or %125, %124
    %128:i32 = and %126, %127
    %129:i32 = icmp eq %128, %127
    %132:ctrl, %133:ctrl = brcond %123, %129
    %110:ctrl, %111:phisel = region %11, %132
    %114:i32 = phi %111, %107, %118
    %118:i32 = iadd %114, %99
    %120:i64 = iext %118
    %121:i64 = and %120, %32
    %122:ptr = ptroff %34, %121
    %123:ctrl, %124:i32 = load.4 %110, %122
    %113:i32 = phi %111, %109, %116
    %116:i32 = iadd %113, %99
    %112:i32 = phi %111, %1, %112
    %134:ctrl, %135:phisel = region %133, %150
    %138:i32 = phi %135, %118, %147
    %142:i64 = iext %138
    %143:i64 = and %142, %32
    %144:ptr = ptroff %34, %143
    %145:ctrl, %146:i32 = load.1 %134, %144
    %150:ctrl, %151:ctrl = brcond %145, %146
    %5:ctrl, %6:phisel = region %60, %79, %97, %104, %151
    %147:i32 = iadd %138, %43
    %137:i32 = phi %135, %116, %140
    %140:i32 = iadd %137, %43
    %8:i32 = phi %6, %44, %63, %81, %100, %140
    %136:i32 = phi %135, %112, %136
    %7:i32 = phi %6, %1, %1, %1, %1, %136
    %152:i32 = isub %8, %7
    return %5, %152
}
