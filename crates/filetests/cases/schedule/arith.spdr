# run: schedule

func @arith_stuff:i32(i32, i32) {
    # check: function `arith_stuff`:
    # nextln: block0:
    # nextln:     $(entry0=$val):ctrl, $(entry1=$val):i32, $(entry2=$val):i32 = entry
    # nextln: => block1
    # nextln: block1:
    # nextln:     $(region0=$val):ctrl, $(region1=$val):phisel = region $entry0
    # nextln:     $(iadd0=$val):i32 = iadd $entry1, $entry1
    # nextln:     $(isub0=$val):i32 = isub $iadd0, $entry1
    # nextln:     $(and0=$val):i32 = and $isub0, $entry1
    # nextln:     $(or0=$val):i32 = or $and0, $entry1
    # nextln:     $(xor0=$val):i32 = xor $or0, $entry1
    # nextln:     $(shl0=$val):i32 = shl $xor0, $entry1
    # nextln:     $(lshr0=$val):i32 = lshr $shl0, $entry1
    # nextln:     $(ashr0=$val):i32 = ashr $lshr0, $entry1
    # nextln:     $(imul0=$val):i32 = imul $ashr0, $entry1
    # nextln:     $(sdiv0=$val):ctrl, $(sdiv1=$val):i32 = sdiv $region0, $imul0, $entry1
    # nextln:     $(udiv0=$val):ctrl, $(udiv1=$val):i32 = udiv $sdiv0, $sdiv1, $entry1
    # nextln:     $(srem0=$val):ctrl, $(srem1=$val):i32 = srem $udiv0, $udiv1, $entry1
    # nextln:     $(urem0=$val):ctrl, $(urem1=$val):i32 = urem $srem0, $srem1, $entry1
    # nextln:     $(icmp0=$val):i32 = icmp eq $urem1, $entry1
    # nextln:     $(icmp1=$val):i32 = icmp ne $icmp0, $entry1
    # nextln:     $(icmp2=$val):i32 = icmp slt $icmp1, $entry1
    # nextln:     $(icmp3=$val):i32 = icmp sle $icmp2, $entry1
    # nextln:     $(icmp4=$val):i32 = icmp ult $icmp3, $entry1
    # nextln:     $(icmp5=$val):i32 = icmp ule $icmp4, $entry1
    # nextln:     $(iext0=$val):i64 = iext $icmp5
    # nextln:     $(itrunc0=$val):i32 = itrunc $iext0
    # nextln:     $(sfill0=$val):i32 = sfill 16 $itrunc0
    # nextln:     return $urem0, $sfill0

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    %5:i32 = iadd %1, %1
    %6:i32 = isub %5, %1
    %7:i32 = and %6, %1
    %8:i32 = or %7, %1
    %9:i32 = xor %8, %1
    %10:i32 = shl %9, %1
    %11:i32 = lshr %10, %1
    %12:i32 = ashr %11, %1
    %13:i32 = imul %12, %1
    %14:ctrl, %15:i32 = sdiv %3, %13, %1
    %16:ctrl, %17:i32 = udiv %14, %15, %1
    %18:ctrl, %19:i32 = srem %16, %17, %1
    %20:ctrl, %21:i32 = urem %18, %19, %1
    %22:i32 = icmp eq %21, %1
    %23:i32 = icmp ne %22, %1
    %24:i32 = icmp slt %23, %1
    %25:i32 = icmp sle %24, %1
    %26:i32 = icmp ult %25, %1
    %27:i32 = icmp ule %26, %1
    %28:i64 = iext %27
    %29:i32 = itrunc %28
    %30:i32 = sfill 16 %29
    return %20, %30
}

func @arith_stuff_juggled:i32(i32, i32) {
    # check: function `arith_stuff_juggled`:
    # nextln: block0:
    # nextln:     $(entry0=$val):ctrl, $(entry1=$val):i32, $(entry2=$val):i32 = entry
    # nextln: => block1
    # nextln: block1:
    # nextln:     $(region0=$val):ctrl, $(region1=$val):phisel = region $entry0
    # nextln:     $(iadd0=$val):i32 = iadd $entry1, $entry1
    # nextln:     $(isub0=$val):i32 = isub $iadd0, $entry1
    # nextln:     $(and0=$val):i32 = and $isub0, $entry1
    # nextln:     $(or0=$val):i32 = or $and0, $entry1
    # nextln:     $(xor0=$val):i32 = xor $or0, $entry1
    # nextln:     $(shl0=$val):i32 = shl $xor0, $entry1
    # nextln:     $(lshr0=$val):i32 = lshr $shl0, $entry1
    # nextln:     $(ashr0=$val):i32 = ashr $lshr0, $entry1
    # nextln:     $(imul0=$val):i32 = imul $ashr0, $entry1
    # nextln:     $(sdiv0=$val):ctrl, $(sdiv1=$val):i32 = sdiv $region0, $imul0, $entry1
    # nextln:     $(udiv0=$val):ctrl, $(udiv1=$val):i32 = udiv $sdiv0, $sdiv1, $entry1
    # nextln:     $(srem0=$val):ctrl, $(srem1=$val):i32 = srem $udiv0, $udiv1, $entry1
    # nextln:     $(urem0=$val):ctrl, $(urem1=$val):i32 = urem $srem0, $srem1, $entry1
    # nextln:     $(icmp0=$val):i32 = icmp eq $urem1, $entry1
    # nextln:     $(icmp1=$val):i32 = icmp ne $icmp0, $entry1
    # nextln:     $(icmp2=$val):i32 = icmp slt $icmp1, $entry1
    # nextln:     $(icmp3=$val):i32 = icmp sle $icmp2, $entry1
    # nextln:     $(icmp4=$val):i32 = icmp ult $icmp3, $entry1
    # nextln:     $(icmp5=$val):i32 = icmp ule $icmp4, $entry1
    # nextln:     $(iext0=$val):i64 = iext $icmp5
    # nextln:     $(itrunc0=$val):i32 = itrunc $iext0
    # nextln:     $(sfill0=$val):i32 = sfill 16 $itrunc0
    # nextln:     return $urem0, $sfill0

    %0:ctrl, %1:i32, %2:i32 = entry
    %5:i32 = iadd %1, %1
    %7:i32 = and %6, %1
    %8:i32 = or %7, %1
    return %20, %30
    %9:i32 = xor %8, %1
    %10:i32 = shl %9, %1
    %27:i32 = icmp ule %26, %1
    %6:i32 = isub %5, %1
    %11:i32 = lshr %10, %1
    %12:i32 = ashr %11, %1
    %13:i32 = imul %12, %1
    %16:ctrl, %17:i32 = udiv %14, %15, %1
    %23:i32 = icmp ne %22, %1
    %18:ctrl, %19:i32 = srem %16, %17, %1
    %22:i32 = icmp eq %21, %1
    %24:i32 = icmp slt %23, %1
    %3:ctrl, %4:phisel = region %0
    %25:i32 = icmp sle %24, %1
    %26:i32 = icmp ult %25, %1
    %20:ctrl, %21:i32 = urem %18, %19, %1
    %28:i64 = iext %27
    %29:i32 = itrunc %28
    %14:ctrl, %15:i32 = sdiv %3, %13, %1
    %30:i32 = sfill 16 %29
}
