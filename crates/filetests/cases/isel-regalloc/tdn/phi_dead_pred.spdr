# run: isel-regalloc

# This code contains a phi on a dead predecessor (%43 choosing from value %11) in a block that has
# only one live predecessor. Make sure isel chooses the correct phi input.

extfunc @jit_gc_memcpy:ptr(ptr, ptr, i64)
extfunc @jit_newobj:ptr(ptr)
extfunc @jit_gc_bzero:ptr(ptr, i64)
extfunc @jit_throw(ptr)
extfunc @"System.Globalization.UnicodeCategory System.Char::GetLatin1UnicodeCategory(System.Char)":i32(i32)

func @"System.Int32 Tests.Program::Main(System.String[])":i32(ptr) {
    # check: function `System.Int32 Tests.Program::Main(System.String[])`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15
    # nextln: frame: size 32, align 8
    # nextln:     !0: 0
    # nextln:     !1: 16
    # nextln:       block0:
    # nextln: 0002:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln:           $$rsi = MovRmS32(16)
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0003:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0004:     $$rbx = MovRmS32(0)
    # nextln: 0005:     AluRRm(S32, Test) $$rbx, $$rbx
    # nextln: 0006:     Jumpcc(Ne, block1, block2)
    # nextln:       block1:
    # nextln: 0007:     $$rdi = MovRI64(137395481505984)
    # nextln: 0008:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0009:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0010:     $$rcx = FuncAddrAbs(External(extfunc3))
    # nextln:           $$rdi:gpr = $$rax
    # nextln: 0011:     CallRm $$rcx, $$rdi
    # nextln: 0012:     Ud2
    # nextln:       block2:
    # nextln: 0013:     Jump(block3)
    # nextln:       block3:
    # nextln: 0014:     $$rax = MovRI64(136295969869616)
    # nextln: 0015:     MovMR(S64, [!0 + 0]) $$rax
    # nextln:           $$rax = MovRmS32(256)
    # nextln: 0019:     MovMR(S32, [!0 + 8]) $$rax
    # nextln: 0020:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdx = MovRmS32(16)
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdi = StackAddr(!1)
    # nextln: 0021:     $$rax = CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0022:     $$rax = MovRM(S32, [!1 + 8])
    # nextln: 0023:     AluRmI(S32, Cmp, 42) $$rax
    # nextln: 0024:     Jumpcc(A, block4, block5)
    # nextln:       block4:
    # nextln: 0025:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rdi = MovRmS32(42)
    # nextln: 0026:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0027:     Jump(block6)
    # nextln:       block6:
    # nextln: 0028:     $$rax = AluRmI(S32, Sub, 18) $$rax
    # nextln: 0029:     $$rcx = MovRmS32(0)
    # nextln: 0030:     AluRmI(S32, Cmp, 6) $$rax
    # nextln: 0031:     $$rcx = Setcc(A) $$rcx
    # nextln: 0032:     $$rax = MovRmS32(0)
    # nextln: 0033:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0034:     $$rax = Setcc(E) $$rax
    # nextln: 0035:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0036:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0037:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0038:     Jumpcc(Ne, block7, block9)
    # nextln:       block7:
    # nextln: 0039:     $$rbx = MovRmS32(1)
    # nextln: 0040:     Jump(block8)
    # nextln:       block9:
    # nextln: 0041:     Jump(block8)
    # nextln:       block8:
    # nextln:           $$rax:gpr = $$rbx
    # nextln: 0042:     Ret $$rax
    # nextln:       block5:
    # nextln: 0043:     $$rdi = MovRI64(137395481522496)
    # nextln: 0044:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0045:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0046:     $$rcx = FuncAddrAbs(External(extfunc3))
    # nextln:           $$rdi:gpr = $$rax
    # nextln: 0047:     CallRm $$rcx, $$rdi
    # nextln: 0048:     Ud2

    %0:ctrl, %1:ptr = entry
    %2:ptr = stackslot 16:8
    %3:ptr = stackslot 16:8
    %4:ptr = iconst 137395481522496
    %5:i32 = iconst 1
    %6:i32 = iconst 0
    %7:i32 = iconst 255
    %8:i32 = iconst 18
    %9:ctrl, %10:phisel = region
    %11:i32 = phi %10
    %12:i32 = iconst 6
    %13:i32 = iconst 42
    %14:i64 = iconst 8
    %15:ptr = ptroff %2, %14
    %16:i64 = iconst 16
    %18:ctrl, %19:ptr = call @jit_gc_bzero %0, %3, %16
    %20:ctrl, %21:ctrl = brcond %18, %6
    %17:ptr = ptroff %3, %14
    %22:i32 = iconst 256
    %23:ptr = iconst 136295969869616
    %24:i64 = ptrtoint %23
    %25:ptr = inttoptr %24
    %26:ctrl, %27:phisel = region
    %28:ctrl, %29:phisel = region %21, %26
    %30:ctrl = store.8 %28, %25, %3
    %31:ctrl = store.4 %30, %22, %17
    %32:ctrl, %33:ptr = call @jit_gc_memcpy %31, %2, %3, %16
    %34:ctrl, %35:i32 = load.4 %32, %15
    %36:i32 = icmp ult %13, %35
    %37:ctrl, %38:ctrl = brcond %34, %36
    %39:ctrl, %40:i32 = call @"System.Globalization.UnicodeCategory System.Char::GetLatin1UnicodeCategory(System.Char)" %37, %13
    %41:ctrl, %42:phisel = region %9, %39
    %43:i32 = phi %42, %11, %40
    %44:i32 = isub %43, %8
    %45:i32 = icmp ult %12, %44
    %46:i32 = icmp eq %45, %6
    %47:i32 = and %46, %7
    %48:i32 = and %47, %7
    %49:ctrl, %50:ctrl = brcond %41, %48
    %51:ctrl, %52:phisel = region %50, %49
    %53:i32 = phi %52, %6, %5
    return %51, %53
    %54:ctrl, %55:ptr = call @jit_newobj %38, %4
    %56:ctrl = call @jit_throw %54, %55
    unreachable %56
    %57:ptr = iconst 137395481505984
    %58:ctrl, %59:ptr = call @jit_newobj %20, %57
    %60:ctrl = call @jit_throw %58, %59
    unreachable %60
}
