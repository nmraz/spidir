# run: codegen

func @"System.Int32 Tests.CodeGenBringUpTests::JTrueGeInt1(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::JTrueGeInt1(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 33 c0                           xor eax, eax
    # nextln: 00000a: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 00000e: 88 44 24 08                     mov byte ptr [rsp + 8], al
    # nextln: 000012: 88 44 24 0d                     mov byte ptr [rsp + 0xd], al
    # nextln: 000016: 88 44 24 09                     mov byte ptr [rsp + 9], al
    # nextln: 00001a: 88 44 24 0e                     mov byte ptr [rsp + 0xe], al
    # nextln: 00001e: 88 44 24 0c                     mov byte ptr [rsp + 0xc], al
    # nextln: 000022: 88 44 24 0a                     mov byte ptr [rsp + 0xa], al
    # nextln: 000026: 88 44 24 0b                     mov byte ptr [rsp + 0xb], al
    # nextln: 00002a: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 00002d: b9 ff ff ff 7f                  mov ecx, 0x7fffffff
    # nextln: 000032: 33 d2                           xor edx, edx
    # nextln: 000034: 3b f9                           cmp edi, ecx
    # nextln: 000036: 0f 9c c2                        setl dl
    # nextln: 000039: 33 c9                           xor ecx, ecx
    # nextln: 00003b: 3b d0                           cmp edx, eax
    # nextln: 00003d: 0f 94 c1                        sete cl
    # nextln: 000040: be ff ff ff ff                  mov esi, 0xffffffff
    # nextln: 000045: 89 74 24 04                     mov dword ptr [rsp + 4], esi
    # nextln: 000049: 88 4c 24 08                     mov byte ptr [rsp + 8], cl
    # nextln: 00004d: 0f b6 4c 24 08                  movzx ecx, byte ptr [rsp + 8]
    # nextln: 000052: 85 c9                           test ecx, ecx
    # nextln: 000054: 0f 84 0e 00 00 00               je 0x68
    # nextln: 00005a: b8 07 00 00 00                  mov eax, 7
    # nextln: 00005f: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000063: e9 33 01 00 00                  jmp 0x19b
    # nextln: 000068: ba 02 00 00 00                  mov edx, 2
    # nextln: 00006d: 33 c9                           xor ecx, ecx
    # nextln: 00006f: 3b fa                           cmp edi, edx
    # nextln: 000071: 0f 9c c1                        setl cl
    # nextln: 000074: 45 33 c0                        xor r8d, r8d
    # nextln: 000077: 3b c8                           cmp ecx, eax
    # nextln: 000079: 41 0f 94 c0                     sete r8b
    # nextln: 00007d: 44 88 44 24 0d                  mov byte ptr [rsp + 0xd], r8b
    # nextln: 000082: 0f b6 4c 24 0d                  movzx ecx, byte ptr [rsp + 0xd]
    # nextln: 000087: 85 c9                           test ecx, ecx
    # nextln: 000089: 0f 84 0e 00 00 00               je 0x9d
    # nextln: 00008f: b8 06 00 00 00                  mov eax, 6
    # nextln: 000094: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000098: e9 fe 00 00 00                  jmp 0x19b
    # nextln: 00009d: b9 01 00 00 00                  mov ecx, 1
    # nextln: 0000a2: 45 33 c0                        xor r8d, r8d
    # nextln: 0000a5: 3b f9                           cmp edi, ecx
    # nextln: 0000a7: 41 0f 9c c0                     setl r8b
    # nextln: 0000ab: 45 33 c9                        xor r9d, r9d
    # nextln: 0000ae: 44 3b c0                        cmp r8d, eax
    # nextln: 0000b1: 41 0f 94 c1                     sete r9b
    # nextln: 0000b5: 44 88 4c 24 09                  mov byte ptr [rsp + 9], r9b
    # nextln: 0000ba: 44 0f b6 44 24 09               movzx r8d, byte ptr [rsp + 9]
    # nextln: 0000c0: 45 85 c0                        test r8d, r8d
    # nextln: 0000c3: 0f 84 0e 00 00 00               je 0xd7
    # nextln: 0000c9: b8 05 00 00 00                  mov eax, 5
    # nextln: 0000ce: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 0000d2: e9 c4 00 00 00                  jmp 0x19b
    # nextln: 0000d7: 45 33 c0                        xor r8d, r8d
    # nextln: 0000da: 3b f8                           cmp edi, eax
    # nextln: 0000dc: 41 0f 9c c0                     setl r8b
    # nextln: 0000e0: 45 33 c9                        xor r9d, r9d
    # nextln: 0000e3: 44 3b c0                        cmp r8d, eax
    # nextln: 0000e6: 41 0f 94 c1                     sete r9b
    # nextln: 0000ea: 44 88 4c 24 0e                  mov byte ptr [rsp + 0xe], r9b
    # nextln: 0000ef: 44 0f b6 44 24 0e               movzx r8d, byte ptr [rsp + 0xe]
    # nextln: 0000f5: 45 85 c0                        test r8d, r8d
    # nextln: 0000f8: 0f 84 0e 00 00 00               je 0x10c
    # nextln: 0000fe: b8 04 00 00 00                  mov eax, 4
    # nextln: 000103: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000107: e9 8f 00 00 00                  jmp 0x19b
    # nextln: 00010c: 45 33 c0                        xor r8d, r8d
    # nextln: 00010f: 3b fe                           cmp edi, esi
    # nextln: 000111: 41 0f 9c c0                     setl r8b
    # nextln: 000115: 33 f6                           xor esi, esi
    # nextln: 000117: 44 3b c0                        cmp r8d, eax
    # nextln: 00011a: 40 0f 94 c6                     sete sil
    # nextln: 00011e: 40 88 74 24 0c                  mov byte ptr [rsp + 0xc], sil
    # nextln: 000123: 0f b6 74 24 0c                  movzx esi, byte ptr [rsp + 0xc]
    # nextln: 000128: 85 f6                           test esi, esi
    # nextln: 00012a: 0f 84 0e 00 00 00               je 0x13e
    # nextln: 000130: b8 03 00 00 00                  mov eax, 3
    # nextln: 000135: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000139: e9 5d 00 00 00                  jmp 0x19b
    # nextln: 00013e: 41 b8 01 00 00 80               mov r8d, 0x80000001
    # nextln: 000144: 33 f6                           xor esi, esi
    # nextln: 000146: 41 3b f8                        cmp edi, r8d
    # nextln: 000149: 40 0f 9c c6                     setl sil
    # nextln: 00014d: 45 33 c0                        xor r8d, r8d
    # nextln: 000150: 3b f0                           cmp esi, eax
    # nextln: 000152: 41 0f 94 c0                     sete r8b
    # nextln: 000156: 44 88 44 24 0a                  mov byte ptr [rsp + 0xa], r8b
    # nextln: 00015b: 0f b6 74 24 0a                  movzx esi, byte ptr [rsp + 0xa]
    # nextln: 000160: 85 f6                           test esi, esi
    # nextln: 000162: 0f 84 09 00 00 00               je 0x171
    # nextln: 000168: 89 54 24 04                     mov dword ptr [rsp + 4], edx
    # nextln: 00016c: e9 2a 00 00 00                  jmp 0x19b
    # nextln: 000171: be 00 00 00 80                  mov esi, 0x80000000
    # nextln: 000176: 33 d2                           xor edx, edx
    # nextln: 000178: 3b fe                           cmp edi, esi
    # nextln: 00017a: 0f 9c c2                        setl dl
    # nextln: 00017d: 33 ff                           xor edi, edi
    # nextln: 00017f: 3b d0                           cmp edx, eax
    # nextln: 000181: 40 0f 94 c7                     sete dil
    # nextln: 000185: 40 88 7c 24 0b                  mov byte ptr [rsp + 0xb], dil
    # nextln: 00018a: 0f b6 44 24 0b                  movzx eax, byte ptr [rsp + 0xb]
    # nextln: 00018f: 85 c0                           test eax, eax
    # nextln: 000191: 0f 84 04 00 00 00               je 0x19b
    # nextln: 000197: 89 4c 24 04                     mov dword ptr [rsp + 4], ecx
    # nextln: 00019b: 8b 44 24 04                     mov eax, dword ptr [rsp + 4]
    # nextln: 00019f: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 0001a2: 8b 04 24                        mov eax, dword ptr [rsp]
    # nextln: 0001a5: 48 83 c4 10                     add rsp, 0x10
    # nextln: 0001a9: 5d                              pop rbp
    # nextln: 0001aa: c3                              ret

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %4:ptr = stackslot 4:4
    %5:ptr = stackslot 4:4
    %6:i32 = iconst 1
    %7:i32 = icmp slt %1, %6
    %8:i32 = iconst 2
    %9:i32 = icmp slt %1, %8
    %10:i32 = iconst 3
    %11:i32 = iconst 4
    %12:i32 = iconst 5
    %13:i32 = iconst 6
    %14:i32 = iconst 7
    %15:ptr = stackslot 1:1
    %16:i32 = iconst 0
    %21:ctrl = store.4 %2, %16, %5
    %20:i32 = icmp eq %9, %16
    %19:i32 = icmp eq %7, %16
    %17:i32 = icmp slt %1, %16
    %18:i32 = icmp eq %17, %16
    %22:i32 = iconst 2147483648
    %23:i32 = icmp slt %1, %22
    %24:i32 = icmp eq %23, %16
    %25:ptr = stackslot 1:1
    %26:i32 = iconst 2147483649
    %27:i32 = icmp slt %1, %26
    %28:i32 = icmp eq %27, %16
    %29:ptr = stackslot 1:1
    %30:i32 = iconst 4294967295
    %31:i32 = icmp slt %1, %30
    %32:i32 = icmp eq %31, %16
    %33:ptr = stackslot 1:1
    %34:ptr = stackslot 1:1
    %35:ptr = stackslot 1:1
    %36:ptr = stackslot 1:1
    %37:ctrl = store.1 %21, %16, %36
    %38:ctrl = store.1 %37, %16, %35
    %39:ctrl = store.1 %38, %16, %34
    %40:ctrl = store.1 %39, %16, %33
    %41:ctrl = store.1 %40, %16, %29
    %42:ctrl = store.1 %41, %16, %25
    %43:ctrl = store.1 %42, %16, %15
    %44:ctrl = store.4 %43, %16, %4
    %45:ctrl, %46:phisel = region %44
    %47:ctrl = store.4 %45, %30, %5
    %48:i32 = iconst 2147483647
    %49:i32 = icmp slt %1, %48
    %50:i32 = icmp eq %49, %16
    %51:ctrl = store.1 %47, %50, %36
    %52:ctrl, %53:i32 = load.1 %51, %36
    %54:ctrl, %55:ctrl = brcond %52, %53
    %56:ctrl, %57:phisel = region %54
    %58:ctrl = store.4 %56, %14, %5
    %59:ctrl, %60:phisel = region %55
    %61:ctrl = store.1 %59, %20, %35
    %62:ctrl, %63:i32 = load.1 %61, %35
    %64:ctrl, %65:ctrl = brcond %62, %63
    %66:ctrl, %67:phisel = region %64
    %68:ctrl = store.4 %66, %13, %5
    %69:ctrl, %70:phisel = region %65
    %71:ctrl = store.1 %69, %19, %34
    %72:ctrl, %73:i32 = load.1 %71, %34
    %74:ctrl, %75:ctrl = brcond %72, %73
    %76:ctrl, %77:phisel = region %74
    %78:ctrl = store.4 %76, %12, %5
    %79:ctrl, %80:phisel = region %75
    %81:ctrl = store.1 %79, %18, %33
    %82:ctrl, %83:i32 = load.1 %81, %33
    %84:ctrl, %85:ctrl = brcond %82, %83
    %86:ctrl, %87:phisel = region %84
    %88:ctrl = store.4 %86, %11, %5
    %89:ctrl, %90:phisel = region %85
    %91:ctrl = store.1 %89, %32, %29
    %92:ctrl, %93:i32 = load.1 %91, %29
    %94:ctrl, %95:ctrl = brcond %92, %93
    %96:ctrl, %97:phisel = region %94
    %98:ctrl = store.4 %96, %10, %5
    %99:ctrl, %100:phisel = region %95
    %101:ctrl = store.1 %99, %28, %25
    %102:ctrl, %103:i32 = load.1 %101, %25
    %104:ctrl, %105:ctrl = brcond %102, %103
    %106:ctrl, %107:phisel = region %104
    %108:ctrl = store.4 %106, %8, %5
    %109:ctrl, %110:phisel = region %105
    %111:ctrl = store.1 %109, %24, %15
    %112:ctrl, %113:i32 = load.1 %111, %15
    %114:ctrl, %115:ctrl = brcond %112, %113
    %116:ctrl, %117:phisel = region %114
    %118:ctrl = store.4 %116, %6, %5
    %119:ctrl, %120:phisel = region %58, %68, %78, %88, %98, %108, %115, %118
    %121:ctrl, %122:i32 = load.4 %119, %5
    %123:ctrl = store.4 %121, %122, %4
    %124:ctrl, %125:phisel = region %123
    %126:ctrl, %127:i32 = load.4 %124, %4
    return %126, %127
}
