# run: isel-regalloc

extfunc @gc_new:ptr(ptr, i64)
extfunc @"System.Void Tests.Int_No_Op::.ctor()"(ptr)
extfunc @throw_index_out_of_range_exception()
extfunc @"System.Int32 Tests.Int_No_Op::simple_func_int()":i32()

func @"System.Int32 Tests.Int_No_Op::Sub_Funclet_10()":i32() {
    # check: function `System.Int32 Tests.Int_No_Op::Sub_Funclet_10()`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, r12, r13, r14, r15
    # nextln: frame: size 121, align 8
    # nextln:     !0: 120
    # nextln:     !1: 112
    # nextln:     !2: 0
    # nextln:     !3: 8
    # nextln:     !4: 116
    # nextln:     spill0: 16
    # nextln:     spill1: 24
    # nextln:     spill2: 32
    # nextln:     spill3: 40
    # nextln:     spill4: 48
    # nextln:     spill5: 56
    # nextln:     spill6: 64
    # nextln:     spill7: 72
    # nextln:     spill8: 80
    # nextln:     spill9: 88
    # nextln:     spill10: 96
    # nextln:     spill11: 104
    # nextln:       block0:
    # nextln: 0000:     $$rbx = MovRI64(106721347401152)
    # nextln: 0001:     $$r12 = MovRmS32(51)
    # nextln: 0002:     $$rdi = MovRI64(106721347409792)
    # nextln: 0003:     $$rsi = MovRmS32(40)
    # nextln: 0004:     $$r14 = MovRZ
    # nextln: 0005:     $$rcx = MovRmS32(1)
    # nextln: 0006:     $$rax = MovRU32(4294967291)
    # nextln: 0007:     $$r15 = MovRmS32(3)
    # nextln: 0008:     $$rdx = MovRZ
    # nextln: 0009:     MovStackR(!4, S32) $$r14
    # nextln: 0010:     MovStackR(!1, S32) $$r14
    # nextln: 0011:     MovStackR(!0, S8) $$r14
    # nextln: 0012:     MovStackR(!3, S64) $$rdx
    # nextln: 0013:     MovStackR(!2, S64) $$rdx
    # nextln: 0014:     MovStackR(!4, S32) $$rcx
    # nextln:           $$spill11 = $$rcx
    # nextln: 0015:     MovStackR(!1, S32) $$rax
    # nextln:           $$spill10 = $$rax
    # nextln: 0016:     MovStackR(!0, S8) $$r14
    # nextln: 0017:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln: 0018:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$r13 = $$rax
    # nextln: 0019:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rdi = $$r13
    # nextln: 0020:     CallRm $$rax, $$rdi
    # nextln: 0021:     MovStackR(!3, S64) $$r13
    # nextln: 0022:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = $$r12
    # nextln:           $$rdi = $$rbx
    # nextln: 0023:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0024:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0025:     MovMR(S32) $$rax, $$r15
    # nextln: 0026:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = $$r12
    # nextln:           $$rdi = $$rbx
    # nextln: 0027:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rcx = $$rax
    # nextln: 0028:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0029:     MovMR(S32) $$rcx, $$r15
    # nextln: 0030:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0031:     AluRRm(S64, Test) $$rdx, $$rdx
    # nextln: 0032:     Jumpcc(G, block1, block2)
    # nextln:       block1:
    # nextln:           $$rdx = $$rax
    # nextln: 0033:     $$rdx = AluRmI(S64, Add, 40) $$rdx
    # nextln:           $$rbx = $$spill11
    # nextln: 0034:     MovMR(S8) $$rdx, $$rbx
    # nextln: 0035:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0036:     $$r13 = MovRmS32(1)
    # nextln: 0037:     AluRRm(S64, Cmp) $$r13, $$rdx
    # nextln: 0038:     Jumpcc(L, block3, block4)
    # nextln:       block3:
    # nextln:           $$rdx = $$rax
    # nextln: 0039:     $$rdx = AluRmI(S64, Add, 41) $$rdx
    # nextln: 0040:     MovMR(S8) $$rdx, $$rbx
    # nextln: 0041:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0042:     $$r12 = MovRmS32(2)
    # nextln: 0043:     AluRRm(S64, Cmp) $$r12, $$rcx
    # nextln: 0044:     Jumpcc(L, block5, block6)
    # nextln:       block5:
    # nextln: 0045:     $$rdi = MovRI64(106721347438592)
    # nextln: 0046:     $$rsi = MovRmS32(60)
    # nextln: 0047:     $$rax = AluRmI(S64, Add, 42) $$rax
    # nextln: 0048:     MovMR(S8) $$rax, $$rbx
    # nextln: 0049:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln: 0050:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rcx = $$rax
    # nextln: 0051:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0052:     MovMR(S32) $$rcx, $$r15
    # nextln: 0053:     MovStackR(!2, S64) $$rax
    # nextln: 0054:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0055:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0056:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0057:     AluRRm(S64, Test) $$rcx, $$rcx
    # nextln: 0058:     Jumpcc(G, block7, block8)
    # nextln:       block7:
    # nextln: 0059:     $$rax = AluRmI(S64, Add, 40) $$rax
    # nextln: 0060:     $$rcx = MovRmS32(21)
    # nextln: 0061:     MovMR(S32) $$rax, $$rcx
    # nextln: 0062:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0063:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0064:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0065:     AluRRm(S64, Cmp) $$r13, $$rcx
    # nextln: 0066:     Jumpcc(L, block9, block10)
    # nextln:       block9:
    # nextln: 0067:     $$rax = AluRmI(S64, Add, 44) $$rax
    # nextln: 0068:     $$rcx = MovRU32(4294967269)
    # nextln: 0069:     MovMR(S32) $$rax, $$rcx
    # nextln: 0070:     $$rcx = MovRStack(!2, S64)
    # nextln:           $$rax = $$rcx
    # nextln: 0071:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0072:     $$rax = MovRM(S32) $$rax
    # nextln: 0073:     AluRRm(S64, Cmp) $$r12, $$rax
    # nextln: 0074:     Jumpcc(L, block11, block12)
    # nextln:       block11:
    # nextln: 0075:     $$rcx = AluRmI(S64, Add, 48) $$rcx
    # nextln: 0076:     $$rdi = MovRmS32(7)
    # nextln: 0077:     $$rax = MovRI64(105690555221072)
    # nextln: 0078:     $$rdx = MovRU32(4294967283)
    # nextln: 0079:     $$rsi = MovRI64(105690555221104)
    # nextln: 0080:     $$r8 = MovRI64(105690555221136)
    # nextln: 0081:     $$r9 = MovRU32(4294967265)
    # nextln: 0082:     MovMR(S32) $$rcx, $$r9
    # nextln: 0083:     MovMR(S32) $$rax, $$rdi
    # nextln: 0084:     MovMR(S8) $$rsi, $$r14
    # nextln: 0085:     MovMR(S8) $$r8, $$rbx
    # nextln: 0086:     $$rcx = MovRStack(!3, S64)
    # nextln: 0087:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0088:     MovMR(S32) $$rcx, $$rdx
    # nextln: 0089:     $$rcx = MovRStack(!3, S64)
    # nextln: 0090:     $$rcx = AluRmI(S64, Add, 36) $$rcx
    # nextln: 0091:     MovMR(S8) $$rcx, $$r14
    # nextln: 0092:     $$rcx = MovRStack(!3, S64)
    # nextln: 0093:     $$rcx = AluRmI(S64, Add, 37) $$rcx
    # nextln: 0094:     MovMR(S8) $$rcx, $$rbx
    # nextln: 0095:     $$rcx = MovRStack(!0, S8)
    # nextln: 0096:     $$r13 = MovRmS32(3)
    # nextln: 0097:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0098:     Jumpcc(Ne, block13, block15)
    # nextln:       block13:
    # nextln:           $$r14 = $$spill10
    # nextln:           $$rbx = $$r14
    # nextln: 0099:     Jump(block14)
    # nextln:       block15:
    # nextln:           $$r14 = $$spill10
    # nextln:           $$rbx = $$r13
    # nextln: 0100:     Jump(block14)
    # nextln:       block14:
    # nextln: 0101:     $$rcx = MovRStack(!0, S8)
    # nextln: 0102:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0103:     Jumpcc(Ne, block16, block18)
    # nextln:       block16:
    # nextln: 0104:     Jump(block17)
    # nextln:       block18:
    # nextln: 0105:     Jump(block17)
    # nextln:       block17:
    # nextln: 0106:     $$rcx = MovRStack(!0, S8)
    # nextln: 0107:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0108:     Jumpcc(Ne, block19, block21)
    # nextln:       block19:
    # nextln:           $$spill0 = $$r14
    # nextln: 0109:     Jump(block20)
    # nextln:       block21:
    # nextln: 0110:     $$rcx = MovRStack(!1, S32)
    # nextln:           $$spill0 = $$rcx
    # nextln: 0111:     Jump(block20)
    # nextln:       block20:
    # nextln: 0112:     $$rcx = MovRStack(!0, S8)
    # nextln: 0113:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0114:     Jumpcc(Ne, block22, block24)
    # nextln:       block22:
    # nextln:           $$spill1 = $$r14
    # nextln:           $$r12 = $$rax
    # nextln: 0115:     Jump(block23)
    # nextln:       block24:
    # nextln: 0116:     $$rcx = MovRM(S32) $$rax
    # nextln:           $$r12 = $$rax
    # nextln:           $$spill1 = $$rcx
    # nextln: 0117:     Jump(block23)
    # nextln:       block23:
    # nextln: 0118:     $$rax = MovRStack(!0, S8)
    # nextln: 0119:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0120:     Jumpcc(Ne, block25, block27)
    # nextln:       block25:
    # nextln:           $$spill2 = $$r14
    # nextln: 0121:     Jump(block26)
    # nextln:       block27:
    # nextln: 0122:     $$rax = MovRStack(!3, S64)
    # nextln: 0123:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0124:     $$rax = MovRM(S32) $$rax
    # nextln:           $$spill2 = $$rax
    # nextln: 0125:     Jump(block26)
    # nextln:       block26:
    # nextln: 0126:     $$rax = MovRStack(!0, S8)
    # nextln: 0127:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0128:     Jumpcc(Ne, block28, block30)
    # nextln:       block28:
    # nextln:           $$spill3 = $$r14
    # nextln: 0129:     Jump(block29)
    # nextln:       block30:
    # nextln: 0130:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln: 0131:     $$rax = CallRm $$rax
    # nextln:           $$spill3 = $$rax
    # nextln: 0132:     Jump(block29)
    # nextln:       block29:
    # nextln: 0133:     $$rax = MovRStack(!0, S8)
    # nextln: 0134:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0135:     Jumpcc(Ne, block31, block33)
    # nextln:       block31:
    # nextln:           $$spill4 = $$r14
    # nextln: 0136:     Jump(block32)
    # nextln:       block33:
    # nextln: 0137:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0138:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0139:     $$rdi = MovRStack(!4, S32)
    # nextln: 0140:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0141:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0142:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0143:     Jumpcc(L, block34, block35)
    # nextln:       block34:
    # nextln: 0144:     $$rcx = ShiftRmI(S64, Shl, 2) $$rcx
    # nextln: 0145:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0146:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0147:     $$rax = MovRM(S32) $$rax
    # nextln:           $$spill4 = $$rax
    # nextln: 0148:     Jump(block32)
    # nextln:       block32:
    # nextln: 0149:     $$rax = MovRStack(!0, S8)
    # nextln: 0150:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0151:     Jumpcc(Ne, block36, block38)
    # nextln:       block36:
    # nextln:           $$spill5 = $$r14
    # nextln: 0152:     Jump(block37)
    # nextln:       block38:
    # nextln: 0153:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0154:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0155:     $$rdx = MovRStack(!4, S32)
    # nextln: 0156:     $$rdx = AluRmI(S32, Sub, 1) $$rdx
    # nextln: 0157:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0158:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0159:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0160:     Jumpcc(L, block39, block40)
    # nextln:       block39:
    # nextln: 0161:     $$rcx = ShiftRmI(S64, Shl, 2) $$rcx
    # nextln: 0162:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0163:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0164:     $$rax = MovRM(S32) $$rax
    # nextln:           $$spill5 = $$rax
    # nextln: 0165:     Jump(block37)
    # nextln:       block37:
    # nextln: 0166:     $$rax = MovRStack(!0, S8)
    # nextln: 0167:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0168:     Jumpcc(Ne, block41, block42)
    # nextln:       block41:
    # nextln: 0169:     $$rax = MovRStack(!1, S32)
    # nextln:           $$spill6 = $$rax
    # nextln:           $$spill9 = $$r13
    # nextln: 0170:     Jump(block43)
    # nextln:       block42:
    # nextln:           $$spill6 = $$r13
    # nextln:           $$spill9 = $$r13
    # nextln: 0171:     Jump(block43)
    # nextln:       block43:
    # nextln: 0172:     $$rax = MovRStack(!0, S8)
    # nextln: 0173:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0174:     Jumpcc(Ne, block44, block45)
    # nextln:       block44:
    # nextln: 0175:     $$rax = MovRStack(!1, S32)
    # nextln:           $$spill7 = $$rax
    # nextln: 0176:     Jump(block46)
    # nextln:       block45:
    # nextln:           $$spill7 = $$r14
    # nextln: 0177:     Jump(block46)
    # nextln:       block46:
    # nextln: 0178:     $$rax = MovRStack(!0, S8)
    # nextln: 0179:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0180:     Jumpcc(Ne, block47, block48)
    # nextln:       block47:
    # nextln: 0181:     $$rax = MovRStack(!1, S32)
    # nextln:           $$spill8 = $$rax
    # nextln: 0182:     Jump(block49)
    # nextln:       block48:
    # nextln: 0183:     $$rax = MovRStack(!1, S32)
    # nextln:           $$spill8 = $$rax
    # nextln: 0184:     Jump(block49)
    # nextln:       block49:
    # nextln: 0185:     $$rax = MovRStack(!0, S8)
    # nextln: 0186:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0187:     Jumpcc(Ne, block50, block51)
    # nextln:       block50:
    # nextln: 0188:     $$r15 = MovRStack(!1, S32)
    # nextln: 0189:     Jump(block52)
    # nextln:       block51:
    # nextln: 0190:     $$r15 = MovRM(S32) $$r12
    # nextln: 0191:     Jump(block52)
    # nextln:       block52:
    # nextln: 0192:     $$rax = MovRStack(!0, S8)
    # nextln: 0193:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0194:     Jumpcc(Ne, block53, block54)
    # nextln:       block53:
    # nextln: 0195:     $$r13 = MovRStack(!1, S32)
    # nextln: 0196:     Jump(block55)
    # nextln:       block54:
    # nextln: 0197:     $$rax = MovRStack(!3, S64)
    # nextln: 0198:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0199:     $$r13 = MovRM(S32) $$rax
    # nextln: 0200:     Jump(block55)
    # nextln:       block55:
    # nextln: 0201:     $$rax = MovRStack(!0, S8)
    # nextln: 0202:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0203:     Jumpcc(Ne, block56, block57)
    # nextln:       block56:
    # nextln: 0204:     $$rax = MovRStack(!1, S32)
    # nextln: 0205:     Jump(block58)
    # nextln:       block57:
    # nextln: 0206:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln: 0207:     $$rax = CallRm $$rax
    # nextln: 0208:     Jump(block58)
    # nextln:       block58:
    # nextln: 0209:     $$rcx = MovRStack(!0, S8)
    # nextln: 0210:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0211:     Jumpcc(Ne, block59, block60)
    # nextln:       block59:
    # nextln: 0212:     $$rcx = MovRStack(!1, S32)
    # nextln: 0213:     Jump(block63)
    # nextln:       block60:
    # nextln: 0214:     $$rcx = MovRStack(!2, S64)
    # nextln:           $$rdx = $$rcx
    # nextln: 0215:     $$rdx = AluRmI(S64, Add, 32) $$rdx
    # nextln: 0216:     $$rdi = MovRStack(!4, S32)
    # nextln: 0217:     $$rsi = MovRM(S32) $$rdx
    # nextln: 0218:     $$rdx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0219:     AluRRm(S64, Cmp) $$rdx, $$rsi
    # nextln: 0220:     Jumpcc(L, block61, block62)
    # nextln:       block61:
    # nextln: 0221:     $$rdx = ShiftRmI(S64, Shl, 2) $$rdx
    # nextln: 0222:     $$rdx = AluRmI(S64, Add, 40) $$rdx
    # nextln: 0223:     $$rcx = AluRRm(S64, Add) $$rcx, $$rdx
    # nextln: 0224:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0225:     Jump(block63)
    # nextln:       block63:
    # nextln: 0226:     $$rdx = MovRStack(!0, S8)
    # nextln: 0227:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0228:     Jumpcc(Ne, block64, block65)
    # nextln:       block64:
    # nextln: 0229:     $$rdx = MovRStack(!1, S32)
    # nextln: 0230:     Jump(block68)
    # nextln:       block65:
    # nextln: 0231:     $$rdx = MovRStack(!2, S64)
    # nextln:           $$rdi = $$rdx
    # nextln: 0232:     $$rdi = AluRmI(S64, Add, 32) $$rdi
    # nextln: 0233:     $$rsi = MovRStack(!4, S32)
    # nextln: 0234:     $$rsi = AluRmI(S32, Sub, 1) $$rsi
    # nextln: 0235:     $$r8 = MovRM(S32) $$rdi
    # nextln: 0236:     $$rdi = MovsxRRm(Ext32_64) $$rsi
    # nextln: 0237:     AluRRm(S64, Cmp) $$rdi, $$r8
    # nextln: 0238:     Jumpcc(L, block66, block67)
    # nextln:       block66:
    # nextln: 0239:     $$rdi = ShiftRmI(S64, Shl, 2) $$rdi
    # nextln: 0240:     $$rdi = AluRmI(S64, Add, 40) $$rdi
    # nextln: 0241:     $$rdx = AluRRm(S64, Add) $$rdx, $$rdi
    # nextln: 0242:     $$rdx = MovRM(S32) $$rdx
    # nextln: 0243:     Jump(block68)
    # nextln:       block68:
    # nextln: 0244:     $$rdi = MovRStack(!0, S8)
    # nextln: 0245:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0246:     Jumpcc(Ne, block69, block70)
    # nextln:       block69:
    # nextln: 0247:     $$rdi = MovRM(S32) $$r12
    # nextln:           $$spill9 = $$rdi
    # nextln: 0248:     Jump(block71)
    # nextln:       block70:
    # nextln: 0249:     Jump(block71)
    # nextln:       block71:
    # nextln: 0250:     $$rdi = MovRStack(!0, S8)
    # nextln: 0251:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0252:     Jumpcc(Ne, block72, block73)
    # nextln:       block72:
    # nextln: 0253:     $$r14 = MovRM(S32) $$r12
    # nextln: 0254:     Jump(block74)
    # nextln:       block73:
    # nextln: 0255:     Jump(block74)
    # nextln:       block74:
    # nextln: 0256:     $$rdi = MovRStack(!0, S8)
    # nextln: 0257:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0258:     Jumpcc(Ne, block75, block76)
    # nextln:       block75:
    # nextln: 0259:     $$rdi = MovRM(S32) $$r12
    # nextln: 0260:     Jump(block77)
    # nextln:       block76:
    # nextln: 0261:     $$rdi = MovRStack(!1, S32)
    # nextln: 0262:     Jump(block77)
    # nextln:       block77:
    # nextln: 0263:     $$rsi = MovRStack(!0, S8)
    # nextln: 0264:     AluRRm(S32, Test) $$rsi, $$rsi
    # nextln: 0265:     Jumpcc(Ne, block78, block79)
    # nextln:       block78:
    # nextln: 0266:     $$rsi = MovRM(S32) $$r12
    # nextln: 0267:     Jump(block80)
    # nextln:       block79:
    # nextln: 0268:     $$rsi = MovRM(S32) $$r12
    # nextln: 0269:     Jump(block80)
    # nextln:       block80:
    # nextln: 0270:     $$rbx = AluRmI(S32, Add, -5) $$rbx
    # nextln:           $$r8 = $$spill0
    # nextln: 0271:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill1
    # nextln: 0272:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill2
    # nextln: 0273:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill3
    # nextln: 0274:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill4
    # nextln: 0275:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill5
    # nextln: 0276:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill6
    # nextln: 0277:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill7
    # nextln: 0278:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln:           $$r8 = $$spill8
    # nextln: 0279:     $$rbx = AluRRm(S32, Add) $$rbx, $$r8
    # nextln: 0280:     $$rbx = AluRRm(S32, Add) $$rbx, $$r15
    # nextln: 0281:     $$rbx = AluRRm(S32, Add) $$rbx, $$r13
    # nextln: 0282:     $$rbx = AluRRm(S32, Add) $$rbx, $$rax
    # nextln: 0283:     $$rbx = AluRRm(S32, Add) $$rbx, $$rcx
    # nextln: 0284:     $$rbx = AluRRm(S32, Add) $$rbx, $$rdx
    # nextln: 0285:     $$rbx = AluRRm(S32, Add) $$rbx, $$spill9
    # nextln: 0286:     $$rbx = AluRRm(S32, Add) $$rbx, $$r14
    # nextln: 0287:     $$rbx = AluRRm(S32, Add) $$rbx, $$rdi
    # nextln: 0288:     $$rbx = AluRRm(S32, Add) $$rbx, $$rsi
    # nextln:           $$rax = $$rbx
    # nextln: 0289:     Ret $$rax
    # nextln:       block67:
    # nextln: 0290:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0291:     CallRm $$rax
    # nextln: 0292:     Ud2
    # nextln:       block62:
    # nextln: 0293:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0294:     CallRm $$rax
    # nextln: 0295:     Ud2
    # nextln:       block40:
    # nextln: 0296:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0297:     CallRm $$rax
    # nextln: 0298:     Ud2
    # nextln:       block35:
    # nextln: 0299:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0300:     CallRm $$rax
    # nextln: 0301:     Ud2
    # nextln:       block12:
    # nextln: 0302:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0303:     CallRm $$rax
    # nextln: 0304:     Ud2
    # nextln:       block10:
    # nextln: 0305:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0306:     CallRm $$rax
    # nextln: 0307:     Ud2
    # nextln:       block8:
    # nextln: 0308:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0309:     CallRm $$rax
    # nextln: 0310:     Ud2
    # nextln:       block6:
    # nextln: 0311:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0312:     CallRm $$rax
    # nextln: 0313:     Ud2
    # nextln:       block4:
    # nextln: 0314:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0315:     CallRm $$rax
    # nextln: 0316:     Ud2
    # nextln:       block2:
    # nextln: 0317:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 0318:     CallRm $$rax
    # nextln: 0319:     Ud2

    %0:ctrl = entry
    %8:ptr = stackslot 4:4
    %12:ptr = stackslot 1:1
    %24:ptr = stackslot 4:4
    %28:ptr = stackslot 8:8
    %29:ptr = stackslot 8:8
    %3:ptr = iconst 105690555221072
    %4:i32 = iconst 4294967291
    %5:i32 = iconst 3
    %20:i64 = iconst 40
    %36:i32 = iconst 2
    %13:i32 = iconst 1
    %23:i64 = iconst 32
    %30:i64 = iconst 37
    %31:i64 = iconst 36
    %9:i32 = iconst 0
    %25:ctrl = store.4 %0, %9, %24
    %26:ctrl = store.4 %25, %9, %8
    %27:ctrl = store.1 %26, %9, %12
    %32:i32 = iconst 4294967283
    %33:ptr = iconst 105690555221136
    %34:ptr = iconst 105690555221104
    %35:i32 = iconst 7
    %586:i64 = iconst 48
    %41:i32 = iconst 4294967265
    %584:i64 = iconst 2
    %583:i64 = iconst 44
    %42:i32 = iconst 4294967269
    %581:i64 = iconst 1
    %43:i32 = iconst 21
    %580:i64 = iconst 0
    %579:i64 = iconst 3
    %587:i64 = iconst 60
    %46:ptr = iconst 106721347438592
    %588:i64 = iconst 42
    %589:i64 = iconst 41
    %590:i64 = iconst 51
    %56:ptr = iconst 106721347401152
    %57:ptr = iconst 106721347409792
    %58:ptr = iconst 0
    %59:ctrl = store.8 %27, %58, %29
    %60:ctrl = store.8 %59, %58, %28
    %63:ctrl = store.4 %60, %13, %24
    %64:ctrl = store.4 %63, %4, %8
    %65:ctrl = store.1 %64, %9, %12
    %66:ctrl, %67:ptr = call @gc_new %65, %57, %20
    %68:ctrl = call @"System.Void Tests.Int_No_Op::.ctor()" %66, %67
    %69:ctrl = store.8 %68, %67, %29
    %70:ctrl, %71:ptr = call @gc_new %69, %56, %590
    %72:ptr = ptroff %71, %23
    %73:ctrl = store.4 %70, %579, %72
    %74:ctrl, %75:ptr = call @gc_new %73, %56, %590
    %112:ptr = ptroff %75, %588
    %100:ptr = ptroff %75, %589
    %88:ptr = ptroff %75, %20
    %76:ptr = ptroff %75, %23
    %77:ctrl = store.4 %74, %579, %76
    %78:ctrl, %79:i64 = load.4 %77, %76
    %80:i64 = icmp slt %580, %79
    %81:ctrl, %82:ctrl = brcond %78, %80
    %89:ctrl = store.1 %81, %13, %88
    %90:ctrl, %91:i64 = load.4 %89, %76
    %92:i64 = icmp slt %581, %91
    %93:ctrl, %94:ctrl = brcond %90, %92
    %101:ctrl = store.1 %93, %13, %100
    %102:ctrl, %103:i64 = load.4 %101, %76
    %104:i64 = icmp slt %584, %103
    %105:ctrl, %106:ctrl = brcond %102, %104
    %113:ctrl = store.1 %105, %13, %112
    %114:ctrl, %115:ptr = call @gc_new %113, %46, %587
    %116:ptr = ptroff %115, %23
    %117:ctrl = store.4 %114, %579, %116
    %118:ctrl = store.8 %117, %115, %28
    %119:ctrl, %120:ptr = load.8 %118, %28
    %132:ptr = ptroff %120, %20
    %121:ptr = ptroff %120, %23
    %122:ctrl, %123:i64 = load.4 %119, %121
    %124:i64 = icmp slt %580, %123
    %125:ctrl, %126:ctrl = brcond %122, %124
    %133:ctrl = store.4 %125, %43, %132
    %134:ctrl, %135:ptr = load.8 %133, %28
    %147:ptr = ptroff %135, %583
    %136:ptr = ptroff %135, %23
    %137:ctrl, %138:i64 = load.4 %134, %136
    %139:i64 = icmp slt %581, %138
    %140:ctrl, %141:ctrl = brcond %137, %139
    %148:ctrl = store.4 %140, %42, %147
    %149:ctrl, %150:ptr = load.8 %148, %28
    %162:ptr = ptroff %150, %586
    %151:ptr = ptroff %150, %23
    %152:ctrl, %153:i64 = load.4 %149, %151
    %154:i64 = icmp slt %584, %153
    %155:ctrl, %156:ctrl = brcond %152, %154
    %163:ctrl = store.4 %155, %41, %162
    %164:ctrl = store.4 %163, %35, %3
    %165:ctrl = store.1 %164, %9, %34
    %166:ctrl = store.1 %165, %13, %33
    %167:ctrl, %168:ptr = load.8 %166, %29
    %169:ptr = ptroff %168, %23
    %170:ctrl = store.4 %167, %32, %169
    %171:ctrl, %172:ptr = load.8 %170, %29
    %173:ptr = ptroff %172, %31
    %174:ctrl = store.1 %171, %9, %173
    %175:ctrl, %176:ptr = load.8 %174, %29
    %177:ptr = ptroff %176, %30
    %178:ctrl = store.1 %175, %13, %177
    %179:ctrl, %180:i32 = load.1 %178, %12
    %181:ctrl, %182:ctrl = brcond %179, %180
    %187:ctrl, %188:phisel = region %182, %181
    %189:ctrl, %190:i32 = load.1 %187, %12
    %191:ctrl, %192:ctrl = brcond %189, %190
    %197:ctrl, %198:phisel = region %192, %191
    %199:ctrl, %200:i32 = load.1 %197, %12
    %201:ctrl, %202:ctrl = brcond %199, %200
    %207:ctrl, %208:i32 = load.4 %202, %8
    %209:ctrl, %210:phisel = region %207, %201
    %211:ctrl, %212:i32 = load.1 %209, %12
    %213:ctrl, %214:ctrl = brcond %211, %212
    %219:ctrl, %220:i32 = load.4 %214, %3
    %221:ctrl, %222:phisel = region %219, %213
    %223:ctrl, %224:i32 = load.1 %221, %12
    %225:ctrl, %226:ctrl = brcond %223, %224
    %231:ctrl, %232:ptr = load.8 %226, %29
    %233:ptr = ptroff %232, %23
    %234:ctrl, %235:i32 = load.4 %231, %233
    %236:ctrl, %237:phisel = region %234, %225
    %238:ctrl, %239:i32 = load.1 %236, %12
    %240:ctrl, %241:ctrl = brcond %238, %239
    %246:ctrl, %247:i32 = call @"System.Int32 Tests.Int_No_Op::simple_func_int()" %241
    %248:ctrl, %249:phisel = region %246, %240
    %250:ctrl, %251:i32 = load.1 %248, %12
    %252:ctrl, %253:ctrl = brcond %250, %251
    %258:ctrl, %259:ptr = load.8 %253, %28
    %260:ctrl, %261:i32 = load.4 %258, %24
    %262:i64 = iext %261
    %263:i64 = sfill 32 %262
    %591:i64 = shl %263, %36
    %265:i64 = iadd %591, %20
    %277:ptr = ptroff %259, %265
    %266:ptr = ptroff %259, %23
    %267:ctrl, %268:i64 = load.4 %260, %266
    %269:i64 = icmp slt %263, %268
    %270:ctrl, %271:ctrl = brcond %267, %269
    %278:ctrl, %279:i32 = load.4 %270, %277
    %280:ctrl, %281:phisel = region %278, %252
    %282:ctrl, %283:i32 = load.1 %280, %12
    %284:ctrl, %285:ctrl = brcond %282, %283
    %290:ctrl, %291:ptr = load.8 %285, %28
    %292:ctrl, %293:i32 = load.4 %290, %24
    %294:i32 = isub %293, %13
    %295:i64 = iext %294
    %296:i64 = sfill 32 %295
    %592:i64 = shl %296, %36
    %298:i64 = iadd %592, %20
    %310:ptr = ptroff %291, %298
    %299:ptr = ptroff %291, %23
    %300:ctrl, %301:i64 = load.4 %292, %299
    %302:i64 = icmp slt %296, %301
    %303:ctrl, %304:ctrl = brcond %300, %302
    %311:ctrl, %312:i32 = load.4 %303, %310
    %313:ctrl, %314:phisel = region %311, %284
    %315:ctrl, %316:i32 = load.1 %313, %12
    %317:ctrl, %318:ctrl = brcond %315, %316
    %321:ctrl, %322:i32 = load.4 %317, %8
    %325:ctrl, %326:phisel = region %318, %321
    %327:ctrl, %328:i32 = load.1 %325, %12
    %329:ctrl, %330:ctrl = brcond %327, %328
    %333:ctrl, %334:i32 = load.4 %329, %8
    %337:ctrl, %338:phisel = region %330, %333
    %339:ctrl, %340:i32 = load.1 %337, %12
    %341:ctrl, %342:ctrl = brcond %339, %340
    %345:ctrl, %346:i32 = load.4 %341, %8
    %349:ctrl, %350:i32 = load.4 %342, %8
    %351:ctrl, %352:phisel = region %349, %345
    %353:ctrl, %354:i32 = load.1 %351, %12
    %355:ctrl, %356:ctrl = brcond %353, %354
    %359:ctrl, %360:i32 = load.4 %355, %8
    %363:ctrl, %364:i32 = load.4 %356, %3
    %365:ctrl, %366:phisel = region %363, %359
    %367:ctrl, %368:i32 = load.1 %365, %12
    %369:ctrl, %370:ctrl = brcond %367, %368
    %373:ctrl, %374:i32 = load.4 %369, %8
    %377:ctrl, %378:ptr = load.8 %370, %29
    %379:ptr = ptroff %378, %23
    %380:ctrl, %381:i32 = load.4 %377, %379
    %382:ctrl, %383:phisel = region %380, %373
    %384:ctrl, %385:i32 = load.1 %382, %12
    %386:ctrl, %387:ctrl = brcond %384, %385
    %390:ctrl, %391:i32 = load.4 %386, %8
    %394:ctrl, %395:i32 = call @"System.Int32 Tests.Int_No_Op::simple_func_int()" %387
    %396:ctrl, %397:phisel = region %394, %390
    %398:ctrl, %399:i32 = load.1 %396, %12
    %400:ctrl, %401:ctrl = brcond %398, %399
    %404:ctrl, %405:i32 = load.4 %400, %8
    %408:ctrl, %409:ptr = load.8 %401, %28
    %410:ctrl, %411:i32 = load.4 %408, %24
    %412:i64 = iext %411
    %413:i64 = sfill 32 %412
    %593:i64 = shl %413, %36
    %415:i64 = iadd %593, %20
    %427:ptr = ptroff %409, %415
    %416:ptr = ptroff %409, %23
    %417:ctrl, %418:i64 = load.4 %410, %416
    %419:i64 = icmp slt %413, %418
    %420:ctrl, %421:ctrl = brcond %417, %419
    %428:ctrl, %429:i32 = load.4 %420, %427
    %430:ctrl, %431:phisel = region %428, %404
    %432:ctrl, %433:i32 = load.1 %430, %12
    %434:ctrl, %435:ctrl = brcond %432, %433
    %438:ctrl, %439:i32 = load.4 %434, %8
    %442:ctrl, %443:ptr = load.8 %435, %28
    %444:ctrl, %445:i32 = load.4 %442, %24
    %446:i32 = isub %445, %13
    %447:i64 = iext %446
    %448:i64 = sfill 32 %447
    %594:i64 = shl %448, %36
    %450:i64 = iadd %594, %20
    %462:ptr = ptroff %443, %450
    %451:ptr = ptroff %443, %23
    %452:ctrl, %453:i64 = load.4 %444, %451
    %454:i64 = icmp slt %448, %453
    %455:ctrl, %456:ctrl = brcond %452, %454
    %463:ctrl, %464:i32 = load.4 %455, %462
    %465:ctrl, %466:phisel = region %463, %438
    %467:ctrl, %468:i32 = load.1 %465, %12
    %469:ctrl, %470:ctrl = brcond %467, %468
    %473:ctrl, %474:i32 = load.4 %469, %3
    %477:ctrl, %478:phisel = region %470, %473
    %479:ctrl, %480:i32 = load.1 %477, %12
    %481:ctrl, %482:ctrl = brcond %479, %480
    %485:ctrl, %486:i32 = load.4 %481, %3
    %489:ctrl, %490:phisel = region %482, %485
    %491:ctrl, %492:i32 = load.1 %489, %12
    %493:ctrl, %494:ctrl = brcond %491, %492
    %497:ctrl, %498:i32 = load.4 %493, %3
    %501:ctrl, %502:i32 = load.4 %494, %8
    %503:ctrl, %504:phisel = region %501, %497
    %505:ctrl, %506:i32 = load.1 %503, %12
    %507:ctrl, %508:ctrl = brcond %505, %506
    %511:ctrl, %512:i32 = load.4 %507, %3
    %515:ctrl, %516:i32 = load.4 %508, %3
    %517:ctrl, %518:phisel = region %515, %511
    %519:i32 = phi %518, %516, %512
    %520:i32 = phi %504, %502, %498
    %521:i32 = phi %490, %4, %486
    %522:i32 = phi %478, %5, %474
    %523:i32 = phi %466, %464, %439
    %461:ctrl = call @throw_index_out_of_range_exception %456
    unreachable %461
    %524:i32 = phi %431, %429, %405
    %426:ctrl = call @throw_index_out_of_range_exception %421
    unreachable %426
    %525:i32 = phi %397, %395, %391
    %526:i32 = phi %383, %381, %374
    %527:i32 = phi %366, %364, %360
    %528:i32 = phi %352, %350, %346
    %529:i32 = phi %338, %4, %334
    %530:i32 = phi %326, %5, %322
    %531:i32 = phi %314, %312, %4
    %309:ctrl = call @throw_index_out_of_range_exception %304
    unreachable %309
    %532:i32 = phi %281, %279, %4
    %276:ctrl = call @throw_index_out_of_range_exception %271
    unreachable %276
    %533:i32 = phi %249, %247, %4
    %534:i32 = phi %237, %235, %4
    %535:i32 = phi %222, %220, %4
    %536:i32 = phi %210, %208, %4
    %539:i32 = phi %188, %5, %4
    %542:i32 = iadd %539, %4
    %544:i32 = iadd %542, %536
    %546:i32 = iadd %544, %535
    %548:i32 = iadd %546, %534
    %550:i32 = iadd %548, %533
    %552:i32 = iadd %550, %532
    %554:i32 = iadd %552, %531
    %556:i32 = iadd %554, %530
    %558:i32 = iadd %556, %529
    %560:i32 = iadd %558, %528
    %562:i32 = iadd %560, %527
    %564:i32 = iadd %562, %526
    %566:i32 = iadd %564, %525
    %568:i32 = iadd %566, %524
    %570:i32 = iadd %568, %523
    %572:i32 = iadd %570, %522
    %574:i32 = iadd %572, %521
    %576:i32 = iadd %574, %520
    %578:i32 = iadd %576, %519
    return %517, %578
    %161:ctrl = call @throw_index_out_of_range_exception %156
    unreachable %161
    %146:ctrl = call @throw_index_out_of_range_exception %141
    unreachable %146
    %131:ctrl = call @throw_index_out_of_range_exception %126
    unreachable %131
    %111:ctrl = call @throw_index_out_of_range_exception %106
    unreachable %111
    %99:ctrl = call @throw_index_out_of_range_exception %94
    unreachable %99
    %87:ctrl = call @throw_index_out_of_range_exception %82
    unreachable %87
}
