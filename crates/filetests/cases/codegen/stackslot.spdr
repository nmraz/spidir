# run: codegen

func @store_simple_stackslot32(i32) {
    # check: function `store_simple_stackslot32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 89 3c 24                        mov dword ptr [rsp], edi
    # nextln: 00000b: 48 83 c4 10                     add rsp, 0x10
    # nextln: 00000f: 5d                              pop rbp
    # nextln: 000010: c3                              ret

    %0:ctrl, %1:i32 = entry
    %2:ptr = stackslot 4:4
    %3:ctrl = store.4 %0, %1, %2
    return %3
}

func @store_simple_stackslot64(i64) {
    # check: function `store_simple_stackslot64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 48 89 3c 24                     mov qword ptr [rsp], rdi
    # nextln: 00000c: 48 83 c4 10                     add rsp, 0x10
    # nextln: 000010: 5d                              pop rbp
    # nextln: 000011: c3                              ret

    %0:ctrl, %1:i64 = entry
    %2:ptr = stackslot 8:8
    %3:ctrl = store.8 %0, %1, %2
    return %3
}

func @load_simple_stackslot32:i32() {
    # check: function `load_simple_stackslot32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 8b 04 24                        mov eax, dword ptr [rsp]
    # nextln: 00000b: 48 83 c4 10                     add rsp, 0x10
    # nextln: 00000f: 5d                              pop rbp
    # nextln: 000010: c3                              ret

    %0:ctrl = entry
    %1:ptr = stackslot 4:4
    %2:ctrl, %3:i32 = load.4 %0, %1
    return %2, %3
}

func @load_simple_stackslot64:i64() {
    # check: function `load_simple_stackslot64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00000c: 48 83 c4 10                     add rsp, 0x10
    # nextln: 000010: 5d                              pop rbp
    # nextln: 000011: c3                              ret

    %0:ctrl = entry
    %1:ptr = stackslot 8:8
    %2:ctrl, %3:i64 = load.8 %0, %1
    return %2, %3
}

func @use_many_stackslots:i32(i64) {
    # check: function `use_many_stackslots`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 20                     sub rsp, 0x20
    # nextln: 000008: 48 89 7c 24 08                  mov qword ptr [rsp + 8], rdi
    # nextln: 00000d: 48 89 3c 24                     mov qword ptr [rsp], rdi
    # nextln: 000011: 89 7c 24 10                     mov dword ptr [rsp + 0x10], edi
    # nextln: 000015: 0f b7 04 24                     movzx eax, word ptr [rsp]
    # nextln: 000019: 48 83 c4 20                     add rsp, 0x20
    # nextln: 00001d: 5d                              pop rbp
    # nextln: 00001e: c3                              ret

    %0:ctrl, %1:i64 = entry
    %s0:ptr = stackslot 8:8
    %s1:ptr = stackslot 8:8
    %s2:ptr = stackslot 4:4
    %2:ctrl = store.8 %0, %1, %s0
    %3:ctrl = store.8 %2, %1, %s1
    %1n:i32 = itrunc %1
    %4:ctrl = store.4 %3, %1n, %s2
    %5:ctrl, %ret:i32 = load.2 %4, %s1
    return %5, %ret
}
