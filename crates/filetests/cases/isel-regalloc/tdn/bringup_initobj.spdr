# run: isel-regalloc

extfunc @memcpy(ptr, ptr, i64)
extfunc @bzero(ptr, i64)

func @"System.Boolean Tests.CodeGenBringUpTests::InitObj()":i32() {
    # check: function `System.Boolean Tests.CodeGenBringUpTests::InitObj()`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11
    # nextln: frame: size 24, align 4
    # nextln:     !0: 0
    # nextln:     !1: 12
    # nextln:       block0:
    # nextln: 0000:     Jump(block1)
    # nextln:       block1:
    # nextln: 0003:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = MovRmS32(12)
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0004:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0005:     Jump(block2)
    # nextln:       block2:
    # nextln: 0008:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = MovRmS32(12)
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0009:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0010:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdx = MovRmS32(12)
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdi = StackAddr(!1)
    # nextln: 0011:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0012:     $$rbx = MovRM(S32, [!1 + 0])
    # nextln: 0013:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdx = MovRmS32(12)
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdi = StackAddr(!1)
    # nextln: 0014:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0015:     $$rax = MovRM(S32, [!1 + 4])
    # nextln: 0016:     AluRRm(S32, Cmp) $$rbx, $$rax
    # nextln: 0017:     Jumpcc(Ne, block3, block5)
    # nextln:       block3:
    # nextln: 0018:     Jump(block4)
    # nextln:       block5:
    # nextln: 0019:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdx = MovRmS32(12)
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdi = StackAddr(!1)
    # nextln: 0020:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0021:     $$rbx = MovRM(S32, [!1 + 4])
    # nextln: 0022:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdx = MovRmS32(12)
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdi = StackAddr(!1)
    # nextln: 0023:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0024:     $$rax = MovRM(S32, [!1 + 8])
    # nextln: 0025:     AluRRm(S32, Cmp) $$rbx, $$rax
    # nextln: 0026:     Jumpcc(Ne, block6, block7)
    # nextln:       block6:
    # nextln: 0027:     Jump(block4)
    # nextln:       block4:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 0028:     Ret $$rax
    # nextln:       block7:
    # nextln: 0029:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdx = MovRmS32(12)
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdi = StackAddr(!1)
    # nextln: 0030:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0031:     $$rcx = MovRM(S32, [!1 + 8])
    # nextln: 0032:     $$rax = MovRmS32(0)
    # nextln: 0033:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0034:     $$rax = Setcc(E) $$rax
    # nextln: 0035:     Ret $$rax

    %0:ctrl = entry
    %5:ptr = stackslot 12:4
    %8:ptr = stackslot 12:4
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i64 = iconst 8
    %6:ptr = ptroff %5, %4
    %7:i64 = iconst 12
    %9:ctrl = call @bzero %1, %8, %7
    %10:ctrl, %11:phisel = region %9
    %12:ctrl = call @bzero %10, %8, %7
    %13:ctrl = call @memcpy %12, %5, %8, %7
    %14:ctrl, %15:i32 = load.4 %13, %5
    %16:ctrl = call @memcpy %14, %5, %8, %7
    %17:i64 = iconst 4
    %18:ptr = ptroff %5, %17
    %19:ctrl, %20:i32 = load.4 %16, %18
    %21:i64 = icmp ne %15, %20
    %22:ctrl, %23:ctrl = brcond %19, %21
    %24:ctrl, %25:phisel = region %23
    %26:ctrl = call @memcpy %24, %5, %8, %7
    %27:ctrl, %28:i32 = load.4 %26, %18
    %29:ctrl = call @memcpy %27, %5, %8, %7
    %30:ctrl, %31:i32 = load.4 %29, %6
    %32:i64 = icmp ne %28, %31
    %33:ctrl, %34:ctrl = brcond %30, %32
    %35:ctrl, %36:phisel = region %22, %33
    return %35, %3
    %37:ctrl, %38:phisel = region %34
    %39:ctrl = call @memcpy %37, %5, %8, %7
    %40:ctrl, %41:i32 = load.4 %39, %6
    %42:i32 = icmp eq %41, %3
    return %40, %42
}
