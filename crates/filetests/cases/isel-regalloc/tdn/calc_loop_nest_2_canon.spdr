# run: isel-regalloc

extfunc @"System.Void Tests.Program::WriteInt(System.Int32)"(i32)

func @"System.Void Tests.Program::Test(System.Int32, System.Int32)"(i32, i32) {
    # check: function `System.Void Tests.Program::Test(System.Int32, System.Int32)`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, r12
    # nextln: frame: size 24, align 4
    # nextln:     !0: 0
    # nextln:     !1: 4
    # nextln:     !2: 8
    # nextln:     !3: 12
    # nextln:     !4: 16
    # nextln:     !5: 20
    # nextln:       block0:
    # nextln: 0000:     MovStackR(!3, S32) $$rdi
    # nextln: 0001:     MovStackR(!2, S32) $$rsi
    # nextln: 0002:     $$rbx = MovRmS32(0)
    # nextln: 0003:     $$r12 = MovRmS32(1)
    # nextln: 0005:     MovStackR(!1, S32) $$rbx
    # nextln: 0006:     MovStackR(!4, S32) $$rbx
    # nextln: 0007:     MovStackR(!0, S32) $$rbx
    # nextln: 0008:     MovStackR(!5, S32) $$rbx
    # nextln: 0009:     MovStackR(!1, S32) $$rbx
    # nextln: 0010:     Jump(block1)
    # nextln:       block1:
    # nextln: 0011:     $$rax = MovRStack(!1, S32)
    # nextln: 0012:     $$rcx = MovRStack(!3, S32)
    # nextln: 0013:     $$rdx = MovRStack(!2, S32)
    # nextln: 0014:     AluRRm(S32, Cmp) $$rdx, $$rcx
    # nextln: 0015:     Jumpcc(L, block2, block3)
    # nextln:       block2:
    # nextln: 0016:     $$rcx = MovRStack(!3, S32)
    # nextln: 0017:     Jump(block4)
    # nextln:       block3:
    # nextln: 0018:     $$rcx = MovRStack(!2, S32)
    # nextln: 0019:     Jump(block4)
    # nextln:       block4:
    # nextln: 0020:     AluRRm(S32, Cmp) $$rax, $$rcx
    # nextln: 0021:     Jumpcc(L, block5, block6)
    # nextln:       block5:
    # nextln: 0022:     $$rax = MovRStack(!3, S32)
    # nextln: 0023:     MovStackR(!4, S32) $$rax
    # nextln: 0024:     Jump(block16)
    # nextln:       block16:
    # nextln: 0025:     $$rax = MovRStack(!4, S32)
    # nextln: 0026:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0027:     Jumpcc(G, block17, block18)
    # nextln:       block17:
    # nextln: 0028:     $$rax = MovRStack(!4, S32)
    # nextln: 0029:     $$rcx = MovRStack(!1, S32)
    # nextln: 0030:     $$rdx = MovRStack(!3, S32)
    # nextln: 0031:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0032:     Jumpcc(G, block22, block23)
    # nextln:       block22:
    # nextln: 0033:     $$rdi = MovRStack(!3, S32)
    # nextln: 0034:     Jump(block24)
    # nextln:       block23:
    # nextln:           $$rdi = $$r12
    # nextln: 0035:     Jump(block24)
    # nextln:       block24:
    # nextln: 0036:     $$rax = AluRRm(S32, Add) $$rax, $$rcx
    # nextln: 0037:     $$rdx = ConvertWord(S32) $$rax
    # nextln: 0038:     $$rax, $$rdx = Div(S32, Idiv) $$rax, $$rdx, $$rdi
    # nextln: 0039:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0040:     Jumpcc(Ne, block25, block27)
    # nextln:       block25:
    # nextln: 0041:     Jump(block26)
    # nextln:       block27:
    # nextln: 0042:     MovStackR(!0, S32) $$r12
    # nextln: 0043:     Jump(block28)
    # nextln:       block28:
    # nextln: 0044:     $$rax = MovRStack(!0, S32)
    # nextln: 0045:     $$rcx = MovRStack(!2, S32)
    # nextln: 0046:     AluRRm(S32, Cmp) $$rax, $$rcx
    # nextln: 0047:     Jumpcc(L, block29, block30)
    # nextln:       block29:
    # nextln: 0048:     $$rdi = MovRStack(!3, S32)
    # nextln: 0049:     $$rax = MovRStack(!1, S32)
    # nextln: 0050:     $$rcx = MovRStack(!4, S32)
    # nextln: 0051:     $$rdx = MovRStack(!0, S32)
    # nextln: 0052:     $$rcx = AluRRm(S32, Add) $$rcx, $$rdx
    # nextln: 0053:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0054:     Jumpcc(G, block31, block32)
    # nextln:       block31:
    # nextln: 0055:     $$rcx = MovRStack(!0, S32)
    # nextln: 0056:     $$rdx = MovRStack(!2, S32)
    # nextln: 0057:     $$rcx = AluRRm(S32, Add) $$rcx, $$rdx
    # nextln: 0058:     Jump(block33)
    # nextln:       block32:
    # nextln: 0059:     $$rcx = MovRStack(!1, S32)
    # nextln: 0060:     Jump(block33)
    # nextln:       block33:
    # nextln: 0061:     $$rdi = AluRRm(S32, Add) $$rdi, $$rax
    # nextln: 0062:     $$rdi = ImulRRm(S32) $$rdi, $$rcx
    # nextln: 0063:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln: 0064:     CallRm $$rax, $$rdi
    # nextln: 0065:     $$rax = MovRStack(!0, S32)
    # nextln: 0066:     $$rax = AluRmI(S32, Add, 2) $$rax
    # nextln: 0067:     MovStackR(!0, S32) $$rax
    # nextln: 0068:     Jump(block28)
    # nextln:       block30:
    # nextln: 0069:     Jump(block26)
    # nextln:       block26:
    # nextln: 0070:     $$rax = MovRStack(!4, S32)
    # nextln: 0071:     $$rax = AluRmI(S32, Sub, 1) $$rax
    # nextln: 0072:     MovStackR(!4, S32) $$rax
    # nextln: 0073:     Jump(block16)
    # nextln:       block18:
    # nextln: 0074:     $$rax = MovRStack(!3, S32)
    # nextln: 0075:     $$rcx = MovRStack(!2, S32)
    # nextln: 0076:     AluRRm(S32, Cmp) $$rcx, $$rax
    # nextln: 0077:     Jumpcc(L, block19, block20)
    # nextln:       block19:
    # nextln: 0078:     $$rax = MovRStack(!2, S32)
    # nextln: 0079:     $$rcx = MovRStack(!1, S32)
    # nextln: 0080:     $$rax = AluRRm(S32, Add) $$rax, $$rcx
    # nextln: 0081:     Jump(block21)
    # nextln:       block20:
    # nextln: 0082:     $$rax = MovRStack(!2, S32)
    # nextln: 0083:     $$rcx = MovRStack(!1, S32)
    # nextln: 0084:     $$rax = AluRRm(S32, Sub) $$rax, $$rcx
    # nextln: 0085:     Jump(block21)
    # nextln:       block21:
    # nextln: 0086:     MovStackR(!2, S32) $$rax
    # nextln: 0087:     $$rax = MovRStack(!1, S32)
    # nextln: 0088:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0089:     MovStackR(!1, S32) $$rax
    # nextln: 0090:     Jump(block1)
    # nextln:       block6:
    # nextln: 0091:     MovStackR(!5, S32) $$rbx
    # nextln: 0092:     Jump(block7)
    # nextln:       block7:
    # nextln: 0093:     $$rax = MovRStack(!5, S32)
    # nextln: 0094:     $$rcx = MovRStack(!2, S32)
    # nextln: 0095:     AluRRm(S32, Cmp) $$rax, $$rcx
    # nextln: 0096:     Jumpcc(L, block8, block9)
    # nextln:       block8:
    # nextln: 0097:     $$rcx = MovRStack(!3, S32)
    # nextln: 0098:     $$rax = MovRStack(!5, S32)
    # nextln: 0099:     $$rdx = ConvertWord(S32) $$rax
    # nextln:           $$rdi = MovRmS32(2)
    # nextln: 0100:     $$rax, $$rdx = Div(S32, Idiv) $$rax, $$rdx, $$rdi
    # nextln: 0101:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0102:     Jumpcc(Ne, block10, block11)
    # nextln:       block10:
    # nextln: 0103:     $$rdx = MovRStack(!2, S32)
    # nextln:           $$rax = $$rbx
    # nextln: 0104:     $$rax = AluRRm(S32, Sub) $$rax, $$rdx
    # nextln: 0105:     Jump(block12)
    # nextln:       block11:
    # nextln: 0106:     $$rax = MovRStack(!2, S32)
    # nextln: 0107:     Jump(block12)
    # nextln:       block12:
    # nextln: 0108:     $$rcx = AluRRm(S32, Add) $$rcx, $$rax
    # nextln: 0109:     MovStackR(!3, S32) $$rcx
    # nextln: 0110:     $$rax = MovRStack(!3, S32)
    # nextln: 0111:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0112:     Jumpcc(G, block13, block14)
    # nextln:       block13:
    # nextln: 0113:     $$rdi = MovRStack(!3, S32)
    # nextln: 0114:     $$rax = MovRStack(!2, S32)
    # nextln: 0115:     $$rdi = ImulRRm(S32) $$rdi, $$rax
    # nextln: 0116:     Jump(block15)
    # nextln:       block14:
    # nextln: 0117:     $$rdi = MovRStack(!2, S32)
    # nextln: 0118:     Jump(block15)
    # nextln:       block15:
    # nextln: 0119:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln: 0120:     CallRm $$rax, $$rdi
    # nextln: 0121:     $$rax = MovRStack(!5, S32)
    # nextln: 0122:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0123:     MovStackR(!5, S32) $$rax
    # nextln: 0124:     Jump(block7)
    # nextln:       block9:
    # nextln: 0125:     Ret

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:ptr = stackslot 4:4
    %4:ptr = stackslot 4:4
    %5:ptr = stackslot 4:4
    %6:ptr = stackslot 4:4
    %7:ptr = stackslot 4:4
    %8:ptr = stackslot 4:4
    %11:i32 = iconst 1
    %12:ctrl = store.4 %0, %1, %3
    %13:ctrl = store.4 %12, %2, %4
    %14:i32 = iconst 0
    %15:i32 = iconst 2
    %16:ctrl = store.4 %13, %14, %5
    %17:ctrl = store.4 %16, %14, %6
    %18:ctrl = store.4 %17, %14, %7
    %19:ctrl = store.4 %18, %14, %8
    %22:ctrl = store.4 %19, %14, %5
    %23:ctrl, %24:phisel = region %22, %171
    %25:ctrl, %26:i32 = load.4 %23, %5
    %27:ctrl, %28:i32 = load.4 %25, %3
    %29:ctrl, %30:i32 = load.4 %27, %4
    %31:i32 = icmp slt %30, %28
    %32:ctrl, %33:ctrl = brcond %29, %31
    %36:ctrl, %37:i32 = load.4 %32, %3
    %40:ctrl, %41:i32 = load.4 %33, %4
    %42:ctrl, %43:phisel = region %40, %36
    %44:i32 = phi %43, %41, %37
    %46:i32 = icmp slt %26, %44
    %47:ctrl, %48:ctrl = brcond %42, %46
    %51:ctrl, %52:i32 = load.4 %47, %3
    %53:ctrl = store.4 %51, %52, %6
    %54:ctrl, %55:phisel = region %53, %140
    %56:ctrl, %57:i32 = load.4 %54, %6
    %58:i32 = icmp slt %14, %57
    %59:ctrl, %60:ctrl = brcond %56, %58
    %63:ctrl, %64:i32 = load.4 %59, %6
    %65:ctrl, %66:i32 = load.4 %63, %5
    %67:ctrl, %68:i32 = load.4 %65, %3
    %69:i32 = icmp slt %14, %68
    %70:ctrl, %71:ctrl = brcond %67, %69
    %74:ctrl, %75:i32 = load.4 %70, %3
    %78:ctrl, %79:phisel = region %71, %74
    %80:i32 = phi %79, %11, %75
    %81:i32 = iadd %64, %66
    %83:ctrl, %84:i32 = srem %78, %81, %80
    %85:ctrl, %86:ctrl = brcond %83, %84
    %89:ctrl = store.4 %86, %11, %7
    %90:ctrl, %91:phisel = region %89, %134
    %92:ctrl, %93:i32 = load.4 %90, %7
    %94:ctrl, %95:i32 = load.4 %92, %4
    %96:i32 = icmp slt %93, %95
    %97:ctrl, %98:ctrl = brcond %94, %96
    %101:ctrl, %102:i32 = load.4 %97, %3
    %103:ctrl, %104:i32 = load.4 %101, %5
    %105:ctrl, %106:i32 = load.4 %103, %6
    %107:ctrl, %108:i32 = load.4 %105, %7
    %109:i32 = iadd %106, %108
    %110:i32 = icmp slt %14, %109
    %111:ctrl, %112:ctrl = brcond %107, %110
    %115:ctrl, %116:i32 = load.4 %111, %7
    %117:ctrl, %118:i32 = load.4 %115, %4
    %119:i32 = iadd %116, %118
    %122:ctrl, %123:i32 = load.4 %112, %5
    %124:ctrl, %125:phisel = region %122, %117
    %126:i32 = phi %125, %123, %119
    %127:i32 = iadd %102, %104
    %129:i32 = imul %127, %126
    %130:ctrl = call @"System.Void Tests.Program::WriteInt(System.Int32)" %124, %129
    %131:ctrl, %132:i32 = load.4 %130, %7
    %133:i32 = iadd %132, %15
    %134:ctrl = store.4 %131, %133, %7
    %135:ctrl, %136:phisel = region %85, %98
    %137:ctrl, %138:i32 = load.4 %135, %6
    %139:i32 = isub %138, %11
    %140:ctrl = store.4 %137, %139, %6
    %143:ctrl, %144:i32 = load.4 %60, %3
    %145:ctrl, %146:i32 = load.4 %143, %4
    %147:i32 = icmp slt %146, %144
    %148:ctrl, %149:ctrl = brcond %145, %147
    %152:ctrl, %153:i32 = load.4 %148, %4
    %154:ctrl, %155:i32 = load.4 %152, %5
    %156:i32 = iadd %153, %155
    %159:ctrl, %160:i32 = load.4 %149, %4
    %161:ctrl, %162:i32 = load.4 %159, %5
    %163:ctrl, %164:phisel = region %161, %154
    %165:i32 = isub %160, %162
    %166:i32 = phi %164, %165, %156
    %167:ctrl = store.4 %163, %166, %4
    %168:ctrl, %169:i32 = load.4 %167, %5
    %170:i32 = iadd %169, %11
    %171:ctrl = store.4 %168, %170, %5
    %174:ctrl = store.4 %48, %14, %8
    %175:ctrl, %176:phisel = region %174, %232
    %177:ctrl, %178:i32 = load.4 %175, %8
    %179:ctrl, %180:i32 = load.4 %177, %4
    %181:i32 = icmp slt %178, %180
    %182:ctrl, %183:ctrl = brcond %179, %181
    %186:ctrl, %187:i32 = load.4 %182, %3
    %188:ctrl, %189:i32 = load.4 %186, %8
    %190:ctrl, %191:i32 = srem %188, %189, %15
    %192:ctrl, %193:ctrl = brcond %190, %191
    %196:ctrl, %197:i32 = load.4 %192, %4
    %198:i32 = isub %14, %197
    %201:ctrl, %202:i32 = load.4 %193, %4
    %203:ctrl, %204:phisel = region %196, %201
    %205:i32 = phi %204, %198, %202
    %207:i32 = iadd %187, %205
    %208:ctrl = store.4 %203, %207, %3
    %209:ctrl, %210:i32 = load.4 %208, %3
    %211:i32 = icmp slt %14, %210
    %212:ctrl, %213:ctrl = brcond %209, %211
    %216:ctrl, %217:i32 = load.4 %212, %3
    %218:ctrl, %219:i32 = load.4 %216, %4
    %220:i32 = imul %217, %219
    %223:ctrl, %224:i32 = load.4 %213, %4
    %225:ctrl, %226:phisel = region %223, %218
    %227:i32 = phi %226, %224, %220
    %228:ctrl = call @"System.Void Tests.Program::WriteInt(System.Int32)" %225, %227
    %229:ctrl, %230:i32 = load.4 %228, %8
    %231:i32 = iadd %230, %11
    %232:ctrl = store.4 %229, %231, %8
    return %183
}
