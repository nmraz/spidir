# run: isel-regalloc

func @"System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)":i32(ptr, i32, i32, i32) {
    # check: function `System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)`:
    # nextln: clobbers: rax, rdi, r8
    # nextln: frame: size 16, align 4
    # nextln:     !0: 0
    # nextln:     !1: 4
    # nextln:     !2: 8
    # nextln:     !3: 12
    # nextln:       block0:
    # nextln: 0000:     $$rax = MovRmS32(0)
    # nextln: 0001:     MovMR(S32, [!3 + 0]) $$rax
    # nextln: 0002:     MovMR(S32, [!2 + 0]) $$rax
    # nextln: 0003:     MovMR(S32, [!0 + 0]) $$rax
    # nextln: 0004:     MovMR(S32, [!1 + 0]) $$rax
    # nextln: 0005:     MovMR(S32, [!3 + 0]) $$rax
    # nextln: 0006:     MovMR(S32, [!2 + 0]) $$rax
    # nextln: 0007:     Jump(block1)
    # nextln:       block1:
    # nextln: 0008:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0009:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0010:     Jumpcc(L, block2, block3)
    # nextln:       block2:
    # nextln: 0011:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0012:     $$rdi = AluRmI(S32, And, 2) $$rdi
    # nextln: 0013:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0014:     Jumpcc(Ne, block4, block5)
    # nextln:       block4:
    # nextln: 0015:     MovMR(S32, [!0 + 0]) $$rax
    # nextln: 0016:     Jump(block7)
    # nextln:       block7:
    # nextln: 0017:     $$rdi = MovRM(S32, [!0 + 0])
    # nextln: 0018:     AluRRm(S32, Cmp) $$rdi, $$rdx
    # nextln: 0019:     Jumpcc(L, block8, block9)
    # nextln:       block8:
    # nextln: 0020:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0021:     $$rdi = AluRmI(S32, And, 3) $$rdi
    # nextln: 0022:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0023:     Jumpcc(Ne, block17, block18)
    # nextln:       block17:
    # nextln: 0024:     $$rdi = MovRM(S32, [!3 + 0])
    # nextln: 0025:     $$r8 = MovRM(S32, [!0 + 0])
    # nextln: 0026:     $$rdi = AluRRm(S32, Add) $$rdi, $$r8
    # nextln: 0027:     MovMR(S32, [!3 + 0]) $$rdi
    # nextln: 0028:     $$rdi = MovRM(S32, [!0 + 0])
    # nextln: 0029:     $$rdi = AluRmI(S32, Add, 1) $$rdi
    # nextln: 0030:     MovMR(S32, [!0 + 0]) $$rdi
    # nextln: 0031:     Jump(block7)
    # nextln:       block18:
    # nextln: 0032:     Jump(block10)
    # nextln:       block9:
    # nextln: 0033:     Jump(block10)
    # nextln:       block10:
    # nextln: 0034:     MovMR(S32, [!1 + 0]) $$rax
    # nextln: 0035:     Jump(block11)
    # nextln:       block11:
    # nextln: 0036:     $$rdi = MovRM(S32, [!1 + 0])
    # nextln: 0037:     AluRRm(S32, Cmp) $$rdi, $$rcx
    # nextln: 0038:     Jumpcc(L, block12, block13)
    # nextln:       block12:
    # nextln: 0039:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0040:     $$rdi = AluRmI(S32, And, 4) $$rdi
    # nextln: 0041:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0042:     Jumpcc(Ne, block14, block15)
    # nextln:       block14:
    # nextln: 0043:     $$rdi = MovRM(S32, [!3 + 0])
    # nextln: 0044:     $$r8 = MovRM(S32, [!1 + 0])
    # nextln: 0045:     $$rdi = AluRRm(S32, Add) $$rdi, $$r8
    # nextln: 0046:     MovMR(S32, [!3 + 0]) $$rdi
    # nextln: 0047:     Jump(block16)
    # nextln:       block15:
    # nextln: 0048:     Jump(block16)
    # nextln:       block16:
    # nextln: 0049:     $$rdi = MovRM(S32, [!1 + 0])
    # nextln: 0050:     $$rdi = AluRmI(S32, Add, 1) $$rdi
    # nextln: 0051:     MovMR(S32, [!1 + 0]) $$rdi
    # nextln: 0052:     Jump(block11)
    # nextln:       block13:
    # nextln: 0053:     $$rdi = MovRM(S32, [!3 + 0])
    # nextln: 0054:     $$r8 = MovRM(S32, [!2 + 0])
    # nextln: 0055:     $$rdi = AluRRm(S32, Add) $$rdi, $$r8
    # nextln: 0056:     MovMR(S32, [!3 + 0]) $$rdi
    # nextln: 0057:     Jump(block6)
    # nextln:       block5:
    # nextln: 0058:     Jump(block6)
    # nextln:       block6:
    # nextln: 0059:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0060:     $$rdi = AluRmI(S32, Add, 1) $$rdi
    # nextln: 0061:     MovMR(S32, [!2 + 0]) $$rdi
    # nextln: 0062:     Jump(block1)
    # nextln:       block3:
    # nextln: 0063:     $$rax = MovRM(S32, [!3 + 0])
    # nextln: 0064:     Ret $$rax

    %0:ctrl, %1:ptr, %2:i32, %3:i32, %4:i32 = entry
    %7:ptr = stackslot 4:4
    %8:ptr = stackslot 4:4
    %10:ptr = stackslot 4:4
    %14:ptr = stackslot 4:4
    %9:i32 = iconst 1
    %11:i32 = iconst 0
    %12:ctrl = store.4 %0, %11, %7
    %13:ctrl = store.4 %12, %11, %8
    %15:ctrl = store.4 %13, %11, %14
    %16:ctrl = store.4 %15, %11, %10
    %19:ctrl = store.4 %16, %11, %7
    %20:ctrl = store.4 %19, %11, %8
    %21:i32 = iconst 3
    %22:i32 = iconst 4
    %23:i32 = iconst 2
    %24:i32 = and %111, %23
    %25:ctrl, %26:ctrl = brcond %110, %24
    %29:ctrl = store.4 %25, %11, %14
    %30:ctrl, %31:phisel = region %29, %55
    %32:ctrl, %33:i32 = load.4 %30, %14
    %34:i32 = icmp slt %33, %3
    %35:ctrl, %36:ctrl = brcond %32, %34
    %39:ctrl, %40:i32 = load.4 %35, %8
    %41:i32 = and %40, %21
    %42:ctrl, %43:ctrl = brcond %39, %41
    %46:ctrl, %47:i32 = load.4 %42, %7
    %48:ctrl, %49:i32 = load.4 %46, %14
    %50:i32 = iadd %47, %49
    %51:ctrl = store.4 %48, %50, %7
    %52:ctrl, %53:i32 = load.4 %51, %14
    %54:i32 = iadd %53, %9
    %55:ctrl = store.4 %52, %54, %14
    %56:ctrl, %57:phisel = region %43, %36
    %58:ctrl = store.4 %56, %11, %10
    %59:ctrl, %60:phisel = region %58, %86
    %61:ctrl, %62:i32 = load.4 %59, %10
    %63:i32 = icmp slt %62, %4
    %64:ctrl, %65:ctrl = brcond %61, %63
    %68:ctrl, %69:i32 = load.4 %64, %8
    %70:i32 = and %69, %22
    %71:ctrl, %72:ctrl = brcond %68, %70
    %75:ctrl, %76:i32 = load.4 %71, %7
    %77:ctrl, %78:i32 = load.4 %75, %10
    %79:i32 = iadd %76, %78
    %80:ctrl = store.4 %77, %79, %7
    %81:ctrl, %82:phisel = region %72, %80
    %83:ctrl, %84:i32 = load.4 %81, %10
    %85:i32 = iadd %84, %9
    %86:ctrl = store.4 %83, %85, %10
    %89:ctrl, %90:i32 = load.4 %65, %7
    %91:ctrl, %92:i32 = load.4 %89, %8
    %93:i32 = iadd %90, %92
    %94:ctrl = store.4 %91, %93, %7
    %95:ctrl, %96:phisel = region %26, %94
    %97:ctrl, %98:i32 = load.4 %95, %8
    %99:i32 = iadd %98, %9
    %100:ctrl = store.4 %97, %99, %8
    %101:ctrl, %102:phisel = region %20, %100
    %103:ctrl, %104:i32 = load.4 %101, %8
    %105:i32 = icmp slt %104, %2
    %106:ctrl, %107:ctrl = brcond %103, %105
    %110:ctrl, %111:i32 = load.4 %106, %8
    %114:ctrl, %115:i32 = load.4 %107, %7
    return %114, %115
}
