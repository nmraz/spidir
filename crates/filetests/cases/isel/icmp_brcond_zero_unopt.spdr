# run: isel

func @select_eqz:i32(i32, i32, i32) {
    # check: function `select_eqz`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(E, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp eq %a, %z
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_nez:i32(i32, i32, i32) {
    # check: function `select_nez`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(Ne, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp ne %a, %z
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_sltz:i32(i32, i32, i32) {
    # check: function `select_sltz`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(S, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp slt %a, %z
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_slez:i32(i32, i32, i32) {
    # check: function `select_slez`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(Le, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp sle %a, %z
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ultz:i32(i32, i32, i32) {
    # check: function `select_ultz`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(B, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp ult %a, %z
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ulez:i32(i32, i32, i32) {
    # check: function `select_ulez`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(E, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp ule %a, %z
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}


func @select_zeq:i32(i32, i32, i32) {
    # check: function `select_zeq`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(E, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp eq %z, %a
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_zne:i32(i32, i32, i32) {
    # check: function `select_zne`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(Ne, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp ne %z, %a
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_zslt:i32(i32, i32, i32) {
    # check: function `select_zslt`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(G, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp slt %z, %a
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_zsle:i32(i32, i32, i32) {
    # check: function `select_zsle`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(Ns, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp sle %z, %a
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_zult:i32(i32, i32, i32) {
    # check: function `select_zult`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(Ne, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp ult %z, %a
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_zule:i32(i32, i32, i32) {
    # check: function `select_zule`:
    # nextln:       block0[%3:gpr64($$rdi), %2:gpr64($$rsi), %1:gpr64($$rdx)]:
    # nextln: 0000:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0001:      Jumpcc(Ae, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr64]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr64]
    # nextln:       block2[%0:gpr64]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %2:i32, %3:i32 = entry
    %z:i32 = iconst 0
    %1:i32 = icmp ule %z, %a
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}
