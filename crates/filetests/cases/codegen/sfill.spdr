# run: codegen

func @sfill_8_32:i32(i32) {
    # check: function `sfill_8_32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: movsx eax, dil
    # nextln: 0x0008: pop rbp
    # nextln: 0x0009: ret

    %0:ctrl, %1:i32 = entry
    %2:i32 = sfill 8 %1
    return %0, %2
}

func @sfill_16_32:i32(i32) {
    # check: function `sfill_16_32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: movsx eax, di
    # nextln: 0x0007: pop rbp
    # nextln: 0x0008: ret

    %0:ctrl, %1:i32 = entry
    %2:i32 = sfill 16 %1
    return %0, %2
}

func @sfill_8_64:i64(i64) {
    # check: function `sfill_8_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: movsx rax, dil
    # nextln: 0x0008: pop rbp
    # nextln: 0x0009: ret

    %0:ctrl, %1:i64 = entry
    %2:i64 = sfill 8 %1
    return %0, %2
}

func @sfill_16_64:i64(i64) {
    # check: function `sfill_16_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: movsx rax, di
    # nextln: 0x0008: pop rbp
    # nextln: 0x0009: ret

    %0:ctrl, %1:i64 = entry
    %2:i64 = sfill 16 %1
    return %0, %2
}

func @sfill_32_64:i64(i64) {
    # check: function `sfill_32_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: movsxd rax, edi
    # nextln: 0x0007: pop rbp
    # nextln: 0x0008: ret

    %0:ctrl, %1:i64 = entry
    %2:i64 = sfill 32 %1
    return %0, %2
}

func @sfill_weird_width_32:i32(i32) {
    # check: function `sfill_weird_width_32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rax, rdi
    # nextln: 0x0007: shl eax, 0xf
    # nextln: 0x000a: sar eax, 0xf
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i32 = entry
    %2:i32 = sfill 17 %1
    return %0, %2
}

func @sfill_weird_width_64:i64(i64) {
    # check: function `sfill_weird_width_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rax, rdi
    # nextln: 0x0007: shl rax, 0x1d
    # nextln: 0x000b: sar rax, 0x1d
    # nextln: 0x000f: pop rbp
    # nextln: 0x0010: ret

    %0:ctrl, %1:i64 = entry
    %2:i64 = sfill 35 %1
    return %0, %2
}

func @sfill_min_width:i32(i32) {
    # check: function `sfill_min_width`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rax, rdi
    # nextln: 0x0007: shl eax, 0x1f
    # nextln: 0x000a: sar eax, 0x1f
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i32 = entry
    %2:i32 = sfill 1 %1
    return %0, %2
}

func @sfill_max_width_32:i32(i32) {
    # check: function `sfill_max_width_32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rax, rdi
    # nextln: 0x0007: shl eax, 1
    # nextln: 0x0009: sar eax, 1
    # nextln: 0x000b: pop rbp
    # nextln: 0x000c: ret

    %0:ctrl, %1:i32 = entry
    %2:i32 = sfill 31 %1
    return %0, %2
}

func @sfill_max_width_64:i64(i64) {
    # check: function `sfill_max_width_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rax, rdi
    # nextln: 0x0007: shl rax, 1
    # nextln: 0x000a: sar rax, 1
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i64 = entry
    %2:i64 = sfill 63 %1
    return %0, %2
}
