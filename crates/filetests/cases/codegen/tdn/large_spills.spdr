# run: codegen

extfunc @gc_new:ptr(ptr, i64)
extfunc @"System.Boolean Tests.Bool_No_Op::simple_func_bool()":i32()
extfunc @throw_index_out_of_range_exception()
extfunc @"System.Void Tests.Bool_No_Op::.ctor()"(ptr)

func @"System.Int32 Tests.Bool_No_Op::Sub_Funclet_0()":i32() {
    # check: function `System.Int32 Tests.Bool_No_Op::Sub_Funclet_0()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 83 ec 58                     sub rsp, 0x58
    # nextln: 000011: 33 c9                           xor ecx, ecx
    # nextln: 000013: 33 c0                           xor eax, eax
    # nextln: 000015: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000019: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00001d: 89 44 24 3c                     mov dword ptr [rsp + 0x3c], eax
    # nextln: 000021: 88 44 24 44                     mov byte ptr [rsp + 0x44], al
    # nextln: 000025: 48 89 0c 24                     mov qword ptr [rsp], rcx
    # nextln: 000029: 48 89 4c 24 08                  mov qword ptr [rsp + 8], rcx
    # nextln: 00002e: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 000033: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000037: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00003b: 4c 63 f8                        movsxd r15, eax
    # nextln: 00003e: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 000043: b8 03 00 00 00                  mov eax, 3
    # nextln: 000048: 4c 63 f0                        movsxd r14, eax
    # nextln: 00004b: b8 01 00 00 00                  mov eax, 1
    # nextln: 000050: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 000055: 49 6b de 01                     imul rbx, r14, 1
    # nextln: 000059: 48 83 c3 30                     add rbx, 0x30
    # nextln: 00005d: 49 bc c0 75 00 00 10 61 00 00   movabs r12, 0x6110000075c0
    # nextln: 000067: 48 bf 00 95 00 00 10 61 00 00   movabs rdi, 0x611000009500
    # nextln: 000071: be 23 00 00 00                  mov esi, 0x23
    # nextln: 000076: b8 01 00 00 00                  mov eax, 1
    # nextln: 00007b: 89 44 24 3c                     mov dword ptr [rsp + 0x3c], eax
    # nextln: 00007f: 88 44 24 44                     mov byte ptr [rsp + 0x44], al
    # nextln: 000083: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 000088: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 000092: ff d0                           call rax
    # nextln: 000094: 49 89 c5                        mov r13, rax
    # nextln: 000097: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Void Tests.Bool_No_Op::.ctor()" + 0
    # nextln: 0000a1: 4c 89 ef                        mov rdi, r13
    # nextln: 0000a4: ff d0                           call rax
    # nextln: 0000a6: 4c 89 2c 24                     mov qword ptr [rsp], r13
    # nextln: 0000aa: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 0000b4: 48 89 de                        mov rsi, rbx
    # nextln: 0000b7: 4c 89 e7                        mov rdi, r12
    # nextln: 0000ba: ff d0                           call rax
    # nextln: 0000bc: 48 89 c1                        mov rcx, rax
    # nextln: 0000bf: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0000c3: 44 89 31                        mov dword ptr [rcx], r14d
    # nextln: 0000c6: 48 89 44 24 08                  mov qword ptr [rsp + 8], rax
    # nextln: 0000cb: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 0000d5: 48 89 de                        mov rsi, rbx
    # nextln: 0000d8: 4c 89 e7                        mov rdi, r12
    # nextln: 0000db: ff d0                           call rax
    # nextln: 0000dd: 48 89 c1                        mov rcx, rax
    # nextln: 0000e0: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0000e4: 44 89 31                        mov dword ptr [rcx], r14d
    # nextln: 0000e7: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 0000ec: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0000f1: 48 89 c8                        mov rax, rcx
    # nextln: 0000f4: 48 83 c0 20                     add rax, 0x20
    # nextln: 0000f8: 8b 00                           mov eax, dword ptr [rax]
    # nextln: 0000fa: 4c 3b f8                        cmp r15, rax
    # nextln: 0000fd: 0f 8d 37 47 00 00               jge 0x483a
    # nextln: 000103: 4c 8b 74 24 28                  mov r14, qword ptr [rsp + 0x28]
    # nextln: 000108: 4c 89 f0                        mov rax, r14
    # nextln: 00010b: 49 0f af c7                     imul rax, r15
    # nextln: 00010f: bb 28 00 00 00                  mov ebx, 0x28
    # nextln: 000114: 48 89 da                        mov rdx, rbx
    # nextln: 000117: 48 03 d0                        add rdx, rax
    # nextln: 00011a: 48 03 ca                        add rcx, rdx
    # nextln: 00011d: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000122: 88 01                           mov byte ptr [rcx], al
    # nextln: 000124: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000129: 48 89 ca                        mov rdx, rcx
    # nextln: 00012c: 48 83 c2 20                     add rdx, 0x20
    # nextln: 000130: 8b 3a                           mov edi, dword ptr [rdx]
    # nextln: 000132: 48 63 d0                        movsxd rdx, eax
    # nextln: 000135: 48 3b d7                        cmp rdx, rdi
    # nextln: 000138: 0f 8d ee 46 00 00               jge 0x482c
    # nextln: 00013e: 4c 89 f7                        mov rdi, r14
    # nextln: 000141: 48 0f af fa                     imul rdi, rdx
    # nextln: 000145: 48 89 da                        mov rdx, rbx
    # nextln: 000148: 48 03 d7                        add rdx, rdi
    # nextln: 00014b: 48 03 ca                        add rcx, rdx
    # nextln: 00014e: 88 01                           mov byte ptr [rcx], al
    # nextln: 000150: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000155: 48 89 ca                        mov rdx, rcx
    # nextln: 000158: 48 83 c2 20                     add rdx, 0x20
    # nextln: 00015c: 8b 12                           mov edx, dword ptr [rdx]
    # nextln: 00015e: bf 02 00 00 00                  mov edi, 2
    # nextln: 000163: 48 63 ff                        movsxd rdi, edi
    # nextln: 000166: 48 3b fa                        cmp rdi, rdx
    # nextln: 000169: 0f 8d af 46 00 00               jge 0x481e
    # nextln: 00016f: 4c 89 f2                        mov rdx, r14
    # nextln: 000172: 48 0f af d7                     imul rdx, rdi
    # nextln: 000176: 48 89 df                        mov rdi, rbx
    # nextln: 000179: 48 03 fa                        add rdi, rdx
    # nextln: 00017c: 48 03 cf                        add rcx, rdi
    # nextln: 00017f: 88 01                           mov byte ptr [rcx], al
    # nextln: 000181: 48 bf f0 03 00 00 20 60 00 00   movabs rdi, 0x6020000003f0
    # nextln: 00018b: 48 be 10 04 00 00 20 60 00 00   movabs rsi, 0x602000000410
    # nextln: 000195: 48 89 c1                        mov rcx, rax
    # nextln: 000198: 48 b8 d0 03 00 00 20 60 00 00   movabs rax, 0x6020000003d0
    # nextln: 0001a2: 88 08                           mov byte ptr [rax], cl
    # nextln: 0001a4: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0001a9: 88 17                           mov byte ptr [rdi], dl
    # nextln: 0001ab: 88 0e                           mov byte ptr [rsi], cl
    # nextln: 0001ad: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 0001b1: 48 83 c7 20                     add rdi, 0x20
    # nextln: 0001b5: 88 0f                           mov byte ptr [rdi], cl
    # nextln: 0001b7: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 0001bb: 48 83 c7 21                     add rdi, 0x21
    # nextln: 0001bf: 88 17                           mov byte ptr [rdi], dl
    # nextln: 0001c1: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 0001c5: 48 83 c7 22                     add rdi, 0x22
    # nextln: 0001c9: 88 0f                           mov byte ptr [rdi], cl
    # nextln: 0001cb: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 0001cf: 83 c7 01                        add edi, 1
    # nextln: 0001d2: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 0001d6: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 0001da: 83 c7 01                        add edi, 1
    # nextln: 0001dd: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 0001e1: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 0001e5: 83 c7 01                        add edi, 1
    # nextln: 0001e8: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 0001ec: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 0001f0: 83 c7 01                        add edi, 1
    # nextln: 0001f3: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 0001f7: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 0001fb: 83 c7 01                        add edi, 1
    # nextln: 0001fe: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 000202: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 000206: 83 c7 01                        add edi, 1
    # nextln: 000209: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 00020d: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 000211: 83 c7 01                        add edi, 1
    # nextln: 000214: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 000218: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 00021c: 83 c7 01                        add edi, 1
    # nextln: 00021f: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 000223: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 000227: 83 c7 01                        add edi, 1
    # nextln: 00022a: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 00022e: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 000232: 83 c7 01                        add edi, 1
    # nextln: 000235: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 000239: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 00023d: 83 c7 01                        add edi, 1
    # nextln: 000240: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 000244: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 000248: 83 c7 01                        add edi, 1
    # nextln: 00024b: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 00024f: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 000253: 83 c7 01                        add edi, 1
    # nextln: 000256: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 00025a: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 00025e: 83 c7 01                        add edi, 1
    # nextln: 000261: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 000265: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 000269: 83 c7 01                        add edi, 1
    # nextln: 00026c: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 000270: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 000274: 83 c7 01                        add edi, 1
    # nextln: 000277: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 00027b: 0f b6 7c 24 44                  movzx edi, byte ptr [rsp + 0x44]
    # nextln: 000280: 85 ff                           test edi, edi
    # nextln: 000282: 0f 84 20 00 00 00               je 0x2a8
    # nextln: 000288: 8b 7c 24 40                     mov edi, dword ptr [rsp + 0x40]
    # nextln: 00028c: 83 c7 01                        add edi, 1
    # nextln: 00028f: 89 7c 24 40                     mov dword ptr [rsp + 0x40], edi
    # nextln: 000293: 49 89 d4                        mov r12, rdx
    # nextln: 000296: 49 89 cf                        mov r15, rcx
    # nextln: 000299: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 00029e: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 0002a3: e9 1b 00 00 00                  jmp 0x2c3
    # nextln: 0002a8: 8b 7c 24 38                     mov edi, dword ptr [rsp + 0x38]
    # nextln: 0002ac: 83 c7 01                        add edi, 1
    # nextln: 0002af: 89 7c 24 38                     mov dword ptr [rsp + 0x38], edi
    # nextln: 0002b3: 49 89 d4                        mov r12, rdx
    # nextln: 0002b6: 49 89 cf                        mov r15, rcx
    # nextln: 0002b9: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 0002be: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 0002c3: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 0002c8: 85 c9                           test ecx, ecx
    # nextln: 0002ca: 0f 84 10 00 00 00               je 0x2e0
    # nextln: 0002d0: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0002d4: 83 c1 01                        add ecx, 1
    # nextln: 0002d7: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0002db: e9 0b 00 00 00                  jmp 0x2eb
    # nextln: 0002e0: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0002e4: 83 c1 01                        add ecx, 1
    # nextln: 0002e7: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0002eb: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 0002f0: 85 c9                           test ecx, ecx
    # nextln: 0002f2: 0f 84 10 00 00 00               je 0x308
    # nextln: 0002f8: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0002fc: 83 c1 01                        add ecx, 1
    # nextln: 0002ff: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 000303: e9 0b 00 00 00                  jmp 0x313
    # nextln: 000308: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00030c: 83 c1 01                        add ecx, 1
    # nextln: 00030f: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 000313: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 000318: 85 c9                           test ecx, ecx
    # nextln: 00031a: 0f 84 10 00 00 00               je 0x330
    # nextln: 000320: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 000324: 83 c1 01                        add ecx, 1
    # nextln: 000327: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00032b: e9 0b 00 00 00                  jmp 0x33b
    # nextln: 000330: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 000334: 83 c1 01                        add ecx, 1
    # nextln: 000337: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00033b: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 000340: 85 c9                           test ecx, ecx
    # nextln: 000342: 0f 84 10 00 00 00               je 0x358
    # nextln: 000348: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 00034c: 83 c1 01                        add ecx, 1
    # nextln: 00034f: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 000353: e9 0b 00 00 00                  jmp 0x363
    # nextln: 000358: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00035c: 83 c1 01                        add ecx, 1
    # nextln: 00035f: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 000363: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 000368: 85 c9                           test ecx, ecx
    # nextln: 00036a: 0f 84 10 00 00 00               je 0x380
    # nextln: 000370: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 000374: 83 c1 01                        add ecx, 1
    # nextln: 000377: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00037b: e9 0b 00 00 00                  jmp 0x38b
    # nextln: 000380: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 000384: 83 c1 01                        add ecx, 1
    # nextln: 000387: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00038b: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 000390: 85 c9                           test ecx, ecx
    # nextln: 000392: 0f 84 10 00 00 00               je 0x3a8
    # nextln: 000398: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 00039c: 83 c1 01                        add ecx, 1
    # nextln: 00039f: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0003a3: e9 0b 00 00 00                  jmp 0x3b3
    # nextln: 0003a8: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0003ac: 83 c1 01                        add ecx, 1
    # nextln: 0003af: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0003b3: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 0003b8: 85 c9                           test ecx, ecx
    # nextln: 0003ba: 0f 84 10 00 00 00               je 0x3d0
    # nextln: 0003c0: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0003c4: 83 c1 01                        add ecx, 1
    # nextln: 0003c7: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0003cb: e9 0b 00 00 00                  jmp 0x3db
    # nextln: 0003d0: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0003d4: 83 c1 01                        add ecx, 1
    # nextln: 0003d7: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0003db: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 0003de: 85 c9                           test ecx, ecx
    # nextln: 0003e0: 0f 84 10 00 00 00               je 0x3f6
    # nextln: 0003e6: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0003ea: 83 c1 01                        add ecx, 1
    # nextln: 0003ed: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0003f1: e9 0b 00 00 00                  jmp 0x401
    # nextln: 0003f6: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0003fa: 83 c1 01                        add ecx, 1
    # nextln: 0003fd: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 000401: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 000404: 85 c9                           test ecx, ecx
    # nextln: 000406: 0f 84 10 00 00 00               je 0x41c
    # nextln: 00040c: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 000410: 83 c1 01                        add ecx, 1
    # nextln: 000413: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 000417: e9 0b 00 00 00                  jmp 0x427
    # nextln: 00041c: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 000420: 83 c1 01                        add ecx, 1
    # nextln: 000423: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 000427: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 00042a: 85 c9                           test ecx, ecx
    # nextln: 00042c: 0f 84 10 00 00 00               je 0x442
    # nextln: 000432: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 000436: 83 c1 01                        add ecx, 1
    # nextln: 000439: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00043d: e9 0b 00 00 00                  jmp 0x44d
    # nextln: 000442: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 000446: 83 c1 01                        add ecx, 1
    # nextln: 000449: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00044d: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 000450: 85 c9                           test ecx, ecx
    # nextln: 000452: 0f 84 10 00 00 00               je 0x468
    # nextln: 000458: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 00045c: 83 c1 01                        add ecx, 1
    # nextln: 00045f: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 000463: e9 0b 00 00 00                  jmp 0x473
    # nextln: 000468: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00046c: 83 c1 01                        add ecx, 1
    # nextln: 00046f: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 000473: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 000476: 85 c9                           test ecx, ecx
    # nextln: 000478: 0f 84 10 00 00 00               je 0x48e
    # nextln: 00047e: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 000482: 83 c1 01                        add ecx, 1
    # nextln: 000485: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 000489: e9 0b 00 00 00                  jmp 0x499
    # nextln: 00048e: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 000492: 83 c1 01                        add ecx, 1
    # nextln: 000495: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 000499: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 00049c: 85 c9                           test ecx, ecx
    # nextln: 00049e: 0f 84 13 00 00 00               je 0x4b7
    # nextln: 0004a4: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0004a8: 83 c1 01                        add ecx, 1
    # nextln: 0004ab: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0004af: 49 89 c5                        mov r13, rax
    # nextln: 0004b2: e9 0e 00 00 00                  jmp 0x4c5
    # nextln: 0004b7: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0004bb: 83 c1 01                        add ecx, 1
    # nextln: 0004be: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0004c2: 49 89 c5                        mov r13, rax
    # nextln: 0004c5: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 0004ca: 85 c0                           test eax, eax
    # nextln: 0004cc: 0f 84 10 00 00 00               je 0x4e2
    # nextln: 0004d2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0004d6: 83 c0 01                        add eax, 1
    # nextln: 0004d9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0004dd: e9 0b 00 00 00                  jmp 0x4ed
    # nextln: 0004e2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0004e6: 83 c0 01                        add eax, 1
    # nextln: 0004e9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0004ed: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 0004f2: 85 c0                           test eax, eax
    # nextln: 0004f4: 0f 84 10 00 00 00               je 0x50a
    # nextln: 0004fa: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0004fe: 83 c0 01                        add eax, 1
    # nextln: 000501: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000505: e9 0b 00 00 00                  jmp 0x515
    # nextln: 00050a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00050e: 83 c0 01                        add eax, 1
    # nextln: 000511: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000515: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000519: 48 83 c0 20                     add rax, 0x20
    # nextln: 00051d: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000520: 85 c0                           test eax, eax
    # nextln: 000522: 0f 84 10 00 00 00               je 0x538
    # nextln: 000528: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00052c: 83 c0 01                        add eax, 1
    # nextln: 00052f: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000533: e9 0b 00 00 00                  jmp 0x543
    # nextln: 000538: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00053c: 83 c0 01                        add eax, 1
    # nextln: 00053f: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000543: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000547: 48 83 c0 20                     add rax, 0x20
    # nextln: 00054b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00054e: 85 c0                           test eax, eax
    # nextln: 000550: 0f 84 10 00 00 00               je 0x566
    # nextln: 000556: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00055a: 83 c0 01                        add eax, 1
    # nextln: 00055d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000561: e9 0b 00 00 00                  jmp 0x571
    # nextln: 000566: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00056a: 83 c0 01                        add eax, 1
    # nextln: 00056d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000571: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000575: 48 83 c0 20                     add rax, 0x20
    # nextln: 000579: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00057c: 85 c0                           test eax, eax
    # nextln: 00057e: 0f 84 10 00 00 00               je 0x594
    # nextln: 000584: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000588: 83 c0 01                        add eax, 1
    # nextln: 00058b: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00058f: e9 0b 00 00 00                  jmp 0x59f
    # nextln: 000594: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000598: 83 c0 01                        add eax, 1
    # nextln: 00059b: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00059f: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0005a3: 48 83 c0 20                     add rax, 0x20
    # nextln: 0005a7: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0005aa: 85 c0                           test eax, eax
    # nextln: 0005ac: 0f 84 10 00 00 00               je 0x5c2
    # nextln: 0005b2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0005b6: 83 c0 01                        add eax, 1
    # nextln: 0005b9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0005bd: e9 0b 00 00 00                  jmp 0x5cd
    # nextln: 0005c2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0005c6: 83 c0 01                        add eax, 1
    # nextln: 0005c9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0005cd: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0005d1: 48 83 c0 20                     add rax, 0x20
    # nextln: 0005d5: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0005d8: 85 c0                           test eax, eax
    # nextln: 0005da: 0f 84 10 00 00 00               je 0x5f0
    # nextln: 0005e0: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0005e4: 83 c0 01                        add eax, 1
    # nextln: 0005e7: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0005eb: e9 0b 00 00 00                  jmp 0x5fb
    # nextln: 0005f0: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0005f4: 83 c0 01                        add eax, 1
    # nextln: 0005f7: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0005fb: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0005ff: 48 83 c0 20                     add rax, 0x20
    # nextln: 000603: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000606: 85 c0                           test eax, eax
    # nextln: 000608: 0f 84 10 00 00 00               je 0x61e
    # nextln: 00060e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000612: 83 c0 01                        add eax, 1
    # nextln: 000615: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000619: e9 0b 00 00 00                  jmp 0x629
    # nextln: 00061e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000622: 83 c0 01                        add eax, 1
    # nextln: 000625: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000629: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00062d: 48 83 c0 20                     add rax, 0x20
    # nextln: 000631: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000634: 85 c0                           test eax, eax
    # nextln: 000636: 0f 84 10 00 00 00               je 0x64c
    # nextln: 00063c: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000640: 83 c0 01                        add eax, 1
    # nextln: 000643: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000647: e9 0b 00 00 00                  jmp 0x657
    # nextln: 00064c: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000650: 83 c0 01                        add eax, 1
    # nextln: 000653: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000657: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00065b: 48 83 c0 20                     add rax, 0x20
    # nextln: 00065f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000662: 85 c0                           test eax, eax
    # nextln: 000664: 0f 84 10 00 00 00               je 0x67a
    # nextln: 00066a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00066e: 83 c0 01                        add eax, 1
    # nextln: 000671: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000675: e9 0b 00 00 00                  jmp 0x685
    # nextln: 00067a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00067e: 83 c0 01                        add eax, 1
    # nextln: 000681: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000685: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00068f: ff d0                           call rax
    # nextln: 000691: 85 c0                           test eax, eax
    # nextln: 000693: 0f 84 10 00 00 00               je 0x6a9
    # nextln: 000699: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00069d: 83 c0 01                        add eax, 1
    # nextln: 0006a0: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0006a4: e9 0b 00 00 00                  jmp 0x6b4
    # nextln: 0006a9: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0006ad: 83 c0 01                        add eax, 1
    # nextln: 0006b0: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0006b4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0006be: ff d0                           call rax
    # nextln: 0006c0: 85 c0                           test eax, eax
    # nextln: 0006c2: 0f 84 10 00 00 00               je 0x6d8
    # nextln: 0006c8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0006cc: 83 c0 01                        add eax, 1
    # nextln: 0006cf: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0006d3: e9 0b 00 00 00                  jmp 0x6e3
    # nextln: 0006d8: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0006dc: 83 c0 01                        add eax, 1
    # nextln: 0006df: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0006e3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0006ed: ff d0                           call rax
    # nextln: 0006ef: 85 c0                           test eax, eax
    # nextln: 0006f1: 0f 84 10 00 00 00               je 0x707
    # nextln: 0006f7: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0006fb: 83 c0 01                        add eax, 1
    # nextln: 0006fe: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000702: e9 0b 00 00 00                  jmp 0x712
    # nextln: 000707: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00070b: 83 c0 01                        add eax, 1
    # nextln: 00070e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000712: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00071c: ff d0                           call rax
    # nextln: 00071e: 85 c0                           test eax, eax
    # nextln: 000720: 0f 84 10 00 00 00               je 0x736
    # nextln: 000726: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00072a: 83 c0 01                        add eax, 1
    # nextln: 00072d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000731: e9 0b 00 00 00                  jmp 0x741
    # nextln: 000736: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00073a: 83 c0 01                        add eax, 1
    # nextln: 00073d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000741: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00074b: ff d0                           call rax
    # nextln: 00074d: 85 c0                           test eax, eax
    # nextln: 00074f: 0f 84 10 00 00 00               je 0x765
    # nextln: 000755: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000759: 83 c0 01                        add eax, 1
    # nextln: 00075c: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000760: e9 0b 00 00 00                  jmp 0x770
    # nextln: 000765: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000769: 83 c0 01                        add eax, 1
    # nextln: 00076c: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000770: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00077a: ff d0                           call rax
    # nextln: 00077c: 85 c0                           test eax, eax
    # nextln: 00077e: 0f 84 10 00 00 00               je 0x794
    # nextln: 000784: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000788: 83 c0 01                        add eax, 1
    # nextln: 00078b: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00078f: e9 0b 00 00 00                  jmp 0x79f
    # nextln: 000794: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000798: 83 c0 01                        add eax, 1
    # nextln: 00079b: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00079f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0007a9: ff d0                           call rax
    # nextln: 0007ab: 85 c0                           test eax, eax
    # nextln: 0007ad: 0f 84 10 00 00 00               je 0x7c3
    # nextln: 0007b3: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0007b7: 83 c0 01                        add eax, 1
    # nextln: 0007ba: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0007be: e9 0b 00 00 00                  jmp 0x7ce
    # nextln: 0007c3: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0007c7: 83 c0 01                        add eax, 1
    # nextln: 0007ca: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0007ce: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0007d8: ff d0                           call rax
    # nextln: 0007da: 85 c0                           test eax, eax
    # nextln: 0007dc: 0f 84 10 00 00 00               je 0x7f2
    # nextln: 0007e2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0007e6: 83 c0 01                        add eax, 1
    # nextln: 0007e9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0007ed: e9 0b 00 00 00                  jmp 0x7fd
    # nextln: 0007f2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0007f6: 83 c0 01                        add eax, 1
    # nextln: 0007f9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0007fd: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000802: 48 89 c1                        mov rcx, rax
    # nextln: 000805: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000809: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00080d: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00080f: 48 63 ca                        movsxd rcx, edx
    # nextln: 000812: 48 3b cf                        cmp rcx, rdi
    # nextln: 000815: 0f 8d f5 3f 00 00               jge 0x4810
    # nextln: 00081b: 4c 89 f2                        mov rdx, r14
    # nextln: 00081e: 48 0f af d1                     imul rdx, rcx
    # nextln: 000822: 48 89 d9                        mov rcx, rbx
    # nextln: 000825: 48 03 ca                        add rcx, rdx
    # nextln: 000828: 48 03 c1                        add rax, rcx
    # nextln: 00082b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00082e: 85 c0                           test eax, eax
    # nextln: 000830: 0f 84 10 00 00 00               je 0x846
    # nextln: 000836: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00083a: 83 c0 01                        add eax, 1
    # nextln: 00083d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000841: e9 0b 00 00 00                  jmp 0x851
    # nextln: 000846: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00084a: 83 c0 01                        add eax, 1
    # nextln: 00084d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000851: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000856: 48 89 c1                        mov rcx, rax
    # nextln: 000859: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00085d: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000861: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000863: 48 63 ca                        movsxd rcx, edx
    # nextln: 000866: 48 3b cf                        cmp rcx, rdi
    # nextln: 000869: 0f 8d 93 3f 00 00               jge 0x4802
    # nextln: 00086f: 4c 89 f2                        mov rdx, r14
    # nextln: 000872: 48 0f af d1                     imul rdx, rcx
    # nextln: 000876: 48 89 d9                        mov rcx, rbx
    # nextln: 000879: 48 03 ca                        add rcx, rdx
    # nextln: 00087c: 48 03 c1                        add rax, rcx
    # nextln: 00087f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000882: 85 c0                           test eax, eax
    # nextln: 000884: 0f 84 10 00 00 00               je 0x89a
    # nextln: 00088a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00088e: 83 c0 01                        add eax, 1
    # nextln: 000891: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000895: e9 0b 00 00 00                  jmp 0x8a5
    # nextln: 00089a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00089e: 83 c0 01                        add eax, 1
    # nextln: 0008a1: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0008a5: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0008aa: 48 89 c1                        mov rcx, rax
    # nextln: 0008ad: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0008b1: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 0008b5: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0008b7: 48 63 cf                        movsxd rcx, edi
    # nextln: 0008ba: 48 3b ca                        cmp rcx, rdx
    # nextln: 0008bd: 0f 8d 31 3f 00 00               jge 0x47f4
    # nextln: 0008c3: 4c 89 f2                        mov rdx, r14
    # nextln: 0008c6: 48 0f af d1                     imul rdx, rcx
    # nextln: 0008ca: 48 89 d9                        mov rcx, rbx
    # nextln: 0008cd: 48 03 ca                        add rcx, rdx
    # nextln: 0008d0: 48 03 c1                        add rax, rcx
    # nextln: 0008d3: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0008d6: 85 c0                           test eax, eax
    # nextln: 0008d8: 0f 84 10 00 00 00               je 0x8ee
    # nextln: 0008de: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0008e2: 83 c0 01                        add eax, 1
    # nextln: 0008e5: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0008e9: e9 0b 00 00 00                  jmp 0x8f9
    # nextln: 0008ee: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0008f2: 83 c0 01                        add eax, 1
    # nextln: 0008f5: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0008f9: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0008fe: 48 89 c1                        mov rcx, rax
    # nextln: 000901: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000905: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000909: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00090b: 48 63 ca                        movsxd rcx, edx
    # nextln: 00090e: 48 3b cf                        cmp rcx, rdi
    # nextln: 000911: 0f 8d cf 3e 00 00               jge 0x47e6
    # nextln: 000917: 4c 89 f2                        mov rdx, r14
    # nextln: 00091a: 48 0f af d1                     imul rdx, rcx
    # nextln: 00091e: 48 89 d9                        mov rcx, rbx
    # nextln: 000921: 48 03 ca                        add rcx, rdx
    # nextln: 000924: 48 03 c1                        add rax, rcx
    # nextln: 000927: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00092a: 85 c0                           test eax, eax
    # nextln: 00092c: 0f 84 10 00 00 00               je 0x942
    # nextln: 000932: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000936: 83 c0 01                        add eax, 1
    # nextln: 000939: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00093d: e9 0b 00 00 00                  jmp 0x94d
    # nextln: 000942: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000946: 83 c0 01                        add eax, 1
    # nextln: 000949: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00094d: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000952: 48 89 c1                        mov rcx, rax
    # nextln: 000955: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000959: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 00095d: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 00095f: 48 63 cf                        movsxd rcx, edi
    # nextln: 000962: 48 3b ca                        cmp rcx, rdx
    # nextln: 000965: 0f 8d 6d 3e 00 00               jge 0x47d8
    # nextln: 00096b: 4c 89 f2                        mov rdx, r14
    # nextln: 00096e: 48 0f af d1                     imul rdx, rcx
    # nextln: 000972: 48 89 d9                        mov rcx, rbx
    # nextln: 000975: 48 03 ca                        add rcx, rdx
    # nextln: 000978: 48 03 c1                        add rax, rcx
    # nextln: 00097b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00097e: 85 c0                           test eax, eax
    # nextln: 000980: 0f 84 10 00 00 00               je 0x996
    # nextln: 000986: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00098a: 83 c0 01                        add eax, 1
    # nextln: 00098d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000991: e9 0b 00 00 00                  jmp 0x9a1
    # nextln: 000996: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00099a: 83 c0 01                        add eax, 1
    # nextln: 00099d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0009a1: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0009a6: 48 89 c1                        mov rcx, rax
    # nextln: 0009a9: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0009ad: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 0009b1: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0009b3: 48 63 cf                        movsxd rcx, edi
    # nextln: 0009b6: 48 3b ca                        cmp rcx, rdx
    # nextln: 0009b9: 0f 8d 0b 3e 00 00               jge 0x47ca
    # nextln: 0009bf: 4c 89 f2                        mov rdx, r14
    # nextln: 0009c2: 48 0f af d1                     imul rdx, rcx
    # nextln: 0009c6: 48 89 d9                        mov rcx, rbx
    # nextln: 0009c9: 48 03 ca                        add rcx, rdx
    # nextln: 0009cc: 48 03 c1                        add rax, rcx
    # nextln: 0009cf: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0009d2: 85 c0                           test eax, eax
    # nextln: 0009d4: 0f 84 10 00 00 00               je 0x9ea
    # nextln: 0009da: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0009de: 83 c0 01                        add eax, 1
    # nextln: 0009e1: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0009e5: e9 0b 00 00 00                  jmp 0x9f5
    # nextln: 0009ea: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0009ee: 83 c0 01                        add eax, 1
    # nextln: 0009f1: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0009f5: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0009fa: 48 89 c1                        mov rcx, rax
    # nextln: 0009fd: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000a01: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000a05: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000a07: 48 63 ca                        movsxd rcx, edx
    # nextln: 000a0a: 48 3b cf                        cmp rcx, rdi
    # nextln: 000a0d: 0f 8d a9 3d 00 00               jge 0x47bc
    # nextln: 000a13: 4c 89 f2                        mov rdx, r14
    # nextln: 000a16: 48 0f af d1                     imul rdx, rcx
    # nextln: 000a1a: 48 89 d9                        mov rcx, rbx
    # nextln: 000a1d: 48 03 ca                        add rcx, rdx
    # nextln: 000a20: 48 03 c1                        add rax, rcx
    # nextln: 000a23: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000a26: 85 c0                           test eax, eax
    # nextln: 000a28: 0f 84 10 00 00 00               je 0xa3e
    # nextln: 000a2e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000a32: 83 c0 01                        add eax, 1
    # nextln: 000a35: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000a39: e9 0b 00 00 00                  jmp 0xa49
    # nextln: 000a3e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000a42: 83 c0 01                        add eax, 1
    # nextln: 000a45: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000a49: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000a4e: 48 89 c1                        mov rcx, rax
    # nextln: 000a51: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000a55: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000a59: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000a5b: 48 63 ca                        movsxd rcx, edx
    # nextln: 000a5e: 48 3b cf                        cmp rcx, rdi
    # nextln: 000a61: 0f 8d 47 3d 00 00               jge 0x47ae
    # nextln: 000a67: 4c 89 f2                        mov rdx, r14
    # nextln: 000a6a: 48 0f af d1                     imul rdx, rcx
    # nextln: 000a6e: 48 89 d9                        mov rcx, rbx
    # nextln: 000a71: 48 03 ca                        add rcx, rdx
    # nextln: 000a74: 48 03 c1                        add rax, rcx
    # nextln: 000a77: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000a7a: 85 c0                           test eax, eax
    # nextln: 000a7c: 0f 84 10 00 00 00               je 0xa92
    # nextln: 000a82: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000a86: 83 c0 01                        add eax, 1
    # nextln: 000a89: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000a8d: e9 0b 00 00 00                  jmp 0xa9d
    # nextln: 000a92: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000a96: 83 c0 01                        add eax, 1
    # nextln: 000a99: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000a9d: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000aa2: 48 89 c1                        mov rcx, rax
    # nextln: 000aa5: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000aa9: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000aad: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000aaf: 48 63 ca                        movsxd rcx, edx
    # nextln: 000ab2: 48 3b cf                        cmp rcx, rdi
    # nextln: 000ab5: 0f 8d e5 3c 00 00               jge 0x47a0
    # nextln: 000abb: 4c 89 f2                        mov rdx, r14
    # nextln: 000abe: 48 0f af d1                     imul rdx, rcx
    # nextln: 000ac2: 48 89 d9                        mov rcx, rbx
    # nextln: 000ac5: 48 03 ca                        add rcx, rdx
    # nextln: 000ac8: 48 03 c1                        add rax, rcx
    # nextln: 000acb: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000ace: 85 c0                           test eax, eax
    # nextln: 000ad0: 0f 84 10 00 00 00               je 0xae6
    # nextln: 000ad6: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000ada: 83 c0 01                        add eax, 1
    # nextln: 000add: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000ae1: e9 0b 00 00 00                  jmp 0xaf1
    # nextln: 000ae6: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000aea: 83 c0 01                        add eax, 1
    # nextln: 000aed: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000af1: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000af6: 48 89 c1                        mov rcx, rax
    # nextln: 000af9: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000afd: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000b01: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000b03: 48 63 ca                        movsxd rcx, edx
    # nextln: 000b06: 48 3b cf                        cmp rcx, rdi
    # nextln: 000b09: 0f 8d 83 3c 00 00               jge 0x4792
    # nextln: 000b0f: 4c 89 f2                        mov rdx, r14
    # nextln: 000b12: 48 0f af d1                     imul rdx, rcx
    # nextln: 000b16: 48 89 d9                        mov rcx, rbx
    # nextln: 000b19: 48 03 ca                        add rcx, rdx
    # nextln: 000b1c: 48 03 c1                        add rax, rcx
    # nextln: 000b1f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000b22: 85 c0                           test eax, eax
    # nextln: 000b24: 0f 84 10 00 00 00               je 0xb3a
    # nextln: 000b2a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000b2e: 83 c0 01                        add eax, 1
    # nextln: 000b31: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000b35: e9 0b 00 00 00                  jmp 0xb45
    # nextln: 000b3a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000b3e: 83 c0 01                        add eax, 1
    # nextln: 000b41: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000b45: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000b4a: 48 89 c1                        mov rcx, rax
    # nextln: 000b4d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000b51: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000b55: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000b57: 48 63 ca                        movsxd rcx, edx
    # nextln: 000b5a: 48 3b cf                        cmp rcx, rdi
    # nextln: 000b5d: 0f 8d 21 3c 00 00               jge 0x4784
    # nextln: 000b63: 4c 89 f2                        mov rdx, r14
    # nextln: 000b66: 48 0f af d1                     imul rdx, rcx
    # nextln: 000b6a: 48 89 d9                        mov rcx, rbx
    # nextln: 000b6d: 48 03 ca                        add rcx, rdx
    # nextln: 000b70: 48 03 c1                        add rax, rcx
    # nextln: 000b73: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000b76: 85 c0                           test eax, eax
    # nextln: 000b78: 0f 84 10 00 00 00               je 0xb8e
    # nextln: 000b7e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000b82: 83 c0 01                        add eax, 1
    # nextln: 000b85: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000b89: e9 0b 00 00 00                  jmp 0xb99
    # nextln: 000b8e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000b92: 83 c0 01                        add eax, 1
    # nextln: 000b95: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000b99: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000b9e: 48 89 c1                        mov rcx, rax
    # nextln: 000ba1: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000ba5: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000ba9: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000bab: 48 63 ca                        movsxd rcx, edx
    # nextln: 000bae: 48 3b cf                        cmp rcx, rdi
    # nextln: 000bb1: 0f 8d bf 3b 00 00               jge 0x4776
    # nextln: 000bb7: 4c 89 f2                        mov rdx, r14
    # nextln: 000bba: 48 0f af d1                     imul rdx, rcx
    # nextln: 000bbe: 48 89 d9                        mov rcx, rbx
    # nextln: 000bc1: 48 03 ca                        add rcx, rdx
    # nextln: 000bc4: 48 03 c1                        add rax, rcx
    # nextln: 000bc7: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000bca: 85 c0                           test eax, eax
    # nextln: 000bcc: 0f 84 10 00 00 00               je 0xbe2
    # nextln: 000bd2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000bd6: 83 c0 01                        add eax, 1
    # nextln: 000bd9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000bdd: e9 0b 00 00 00                  jmp 0xbed
    # nextln: 000be2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000be6: 83 c0 01                        add eax, 1
    # nextln: 000be9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000bed: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000bf2: 48 89 c1                        mov rcx, rax
    # nextln: 000bf5: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000bf9: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000bfd: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000bff: 48 63 ca                        movsxd rcx, edx
    # nextln: 000c02: 48 3b cf                        cmp rcx, rdi
    # nextln: 000c05: 0f 8d 5d 3b 00 00               jge 0x4768
    # nextln: 000c0b: 4c 89 f2                        mov rdx, r14
    # nextln: 000c0e: 48 0f af d1                     imul rdx, rcx
    # nextln: 000c12: 48 89 d9                        mov rcx, rbx
    # nextln: 000c15: 48 03 ca                        add rcx, rdx
    # nextln: 000c18: 48 03 c1                        add rax, rcx
    # nextln: 000c1b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000c1e: 85 c0                           test eax, eax
    # nextln: 000c20: 0f 84 10 00 00 00               je 0xc36
    # nextln: 000c26: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000c2a: 83 c0 01                        add eax, 1
    # nextln: 000c2d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000c31: e9 0b 00 00 00                  jmp 0xc41
    # nextln: 000c36: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000c3a: 83 c0 01                        add eax, 1
    # nextln: 000c3d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000c41: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000c46: 48 89 c1                        mov rcx, rax
    # nextln: 000c49: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000c4d: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000c51: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000c53: 48 63 ca                        movsxd rcx, edx
    # nextln: 000c56: 48 3b cf                        cmp rcx, rdi
    # nextln: 000c59: 0f 8d fb 3a 00 00               jge 0x475a
    # nextln: 000c5f: 4c 89 f2                        mov rdx, r14
    # nextln: 000c62: 48 0f af d1                     imul rdx, rcx
    # nextln: 000c66: 48 89 d9                        mov rcx, rbx
    # nextln: 000c69: 48 03 ca                        add rcx, rdx
    # nextln: 000c6c: 48 03 c1                        add rax, rcx
    # nextln: 000c6f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000c72: 85 c0                           test eax, eax
    # nextln: 000c74: 0f 84 10 00 00 00               je 0xc8a
    # nextln: 000c7a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000c7e: 83 c0 01                        add eax, 1
    # nextln: 000c81: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000c85: e9 0b 00 00 00                  jmp 0xc95
    # nextln: 000c8a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000c8e: 83 c0 01                        add eax, 1
    # nextln: 000c91: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000c95: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000c9a: 48 89 c1                        mov rcx, rax
    # nextln: 000c9d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000ca1: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000ca5: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000ca7: 48 63 ca                        movsxd rcx, edx
    # nextln: 000caa: 48 3b cf                        cmp rcx, rdi
    # nextln: 000cad: 0f 8d 99 3a 00 00               jge 0x474c
    # nextln: 000cb3: 4c 89 f2                        mov rdx, r14
    # nextln: 000cb6: 48 0f af d1                     imul rdx, rcx
    # nextln: 000cba: 48 89 d9                        mov rcx, rbx
    # nextln: 000cbd: 48 03 ca                        add rcx, rdx
    # nextln: 000cc0: 48 03 c1                        add rax, rcx
    # nextln: 000cc3: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000cc6: 85 c0                           test eax, eax
    # nextln: 000cc8: 0f 84 10 00 00 00               je 0xcde
    # nextln: 000cce: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000cd2: 83 c0 01                        add eax, 1
    # nextln: 000cd5: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000cd9: e9 0b 00 00 00                  jmp 0xce9
    # nextln: 000cde: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000ce2: 83 c0 01                        add eax, 1
    # nextln: 000ce5: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000ce9: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000cee: 48 89 c1                        mov rcx, rax
    # nextln: 000cf1: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000cf5: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000cf9: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000cfb: 48 63 ca                        movsxd rcx, edx
    # nextln: 000cfe: 48 3b cf                        cmp rcx, rdi
    # nextln: 000d01: 0f 8d 37 3a 00 00               jge 0x473e
    # nextln: 000d07: 4c 89 f2                        mov rdx, r14
    # nextln: 000d0a: 48 0f af d1                     imul rdx, rcx
    # nextln: 000d0e: 48 89 d9                        mov rcx, rbx
    # nextln: 000d11: 48 03 ca                        add rcx, rdx
    # nextln: 000d14: 48 03 c1                        add rax, rcx
    # nextln: 000d17: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000d1a: 85 c0                           test eax, eax
    # nextln: 000d1c: 0f 84 10 00 00 00               je 0xd32
    # nextln: 000d22: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000d26: 83 c0 01                        add eax, 1
    # nextln: 000d29: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000d2d: e9 0b 00 00 00                  jmp 0xd3d
    # nextln: 000d32: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000d36: 83 c0 01                        add eax, 1
    # nextln: 000d39: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000d3d: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000d41: 83 c0 01                        add eax, 1
    # nextln: 000d44: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000d48: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000d4c: 83 c0 01                        add eax, 1
    # nextln: 000d4f: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000d53: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 000d58: 85 c0                           test eax, eax
    # nextln: 000d5a: 0f 84 10 00 00 00               je 0xd70
    # nextln: 000d60: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000d64: 83 c0 01                        add eax, 1
    # nextln: 000d67: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000d6b: e9 0b 00 00 00                  jmp 0xd7b
    # nextln: 000d70: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000d74: 83 c0 01                        add eax, 1
    # nextln: 000d77: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000d7b: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 000d80: 85 c0                           test eax, eax
    # nextln: 000d82: 0f 84 10 00 00 00               je 0xd98
    # nextln: 000d88: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000d8c: 83 c0 01                        add eax, 1
    # nextln: 000d8f: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000d93: e9 0b 00 00 00                  jmp 0xda3
    # nextln: 000d98: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000d9c: 83 c0 01                        add eax, 1
    # nextln: 000d9f: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000da3: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000da7: 48 83 c0 20                     add rax, 0x20
    # nextln: 000dab: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000dae: 85 c0                           test eax, eax
    # nextln: 000db0: 0f 84 10 00 00 00               je 0xdc6
    # nextln: 000db6: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000dba: 83 c0 01                        add eax, 1
    # nextln: 000dbd: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000dc1: e9 0b 00 00 00                  jmp 0xdd1
    # nextln: 000dc6: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000dca: 83 c0 01                        add eax, 1
    # nextln: 000dcd: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000dd1: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000ddb: ff d0                           call rax
    # nextln: 000ddd: 85 c0                           test eax, eax
    # nextln: 000ddf: 0f 84 10 00 00 00               je 0xdf5
    # nextln: 000de5: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000de9: 83 c0 01                        add eax, 1
    # nextln: 000dec: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000df0: e9 0b 00 00 00                  jmp 0xe00
    # nextln: 000df5: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000df9: 83 c0 01                        add eax, 1
    # nextln: 000dfc: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000e00: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000e05: 48 89 c1                        mov rcx, rax
    # nextln: 000e08: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000e0c: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000e10: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000e12: 48 63 ca                        movsxd rcx, edx
    # nextln: 000e15: 48 3b cf                        cmp rcx, rdi
    # nextln: 000e18: 0f 8d 12 39 00 00               jge 0x4730
    # nextln: 000e1e: 4c 89 f2                        mov rdx, r14
    # nextln: 000e21: 48 0f af d1                     imul rdx, rcx
    # nextln: 000e25: 48 89 d9                        mov rcx, rbx
    # nextln: 000e28: 48 03 ca                        add rcx, rdx
    # nextln: 000e2b: 48 03 c1                        add rax, rcx
    # nextln: 000e2e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000e31: 85 c0                           test eax, eax
    # nextln: 000e33: 0f 84 10 00 00 00               je 0xe49
    # nextln: 000e39: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000e3d: 83 c0 01                        add eax, 1
    # nextln: 000e40: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000e44: e9 0b 00 00 00                  jmp 0xe54
    # nextln: 000e49: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000e4d: 83 c0 01                        add eax, 1
    # nextln: 000e50: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000e54: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000e59: 48 89 c1                        mov rcx, rax
    # nextln: 000e5c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000e60: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000e64: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000e66: 48 63 ca                        movsxd rcx, edx
    # nextln: 000e69: 48 3b cf                        cmp rcx, rdi
    # nextln: 000e6c: 0f 8d b0 38 00 00               jge 0x4722
    # nextln: 000e72: 4c 89 f2                        mov rdx, r14
    # nextln: 000e75: 48 0f af d1                     imul rdx, rcx
    # nextln: 000e79: 48 89 d9                        mov rcx, rbx
    # nextln: 000e7c: 48 03 ca                        add rcx, rdx
    # nextln: 000e7f: 48 03 c1                        add rax, rcx
    # nextln: 000e82: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000e85: 85 c0                           test eax, eax
    # nextln: 000e87: 0f 84 10 00 00 00               je 0xe9d
    # nextln: 000e8d: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000e91: 83 c0 01                        add eax, 1
    # nextln: 000e94: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000e98: e9 0b 00 00 00                  jmp 0xea8
    # nextln: 000e9d: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000ea1: 83 c0 01                        add eax, 1
    # nextln: 000ea4: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000ea8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000eac: 83 c0 01                        add eax, 1
    # nextln: 000eaf: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000eb3: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000eb7: 83 c0 01                        add eax, 1
    # nextln: 000eba: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000ebe: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 000ec3: 85 c0                           test eax, eax
    # nextln: 000ec5: 0f 84 10 00 00 00               je 0xedb
    # nextln: 000ecb: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000ecf: 83 c0 01                        add eax, 1
    # nextln: 000ed2: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000ed6: e9 0b 00 00 00                  jmp 0xee6
    # nextln: 000edb: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000edf: 83 c0 01                        add eax, 1
    # nextln: 000ee2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000ee6: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 000eeb: 85 c0                           test eax, eax
    # nextln: 000eed: 0f 84 10 00 00 00               je 0xf03
    # nextln: 000ef3: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000ef7: 83 c0 01                        add eax, 1
    # nextln: 000efa: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000efe: e9 0b 00 00 00                  jmp 0xf0e
    # nextln: 000f03: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000f07: 83 c0 01                        add eax, 1
    # nextln: 000f0a: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000f0e: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000f12: 48 83 c0 20                     add rax, 0x20
    # nextln: 000f16: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000f19: 85 c0                           test eax, eax
    # nextln: 000f1b: 0f 84 10 00 00 00               je 0xf31
    # nextln: 000f21: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000f25: 83 c0 01                        add eax, 1
    # nextln: 000f28: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000f2c: e9 0b 00 00 00                  jmp 0xf3c
    # nextln: 000f31: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000f35: 83 c0 01                        add eax, 1
    # nextln: 000f38: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000f3c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000f46: ff d0                           call rax
    # nextln: 000f48: 85 c0                           test eax, eax
    # nextln: 000f4a: 0f 84 10 00 00 00               je 0xf60
    # nextln: 000f50: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000f54: 83 c0 01                        add eax, 1
    # nextln: 000f57: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000f5b: e9 0b 00 00 00                  jmp 0xf6b
    # nextln: 000f60: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000f64: 83 c0 01                        add eax, 1
    # nextln: 000f67: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000f6b: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000f70: 48 89 c1                        mov rcx, rax
    # nextln: 000f73: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000f77: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000f7b: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000f7d: 48 63 ca                        movsxd rcx, edx
    # nextln: 000f80: 48 3b cf                        cmp rcx, rdi
    # nextln: 000f83: 0f 8d 8b 37 00 00               jge 0x4714
    # nextln: 000f89: 4c 89 f2                        mov rdx, r14
    # nextln: 000f8c: 48 0f af d1                     imul rdx, rcx
    # nextln: 000f90: 48 89 d9                        mov rcx, rbx
    # nextln: 000f93: 48 03 ca                        add rcx, rdx
    # nextln: 000f96: 48 03 c1                        add rax, rcx
    # nextln: 000f99: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000f9c: 85 c0                           test eax, eax
    # nextln: 000f9e: 0f 84 10 00 00 00               je 0xfb4
    # nextln: 000fa4: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000fa8: 83 c0 01                        add eax, 1
    # nextln: 000fab: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 000faf: e9 0b 00 00 00                  jmp 0xfbf
    # nextln: 000fb4: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 000fb8: 83 c0 01                        add eax, 1
    # nextln: 000fbb: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 000fbf: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000fc4: 48 89 c1                        mov rcx, rax
    # nextln: 000fc7: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000fcb: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 000fcf: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000fd1: 48 63 ca                        movsxd rcx, edx
    # nextln: 000fd4: 48 3b cf                        cmp rcx, rdi
    # nextln: 000fd7: 0f 8d 29 37 00 00               jge 0x4706
    # nextln: 000fdd: 4c 89 f2                        mov rdx, r14
    # nextln: 000fe0: 48 0f af d1                     imul rdx, rcx
    # nextln: 000fe4: 48 89 d9                        mov rcx, rbx
    # nextln: 000fe7: 48 03 ca                        add rcx, rdx
    # nextln: 000fea: 48 03 c1                        add rax, rcx
    # nextln: 000fed: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000ff0: 85 c0                           test eax, eax
    # nextln: 000ff2: 0f 84 10 00 00 00               je 0x1008
    # nextln: 000ff8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 000ffc: 83 c0 01                        add eax, 1
    # nextln: 000fff: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001003: e9 0b 00 00 00                  jmp 0x1013
    # nextln: 001008: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00100c: 83 c0 01                        add eax, 1
    # nextln: 00100f: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001013: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001017: 83 c0 01                        add eax, 1
    # nextln: 00101a: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00101e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001022: 83 c0 01                        add eax, 1
    # nextln: 001025: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001029: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 00102e: 85 c0                           test eax, eax
    # nextln: 001030: 0f 84 10 00 00 00               je 0x1046
    # nextln: 001036: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00103a: 83 c0 01                        add eax, 1
    # nextln: 00103d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001041: e9 0b 00 00 00                  jmp 0x1051
    # nextln: 001046: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00104a: 83 c0 01                        add eax, 1
    # nextln: 00104d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001051: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 001056: 85 c0                           test eax, eax
    # nextln: 001058: 0f 84 10 00 00 00               je 0x106e
    # nextln: 00105e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001062: 83 c0 01                        add eax, 1
    # nextln: 001065: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001069: e9 0b 00 00 00                  jmp 0x1079
    # nextln: 00106e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001072: 83 c0 01                        add eax, 1
    # nextln: 001075: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001079: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00107d: 48 83 c0 20                     add rax, 0x20
    # nextln: 001081: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001084: 85 c0                           test eax, eax
    # nextln: 001086: 0f 84 10 00 00 00               je 0x109c
    # nextln: 00108c: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001090: 83 c0 01                        add eax, 1
    # nextln: 001093: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001097: e9 0b 00 00 00                  jmp 0x10a7
    # nextln: 00109c: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0010a0: 83 c0 01                        add eax, 1
    # nextln: 0010a3: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0010a7: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0010b1: ff d0                           call rax
    # nextln: 0010b3: 85 c0                           test eax, eax
    # nextln: 0010b5: 0f 84 10 00 00 00               je 0x10cb
    # nextln: 0010bb: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0010bf: 83 c0 01                        add eax, 1
    # nextln: 0010c2: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0010c6: e9 0b 00 00 00                  jmp 0x10d6
    # nextln: 0010cb: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0010cf: 83 c0 01                        add eax, 1
    # nextln: 0010d2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0010d6: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0010db: 48 89 c1                        mov rcx, rax
    # nextln: 0010de: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0010e2: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 0010e6: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0010e8: 48 63 cf                        movsxd rcx, edi
    # nextln: 0010eb: 48 3b ca                        cmp rcx, rdx
    # nextln: 0010ee: 0f 8d 04 36 00 00               jge 0x46f8
    # nextln: 0010f4: 4c 89 f2                        mov rdx, r14
    # nextln: 0010f7: 48 0f af d1                     imul rdx, rcx
    # nextln: 0010fb: 48 89 d9                        mov rcx, rbx
    # nextln: 0010fe: 48 03 ca                        add rcx, rdx
    # nextln: 001101: 48 03 c1                        add rax, rcx
    # nextln: 001104: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001107: 85 c0                           test eax, eax
    # nextln: 001109: 0f 84 10 00 00 00               je 0x111f
    # nextln: 00110f: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001113: 83 c0 01                        add eax, 1
    # nextln: 001116: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00111a: e9 0b 00 00 00                  jmp 0x112a
    # nextln: 00111f: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001123: 83 c0 01                        add eax, 1
    # nextln: 001126: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00112a: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 00112f: 48 89 c1                        mov rcx, rax
    # nextln: 001132: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001136: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00113a: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00113c: 48 63 ca                        movsxd rcx, edx
    # nextln: 00113f: 48 3b cf                        cmp rcx, rdi
    # nextln: 001142: 0f 8d a2 35 00 00               jge 0x46ea
    # nextln: 001148: 4c 89 f2                        mov rdx, r14
    # nextln: 00114b: 48 0f af d1                     imul rdx, rcx
    # nextln: 00114f: 48 89 d9                        mov rcx, rbx
    # nextln: 001152: 48 03 ca                        add rcx, rdx
    # nextln: 001155: 48 03 c1                        add rax, rcx
    # nextln: 001158: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00115b: 85 c0                           test eax, eax
    # nextln: 00115d: 0f 84 10 00 00 00               je 0x1173
    # nextln: 001163: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001167: 83 c0 01                        add eax, 1
    # nextln: 00116a: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00116e: e9 0b 00 00 00                  jmp 0x117e
    # nextln: 001173: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001177: 83 c0 01                        add eax, 1
    # nextln: 00117a: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00117e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001182: 83 c0 01                        add eax, 1
    # nextln: 001185: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001189: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00118d: 83 c0 01                        add eax, 1
    # nextln: 001190: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001194: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001199: 85 c0                           test eax, eax
    # nextln: 00119b: 0f 84 10 00 00 00               je 0x11b1
    # nextln: 0011a1: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0011a5: 83 c0 01                        add eax, 1
    # nextln: 0011a8: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0011ac: e9 0b 00 00 00                  jmp 0x11bc
    # nextln: 0011b1: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0011b5: 83 c0 01                        add eax, 1
    # nextln: 0011b8: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0011bc: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 0011c1: 85 c0                           test eax, eax
    # nextln: 0011c3: 0f 84 10 00 00 00               je 0x11d9
    # nextln: 0011c9: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0011cd: 83 c0 01                        add eax, 1
    # nextln: 0011d0: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0011d4: e9 0b 00 00 00                  jmp 0x11e4
    # nextln: 0011d9: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0011dd: 83 c0 01                        add eax, 1
    # nextln: 0011e0: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0011e4: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0011e8: 48 83 c0 20                     add rax, 0x20
    # nextln: 0011ec: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0011ef: 85 c0                           test eax, eax
    # nextln: 0011f1: 0f 84 10 00 00 00               je 0x1207
    # nextln: 0011f7: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0011fb: 83 c0 01                        add eax, 1
    # nextln: 0011fe: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001202: e9 0b 00 00 00                  jmp 0x1212
    # nextln: 001207: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00120b: 83 c0 01                        add eax, 1
    # nextln: 00120e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001212: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00121c: ff d0                           call rax
    # nextln: 00121e: 85 c0                           test eax, eax
    # nextln: 001220: 0f 84 10 00 00 00               je 0x1236
    # nextln: 001226: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00122a: 83 c0 01                        add eax, 1
    # nextln: 00122d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001231: e9 0b 00 00 00                  jmp 0x1241
    # nextln: 001236: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00123a: 83 c0 01                        add eax, 1
    # nextln: 00123d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001241: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001246: 48 89 c1                        mov rcx, rax
    # nextln: 001249: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00124d: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 001251: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 001253: 48 63 cf                        movsxd rcx, edi
    # nextln: 001256: 48 3b ca                        cmp rcx, rdx
    # nextln: 001259: 0f 8d 7d 34 00 00               jge 0x46dc
    # nextln: 00125f: 4c 89 f2                        mov rdx, r14
    # nextln: 001262: 48 0f af d1                     imul rdx, rcx
    # nextln: 001266: 48 89 d9                        mov rcx, rbx
    # nextln: 001269: 48 03 ca                        add rcx, rdx
    # nextln: 00126c: 48 03 c1                        add rax, rcx
    # nextln: 00126f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001272: 85 c0                           test eax, eax
    # nextln: 001274: 0f 84 10 00 00 00               je 0x128a
    # nextln: 00127a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00127e: 83 c0 01                        add eax, 1
    # nextln: 001281: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001285: e9 0b 00 00 00                  jmp 0x1295
    # nextln: 00128a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00128e: 83 c0 01                        add eax, 1
    # nextln: 001291: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001295: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 00129a: 48 89 c1                        mov rcx, rax
    # nextln: 00129d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0012a1: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0012a5: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0012a7: 48 63 ca                        movsxd rcx, edx
    # nextln: 0012aa: 48 3b cf                        cmp rcx, rdi
    # nextln: 0012ad: 0f 8d 1b 34 00 00               jge 0x46ce
    # nextln: 0012b3: 4c 89 f2                        mov rdx, r14
    # nextln: 0012b6: 48 0f af d1                     imul rdx, rcx
    # nextln: 0012ba: 48 89 d9                        mov rcx, rbx
    # nextln: 0012bd: 48 03 ca                        add rcx, rdx
    # nextln: 0012c0: 48 03 c1                        add rax, rcx
    # nextln: 0012c3: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0012c6: 85 c0                           test eax, eax
    # nextln: 0012c8: 0f 84 10 00 00 00               je 0x12de
    # nextln: 0012ce: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0012d2: 83 c0 01                        add eax, 1
    # nextln: 0012d5: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0012d9: e9 0b 00 00 00                  jmp 0x12e9
    # nextln: 0012de: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0012e2: 83 c0 01                        add eax, 1
    # nextln: 0012e5: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0012e9: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0012ed: 83 c0 01                        add eax, 1
    # nextln: 0012f0: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0012f4: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0012f8: 83 c0 01                        add eax, 1
    # nextln: 0012fb: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0012ff: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001304: 85 c0                           test eax, eax
    # nextln: 001306: 0f 84 10 00 00 00               je 0x131c
    # nextln: 00130c: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001310: 83 c0 01                        add eax, 1
    # nextln: 001313: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001317: e9 0b 00 00 00                  jmp 0x1327
    # nextln: 00131c: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001320: 83 c0 01                        add eax, 1
    # nextln: 001323: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001327: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 00132c: 85 c0                           test eax, eax
    # nextln: 00132e: 0f 84 10 00 00 00               je 0x1344
    # nextln: 001334: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001338: 83 c0 01                        add eax, 1
    # nextln: 00133b: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00133f: e9 0b 00 00 00                  jmp 0x134f
    # nextln: 001344: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001348: 83 c0 01                        add eax, 1
    # nextln: 00134b: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00134f: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001353: 48 83 c0 20                     add rax, 0x20
    # nextln: 001357: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00135a: 85 c0                           test eax, eax
    # nextln: 00135c: 0f 84 10 00 00 00               je 0x1372
    # nextln: 001362: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001366: 83 c0 01                        add eax, 1
    # nextln: 001369: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00136d: e9 0b 00 00 00                  jmp 0x137d
    # nextln: 001372: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001376: 83 c0 01                        add eax, 1
    # nextln: 001379: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00137d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001387: ff d0                           call rax
    # nextln: 001389: 85 c0                           test eax, eax
    # nextln: 00138b: 0f 84 10 00 00 00               je 0x13a1
    # nextln: 001391: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001395: 83 c0 01                        add eax, 1
    # nextln: 001398: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00139c: e9 0b 00 00 00                  jmp 0x13ac
    # nextln: 0013a1: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0013a5: 83 c0 01                        add eax, 1
    # nextln: 0013a8: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0013ac: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0013b1: 48 89 c1                        mov rcx, rax
    # nextln: 0013b4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0013b8: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 0013bc: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0013be: 48 63 cf                        movsxd rcx, edi
    # nextln: 0013c1: 48 3b ca                        cmp rcx, rdx
    # nextln: 0013c4: 0f 8d f6 32 00 00               jge 0x46c0
    # nextln: 0013ca: 4c 89 f2                        mov rdx, r14
    # nextln: 0013cd: 48 0f af d1                     imul rdx, rcx
    # nextln: 0013d1: 48 89 d9                        mov rcx, rbx
    # nextln: 0013d4: 48 03 ca                        add rcx, rdx
    # nextln: 0013d7: 48 03 c1                        add rax, rcx
    # nextln: 0013da: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0013dd: 85 c0                           test eax, eax
    # nextln: 0013df: 0f 84 10 00 00 00               je 0x13f5
    # nextln: 0013e5: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0013e9: 83 c0 01                        add eax, 1
    # nextln: 0013ec: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0013f0: e9 0b 00 00 00                  jmp 0x1400
    # nextln: 0013f5: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0013f9: 83 c0 01                        add eax, 1
    # nextln: 0013fc: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001400: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001405: 48 89 c1                        mov rcx, rax
    # nextln: 001408: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00140c: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 001410: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001412: 48 63 ca                        movsxd rcx, edx
    # nextln: 001415: 48 3b cf                        cmp rcx, rdi
    # nextln: 001418: 0f 8d 94 32 00 00               jge 0x46b2
    # nextln: 00141e: 4c 89 f2                        mov rdx, r14
    # nextln: 001421: 48 0f af d1                     imul rdx, rcx
    # nextln: 001425: 48 89 d9                        mov rcx, rbx
    # nextln: 001428: 48 03 ca                        add rcx, rdx
    # nextln: 00142b: 48 03 c1                        add rax, rcx
    # nextln: 00142e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001431: 85 c0                           test eax, eax
    # nextln: 001433: 0f 84 10 00 00 00               je 0x1449
    # nextln: 001439: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00143d: 83 c0 01                        add eax, 1
    # nextln: 001440: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001444: e9 0b 00 00 00                  jmp 0x1454
    # nextln: 001449: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00144d: 83 c0 01                        add eax, 1
    # nextln: 001450: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001454: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001458: 83 c0 01                        add eax, 1
    # nextln: 00145b: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00145f: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001463: 83 c0 01                        add eax, 1
    # nextln: 001466: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00146a: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 00146f: 85 c0                           test eax, eax
    # nextln: 001471: 0f 84 10 00 00 00               je 0x1487
    # nextln: 001477: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00147b: 83 c0 01                        add eax, 1
    # nextln: 00147e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001482: e9 0b 00 00 00                  jmp 0x1492
    # nextln: 001487: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00148b: 83 c0 01                        add eax, 1
    # nextln: 00148e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001492: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 001497: 85 c0                           test eax, eax
    # nextln: 001499: 0f 84 10 00 00 00               je 0x14af
    # nextln: 00149f: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0014a3: 83 c0 01                        add eax, 1
    # nextln: 0014a6: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0014aa: e9 0b 00 00 00                  jmp 0x14ba
    # nextln: 0014af: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0014b3: 83 c0 01                        add eax, 1
    # nextln: 0014b6: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0014ba: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0014be: 48 83 c0 20                     add rax, 0x20
    # nextln: 0014c2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0014c5: 85 c0                           test eax, eax
    # nextln: 0014c7: 0f 84 10 00 00 00               je 0x14dd
    # nextln: 0014cd: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0014d1: 83 c0 01                        add eax, 1
    # nextln: 0014d4: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0014d8: e9 0b 00 00 00                  jmp 0x14e8
    # nextln: 0014dd: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0014e1: 83 c0 01                        add eax, 1
    # nextln: 0014e4: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0014e8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0014f2: ff d0                           call rax
    # nextln: 0014f4: 85 c0                           test eax, eax
    # nextln: 0014f6: 0f 84 10 00 00 00               je 0x150c
    # nextln: 0014fc: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001500: 83 c0 01                        add eax, 1
    # nextln: 001503: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001507: e9 0b 00 00 00                  jmp 0x1517
    # nextln: 00150c: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001510: 83 c0 01                        add eax, 1
    # nextln: 001513: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001517: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00151c: 48 89 c1                        mov rcx, rax
    # nextln: 00151f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001523: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 001527: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001529: 48 63 ca                        movsxd rcx, edx
    # nextln: 00152c: 48 3b cf                        cmp rcx, rdi
    # nextln: 00152f: 0f 8d 6f 31 00 00               jge 0x46a4
    # nextln: 001535: 4c 89 f2                        mov rdx, r14
    # nextln: 001538: 48 0f af d1                     imul rdx, rcx
    # nextln: 00153c: 48 89 d9                        mov rcx, rbx
    # nextln: 00153f: 48 03 ca                        add rcx, rdx
    # nextln: 001542: 48 03 c1                        add rax, rcx
    # nextln: 001545: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001548: 85 c0                           test eax, eax
    # nextln: 00154a: 0f 84 10 00 00 00               je 0x1560
    # nextln: 001550: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001554: 83 c0 01                        add eax, 1
    # nextln: 001557: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00155b: e9 0b 00 00 00                  jmp 0x156b
    # nextln: 001560: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001564: 83 c0 01                        add eax, 1
    # nextln: 001567: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00156b: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001570: 48 89 c1                        mov rcx, rax
    # nextln: 001573: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001577: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00157b: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00157d: 48 63 ca                        movsxd rcx, edx
    # nextln: 001580: 48 3b cf                        cmp rcx, rdi
    # nextln: 001583: 0f 8d 0d 31 00 00               jge 0x4696
    # nextln: 001589: 4c 89 f2                        mov rdx, r14
    # nextln: 00158c: 48 0f af d1                     imul rdx, rcx
    # nextln: 001590: 48 89 d9                        mov rcx, rbx
    # nextln: 001593: 48 03 ca                        add rcx, rdx
    # nextln: 001596: 48 03 c1                        add rax, rcx
    # nextln: 001599: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00159c: 85 c0                           test eax, eax
    # nextln: 00159e: 0f 84 10 00 00 00               je 0x15b4
    # nextln: 0015a4: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0015a8: 83 c0 01                        add eax, 1
    # nextln: 0015ab: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0015af: e9 0b 00 00 00                  jmp 0x15bf
    # nextln: 0015b4: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0015b8: 83 c0 01                        add eax, 1
    # nextln: 0015bb: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0015bf: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0015c3: 83 c0 01                        add eax, 1
    # nextln: 0015c6: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0015ca: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0015ce: 83 c0 01                        add eax, 1
    # nextln: 0015d1: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0015d5: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 0015da: 85 c0                           test eax, eax
    # nextln: 0015dc: 0f 84 10 00 00 00               je 0x15f2
    # nextln: 0015e2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0015e6: 83 c0 01                        add eax, 1
    # nextln: 0015e9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0015ed: e9 0b 00 00 00                  jmp 0x15fd
    # nextln: 0015f2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0015f6: 83 c0 01                        add eax, 1
    # nextln: 0015f9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0015fd: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 001602: 85 c0                           test eax, eax
    # nextln: 001604: 0f 84 10 00 00 00               je 0x161a
    # nextln: 00160a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00160e: 83 c0 01                        add eax, 1
    # nextln: 001611: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001615: e9 0b 00 00 00                  jmp 0x1625
    # nextln: 00161a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00161e: 83 c0 01                        add eax, 1
    # nextln: 001621: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001625: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001629: 48 83 c0 20                     add rax, 0x20
    # nextln: 00162d: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001630: 85 c0                           test eax, eax
    # nextln: 001632: 0f 84 10 00 00 00               je 0x1648
    # nextln: 001638: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00163c: 83 c0 01                        add eax, 1
    # nextln: 00163f: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001643: e9 0b 00 00 00                  jmp 0x1653
    # nextln: 001648: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00164c: 83 c0 01                        add eax, 1
    # nextln: 00164f: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001653: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00165d: ff d0                           call rax
    # nextln: 00165f: 85 c0                           test eax, eax
    # nextln: 001661: 0f 84 10 00 00 00               je 0x1677
    # nextln: 001667: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00166b: 83 c0 01                        add eax, 1
    # nextln: 00166e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001672: e9 0b 00 00 00                  jmp 0x1682
    # nextln: 001677: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00167b: 83 c0 01                        add eax, 1
    # nextln: 00167e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001682: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001687: 48 89 c1                        mov rcx, rax
    # nextln: 00168a: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00168e: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 001692: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 001694: 48 63 cf                        movsxd rcx, edi
    # nextln: 001697: 48 3b ca                        cmp rcx, rdx
    # nextln: 00169a: 0f 8d e8 2f 00 00               jge 0x4688
    # nextln: 0016a0: 4c 89 f2                        mov rdx, r14
    # nextln: 0016a3: 48 0f af d1                     imul rdx, rcx
    # nextln: 0016a7: 48 89 d9                        mov rcx, rbx
    # nextln: 0016aa: 48 03 ca                        add rcx, rdx
    # nextln: 0016ad: 48 03 c1                        add rax, rcx
    # nextln: 0016b0: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0016b3: 85 c0                           test eax, eax
    # nextln: 0016b5: 0f 84 10 00 00 00               je 0x16cb
    # nextln: 0016bb: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0016bf: 83 c0 01                        add eax, 1
    # nextln: 0016c2: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0016c6: e9 0b 00 00 00                  jmp 0x16d6
    # nextln: 0016cb: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0016cf: 83 c0 01                        add eax, 1
    # nextln: 0016d2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0016d6: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0016db: 48 89 c1                        mov rcx, rax
    # nextln: 0016de: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0016e2: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0016e6: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0016e8: 48 63 ca                        movsxd rcx, edx
    # nextln: 0016eb: 48 3b cf                        cmp rcx, rdi
    # nextln: 0016ee: 0f 8d 86 2f 00 00               jge 0x467a
    # nextln: 0016f4: 4c 89 f2                        mov rdx, r14
    # nextln: 0016f7: 48 0f af d1                     imul rdx, rcx
    # nextln: 0016fb: 48 89 d9                        mov rcx, rbx
    # nextln: 0016fe: 48 03 ca                        add rcx, rdx
    # nextln: 001701: 48 03 c1                        add rax, rcx
    # nextln: 001704: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001707: 85 c0                           test eax, eax
    # nextln: 001709: 0f 84 10 00 00 00               je 0x171f
    # nextln: 00170f: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001713: 83 c0 01                        add eax, 1
    # nextln: 001716: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00171a: e9 0b 00 00 00                  jmp 0x172a
    # nextln: 00171f: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001723: 83 c0 01                        add eax, 1
    # nextln: 001726: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00172a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00172e: 83 c0 01                        add eax, 1
    # nextln: 001731: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001735: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001739: 83 c0 01                        add eax, 1
    # nextln: 00173c: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001740: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001745: 85 c0                           test eax, eax
    # nextln: 001747: 0f 84 10 00 00 00               je 0x175d
    # nextln: 00174d: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001751: 83 c0 01                        add eax, 1
    # nextln: 001754: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001758: e9 0b 00 00 00                  jmp 0x1768
    # nextln: 00175d: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001761: 83 c0 01                        add eax, 1
    # nextln: 001764: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001768: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 00176d: 85 c0                           test eax, eax
    # nextln: 00176f: 0f 84 10 00 00 00               je 0x1785
    # nextln: 001775: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001779: 83 c0 01                        add eax, 1
    # nextln: 00177c: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001780: e9 0b 00 00 00                  jmp 0x1790
    # nextln: 001785: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001789: 83 c0 01                        add eax, 1
    # nextln: 00178c: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001790: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001794: 48 83 c0 20                     add rax, 0x20
    # nextln: 001798: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00179b: 85 c0                           test eax, eax
    # nextln: 00179d: 0f 84 10 00 00 00               je 0x17b3
    # nextln: 0017a3: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0017a7: 83 c0 01                        add eax, 1
    # nextln: 0017aa: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0017ae: e9 0b 00 00 00                  jmp 0x17be
    # nextln: 0017b3: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0017b7: 83 c0 01                        add eax, 1
    # nextln: 0017ba: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0017be: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0017c8: ff d0                           call rax
    # nextln: 0017ca: 85 c0                           test eax, eax
    # nextln: 0017cc: 0f 84 10 00 00 00               je 0x17e2
    # nextln: 0017d2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0017d6: 83 c0 01                        add eax, 1
    # nextln: 0017d9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0017dd: e9 0b 00 00 00                  jmp 0x17ed
    # nextln: 0017e2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0017e6: 83 c0 01                        add eax, 1
    # nextln: 0017e9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0017ed: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0017f2: 48 89 c1                        mov rcx, rax
    # nextln: 0017f5: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0017f9: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0017fd: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0017ff: 48 63 ca                        movsxd rcx, edx
    # nextln: 001802: 48 3b cf                        cmp rcx, rdi
    # nextln: 001805: 0f 8d 61 2e 00 00               jge 0x466c
    # nextln: 00180b: 4c 89 f2                        mov rdx, r14
    # nextln: 00180e: 48 0f af d1                     imul rdx, rcx
    # nextln: 001812: 48 89 d9                        mov rcx, rbx
    # nextln: 001815: 48 03 ca                        add rcx, rdx
    # nextln: 001818: 48 03 c1                        add rax, rcx
    # nextln: 00181b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00181e: 85 c0                           test eax, eax
    # nextln: 001820: 0f 84 10 00 00 00               je 0x1836
    # nextln: 001826: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00182a: 83 c0 01                        add eax, 1
    # nextln: 00182d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001831: e9 0b 00 00 00                  jmp 0x1841
    # nextln: 001836: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00183a: 83 c0 01                        add eax, 1
    # nextln: 00183d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001841: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001846: 48 89 c1                        mov rcx, rax
    # nextln: 001849: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00184d: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 001851: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001853: 48 63 ca                        movsxd rcx, edx
    # nextln: 001856: 48 3b cf                        cmp rcx, rdi
    # nextln: 001859: 0f 8d ff 2d 00 00               jge 0x465e
    # nextln: 00185f: 4c 89 f2                        mov rdx, r14
    # nextln: 001862: 48 0f af d1                     imul rdx, rcx
    # nextln: 001866: 48 89 d9                        mov rcx, rbx
    # nextln: 001869: 48 03 ca                        add rcx, rdx
    # nextln: 00186c: 48 03 c1                        add rax, rcx
    # nextln: 00186f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001872: 85 c0                           test eax, eax
    # nextln: 001874: 0f 84 10 00 00 00               je 0x188a
    # nextln: 00187a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00187e: 83 c0 01                        add eax, 1
    # nextln: 001881: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001885: e9 0b 00 00 00                  jmp 0x1895
    # nextln: 00188a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00188e: 83 c0 01                        add eax, 1
    # nextln: 001891: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001895: 45 85 ff                        test r15d, r15d
    # nextln: 001898: 0f 84 0d 00 00 00               je 0x18ab
    # nextln: 00189e: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0018a3: 48 89 c1                        mov rcx, rax
    # nextln: 0018a6: e9 08 00 00 00                  jmp 0x18b3
    # nextln: 0018ab: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0018b0: 48 89 c1                        mov rcx, rax
    # nextln: 0018b3: 85 c9                           test ecx, ecx
    # nextln: 0018b5: 0f 84 10 00 00 00               je 0x18cb
    # nextln: 0018bb: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0018bf: 83 c1 01                        add ecx, 1
    # nextln: 0018c2: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0018c6: e9 0b 00 00 00                  jmp 0x18d6
    # nextln: 0018cb: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0018cf: 83 c1 01                        add ecx, 1
    # nextln: 0018d2: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0018d6: 45 85 ff                        test r15d, r15d
    # nextln: 0018d9: 0f 84 10 00 00 00               je 0x18ef
    # nextln: 0018df: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0018e3: 83 c1 01                        add ecx, 1
    # nextln: 0018e6: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0018ea: e9 0b 00 00 00                  jmp 0x18fa
    # nextln: 0018ef: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0018f3: 83 c1 01                        add ecx, 1
    # nextln: 0018f6: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0018fa: 45 85 ff                        test r15d, r15d
    # nextln: 0018fd: 0f 84 08 00 00 00               je 0x190b
    # nextln: 001903: 48 89 c1                        mov rcx, rax
    # nextln: 001906: e9 05 00 00 00                  jmp 0x1910
    # nextln: 00190b: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 001910: 85 c9                           test ecx, ecx
    # nextln: 001912: 0f 84 10 00 00 00               je 0x1928
    # nextln: 001918: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 00191c: 83 c1 01                        add ecx, 1
    # nextln: 00191f: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001923: e9 0b 00 00 00                  jmp 0x1933
    # nextln: 001928: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00192c: 83 c1 01                        add ecx, 1
    # nextln: 00192f: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001933: 45 85 ff                        test r15d, r15d
    # nextln: 001936: 0f 84 08 00 00 00               je 0x1944
    # nextln: 00193c: 48 89 c1                        mov rcx, rax
    # nextln: 00193f: e9 05 00 00 00                  jmp 0x1949
    # nextln: 001944: 41 0f b6 4d 00                  movzx ecx, byte ptr [r13]
    # nextln: 001949: 85 c9                           test ecx, ecx
    # nextln: 00194b: 0f 84 10 00 00 00               je 0x1961
    # nextln: 001951: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001955: 83 c1 01                        add ecx, 1
    # nextln: 001958: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00195c: e9 0b 00 00 00                  jmp 0x196c
    # nextln: 001961: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001965: 83 c1 01                        add ecx, 1
    # nextln: 001968: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00196c: 45 85 ff                        test r15d, r15d
    # nextln: 00196f: 0f 84 08 00 00 00               je 0x197d
    # nextln: 001975: 48 89 c1                        mov rcx, rax
    # nextln: 001978: e9 0b 00 00 00                  jmp 0x1988
    # nextln: 00197d: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 001981: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001985: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 001988: 85 c9                           test ecx, ecx
    # nextln: 00198a: 0f 84 10 00 00 00               je 0x19a0
    # nextln: 001990: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001994: 83 c1 01                        add ecx, 1
    # nextln: 001997: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00199b: e9 0b 00 00 00                  jmp 0x19ab
    # nextln: 0019a0: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0019a4: 83 c1 01                        add ecx, 1
    # nextln: 0019a7: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0019ab: 45 85 ff                        test r15d, r15d
    # nextln: 0019ae: 0f 84 0a 00 00 00               je 0x19be
    # nextln: 0019b4: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 0019b9: e9 11 00 00 00                  jmp 0x19cf
    # nextln: 0019be: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 0019c3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0019cd: ff d0                           call rax
    # nextln: 0019cf: 85 c0                           test eax, eax
    # nextln: 0019d1: 0f 84 10 00 00 00               je 0x19e7
    # nextln: 0019d7: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0019db: 83 c0 01                        add eax, 1
    # nextln: 0019de: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0019e2: e9 0b 00 00 00                  jmp 0x19f2
    # nextln: 0019e7: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0019eb: 83 c0 01                        add eax, 1
    # nextln: 0019ee: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0019f2: 45 85 ff                        test r15d, r15d
    # nextln: 0019f5: 0f 84 0d 00 00 00               je 0x1a08
    # nextln: 0019fb: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 001a00: 48 89 c1                        mov rcx, rax
    # nextln: 001a03: e9 36 00 00 00                  jmp 0x1a3e
    # nextln: 001a08: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 001a0d: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 001a12: 48 89 ca                        mov rdx, rcx
    # nextln: 001a15: 48 83 c2 20                     add rdx, 0x20
    # nextln: 001a19: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 001a1d: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 001a1f: 48 63 d7                        movsxd rdx, edi
    # nextln: 001a22: 48 3b d6                        cmp rdx, rsi
    # nextln: 001a25: 0f 8d 25 2c 00 00               jge 0x4650
    # nextln: 001a2b: 4c 89 f7                        mov rdi, r14
    # nextln: 001a2e: 48 0f af fa                     imul rdi, rdx
    # nextln: 001a32: 48 89 da                        mov rdx, rbx
    # nextln: 001a35: 48 03 d7                        add rdx, rdi
    # nextln: 001a38: 48 03 ca                        add rcx, rdx
    # nextln: 001a3b: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 001a3e: 85 c9                           test ecx, ecx
    # nextln: 001a40: 0f 84 10 00 00 00               je 0x1a56
    # nextln: 001a46: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001a4a: 83 c1 01                        add ecx, 1
    # nextln: 001a4d: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001a51: e9 0b 00 00 00                  jmp 0x1a61
    # nextln: 001a56: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001a5a: 83 c1 01                        add ecx, 1
    # nextln: 001a5d: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001a61: 45 85 ff                        test r15d, r15d
    # nextln: 001a64: 0f 84 0d 00 00 00               je 0x1a77
    # nextln: 001a6a: 48 89 c1                        mov rcx, rax
    # nextln: 001a6d: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 001a72: e9 36 00 00 00                  jmp 0x1aad
    # nextln: 001a77: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 001a7c: 48 89 ca                        mov rdx, rcx
    # nextln: 001a7f: 48 83 c2 20                     add rdx, 0x20
    # nextln: 001a83: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 001a87: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 001a89: 48 63 d7                        movsxd rdx, edi
    # nextln: 001a8c: 48 3b d6                        cmp rdx, rsi
    # nextln: 001a8f: 0f 8d ad 2b 00 00               jge 0x4642
    # nextln: 001a95: 4c 89 f7                        mov rdi, r14
    # nextln: 001a98: 48 0f af fa                     imul rdi, rdx
    # nextln: 001a9c: 48 89 da                        mov rdx, rbx
    # nextln: 001a9f: 48 03 d7                        add rdx, rdi
    # nextln: 001aa2: 48 03 ca                        add rcx, rdx
    # nextln: 001aa5: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 001aa8: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 001aad: 85 c9                           test ecx, ecx
    # nextln: 001aaf: 0f 84 10 00 00 00               je 0x1ac5
    # nextln: 001ab5: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001ab9: 83 c0 01                        add eax, 1
    # nextln: 001abc: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001ac0: e9 0b 00 00 00                  jmp 0x1ad0
    # nextln: 001ac5: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001ac9: 83 c0 01                        add eax, 1
    # nextln: 001acc: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001ad0: 45 85 ff                        test r15d, r15d
    # nextln: 001ad3: 0f 85 10 00 00 00               jne 0x1ae9
    # nextln: 001ad9: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001add: 83 c0 01                        add eax, 1
    # nextln: 001ae0: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001ae4: e9 0b 00 00 00                  jmp 0x1af4
    # nextln: 001ae9: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001aed: 83 c0 01                        add eax, 1
    # nextln: 001af0: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001af4: 45 85 ff                        test r15d, r15d
    # nextln: 001af7: 0f 84 0d 00 00 00               je 0x1b0a
    # nextln: 001afd: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 001b02: 48 89 c1                        mov rcx, rax
    # nextln: 001b05: e9 08 00 00 00                  jmp 0x1b12
    # nextln: 001b0a: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 001b0f: 48 89 c1                        mov rcx, rax
    # nextln: 001b12: 85 c9                           test ecx, ecx
    # nextln: 001b14: 0f 84 10 00 00 00               je 0x1b2a
    # nextln: 001b1a: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001b1e: 83 c1 01                        add ecx, 1
    # nextln: 001b21: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001b25: e9 0b 00 00 00                  jmp 0x1b35
    # nextln: 001b2a: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001b2e: 83 c1 01                        add ecx, 1
    # nextln: 001b31: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001b35: 45 85 ff                        test r15d, r15d
    # nextln: 001b38: 0f 84 08 00 00 00               je 0x1b46
    # nextln: 001b3e: 48 89 c1                        mov rcx, rax
    # nextln: 001b41: e9 05 00 00 00                  jmp 0x1b4b
    # nextln: 001b46: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 001b4b: 85 c9                           test ecx, ecx
    # nextln: 001b4d: 0f 84 10 00 00 00               je 0x1b63
    # nextln: 001b53: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001b57: 83 c1 01                        add ecx, 1
    # nextln: 001b5a: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001b5e: e9 0b 00 00 00                  jmp 0x1b6e
    # nextln: 001b63: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001b67: 83 c1 01                        add ecx, 1
    # nextln: 001b6a: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001b6e: 45 85 ff                        test r15d, r15d
    # nextln: 001b71: 0f 84 08 00 00 00               je 0x1b7f
    # nextln: 001b77: 48 89 c1                        mov rcx, rax
    # nextln: 001b7a: e9 05 00 00 00                  jmp 0x1b84
    # nextln: 001b7f: 41 0f b6 4d 00                  movzx ecx, byte ptr [r13]
    # nextln: 001b84: 85 c9                           test ecx, ecx
    # nextln: 001b86: 0f 84 10 00 00 00               je 0x1b9c
    # nextln: 001b8c: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001b90: 83 c1 01                        add ecx, 1
    # nextln: 001b93: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001b97: e9 0b 00 00 00                  jmp 0x1ba7
    # nextln: 001b9c: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001ba0: 83 c1 01                        add ecx, 1
    # nextln: 001ba3: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001ba7: 45 85 ff                        test r15d, r15d
    # nextln: 001baa: 0f 84 08 00 00 00               je 0x1bb8
    # nextln: 001bb0: 48 89 c1                        mov rcx, rax
    # nextln: 001bb3: e9 0b 00 00 00                  jmp 0x1bc3
    # nextln: 001bb8: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 001bbc: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001bc0: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 001bc3: 85 c9                           test ecx, ecx
    # nextln: 001bc5: 0f 84 10 00 00 00               je 0x1bdb
    # nextln: 001bcb: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001bcf: 83 c1 01                        add ecx, 1
    # nextln: 001bd2: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001bd6: e9 0b 00 00 00                  jmp 0x1be6
    # nextln: 001bdb: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001bdf: 83 c1 01                        add ecx, 1
    # nextln: 001be2: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001be6: 45 85 ff                        test r15d, r15d
    # nextln: 001be9: 0f 84 0a 00 00 00               je 0x1bf9
    # nextln: 001bef: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 001bf4: e9 11 00 00 00                  jmp 0x1c0a
    # nextln: 001bf9: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 001bfe: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001c08: ff d0                           call rax
    # nextln: 001c0a: 85 c0                           test eax, eax
    # nextln: 001c0c: 0f 84 10 00 00 00               je 0x1c22
    # nextln: 001c12: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001c16: 83 c0 01                        add eax, 1
    # nextln: 001c19: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001c1d: e9 0b 00 00 00                  jmp 0x1c2d
    # nextln: 001c22: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001c26: 83 c0 01                        add eax, 1
    # nextln: 001c29: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001c2d: 45 85 ff                        test r15d, r15d
    # nextln: 001c30: 0f 84 0d 00 00 00               je 0x1c43
    # nextln: 001c36: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 001c3b: 48 89 c1                        mov rcx, rax
    # nextln: 001c3e: e9 36 00 00 00                  jmp 0x1c79
    # nextln: 001c43: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 001c48: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 001c4d: 48 89 ca                        mov rdx, rcx
    # nextln: 001c50: 48 83 c2 20                     add rdx, 0x20
    # nextln: 001c54: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 001c58: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 001c5a: 48 63 d7                        movsxd rdx, edi
    # nextln: 001c5d: 48 3b d6                        cmp rdx, rsi
    # nextln: 001c60: 0f 8d ce 29 00 00               jge 0x4634
    # nextln: 001c66: 4c 89 f7                        mov rdi, r14
    # nextln: 001c69: 48 0f af fa                     imul rdi, rdx
    # nextln: 001c6d: 48 89 da                        mov rdx, rbx
    # nextln: 001c70: 48 03 d7                        add rdx, rdi
    # nextln: 001c73: 48 03 ca                        add rcx, rdx
    # nextln: 001c76: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 001c79: 85 c9                           test ecx, ecx
    # nextln: 001c7b: 0f 84 10 00 00 00               je 0x1c91
    # nextln: 001c81: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001c85: 83 c1 01                        add ecx, 1
    # nextln: 001c88: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001c8c: e9 0b 00 00 00                  jmp 0x1c9c
    # nextln: 001c91: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001c95: 83 c1 01                        add ecx, 1
    # nextln: 001c98: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001c9c: 45 85 ff                        test r15d, r15d
    # nextln: 001c9f: 0f 84 08 00 00 00               je 0x1cad
    # nextln: 001ca5: 48 89 c1                        mov rcx, rax
    # nextln: 001ca8: e9 31 00 00 00                  jmp 0x1cde
    # nextln: 001cad: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 001cb2: 48 89 ca                        mov rdx, rcx
    # nextln: 001cb5: 48 83 c2 20                     add rdx, 0x20
    # nextln: 001cb9: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 001cbd: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 001cbf: 48 63 d7                        movsxd rdx, edi
    # nextln: 001cc2: 48 3b d6                        cmp rdx, rsi
    # nextln: 001cc5: 0f 8d 5b 29 00 00               jge 0x4626
    # nextln: 001ccb: 4c 89 f7                        mov rdi, r14
    # nextln: 001cce: 48 0f af fa                     imul rdi, rdx
    # nextln: 001cd2: 48 89 da                        mov rdx, rbx
    # nextln: 001cd5: 48 03 d7                        add rdx, rdi
    # nextln: 001cd8: 48 03 ca                        add rcx, rdx
    # nextln: 001cdb: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 001cde: 85 c9                           test ecx, ecx
    # nextln: 001ce0: 0f 84 10 00 00 00               je 0x1cf6
    # nextln: 001ce6: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001cea: 83 c1 01                        add ecx, 1
    # nextln: 001ced: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001cf1: e9 0b 00 00 00                  jmp 0x1d01
    # nextln: 001cf6: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001cfa: 83 c1 01                        add ecx, 1
    # nextln: 001cfd: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001d01: 45 85 ff                        test r15d, r15d
    # nextln: 001d04: 0f 84 0a 00 00 00               je 0x1d14
    # nextln: 001d0a: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 001d0f: e9 05 00 00 00                  jmp 0x1d19
    # nextln: 001d14: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 001d19: 85 c9                           test ecx, ecx
    # nextln: 001d1b: 0f 84 10 00 00 00               je 0x1d31
    # nextln: 001d21: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001d25: 83 c1 01                        add ecx, 1
    # nextln: 001d28: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001d2c: e9 0b 00 00 00                  jmp 0x1d3c
    # nextln: 001d31: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001d35: 83 c1 01                        add ecx, 1
    # nextln: 001d38: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001d3c: 45 85 ff                        test r15d, r15d
    # nextln: 001d3f: 0f 84 0f 00 00 00               je 0x1d54
    # nextln: 001d45: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 001d4a: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 001d4f: e9 08 00 00 00                  jmp 0x1d5c
    # nextln: 001d54: 48 89 c1                        mov rcx, rax
    # nextln: 001d57: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 001d5c: 85 c9                           test ecx, ecx
    # nextln: 001d5e: 0f 84 10 00 00 00               je 0x1d74
    # nextln: 001d64: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001d68: 83 c0 01                        add eax, 1
    # nextln: 001d6b: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001d6f: e9 0b 00 00 00                  jmp 0x1d7f
    # nextln: 001d74: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001d78: 83 c0 01                        add eax, 1
    # nextln: 001d7b: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001d7f: 45 85 ff                        test r15d, r15d
    # nextln: 001d82: 0f 84 0a 00 00 00               je 0x1d92
    # nextln: 001d88: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001d8d: e9 05 00 00 00                  jmp 0x1d97
    # nextln: 001d92: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001d97: 85 c0                           test eax, eax
    # nextln: 001d99: 0f 84 10 00 00 00               je 0x1daf
    # nextln: 001d9f: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001da3: 83 c0 01                        add eax, 1
    # nextln: 001da6: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001daa: e9 0b 00 00 00                  jmp 0x1dba
    # nextln: 001daf: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001db3: 83 c0 01                        add eax, 1
    # nextln: 001db6: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001dba: 45 85 ff                        test r15d, r15d
    # nextln: 001dbd: 0f 84 0a 00 00 00               je 0x1dcd
    # nextln: 001dc3: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001dc8: e9 05 00 00 00                  jmp 0x1dd2
    # nextln: 001dcd: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 001dd2: 85 c0                           test eax, eax
    # nextln: 001dd4: 0f 84 10 00 00 00               je 0x1dea
    # nextln: 001dda: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001dde: 83 c0 01                        add eax, 1
    # nextln: 001de1: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001de5: e9 0b 00 00 00                  jmp 0x1df5
    # nextln: 001dea: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001dee: 83 c0 01                        add eax, 1
    # nextln: 001df1: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001df5: 45 85 ff                        test r15d, r15d
    # nextln: 001df8: 0f 84 0a 00 00 00               je 0x1e08
    # nextln: 001dfe: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001e03: e9 0b 00 00 00                  jmp 0x1e13
    # nextln: 001e08: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001e0c: 48 83 c0 20                     add rax, 0x20
    # nextln: 001e10: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001e13: 85 c0                           test eax, eax
    # nextln: 001e15: 0f 84 10 00 00 00               je 0x1e2b
    # nextln: 001e1b: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001e1f: 83 c0 01                        add eax, 1
    # nextln: 001e22: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001e26: e9 0b 00 00 00                  jmp 0x1e36
    # nextln: 001e2b: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001e2f: 83 c0 01                        add eax, 1
    # nextln: 001e32: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001e36: 45 85 ff                        test r15d, r15d
    # nextln: 001e39: 0f 84 0a 00 00 00               je 0x1e49
    # nextln: 001e3f: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001e44: e9 0c 00 00 00                  jmp 0x1e55
    # nextln: 001e49: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001e53: ff d0                           call rax
    # nextln: 001e55: 85 c0                           test eax, eax
    # nextln: 001e57: 0f 84 10 00 00 00               je 0x1e6d
    # nextln: 001e5d: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001e61: 83 c0 01                        add eax, 1
    # nextln: 001e64: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001e68: e9 0b 00 00 00                  jmp 0x1e78
    # nextln: 001e6d: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001e71: 83 c0 01                        add eax, 1
    # nextln: 001e74: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001e78: 45 85 ff                        test r15d, r15d
    # nextln: 001e7b: 0f 84 0a 00 00 00               je 0x1e8b
    # nextln: 001e81: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001e86: e9 31 00 00 00                  jmp 0x1ebc
    # nextln: 001e8b: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001e90: 48 89 c1                        mov rcx, rax
    # nextln: 001e93: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001e97: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 001e9b: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001e9d: 48 63 ca                        movsxd rcx, edx
    # nextln: 001ea0: 48 3b cf                        cmp rcx, rdi
    # nextln: 001ea3: 0f 8d 6f 27 00 00               jge 0x4618
    # nextln: 001ea9: 4c 89 f2                        mov rdx, r14
    # nextln: 001eac: 48 0f af d1                     imul rdx, rcx
    # nextln: 001eb0: 48 89 d9                        mov rcx, rbx
    # nextln: 001eb3: 48 03 ca                        add rcx, rdx
    # nextln: 001eb6: 48 03 c1                        add rax, rcx
    # nextln: 001eb9: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001ebc: 85 c0                           test eax, eax
    # nextln: 001ebe: 0f 84 10 00 00 00               je 0x1ed4
    # nextln: 001ec4: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001ec8: 83 c0 01                        add eax, 1
    # nextln: 001ecb: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001ecf: e9 0b 00 00 00                  jmp 0x1edf
    # nextln: 001ed4: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001ed8: 83 c0 01                        add eax, 1
    # nextln: 001edb: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001edf: 45 85 ff                        test r15d, r15d
    # nextln: 001ee2: 0f 84 0a 00 00 00               je 0x1ef2
    # nextln: 001ee8: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 001eed: e9 31 00 00 00                  jmp 0x1f23
    # nextln: 001ef2: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001ef7: 48 89 c1                        mov rcx, rax
    # nextln: 001efa: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001efe: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 001f02: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001f04: 48 63 ca                        movsxd rcx, edx
    # nextln: 001f07: 48 3b cf                        cmp rcx, rdi
    # nextln: 001f0a: 0f 8d fa 26 00 00               jge 0x460a
    # nextln: 001f10: 4c 89 f2                        mov rdx, r14
    # nextln: 001f13: 48 0f af d1                     imul rdx, rcx
    # nextln: 001f17: 48 89 d9                        mov rcx, rbx
    # nextln: 001f1a: 48 03 ca                        add rcx, rdx
    # nextln: 001f1d: 48 03 c1                        add rax, rcx
    # nextln: 001f20: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001f23: 85 c0                           test eax, eax
    # nextln: 001f25: 0f 84 10 00 00 00               je 0x1f3b
    # nextln: 001f2b: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 001f2f: 83 c0 01                        add eax, 1
    # nextln: 001f32: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 001f36: e9 0b 00 00 00                  jmp 0x1f46
    # nextln: 001f3b: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 001f3f: 83 c0 01                        add eax, 1
    # nextln: 001f42: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 001f46: 45 85 ff                        test r15d, r15d
    # nextln: 001f49: 0f 84 0b 00 00 00               je 0x1f5a
    # nextln: 001f4f: 4c 89 e8                        mov rax, r13
    # nextln: 001f52: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 001f55: e9 08 00 00 00                  jmp 0x1f62
    # nextln: 001f5a: 4c 89 e8                        mov rax, r13
    # nextln: 001f5d: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 001f62: 85 c9                           test ecx, ecx
    # nextln: 001f64: 0f 84 10 00 00 00               je 0x1f7a
    # nextln: 001f6a: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001f6e: 83 c1 01                        add ecx, 1
    # nextln: 001f71: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001f75: e9 0b 00 00 00                  jmp 0x1f85
    # nextln: 001f7a: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001f7e: 83 c1 01                        add ecx, 1
    # nextln: 001f81: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001f85: 45 85 ff                        test r15d, r15d
    # nextln: 001f88: 0f 84 08 00 00 00               je 0x1f96
    # nextln: 001f8e: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 001f91: e9 05 00 00 00                  jmp 0x1f9b
    # nextln: 001f96: 48 8b 4c 24 20                  mov rcx, qword ptr [rsp + 0x20]
    # nextln: 001f9b: 85 c9                           test ecx, ecx
    # nextln: 001f9d: 0f 84 10 00 00 00               je 0x1fb3
    # nextln: 001fa3: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001fa7: 83 c1 01                        add ecx, 1
    # nextln: 001faa: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001fae: e9 0b 00 00 00                  jmp 0x1fbe
    # nextln: 001fb3: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001fb7: 83 c1 01                        add ecx, 1
    # nextln: 001fba: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001fbe: 45 85 ff                        test r15d, r15d
    # nextln: 001fc1: 0f 84 08 00 00 00               je 0x1fcf
    # nextln: 001fc7: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 001fca: e9 05 00 00 00                  jmp 0x1fd4
    # nextln: 001fcf: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 001fd4: 85 c9                           test ecx, ecx
    # nextln: 001fd6: 0f 84 10 00 00 00               je 0x1fec
    # nextln: 001fdc: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 001fe0: 83 c1 01                        add ecx, 1
    # nextln: 001fe3: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 001fe7: e9 0b 00 00 00                  jmp 0x1ff7
    # nextln: 001fec: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 001ff0: 83 c1 01                        add ecx, 1
    # nextln: 001ff3: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 001ff7: 45 85 ff                        test r15d, r15d
    # nextln: 001ffa: 0f 84 08 00 00 00               je 0x2008
    # nextln: 002000: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 002003: e9 03 00 00 00                  jmp 0x200b
    # nextln: 002008: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 00200b: 85 c9                           test ecx, ecx
    # nextln: 00200d: 0f 84 10 00 00 00               je 0x2023
    # nextln: 002013: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 002017: 83 c1 01                        add ecx, 1
    # nextln: 00201a: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00201e: e9 0b 00 00 00                  jmp 0x202e
    # nextln: 002023: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 002027: 83 c1 01                        add ecx, 1
    # nextln: 00202a: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00202e: 45 85 ff                        test r15d, r15d
    # nextln: 002031: 0f 84 08 00 00 00               je 0x203f
    # nextln: 002037: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 00203a: e9 0b 00 00 00                  jmp 0x204a
    # nextln: 00203f: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 002043: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002047: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 00204a: 85 c9                           test ecx, ecx
    # nextln: 00204c: 0f 84 10 00 00 00               je 0x2062
    # nextln: 002052: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 002056: 83 c1 01                        add ecx, 1
    # nextln: 002059: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00205d: e9 0b 00 00 00                  jmp 0x206d
    # nextln: 002062: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 002066: 83 c1 01                        add ecx, 1
    # nextln: 002069: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00206d: 45 85 ff                        test r15d, r15d
    # nextln: 002070: 0f 84 0d 00 00 00               je 0x2083
    # nextln: 002076: 49 89 c5                        mov r13, rax
    # nextln: 002079: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 00207e: e9 0f 00 00 00                  jmp 0x2092
    # nextln: 002083: 49 89 c5                        mov r13, rax
    # nextln: 002086: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002090: ff d0                           call rax
    # nextln: 002092: 85 c0                           test eax, eax
    # nextln: 002094: 0f 84 10 00 00 00               je 0x20aa
    # nextln: 00209a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00209e: 83 c0 01                        add eax, 1
    # nextln: 0020a1: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0020a5: e9 0b 00 00 00                  jmp 0x20b5
    # nextln: 0020aa: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0020ae: 83 c0 01                        add eax, 1
    # nextln: 0020b1: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0020b5: 45 85 ff                        test r15d, r15d
    # nextln: 0020b8: 0f 84 0a 00 00 00               je 0x20c8
    # nextln: 0020be: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 0020c3: e9 31 00 00 00                  jmp 0x20f9
    # nextln: 0020c8: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0020cd: 48 89 c1                        mov rcx, rax
    # nextln: 0020d0: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0020d4: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0020d8: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0020da: 48 63 ca                        movsxd rcx, edx
    # nextln: 0020dd: 48 3b cf                        cmp rcx, rdi
    # nextln: 0020e0: 0f 8d 16 25 00 00               jge 0x45fc
    # nextln: 0020e6: 4c 89 f2                        mov rdx, r14
    # nextln: 0020e9: 48 0f af d1                     imul rdx, rcx
    # nextln: 0020ed: 48 89 d9                        mov rcx, rbx
    # nextln: 0020f0: 48 03 ca                        add rcx, rdx
    # nextln: 0020f3: 48 03 c1                        add rax, rcx
    # nextln: 0020f6: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0020f9: 85 c0                           test eax, eax
    # nextln: 0020fb: 0f 84 10 00 00 00               je 0x2111
    # nextln: 002101: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002105: 83 c0 01                        add eax, 1
    # nextln: 002108: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00210c: e9 0b 00 00 00                  jmp 0x211c
    # nextln: 002111: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002115: 83 c0 01                        add eax, 1
    # nextln: 002118: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00211c: 45 85 ff                        test r15d, r15d
    # nextln: 00211f: 0f 84 0a 00 00 00               je 0x212f
    # nextln: 002125: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 00212a: e9 31 00 00 00                  jmp 0x2160
    # nextln: 00212f: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002134: 48 89 c1                        mov rcx, rax
    # nextln: 002137: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00213b: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00213f: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002141: 48 63 ca                        movsxd rcx, edx
    # nextln: 002144: 48 3b cf                        cmp rcx, rdi
    # nextln: 002147: 0f 8d a1 24 00 00               jge 0x45ee
    # nextln: 00214d: 4c 89 f2                        mov rdx, r14
    # nextln: 002150: 48 0f af d1                     imul rdx, rcx
    # nextln: 002154: 48 89 d9                        mov rcx, rbx
    # nextln: 002157: 48 03 ca                        add rcx, rdx
    # nextln: 00215a: 48 03 c1                        add rax, rcx
    # nextln: 00215d: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002160: 85 c0                           test eax, eax
    # nextln: 002162: 0f 84 10 00 00 00               je 0x2178
    # nextln: 002168: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00216c: 83 c0 01                        add eax, 1
    # nextln: 00216f: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002173: e9 0b 00 00 00                  jmp 0x2183
    # nextln: 002178: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00217c: 83 c0 01                        add eax, 1
    # nextln: 00217f: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002183: 45 85 ff                        test r15d, r15d
    # nextln: 002186: 0f 84 10 00 00 00               je 0x219c
    # nextln: 00218c: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002190: 48 83 c0 20                     add rax, 0x20
    # nextln: 002194: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002197: e9 08 00 00 00                  jmp 0x21a4
    # nextln: 00219c: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0021a1: 48 89 c8                        mov rax, rcx
    # nextln: 0021a4: 85 c0                           test eax, eax
    # nextln: 0021a6: 0f 84 10 00 00 00               je 0x21bc
    # nextln: 0021ac: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0021b0: 83 c0 01                        add eax, 1
    # nextln: 0021b3: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0021b7: e9 0b 00 00 00                  jmp 0x21c7
    # nextln: 0021bc: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0021c0: 83 c0 01                        add eax, 1
    # nextln: 0021c3: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0021c7: 45 85 ff                        test r15d, r15d
    # nextln: 0021ca: 0f 84 10 00 00 00               je 0x21e0
    # nextln: 0021d0: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0021d4: 48 83 c0 20                     add rax, 0x20
    # nextln: 0021d8: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0021db: e9 05 00 00 00                  jmp 0x21e5
    # nextln: 0021e0: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 0021e5: 85 c0                           test eax, eax
    # nextln: 0021e7: 0f 84 10 00 00 00               je 0x21fd
    # nextln: 0021ed: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0021f1: 83 c0 01                        add eax, 1
    # nextln: 0021f4: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0021f8: e9 0b 00 00 00                  jmp 0x2208
    # nextln: 0021fd: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002201: 83 c0 01                        add eax, 1
    # nextln: 002204: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002208: 45 85 ff                        test r15d, r15d
    # nextln: 00220b: 0f 84 10 00 00 00               je 0x2221
    # nextln: 002211: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002215: 48 83 c0 20                     add rax, 0x20
    # nextln: 002219: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00221c: e9 05 00 00 00                  jmp 0x2226
    # nextln: 002221: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 002226: 85 c0                           test eax, eax
    # nextln: 002228: 0f 84 10 00 00 00               je 0x223e
    # nextln: 00222e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002232: 83 c0 01                        add eax, 1
    # nextln: 002235: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002239: e9 0b 00 00 00                  jmp 0x2249
    # nextln: 00223e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002242: 83 c0 01                        add eax, 1
    # nextln: 002245: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002249: 45 85 ff                        test r15d, r15d
    # nextln: 00224c: 0f 84 10 00 00 00               je 0x2262
    # nextln: 002252: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002256: 48 83 c0 20                     add rax, 0x20
    # nextln: 00225a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00225d: e9 05 00 00 00                  jmp 0x2267
    # nextln: 002262: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 002267: 85 c0                           test eax, eax
    # nextln: 002269: 0f 84 10 00 00 00               je 0x227f
    # nextln: 00226f: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002273: 83 c0 01                        add eax, 1
    # nextln: 002276: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00227a: e9 0b 00 00 00                  jmp 0x228a
    # nextln: 00227f: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002283: 83 c0 01                        add eax, 1
    # nextln: 002286: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00228a: 45 85 ff                        test r15d, r15d
    # nextln: 00228d: 0f 84 10 00 00 00               je 0x22a3
    # nextln: 002293: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002297: 48 83 c0 20                     add rax, 0x20
    # nextln: 00229b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00229e: e9 0b 00 00 00                  jmp 0x22ae
    # nextln: 0022a3: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0022a7: 48 83 c0 20                     add rax, 0x20
    # nextln: 0022ab: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0022ae: 85 c0                           test eax, eax
    # nextln: 0022b0: 0f 84 10 00 00 00               je 0x22c6
    # nextln: 0022b6: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0022ba: 83 c0 01                        add eax, 1
    # nextln: 0022bd: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0022c1: e9 0b 00 00 00                  jmp 0x22d1
    # nextln: 0022c6: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0022ca: 83 c0 01                        add eax, 1
    # nextln: 0022cd: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0022d1: 45 85 ff                        test r15d, r15d
    # nextln: 0022d4: 0f 84 10 00 00 00               je 0x22ea
    # nextln: 0022da: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0022de: 48 83 c0 20                     add rax, 0x20
    # nextln: 0022e2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0022e5: e9 0c 00 00 00                  jmp 0x22f6
    # nextln: 0022ea: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0022f4: ff d0                           call rax
    # nextln: 0022f6: 85 c0                           test eax, eax
    # nextln: 0022f8: 0f 84 10 00 00 00               je 0x230e
    # nextln: 0022fe: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002302: 83 c0 01                        add eax, 1
    # nextln: 002305: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002309: e9 0b 00 00 00                  jmp 0x2319
    # nextln: 00230e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002312: 83 c0 01                        add eax, 1
    # nextln: 002315: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002319: 45 85 ff                        test r15d, r15d
    # nextln: 00231c: 0f 84 10 00 00 00               je 0x2332
    # nextln: 002322: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002326: 48 83 c0 20                     add rax, 0x20
    # nextln: 00232a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00232d: e9 31 00 00 00                  jmp 0x2363
    # nextln: 002332: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002337: 48 89 c1                        mov rcx, rax
    # nextln: 00233a: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00233e: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002342: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002344: 48 63 ca                        movsxd rcx, edx
    # nextln: 002347: 48 3b cf                        cmp rcx, rdi
    # nextln: 00234a: 0f 8d 90 22 00 00               jge 0x45e0
    # nextln: 002350: 4c 89 f2                        mov rdx, r14
    # nextln: 002353: 48 0f af d1                     imul rdx, rcx
    # nextln: 002357: 48 89 d9                        mov rcx, rbx
    # nextln: 00235a: 48 03 ca                        add rcx, rdx
    # nextln: 00235d: 48 03 c1                        add rax, rcx
    # nextln: 002360: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002363: 85 c0                           test eax, eax
    # nextln: 002365: 0f 84 10 00 00 00               je 0x237b
    # nextln: 00236b: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00236f: 83 c0 01                        add eax, 1
    # nextln: 002372: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002376: e9 0b 00 00 00                  jmp 0x2386
    # nextln: 00237b: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00237f: 83 c0 01                        add eax, 1
    # nextln: 002382: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002386: 45 85 ff                        test r15d, r15d
    # nextln: 002389: 0f 84 10 00 00 00               je 0x239f
    # nextln: 00238f: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002393: 48 83 c0 20                     add rax, 0x20
    # nextln: 002397: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00239a: e9 31 00 00 00                  jmp 0x23d0
    # nextln: 00239f: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0023a4: 48 89 c1                        mov rcx, rax
    # nextln: 0023a7: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0023ab: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0023af: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0023b1: 48 63 ca                        movsxd rcx, edx
    # nextln: 0023b4: 48 3b cf                        cmp rcx, rdi
    # nextln: 0023b7: 0f 8d 15 22 00 00               jge 0x45d2
    # nextln: 0023bd: 4c 89 f2                        mov rdx, r14
    # nextln: 0023c0: 48 0f af d1                     imul rdx, rcx
    # nextln: 0023c4: 48 89 d9                        mov rcx, rbx
    # nextln: 0023c7: 48 03 ca                        add rcx, rdx
    # nextln: 0023ca: 48 03 c1                        add rax, rcx
    # nextln: 0023cd: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0023d0: 85 c0                           test eax, eax
    # nextln: 0023d2: 0f 84 10 00 00 00               je 0x23e8
    # nextln: 0023d8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0023dc: 83 c0 01                        add eax, 1
    # nextln: 0023df: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0023e3: e9 0b 00 00 00                  jmp 0x23f3
    # nextln: 0023e8: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0023ec: 83 c0 01                        add eax, 1
    # nextln: 0023ef: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0023f3: 45 85 ff                        test r15d, r15d
    # nextln: 0023f6: 0f 84 11 00 00 00               je 0x240d
    # nextln: 0023fc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002406: ff d0                           call rax
    # nextln: 002408: e9 05 00 00 00                  jmp 0x2412
    # nextln: 00240d: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 002412: 85 c0                           test eax, eax
    # nextln: 002414: 0f 84 10 00 00 00               je 0x242a
    # nextln: 00241a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00241e: 83 c0 01                        add eax, 1
    # nextln: 002421: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002425: e9 0b 00 00 00                  jmp 0x2435
    # nextln: 00242a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00242e: 83 c0 01                        add eax, 1
    # nextln: 002431: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002435: 45 85 ff                        test r15d, r15d
    # nextln: 002438: 0f 84 11 00 00 00               je 0x244f
    # nextln: 00243e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002448: ff d0                           call rax
    # nextln: 00244a: e9 05 00 00 00                  jmp 0x2454
    # nextln: 00244f: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 002454: 85 c0                           test eax, eax
    # nextln: 002456: 0f 84 10 00 00 00               je 0x246c
    # nextln: 00245c: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002460: 83 c0 01                        add eax, 1
    # nextln: 002463: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002467: e9 0b 00 00 00                  jmp 0x2477
    # nextln: 00246c: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002470: 83 c0 01                        add eax, 1
    # nextln: 002473: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002477: 45 85 ff                        test r15d, r15d
    # nextln: 00247a: 0f 84 11 00 00 00               je 0x2491
    # nextln: 002480: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00248a: ff d0                           call rax
    # nextln: 00248c: e9 05 00 00 00                  jmp 0x2496
    # nextln: 002491: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 002496: 85 c0                           test eax, eax
    # nextln: 002498: 0f 84 10 00 00 00               je 0x24ae
    # nextln: 00249e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0024a2: 83 c0 01                        add eax, 1
    # nextln: 0024a5: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0024a9: e9 0b 00 00 00                  jmp 0x24b9
    # nextln: 0024ae: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0024b2: 83 c0 01                        add eax, 1
    # nextln: 0024b5: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0024b9: 45 85 ff                        test r15d, r15d
    # nextln: 0024bc: 0f 84 16 00 00 00               je 0x24d8
    # nextln: 0024c2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0024cc: ff d0                           call rax
    # nextln: 0024ce: 4c 89 6c 24 30                  mov qword ptr [rsp + 0x30], r13
    # nextln: 0024d3: e9 0a 00 00 00                  jmp 0x24e2
    # nextln: 0024d8: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 0024dd: 4c 89 6c 24 30                  mov qword ptr [rsp + 0x30], r13
    # nextln: 0024e2: 85 c0                           test eax, eax
    # nextln: 0024e4: 0f 84 10 00 00 00               je 0x24fa
    # nextln: 0024ea: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0024ee: 83 c0 01                        add eax, 1
    # nextln: 0024f1: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0024f5: e9 0b 00 00 00                  jmp 0x2505
    # nextln: 0024fa: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0024fe: 83 c0 01                        add eax, 1
    # nextln: 002501: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002505: 45 85 ff                        test r15d, r15d
    # nextln: 002508: 0f 84 11 00 00 00               je 0x251f
    # nextln: 00250e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002518: ff d0                           call rax
    # nextln: 00251a: e9 0b 00 00 00                  jmp 0x252a
    # nextln: 00251f: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002523: 48 83 c0 20                     add rax, 0x20
    # nextln: 002527: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00252a: 85 c0                           test eax, eax
    # nextln: 00252c: 0f 84 10 00 00 00               je 0x2542
    # nextln: 002532: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002536: 83 c0 01                        add eax, 1
    # nextln: 002539: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00253d: e9 0b 00 00 00                  jmp 0x254d
    # nextln: 002542: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002546: 83 c0 01                        add eax, 1
    # nextln: 002549: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00254d: 45 85 ff                        test r15d, r15d
    # nextln: 002550: 0f 84 11 00 00 00               je 0x2567
    # nextln: 002556: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002560: ff d0                           call rax
    # nextln: 002562: e9 0c 00 00 00                  jmp 0x2573
    # nextln: 002567: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002571: ff d0                           call rax
    # nextln: 002573: 85 c0                           test eax, eax
    # nextln: 002575: 0f 84 10 00 00 00               je 0x258b
    # nextln: 00257b: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00257f: 83 c0 01                        add eax, 1
    # nextln: 002582: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002586: e9 0b 00 00 00                  jmp 0x2596
    # nextln: 00258b: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00258f: 83 c0 01                        add eax, 1
    # nextln: 002592: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002596: 45 85 ff                        test r15d, r15d
    # nextln: 002599: 0f 84 11 00 00 00               je 0x25b0
    # nextln: 00259f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0025a9: ff d0                           call rax
    # nextln: 0025ab: e9 31 00 00 00                  jmp 0x25e1
    # nextln: 0025b0: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0025b5: 48 89 c1                        mov rcx, rax
    # nextln: 0025b8: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0025bc: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 0025c0: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0025c2: 48 63 cf                        movsxd rcx, edi
    # nextln: 0025c5: 48 3b ca                        cmp rcx, rdx
    # nextln: 0025c8: 0f 8d f6 1f 00 00               jge 0x45c4
    # nextln: 0025ce: 4c 89 f2                        mov rdx, r14
    # nextln: 0025d1: 48 0f af d1                     imul rdx, rcx
    # nextln: 0025d5: 48 89 d9                        mov rcx, rbx
    # nextln: 0025d8: 48 03 ca                        add rcx, rdx
    # nextln: 0025db: 48 03 c1                        add rax, rcx
    # nextln: 0025de: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0025e1: 85 c0                           test eax, eax
    # nextln: 0025e3: 0f 84 10 00 00 00               je 0x25f9
    # nextln: 0025e9: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0025ed: 83 c0 01                        add eax, 1
    # nextln: 0025f0: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0025f4: e9 0b 00 00 00                  jmp 0x2604
    # nextln: 0025f9: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0025fd: 83 c0 01                        add eax, 1
    # nextln: 002600: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002604: 45 85 ff                        test r15d, r15d
    # nextln: 002607: 0f 84 11 00 00 00               je 0x261e
    # nextln: 00260d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002617: ff d0                           call rax
    # nextln: 002619: e9 31 00 00 00                  jmp 0x264f
    # nextln: 00261e: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002623: 48 89 c1                        mov rcx, rax
    # nextln: 002626: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00262a: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 00262e: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002630: 48 63 cf                        movsxd rcx, edi
    # nextln: 002633: 48 3b ca                        cmp rcx, rdx
    # nextln: 002636: 0f 8d 7a 1f 00 00               jge 0x45b6
    # nextln: 00263c: 4c 89 f2                        mov rdx, r14
    # nextln: 00263f: 48 0f af d1                     imul rdx, rcx
    # nextln: 002643: 48 89 d9                        mov rcx, rbx
    # nextln: 002646: 48 03 ca                        add rcx, rdx
    # nextln: 002649: 48 03 c1                        add rax, rcx
    # nextln: 00264c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00264f: 85 c0                           test eax, eax
    # nextln: 002651: 0f 84 10 00 00 00               je 0x2667
    # nextln: 002657: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00265b: 83 c0 01                        add eax, 1
    # nextln: 00265e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002662: e9 0b 00 00 00                  jmp 0x2672
    # nextln: 002667: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00266b: 83 c0 01                        add eax, 1
    # nextln: 00266e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002672: 45 85 ff                        test r15d, r15d
    # nextln: 002675: 0f 84 44 00 00 00               je 0x26bf
    # nextln: 00267b: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002680: 48 89 c1                        mov rcx, rax
    # nextln: 002683: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002687: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 00268b: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 00268d: 48 63 cf                        movsxd rcx, edi
    # nextln: 002690: 48 3b ca                        cmp rcx, rdx
    # nextln: 002693: 0f 8d 18 00 00 00               jge 0x26b1
    # nextln: 002699: 4c 89 f2                        mov rdx, r14
    # nextln: 00269c: 48 0f af d1                     imul rdx, rcx
    # nextln: 0026a0: 48 89 d9                        mov rcx, rbx
    # nextln: 0026a3: 48 03 ca                        add rcx, rdx
    # nextln: 0026a6: 48 03 c1                        add rax, rcx
    # nextln: 0026a9: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0026ac: e9 13 00 00 00                  jmp 0x26c4
    # nextln: 0026b1: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0026bb: ff d0                           call rax
    # nextln: 0026bd: 0f 0b                           ud2
    # nextln: 0026bf: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0026c4: 85 c0                           test eax, eax
    # nextln: 0026c6: 0f 84 10 00 00 00               je 0x26dc
    # nextln: 0026cc: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0026d0: 83 c0 01                        add eax, 1
    # nextln: 0026d3: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0026d7: e9 0b 00 00 00                  jmp 0x26e7
    # nextln: 0026dc: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0026e0: 83 c0 01                        add eax, 1
    # nextln: 0026e3: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0026e7: 45 85 ff                        test r15d, r15d
    # nextln: 0026ea: 0f 84 44 00 00 00               je 0x2734
    # nextln: 0026f0: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0026f5: 48 89 c1                        mov rcx, rax
    # nextln: 0026f8: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0026fc: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002700: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002702: 48 63 ca                        movsxd rcx, edx
    # nextln: 002705: 48 3b cf                        cmp rcx, rdi
    # nextln: 002708: 0f 8d 18 00 00 00               jge 0x2726
    # nextln: 00270e: 4c 89 f2                        mov rdx, r14
    # nextln: 002711: 48 0f af d1                     imul rdx, rcx
    # nextln: 002715: 48 89 d9                        mov rcx, rbx
    # nextln: 002718: 48 03 ca                        add rcx, rdx
    # nextln: 00271b: 48 03 c1                        add rax, rcx
    # nextln: 00271e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002721: e9 13 00 00 00                  jmp 0x2739
    # nextln: 002726: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002730: ff d0                           call rax
    # nextln: 002732: 0f 0b                           ud2
    # nextln: 002734: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 002739: 85 c0                           test eax, eax
    # nextln: 00273b: 0f 84 10 00 00 00               je 0x2751
    # nextln: 002741: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002745: 83 c0 01                        add eax, 1
    # nextln: 002748: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00274c: e9 0b 00 00 00                  jmp 0x275c
    # nextln: 002751: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002755: 83 c0 01                        add eax, 1
    # nextln: 002758: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00275c: 45 85 ff                        test r15d, r15d
    # nextln: 00275f: 0f 84 44 00 00 00               je 0x27a9
    # nextln: 002765: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00276a: 48 89 c1                        mov rcx, rax
    # nextln: 00276d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002771: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002775: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002777: 48 63 ca                        movsxd rcx, edx
    # nextln: 00277a: 48 3b cf                        cmp rcx, rdi
    # nextln: 00277d: 0f 8d 18 00 00 00               jge 0x279b
    # nextln: 002783: 4c 89 f2                        mov rdx, r14
    # nextln: 002786: 48 0f af d1                     imul rdx, rcx
    # nextln: 00278a: 48 89 d9                        mov rcx, rbx
    # nextln: 00278d: 48 03 ca                        add rcx, rdx
    # nextln: 002790: 48 03 c1                        add rax, rcx
    # nextln: 002793: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002796: e9 13 00 00 00                  jmp 0x27ae
    # nextln: 00279b: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0027a5: ff d0                           call rax
    # nextln: 0027a7: 0f 0b                           ud2
    # nextln: 0027a9: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 0027ae: 85 c0                           test eax, eax
    # nextln: 0027b0: 0f 84 10 00 00 00               je 0x27c6
    # nextln: 0027b6: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0027ba: 83 c0 01                        add eax, 1
    # nextln: 0027bd: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0027c1: e9 0b 00 00 00                  jmp 0x27d1
    # nextln: 0027c6: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0027ca: 83 c0 01                        add eax, 1
    # nextln: 0027cd: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0027d1: 45 85 ff                        test r15d, r15d
    # nextln: 0027d4: 0f 84 44 00 00 00               je 0x281e
    # nextln: 0027da: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0027df: 48 89 c1                        mov rcx, rax
    # nextln: 0027e2: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0027e6: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0027ea: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0027ec: 48 63 ca                        movsxd rcx, edx
    # nextln: 0027ef: 48 3b cf                        cmp rcx, rdi
    # nextln: 0027f2: 0f 8d 18 00 00 00               jge 0x2810
    # nextln: 0027f8: 4c 89 f2                        mov rdx, r14
    # nextln: 0027fb: 48 0f af d1                     imul rdx, rcx
    # nextln: 0027ff: 48 89 d9                        mov rcx, rbx
    # nextln: 002802: 48 03 ca                        add rcx, rdx
    # nextln: 002805: 48 03 c1                        add rax, rcx
    # nextln: 002808: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00280b: e9 18 00 00 00                  jmp 0x2828
    # nextln: 002810: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00281a: ff d0                           call rax
    # nextln: 00281c: 0f 0b                           ud2
    # nextln: 00281e: 4c 8b 6c 24 30                  mov r13, qword ptr [rsp + 0x30]
    # nextln: 002823: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 002828: 85 c0                           test eax, eax
    # nextln: 00282a: 0f 84 10 00 00 00               je 0x2840
    # nextln: 002830: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002834: 83 c0 01                        add eax, 1
    # nextln: 002837: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00283b: e9 0b 00 00 00                  jmp 0x284b
    # nextln: 002840: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002844: 83 c0 01                        add eax, 1
    # nextln: 002847: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00284b: 45 85 ff                        test r15d, r15d
    # nextln: 00284e: 0f 84 44 00 00 00               je 0x2898
    # nextln: 002854: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002859: 48 89 c1                        mov rcx, rax
    # nextln: 00285c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002860: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002864: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002866: 48 63 ca                        movsxd rcx, edx
    # nextln: 002869: 48 3b cf                        cmp rcx, rdi
    # nextln: 00286c: 0f 8d 18 00 00 00               jge 0x288a
    # nextln: 002872: 4c 89 f2                        mov rdx, r14
    # nextln: 002875: 48 0f af d1                     imul rdx, rcx
    # nextln: 002879: 48 89 d9                        mov rcx, rbx
    # nextln: 00287c: 48 03 ca                        add rcx, rdx
    # nextln: 00287f: 48 03 c1                        add rax, rcx
    # nextln: 002882: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002885: e9 19 00 00 00                  jmp 0x28a3
    # nextln: 00288a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002894: ff d0                           call rax
    # nextln: 002896: 0f 0b                           ud2
    # nextln: 002898: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00289c: 48 83 c0 20                     add rax, 0x20
    # nextln: 0028a0: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0028a3: 85 c0                           test eax, eax
    # nextln: 0028a5: 0f 84 10 00 00 00               je 0x28bb
    # nextln: 0028ab: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0028af: 83 c0 01                        add eax, 1
    # nextln: 0028b2: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0028b6: e9 0b 00 00 00                  jmp 0x28c6
    # nextln: 0028bb: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0028bf: 83 c0 01                        add eax, 1
    # nextln: 0028c2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0028c6: 45 85 ff                        test r15d, r15d
    # nextln: 0028c9: 0f 84 44 00 00 00               je 0x2913
    # nextln: 0028cf: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0028d4: 48 89 c1                        mov rcx, rax
    # nextln: 0028d7: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0028db: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0028df: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0028e1: 48 63 ca                        movsxd rcx, edx
    # nextln: 0028e4: 48 3b cf                        cmp rcx, rdi
    # nextln: 0028e7: 0f 8d 18 00 00 00               jge 0x2905
    # nextln: 0028ed: 4c 89 f2                        mov rdx, r14
    # nextln: 0028f0: 48 0f af d1                     imul rdx, rcx
    # nextln: 0028f4: 48 89 d9                        mov rcx, rbx
    # nextln: 0028f7: 48 03 ca                        add rcx, rdx
    # nextln: 0028fa: 48 03 c1                        add rax, rcx
    # nextln: 0028fd: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002900: e9 1a 00 00 00                  jmp 0x291f
    # nextln: 002905: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00290f: ff d0                           call rax
    # nextln: 002911: 0f 0b                           ud2
    # nextln: 002913: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00291d: ff d0                           call rax
    # nextln: 00291f: 85 c0                           test eax, eax
    # nextln: 002921: 0f 84 10 00 00 00               je 0x2937
    # nextln: 002927: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00292b: 83 c0 01                        add eax, 1
    # nextln: 00292e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002932: e9 0b 00 00 00                  jmp 0x2942
    # nextln: 002937: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00293b: 83 c0 01                        add eax, 1
    # nextln: 00293e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002942: 45 85 ff                        test r15d, r15d
    # nextln: 002945: 0f 84 44 00 00 00               je 0x298f
    # nextln: 00294b: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002950: 48 89 c1                        mov rcx, rax
    # nextln: 002953: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002957: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00295b: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00295d: 48 63 ca                        movsxd rcx, edx
    # nextln: 002960: 48 3b cf                        cmp rcx, rdi
    # nextln: 002963: 0f 8d 18 00 00 00               jge 0x2981
    # nextln: 002969: 4c 89 f2                        mov rdx, r14
    # nextln: 00296c: 48 0f af d1                     imul rdx, rcx
    # nextln: 002970: 48 89 d9                        mov rcx, rbx
    # nextln: 002973: 48 03 ca                        add rcx, rdx
    # nextln: 002976: 48 03 c1                        add rax, rcx
    # nextln: 002979: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00297c: e9 3f 00 00 00                  jmp 0x29c0
    # nextln: 002981: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00298b: ff d0                           call rax
    # nextln: 00298d: 0f 0b                           ud2
    # nextln: 00298f: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002994: 48 89 c1                        mov rcx, rax
    # nextln: 002997: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00299b: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00299f: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0029a1: 48 63 ca                        movsxd rcx, edx
    # nextln: 0029a4: 48 3b cf                        cmp rcx, rdi
    # nextln: 0029a7: 0f 8d fb 1b 00 00               jge 0x45a8
    # nextln: 0029ad: 4c 89 f2                        mov rdx, r14
    # nextln: 0029b0: 48 0f af d1                     imul rdx, rcx
    # nextln: 0029b4: 48 89 d9                        mov rcx, rbx
    # nextln: 0029b7: 48 03 ca                        add rcx, rdx
    # nextln: 0029ba: 48 03 c1                        add rax, rcx
    # nextln: 0029bd: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0029c0: 85 c0                           test eax, eax
    # nextln: 0029c2: 0f 84 10 00 00 00               je 0x29d8
    # nextln: 0029c8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0029cc: 83 c0 01                        add eax, 1
    # nextln: 0029cf: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0029d3: e9 0b 00 00 00                  jmp 0x29e3
    # nextln: 0029d8: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0029dc: 83 c0 01                        add eax, 1
    # nextln: 0029df: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0029e3: 45 85 ff                        test r15d, r15d
    # nextln: 0029e6: 0f 84 44 00 00 00               je 0x2a30
    # nextln: 0029ec: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0029f1: 48 89 c1                        mov rcx, rax
    # nextln: 0029f4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0029f8: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0029fc: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0029fe: 48 63 ca                        movsxd rcx, edx
    # nextln: 002a01: 48 3b cf                        cmp rcx, rdi
    # nextln: 002a04: 0f 8d 18 00 00 00               jge 0x2a22
    # nextln: 002a0a: 4c 89 f2                        mov rdx, r14
    # nextln: 002a0d: 48 0f af d1                     imul rdx, rcx
    # nextln: 002a11: 48 89 d9                        mov rcx, rbx
    # nextln: 002a14: 48 03 ca                        add rcx, rdx
    # nextln: 002a17: 48 03 c1                        add rax, rcx
    # nextln: 002a1a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002a1d: e9 3f 00 00 00                  jmp 0x2a61
    # nextln: 002a22: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002a2c: ff d0                           call rax
    # nextln: 002a2e: 0f 0b                           ud2
    # nextln: 002a30: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002a35: 48 89 c1                        mov rcx, rax
    # nextln: 002a38: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002a3c: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002a40: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002a42: 48 63 ca                        movsxd rcx, edx
    # nextln: 002a45: 48 3b cf                        cmp rcx, rdi
    # nextln: 002a48: 0f 8d 4c 1b 00 00               jge 0x459a
    # nextln: 002a4e: 4c 89 f2                        mov rdx, r14
    # nextln: 002a51: 48 0f af d1                     imul rdx, rcx
    # nextln: 002a55: 48 89 d9                        mov rcx, rbx
    # nextln: 002a58: 48 03 ca                        add rcx, rdx
    # nextln: 002a5b: 48 03 c1                        add rax, rcx
    # nextln: 002a5e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002a61: 85 c0                           test eax, eax
    # nextln: 002a63: 0f 84 10 00 00 00               je 0x2a79
    # nextln: 002a69: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002a6d: 83 c0 01                        add eax, 1
    # nextln: 002a70: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002a74: e9 0b 00 00 00                  jmp 0x2a84
    # nextln: 002a79: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002a7d: 83 c0 01                        add eax, 1
    # nextln: 002a80: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002a84: 45 85 ff                        test r15d, r15d
    # nextln: 002a87: 0f 84 44 00 00 00               je 0x2ad1
    # nextln: 002a8d: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002a92: 48 89 c1                        mov rcx, rax
    # nextln: 002a95: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002a99: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002a9d: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002a9f: 48 63 ca                        movsxd rcx, edx
    # nextln: 002aa2: 48 3b cf                        cmp rcx, rdi
    # nextln: 002aa5: 0f 8d 18 00 00 00               jge 0x2ac3
    # nextln: 002aab: 4c 89 f2                        mov rdx, r14
    # nextln: 002aae: 48 0f af d1                     imul rdx, rcx
    # nextln: 002ab2: 48 89 d9                        mov rcx, rbx
    # nextln: 002ab5: 48 03 ca                        add rcx, rdx
    # nextln: 002ab8: 48 03 c1                        add rax, rcx
    # nextln: 002abb: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002abe: e9 13 00 00 00                  jmp 0x2ad6
    # nextln: 002ac3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002acd: ff d0                           call rax
    # nextln: 002acf: 0f 0b                           ud2
    # nextln: 002ad1: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 002ad6: 85 c0                           test eax, eax
    # nextln: 002ad8: 0f 84 10 00 00 00               je 0x2aee
    # nextln: 002ade: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002ae2: 83 c0 01                        add eax, 1
    # nextln: 002ae5: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002ae9: e9 0b 00 00 00                  jmp 0x2af9
    # nextln: 002aee: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002af2: 83 c0 01                        add eax, 1
    # nextln: 002af5: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002af9: 45 85 ff                        test r15d, r15d
    # nextln: 002afc: 0f 84 44 00 00 00               je 0x2b46
    # nextln: 002b02: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002b07: 48 89 c1                        mov rcx, rax
    # nextln: 002b0a: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002b0e: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002b12: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002b14: 48 63 ca                        movsxd rcx, edx
    # nextln: 002b17: 48 3b cf                        cmp rcx, rdi
    # nextln: 002b1a: 0f 8d 18 00 00 00               jge 0x2b38
    # nextln: 002b20: 4c 89 f2                        mov rdx, r14
    # nextln: 002b23: 48 0f af d1                     imul rdx, rcx
    # nextln: 002b27: 48 89 d9                        mov rcx, rbx
    # nextln: 002b2a: 48 03 ca                        add rcx, rdx
    # nextln: 002b2d: 48 03 c1                        add rax, rcx
    # nextln: 002b30: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002b33: e9 13 00 00 00                  jmp 0x2b4b
    # nextln: 002b38: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002b42: ff d0                           call rax
    # nextln: 002b44: 0f 0b                           ud2
    # nextln: 002b46: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 002b4b: 85 c0                           test eax, eax
    # nextln: 002b4d: 0f 84 10 00 00 00               je 0x2b63
    # nextln: 002b53: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002b57: 83 c0 01                        add eax, 1
    # nextln: 002b5a: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002b5e: e9 0b 00 00 00                  jmp 0x2b6e
    # nextln: 002b63: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002b67: 83 c0 01                        add eax, 1
    # nextln: 002b6a: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002b6e: 45 85 ff                        test r15d, r15d
    # nextln: 002b71: 0f 84 44 00 00 00               je 0x2bbb
    # nextln: 002b77: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002b7c: 48 89 c1                        mov rcx, rax
    # nextln: 002b7f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002b83: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002b87: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002b89: 48 63 ca                        movsxd rcx, edx
    # nextln: 002b8c: 48 3b cf                        cmp rcx, rdi
    # nextln: 002b8f: 0f 8d 18 00 00 00               jge 0x2bad
    # nextln: 002b95: 4c 89 f2                        mov rdx, r14
    # nextln: 002b98: 48 0f af d1                     imul rdx, rcx
    # nextln: 002b9c: 48 89 d9                        mov rcx, rbx
    # nextln: 002b9f: 48 03 ca                        add rcx, rdx
    # nextln: 002ba2: 48 03 c1                        add rax, rcx
    # nextln: 002ba5: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002ba8: e9 13 00 00 00                  jmp 0x2bc0
    # nextln: 002bad: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002bb7: ff d0                           call rax
    # nextln: 002bb9: 0f 0b                           ud2
    # nextln: 002bbb: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 002bc0: 85 c0                           test eax, eax
    # nextln: 002bc2: 0f 84 10 00 00 00               je 0x2bd8
    # nextln: 002bc8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002bcc: 83 c0 01                        add eax, 1
    # nextln: 002bcf: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002bd3: e9 0b 00 00 00                  jmp 0x2be3
    # nextln: 002bd8: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002bdc: 83 c0 01                        add eax, 1
    # nextln: 002bdf: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002be3: 45 85 ff                        test r15d, r15d
    # nextln: 002be6: 0f 84 49 00 00 00               je 0x2c35
    # nextln: 002bec: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002bf1: 48 89 c1                        mov rcx, rax
    # nextln: 002bf4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002bf8: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002bfc: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002bfe: 48 63 ca                        movsxd rcx, edx
    # nextln: 002c01: 48 3b cf                        cmp rcx, rdi
    # nextln: 002c04: 0f 8d 1d 00 00 00               jge 0x2c27
    # nextln: 002c0a: 4c 89 f2                        mov rdx, r14
    # nextln: 002c0d: 48 0f af d1                     imul rdx, rcx
    # nextln: 002c11: 48 89 d9                        mov rcx, rbx
    # nextln: 002c14: 48 03 ca                        add rcx, rdx
    # nextln: 002c17: 48 03 c1                        add rax, rcx
    # nextln: 002c1a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002c1d: 4c 8b 6c 24 30                  mov r13, qword ptr [rsp + 0x30]
    # nextln: 002c22: e9 18 00 00 00                  jmp 0x2c3f
    # nextln: 002c27: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002c31: ff d0                           call rax
    # nextln: 002c33: 0f 0b                           ud2
    # nextln: 002c35: 4c 8b 6c 24 30                  mov r13, qword ptr [rsp + 0x30]
    # nextln: 002c3a: 41 0f b6 45 00                  movzx eax, byte ptr [r13]
    # nextln: 002c3f: 85 c0                           test eax, eax
    # nextln: 002c41: 0f 84 10 00 00 00               je 0x2c57
    # nextln: 002c47: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002c4b: 83 c0 01                        add eax, 1
    # nextln: 002c4e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002c52: e9 0b 00 00 00                  jmp 0x2c62
    # nextln: 002c57: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002c5b: 83 c0 01                        add eax, 1
    # nextln: 002c5e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002c62: 45 85 ff                        test r15d, r15d
    # nextln: 002c65: 0f 84 44 00 00 00               je 0x2caf
    # nextln: 002c6b: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002c70: 48 89 c1                        mov rcx, rax
    # nextln: 002c73: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002c77: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002c7b: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002c7d: 48 63 ca                        movsxd rcx, edx
    # nextln: 002c80: 48 3b cf                        cmp rcx, rdi
    # nextln: 002c83: 0f 8d 18 00 00 00               jge 0x2ca1
    # nextln: 002c89: 4c 89 f2                        mov rdx, r14
    # nextln: 002c8c: 48 0f af d1                     imul rdx, rcx
    # nextln: 002c90: 48 89 d9                        mov rcx, rbx
    # nextln: 002c93: 48 03 ca                        add rcx, rdx
    # nextln: 002c96: 48 03 c1                        add rax, rcx
    # nextln: 002c99: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002c9c: e9 19 00 00 00                  jmp 0x2cba
    # nextln: 002ca1: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002cab: ff d0                           call rax
    # nextln: 002cad: 0f 0b                           ud2
    # nextln: 002caf: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002cb3: 48 83 c0 20                     add rax, 0x20
    # nextln: 002cb7: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002cba: 85 c0                           test eax, eax
    # nextln: 002cbc: 0f 84 10 00 00 00               je 0x2cd2
    # nextln: 002cc2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002cc6: 83 c0 01                        add eax, 1
    # nextln: 002cc9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002ccd: e9 0b 00 00 00                  jmp 0x2cdd
    # nextln: 002cd2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002cd6: 83 c0 01                        add eax, 1
    # nextln: 002cd9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002cdd: 45 85 ff                        test r15d, r15d
    # nextln: 002ce0: 0f 84 44 00 00 00               je 0x2d2a
    # nextln: 002ce6: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002ceb: 48 89 c1                        mov rcx, rax
    # nextln: 002cee: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002cf2: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002cf6: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002cf8: 48 63 ca                        movsxd rcx, edx
    # nextln: 002cfb: 48 3b cf                        cmp rcx, rdi
    # nextln: 002cfe: 0f 8d 18 00 00 00               jge 0x2d1c
    # nextln: 002d04: 4c 89 f2                        mov rdx, r14
    # nextln: 002d07: 48 0f af d1                     imul rdx, rcx
    # nextln: 002d0b: 48 89 d9                        mov rcx, rbx
    # nextln: 002d0e: 48 03 ca                        add rcx, rdx
    # nextln: 002d11: 48 03 c1                        add rax, rcx
    # nextln: 002d14: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002d17: e9 1a 00 00 00                  jmp 0x2d36
    # nextln: 002d1c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002d26: ff d0                           call rax
    # nextln: 002d28: 0f 0b                           ud2
    # nextln: 002d2a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002d34: ff d0                           call rax
    # nextln: 002d36: 85 c0                           test eax, eax
    # nextln: 002d38: 0f 84 10 00 00 00               je 0x2d4e
    # nextln: 002d3e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002d42: 83 c0 01                        add eax, 1
    # nextln: 002d45: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002d49: e9 0b 00 00 00                  jmp 0x2d59
    # nextln: 002d4e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002d52: 83 c0 01                        add eax, 1
    # nextln: 002d55: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002d59: 45 85 ff                        test r15d, r15d
    # nextln: 002d5c: 0f 84 44 00 00 00               je 0x2da6
    # nextln: 002d62: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002d67: 48 89 c1                        mov rcx, rax
    # nextln: 002d6a: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002d6e: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002d72: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002d74: 48 63 ca                        movsxd rcx, edx
    # nextln: 002d77: 48 3b cf                        cmp rcx, rdi
    # nextln: 002d7a: 0f 8d 18 00 00 00               jge 0x2d98
    # nextln: 002d80: 4c 89 f2                        mov rdx, r14
    # nextln: 002d83: 48 0f af d1                     imul rdx, rcx
    # nextln: 002d87: 48 89 d9                        mov rcx, rbx
    # nextln: 002d8a: 48 03 ca                        add rcx, rdx
    # nextln: 002d8d: 48 03 c1                        add rax, rcx
    # nextln: 002d90: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002d93: e9 3f 00 00 00                  jmp 0x2dd7
    # nextln: 002d98: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002da2: ff d0                           call rax
    # nextln: 002da4: 0f 0b                           ud2
    # nextln: 002da6: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002dab: 48 89 c1                        mov rcx, rax
    # nextln: 002dae: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002db2: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002db6: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002db8: 48 63 ca                        movsxd rcx, edx
    # nextln: 002dbb: 48 3b cf                        cmp rcx, rdi
    # nextln: 002dbe: 0f 8d c8 17 00 00               jge 0x458c
    # nextln: 002dc4: 4c 89 f2                        mov rdx, r14
    # nextln: 002dc7: 48 0f af d1                     imul rdx, rcx
    # nextln: 002dcb: 48 89 d9                        mov rcx, rbx
    # nextln: 002dce: 48 03 ca                        add rcx, rdx
    # nextln: 002dd1: 48 03 c1                        add rax, rcx
    # nextln: 002dd4: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002dd7: 85 c0                           test eax, eax
    # nextln: 002dd9: 0f 84 10 00 00 00               je 0x2def
    # nextln: 002ddf: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002de3: 83 c0 01                        add eax, 1
    # nextln: 002de6: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002dea: e9 0b 00 00 00                  jmp 0x2dfa
    # nextln: 002def: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002df3: 83 c0 01                        add eax, 1
    # nextln: 002df6: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002dfa: 45 85 ff                        test r15d, r15d
    # nextln: 002dfd: 0f 84 44 00 00 00               je 0x2e47
    # nextln: 002e03: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002e08: 48 89 c1                        mov rcx, rax
    # nextln: 002e0b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002e0f: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002e13: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002e15: 48 63 ca                        movsxd rcx, edx
    # nextln: 002e18: 48 3b cf                        cmp rcx, rdi
    # nextln: 002e1b: 0f 8d 18 00 00 00               jge 0x2e39
    # nextln: 002e21: 4c 89 f2                        mov rdx, r14
    # nextln: 002e24: 48 0f af d1                     imul rdx, rcx
    # nextln: 002e28: 48 89 d9                        mov rcx, rbx
    # nextln: 002e2b: 48 03 ca                        add rcx, rdx
    # nextln: 002e2e: 48 03 c1                        add rax, rcx
    # nextln: 002e31: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002e34: e9 3f 00 00 00                  jmp 0x2e78
    # nextln: 002e39: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002e43: ff d0                           call rax
    # nextln: 002e45: 0f 0b                           ud2
    # nextln: 002e47: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002e4c: 48 89 c1                        mov rcx, rax
    # nextln: 002e4f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002e53: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 002e57: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002e59: 48 63 ca                        movsxd rcx, edx
    # nextln: 002e5c: 48 3b cf                        cmp rcx, rdi
    # nextln: 002e5f: 0f 8d 19 17 00 00               jge 0x457e
    # nextln: 002e65: 4c 89 f2                        mov rdx, r14
    # nextln: 002e68: 48 0f af d1                     imul rdx, rcx
    # nextln: 002e6c: 48 89 d9                        mov rcx, rbx
    # nextln: 002e6f: 48 03 ca                        add rcx, rdx
    # nextln: 002e72: 48 03 c1                        add rax, rcx
    # nextln: 002e75: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002e78: 85 c0                           test eax, eax
    # nextln: 002e7a: 0f 84 10 00 00 00               je 0x2e90
    # nextln: 002e80: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002e84: 83 c0 01                        add eax, 1
    # nextln: 002e87: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002e8b: e9 0b 00 00 00                  jmp 0x2e9b
    # nextln: 002e90: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002e94: 83 c0 01                        add eax, 1
    # nextln: 002e97: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002e9b: 45 85 e4                        test r12d, r12d
    # nextln: 002e9e: 0f 84 0d 00 00 00               je 0x2eb1
    # nextln: 002ea4: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 002ea9: 48 89 c1                        mov rcx, rax
    # nextln: 002eac: e9 08 00 00 00                  jmp 0x2eb9
    # nextln: 002eb1: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 002eb6: 48 89 c1                        mov rcx, rax
    # nextln: 002eb9: 85 c9                           test ecx, ecx
    # nextln: 002ebb: 0f 84 10 00 00 00               je 0x2ed1
    # nextln: 002ec1: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 002ec5: 83 c1 01                        add ecx, 1
    # nextln: 002ec8: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 002ecc: e9 0b 00 00 00                  jmp 0x2edc
    # nextln: 002ed1: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 002ed5: 83 c1 01                        add ecx, 1
    # nextln: 002ed8: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 002edc: 45 85 e4                        test r12d, r12d
    # nextln: 002edf: 0f 84 10 00 00 00               je 0x2ef5
    # nextln: 002ee5: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 002ee9: 83 c1 01                        add ecx, 1
    # nextln: 002eec: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 002ef0: e9 0b 00 00 00                  jmp 0x2f00
    # nextln: 002ef5: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 002ef9: 83 c1 01                        add ecx, 1
    # nextln: 002efc: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 002f00: 45 85 e4                        test r12d, r12d
    # nextln: 002f03: 0f 84 08 00 00 00               je 0x2f11
    # nextln: 002f09: 48 89 c1                        mov rcx, rax
    # nextln: 002f0c: e9 05 00 00 00                  jmp 0x2f16
    # nextln: 002f11: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 002f16: 85 c9                           test ecx, ecx
    # nextln: 002f18: 0f 84 10 00 00 00               je 0x2f2e
    # nextln: 002f1e: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 002f22: 83 c1 01                        add ecx, 1
    # nextln: 002f25: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 002f29: e9 0b 00 00 00                  jmp 0x2f39
    # nextln: 002f2e: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 002f32: 83 c1 01                        add ecx, 1
    # nextln: 002f35: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 002f39: 45 85 e4                        test r12d, r12d
    # nextln: 002f3c: 0f 84 0b 00 00 00               je 0x2f4d
    # nextln: 002f42: 48 89 c1                        mov rcx, rax
    # nextln: 002f45: 4d 89 ef                        mov r15, r13
    # nextln: 002f48: e9 07 00 00 00                  jmp 0x2f54
    # nextln: 002f4d: 4d 89 ef                        mov r15, r13
    # nextln: 002f50: 41 0f b6 0f                     movzx ecx, byte ptr [r15]
    # nextln: 002f54: 85 c9                           test ecx, ecx
    # nextln: 002f56: 0f 84 10 00 00 00               je 0x2f6c
    # nextln: 002f5c: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 002f60: 83 c1 01                        add ecx, 1
    # nextln: 002f63: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 002f67: e9 0b 00 00 00                  jmp 0x2f77
    # nextln: 002f6c: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 002f70: 83 c1 01                        add ecx, 1
    # nextln: 002f73: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 002f77: 45 85 e4                        test r12d, r12d
    # nextln: 002f7a: 0f 84 08 00 00 00               je 0x2f88
    # nextln: 002f80: 48 89 c1                        mov rcx, rax
    # nextln: 002f83: e9 0b 00 00 00                  jmp 0x2f93
    # nextln: 002f88: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 002f8c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002f90: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 002f93: 85 c9                           test ecx, ecx
    # nextln: 002f95: 0f 84 10 00 00 00               je 0x2fab
    # nextln: 002f9b: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 002f9f: 83 c1 01                        add ecx, 1
    # nextln: 002fa2: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 002fa6: e9 0b 00 00 00                  jmp 0x2fb6
    # nextln: 002fab: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 002faf: 83 c1 01                        add ecx, 1
    # nextln: 002fb2: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 002fb6: 45 85 e4                        test r12d, r12d
    # nextln: 002fb9: 0f 84 08 00 00 00               je 0x2fc7
    # nextln: 002fbf: 49 89 c5                        mov r13, rax
    # nextln: 002fc2: e9 0f 00 00 00                  jmp 0x2fd6
    # nextln: 002fc7: 49 89 c5                        mov r13, rax
    # nextln: 002fca: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002fd4: ff d0                           call rax
    # nextln: 002fd6: 85 c0                           test eax, eax
    # nextln: 002fd8: 0f 84 10 00 00 00               je 0x2fee
    # nextln: 002fde: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 002fe2: 83 c0 01                        add eax, 1
    # nextln: 002fe5: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 002fe9: e9 0b 00 00 00                  jmp 0x2ff9
    # nextln: 002fee: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 002ff2: 83 c0 01                        add eax, 1
    # nextln: 002ff5: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 002ff9: 45 85 e4                        test r12d, r12d
    # nextln: 002ffc: 0f 84 0b 00 00 00               je 0x300d
    # nextln: 003002: 4c 89 e8                        mov rax, r13
    # nextln: 003005: 48 89 c1                        mov rcx, rax
    # nextln: 003008: e9 34 00 00 00                  jmp 0x3041
    # nextln: 00300d: 4c 89 e8                        mov rax, r13
    # nextln: 003010: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 003015: 48 89 ca                        mov rdx, rcx
    # nextln: 003018: 48 83 c2 20                     add rdx, 0x20
    # nextln: 00301c: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 003020: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 003022: 48 63 d7                        movsxd rdx, edi
    # nextln: 003025: 48 3b d6                        cmp rdx, rsi
    # nextln: 003028: 0f 8d 42 15 00 00               jge 0x4570
    # nextln: 00302e: 4c 89 f7                        mov rdi, r14
    # nextln: 003031: 48 0f af fa                     imul rdi, rdx
    # nextln: 003035: 48 89 da                        mov rdx, rbx
    # nextln: 003038: 48 03 d7                        add rdx, rdi
    # nextln: 00303b: 48 03 ca                        add rcx, rdx
    # nextln: 00303e: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 003041: 85 c9                           test ecx, ecx
    # nextln: 003043: 0f 84 10 00 00 00               je 0x3059
    # nextln: 003049: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 00304d: 83 c1 01                        add ecx, 1
    # nextln: 003050: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 003054: e9 0b 00 00 00                  jmp 0x3064
    # nextln: 003059: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00305d: 83 c1 01                        add ecx, 1
    # nextln: 003060: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 003064: 45 85 e4                        test r12d, r12d
    # nextln: 003067: 0f 84 0d 00 00 00               je 0x307a
    # nextln: 00306d: 48 89 c1                        mov rcx, rax
    # nextln: 003070: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 003075: e9 36 00 00 00                  jmp 0x30b0
    # nextln: 00307a: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 00307f: 48 89 ca                        mov rdx, rcx
    # nextln: 003082: 48 83 c2 20                     add rdx, 0x20
    # nextln: 003086: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 00308a: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 00308c: 48 63 d7                        movsxd rdx, edi
    # nextln: 00308f: 48 3b d6                        cmp rdx, rsi
    # nextln: 003092: 0f 8d ca 14 00 00               jge 0x4562
    # nextln: 003098: 4c 89 f7                        mov rdi, r14
    # nextln: 00309b: 48 0f af fa                     imul rdi, rdx
    # nextln: 00309f: 48 89 da                        mov rdx, rbx
    # nextln: 0030a2: 48 03 d7                        add rdx, rdi
    # nextln: 0030a5: 48 03 ca                        add rcx, rdx
    # nextln: 0030a8: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 0030ab: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 0030b0: 85 c9                           test ecx, ecx
    # nextln: 0030b2: 0f 84 10 00 00 00               je 0x30c8
    # nextln: 0030b8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0030bc: 83 c0 01                        add eax, 1
    # nextln: 0030bf: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0030c3: e9 0b 00 00 00                  jmp 0x30d3
    # nextln: 0030c8: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0030cc: 83 c0 01                        add eax, 1
    # nextln: 0030cf: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0030d3: 45 85 e4                        test r12d, r12d
    # nextln: 0030d6: 0f 85 10 00 00 00               jne 0x30ec
    # nextln: 0030dc: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0030e0: 83 c0 01                        add eax, 1
    # nextln: 0030e3: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0030e7: e9 0b 00 00 00                  jmp 0x30f7
    # nextln: 0030ec: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0030f0: 83 c0 01                        add eax, 1
    # nextln: 0030f3: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0030f7: 45 85 e4                        test r12d, r12d
    # nextln: 0030fa: 0f 84 0d 00 00 00               je 0x310d
    # nextln: 003100: 4c 8b 6c 24 20                  mov r13, qword ptr [rsp + 0x20]
    # nextln: 003105: 4c 89 e8                        mov rax, r13
    # nextln: 003108: e9 08 00 00 00                  jmp 0x3115
    # nextln: 00310d: 4c 8b 6c 24 20                  mov r13, qword ptr [rsp + 0x20]
    # nextln: 003112: 4c 89 e8                        mov rax, r13
    # nextln: 003115: 85 c0                           test eax, eax
    # nextln: 003117: 0f 84 10 00 00 00               je 0x312d
    # nextln: 00311d: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003121: 83 c0 01                        add eax, 1
    # nextln: 003124: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003128: e9 0b 00 00 00                  jmp 0x3138
    # nextln: 00312d: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003131: 83 c0 01                        add eax, 1
    # nextln: 003134: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003138: 45 85 e4                        test r12d, r12d
    # nextln: 00313b: 0f 84 08 00 00 00               je 0x3149
    # nextln: 003141: 4c 89 e8                        mov rax, r13
    # nextln: 003144: e9 05 00 00 00                  jmp 0x314e
    # nextln: 003149: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 00314e: 85 c0                           test eax, eax
    # nextln: 003150: 0f 84 10 00 00 00               je 0x3166
    # nextln: 003156: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00315a: 83 c0 01                        add eax, 1
    # nextln: 00315d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003161: e9 0b 00 00 00                  jmp 0x3171
    # nextln: 003166: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00316a: 83 c0 01                        add eax, 1
    # nextln: 00316d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003171: 45 85 e4                        test r12d, r12d
    # nextln: 003174: 0f 84 08 00 00 00               je 0x3182
    # nextln: 00317a: 4c 89 e8                        mov rax, r13
    # nextln: 00317d: e9 04 00 00 00                  jmp 0x3186
    # nextln: 003182: 41 0f b6 07                     movzx eax, byte ptr [r15]
    # nextln: 003186: 85 c0                           test eax, eax
    # nextln: 003188: 0f 84 10 00 00 00               je 0x319e
    # nextln: 00318e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003192: 83 c0 01                        add eax, 1
    # nextln: 003195: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003199: e9 0b 00 00 00                  jmp 0x31a9
    # nextln: 00319e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0031a2: 83 c0 01                        add eax, 1
    # nextln: 0031a5: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0031a9: 45 85 e4                        test r12d, r12d
    # nextln: 0031ac: 0f 84 08 00 00 00               je 0x31ba
    # nextln: 0031b2: 4c 89 e8                        mov rax, r13
    # nextln: 0031b5: e9 0b 00 00 00                  jmp 0x31c5
    # nextln: 0031ba: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0031be: 48 83 c0 20                     add rax, 0x20
    # nextln: 0031c2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0031c5: 85 c0                           test eax, eax
    # nextln: 0031c7: 0f 84 10 00 00 00               je 0x31dd
    # nextln: 0031cd: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0031d1: 83 c0 01                        add eax, 1
    # nextln: 0031d4: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0031d8: e9 0b 00 00 00                  jmp 0x31e8
    # nextln: 0031dd: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0031e1: 83 c0 01                        add eax, 1
    # nextln: 0031e4: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0031e8: 45 85 e4                        test r12d, r12d
    # nextln: 0031eb: 0f 84 08 00 00 00               je 0x31f9
    # nextln: 0031f1: 4c 89 e8                        mov rax, r13
    # nextln: 0031f4: e9 0c 00 00 00                  jmp 0x3205
    # nextln: 0031f9: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003203: ff d0                           call rax
    # nextln: 003205: 85 c0                           test eax, eax
    # nextln: 003207: 0f 84 10 00 00 00               je 0x321d
    # nextln: 00320d: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003211: 83 c0 01                        add eax, 1
    # nextln: 003214: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003218: e9 0b 00 00 00                  jmp 0x3228
    # nextln: 00321d: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003221: 83 c0 01                        add eax, 1
    # nextln: 003224: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003228: 45 85 e4                        test r12d, r12d
    # nextln: 00322b: 0f 84 08 00 00 00               je 0x3239
    # nextln: 003231: 4c 89 e8                        mov rax, r13
    # nextln: 003234: e9 31 00 00 00                  jmp 0x326a
    # nextln: 003239: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00323e: 48 89 c1                        mov rcx, rax
    # nextln: 003241: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003245: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003249: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00324b: 48 63 ca                        movsxd rcx, edx
    # nextln: 00324e: 48 3b cf                        cmp rcx, rdi
    # nextln: 003251: 0f 8d fd 12 00 00               jge 0x4554
    # nextln: 003257: 4c 89 f2                        mov rdx, r14
    # nextln: 00325a: 48 0f af d1                     imul rdx, rcx
    # nextln: 00325e: 48 89 d9                        mov rcx, rbx
    # nextln: 003261: 48 03 ca                        add rcx, rdx
    # nextln: 003264: 48 03 c1                        add rax, rcx
    # nextln: 003267: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00326a: 85 c0                           test eax, eax
    # nextln: 00326c: 0f 84 10 00 00 00               je 0x3282
    # nextln: 003272: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003276: 83 c0 01                        add eax, 1
    # nextln: 003279: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00327d: e9 0b 00 00 00                  jmp 0x328d
    # nextln: 003282: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003286: 83 c0 01                        add eax, 1
    # nextln: 003289: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00328d: 45 85 e4                        test r12d, r12d
    # nextln: 003290: 0f 84 08 00 00 00               je 0x329e
    # nextln: 003296: 4c 89 e8                        mov rax, r13
    # nextln: 003299: e9 31 00 00 00                  jmp 0x32cf
    # nextln: 00329e: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0032a3: 48 89 c1                        mov rcx, rax
    # nextln: 0032a6: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0032aa: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 0032ae: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0032b0: 48 63 cf                        movsxd rcx, edi
    # nextln: 0032b3: 48 3b ca                        cmp rcx, rdx
    # nextln: 0032b6: 0f 8d 8a 12 00 00               jge 0x4546
    # nextln: 0032bc: 4c 89 f2                        mov rdx, r14
    # nextln: 0032bf: 48 0f af d1                     imul rdx, rcx
    # nextln: 0032c3: 48 89 d9                        mov rcx, rbx
    # nextln: 0032c6: 48 03 ca                        add rcx, rdx
    # nextln: 0032c9: 48 03 c1                        add rax, rcx
    # nextln: 0032cc: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0032cf: 85 c0                           test eax, eax
    # nextln: 0032d1: 0f 84 10 00 00 00               je 0x32e7
    # nextln: 0032d7: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0032db: 83 c0 01                        add eax, 1
    # nextln: 0032de: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0032e2: e9 0b 00 00 00                  jmp 0x32f2
    # nextln: 0032e7: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0032eb: 83 c0 01                        add eax, 1
    # nextln: 0032ee: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0032f2: 45 85 e4                        test r12d, r12d
    # nextln: 0032f5: 0f 84 0a 00 00 00               je 0x3305
    # nextln: 0032fb: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 003300: e9 05 00 00 00                  jmp 0x330a
    # nextln: 003305: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 00330a: 85 c0                           test eax, eax
    # nextln: 00330c: 0f 84 10 00 00 00               je 0x3322
    # nextln: 003312: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003316: 83 c0 01                        add eax, 1
    # nextln: 003319: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00331d: e9 0b 00 00 00                  jmp 0x332d
    # nextln: 003322: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003326: 83 c0 01                        add eax, 1
    # nextln: 003329: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00332d: 45 85 e4                        test r12d, r12d
    # nextln: 003330: 0f 84 0a 00 00 00               je 0x3340
    # nextln: 003336: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 00333b: e9 03 00 00 00                  jmp 0x3343
    # nextln: 003340: 4c 89 e8                        mov rax, r13
    # nextln: 003343: 85 c0                           test eax, eax
    # nextln: 003345: 0f 84 10 00 00 00               je 0x335b
    # nextln: 00334b: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00334f: 83 c0 01                        add eax, 1
    # nextln: 003352: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003356: e9 0b 00 00 00                  jmp 0x3366
    # nextln: 00335b: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00335f: 83 c0 01                        add eax, 1
    # nextln: 003362: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003366: 45 85 e4                        test r12d, r12d
    # nextln: 003369: 0f 84 0a 00 00 00               je 0x3379
    # nextln: 00336f: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 003374: e9 05 00 00 00                  jmp 0x337e
    # nextln: 003379: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 00337e: 85 c0                           test eax, eax
    # nextln: 003380: 0f 84 10 00 00 00               je 0x3396
    # nextln: 003386: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00338a: 83 c0 01                        add eax, 1
    # nextln: 00338d: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003391: e9 0b 00 00 00                  jmp 0x33a1
    # nextln: 003396: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00339a: 83 c0 01                        add eax, 1
    # nextln: 00339d: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0033a1: 45 85 e4                        test r12d, r12d
    # nextln: 0033a4: 0f 84 0a 00 00 00               je 0x33b4
    # nextln: 0033aa: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 0033af: e9 04 00 00 00                  jmp 0x33b8
    # nextln: 0033b4: 41 0f b6 07                     movzx eax, byte ptr [r15]
    # nextln: 0033b8: 85 c0                           test eax, eax
    # nextln: 0033ba: 0f 84 10 00 00 00               je 0x33d0
    # nextln: 0033c0: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0033c4: 83 c0 01                        add eax, 1
    # nextln: 0033c7: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0033cb: e9 0b 00 00 00                  jmp 0x33db
    # nextln: 0033d0: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0033d4: 83 c0 01                        add eax, 1
    # nextln: 0033d7: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0033db: 45 85 e4                        test r12d, r12d
    # nextln: 0033de: 0f 84 0a 00 00 00               je 0x33ee
    # nextln: 0033e4: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 0033e9: e9 0b 00 00 00                  jmp 0x33f9
    # nextln: 0033ee: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0033f2: 48 83 c0 20                     add rax, 0x20
    # nextln: 0033f6: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0033f9: 85 c0                           test eax, eax
    # nextln: 0033fb: 0f 84 10 00 00 00               je 0x3411
    # nextln: 003401: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003405: 83 c0 01                        add eax, 1
    # nextln: 003408: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00340c: e9 0b 00 00 00                  jmp 0x341c
    # nextln: 003411: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003415: 83 c0 01                        add eax, 1
    # nextln: 003418: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00341c: 45 85 e4                        test r12d, r12d
    # nextln: 00341f: 0f 84 0a 00 00 00               je 0x342f
    # nextln: 003425: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 00342a: e9 0c 00 00 00                  jmp 0x343b
    # nextln: 00342f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003439: ff d0                           call rax
    # nextln: 00343b: 85 c0                           test eax, eax
    # nextln: 00343d: 0f 84 10 00 00 00               je 0x3453
    # nextln: 003443: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003447: 83 c0 01                        add eax, 1
    # nextln: 00344a: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00344e: e9 0b 00 00 00                  jmp 0x345e
    # nextln: 003453: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003457: 83 c0 01                        add eax, 1
    # nextln: 00345a: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00345e: 45 85 e4                        test r12d, r12d
    # nextln: 003461: 0f 84 0a 00 00 00               je 0x3471
    # nextln: 003467: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 00346c: e9 31 00 00 00                  jmp 0x34a2
    # nextln: 003471: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003476: 48 89 c1                        mov rcx, rax
    # nextln: 003479: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00347d: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003481: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003483: 48 63 ca                        movsxd rcx, edx
    # nextln: 003486: 48 3b cf                        cmp rcx, rdi
    # nextln: 003489: 0f 8d a9 10 00 00               jge 0x4538
    # nextln: 00348f: 4c 89 f2                        mov rdx, r14
    # nextln: 003492: 48 0f af d1                     imul rdx, rcx
    # nextln: 003496: 48 89 d9                        mov rcx, rbx
    # nextln: 003499: 48 03 ca                        add rcx, rdx
    # nextln: 00349c: 48 03 c1                        add rax, rcx
    # nextln: 00349f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0034a2: 85 c0                           test eax, eax
    # nextln: 0034a4: 0f 84 10 00 00 00               je 0x34ba
    # nextln: 0034aa: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0034ae: 83 c0 01                        add eax, 1
    # nextln: 0034b1: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0034b5: e9 0b 00 00 00                  jmp 0x34c5
    # nextln: 0034ba: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0034be: 83 c0 01                        add eax, 1
    # nextln: 0034c1: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0034c5: 45 85 e4                        test r12d, r12d
    # nextln: 0034c8: 0f 84 0a 00 00 00               je 0x34d8
    # nextln: 0034ce: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 0034d3: e9 31 00 00 00                  jmp 0x3509
    # nextln: 0034d8: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0034dd: 48 89 c1                        mov rcx, rax
    # nextln: 0034e0: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0034e4: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0034e8: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0034ea: 48 63 ca                        movsxd rcx, edx
    # nextln: 0034ed: 48 3b cf                        cmp rcx, rdi
    # nextln: 0034f0: 0f 8d 34 10 00 00               jge 0x452a
    # nextln: 0034f6: 4c 89 f2                        mov rdx, r14
    # nextln: 0034f9: 48 0f af d1                     imul rdx, rcx
    # nextln: 0034fd: 48 89 d9                        mov rcx, rbx
    # nextln: 003500: 48 03 ca                        add rcx, rdx
    # nextln: 003503: 48 03 c1                        add rax, rcx
    # nextln: 003506: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003509: 85 c0                           test eax, eax
    # nextln: 00350b: 0f 84 10 00 00 00               je 0x3521
    # nextln: 003511: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003515: 83 c0 01                        add eax, 1
    # nextln: 003518: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00351c: e9 0b 00 00 00                  jmp 0x352c
    # nextln: 003521: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003525: 83 c0 01                        add eax, 1
    # nextln: 003528: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00352c: 45 85 e4                        test r12d, r12d
    # nextln: 00352f: 0f 84 10 00 00 00               je 0x3545
    # nextln: 003535: 4c 89 f8                        mov rax, r15
    # nextln: 003538: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 00353b: 4c 8b 7c 24 18                  mov r15, qword ptr [rsp + 0x18]
    # nextln: 003540: e9 0b 00 00 00                  jmp 0x3550
    # nextln: 003545: 4c 89 f8                        mov rax, r15
    # nextln: 003548: 4c 8b 7c 24 18                  mov r15, qword ptr [rsp + 0x18]
    # nextln: 00354d: 4c 89 f9                        mov rcx, r15
    # nextln: 003550: 85 c9                           test ecx, ecx
    # nextln: 003552: 0f 84 10 00 00 00               je 0x3568
    # nextln: 003558: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 00355c: 83 c1 01                        add ecx, 1
    # nextln: 00355f: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 003563: e9 0b 00 00 00                  jmp 0x3573
    # nextln: 003568: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00356c: 83 c1 01                        add ecx, 1
    # nextln: 00356f: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 003573: 45 85 e4                        test r12d, r12d
    # nextln: 003576: 0f 84 08 00 00 00               je 0x3584
    # nextln: 00357c: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 00357f: e9 03 00 00 00                  jmp 0x3587
    # nextln: 003584: 4c 89 e9                        mov rcx, r13
    # nextln: 003587: 85 c9                           test ecx, ecx
    # nextln: 003589: 0f 84 10 00 00 00               je 0x359f
    # nextln: 00358f: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 003593: 83 c1 01                        add ecx, 1
    # nextln: 003596: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00359a: e9 0b 00 00 00                  jmp 0x35aa
    # nextln: 00359f: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0035a3: 83 c1 01                        add ecx, 1
    # nextln: 0035a6: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0035aa: 45 85 e4                        test r12d, r12d
    # nextln: 0035ad: 0f 84 08 00 00 00               je 0x35bb
    # nextln: 0035b3: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 0035b6: e9 05 00 00 00                  jmp 0x35c0
    # nextln: 0035bb: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 0035c0: 85 c9                           test ecx, ecx
    # nextln: 0035c2: 0f 84 10 00 00 00               je 0x35d8
    # nextln: 0035c8: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0035cc: 83 c1 01                        add ecx, 1
    # nextln: 0035cf: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0035d3: e9 0b 00 00 00                  jmp 0x35e3
    # nextln: 0035d8: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0035dc: 83 c1 01                        add ecx, 1
    # nextln: 0035df: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0035e3: 45 85 e4                        test r12d, r12d
    # nextln: 0035e6: 0f 84 08 00 00 00               je 0x35f4
    # nextln: 0035ec: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 0035ef: e9 03 00 00 00                  jmp 0x35f7
    # nextln: 0035f4: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 0035f7: 85 c9                           test ecx, ecx
    # nextln: 0035f9: 0f 84 10 00 00 00               je 0x360f
    # nextln: 0035ff: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 003603: 83 c1 01                        add ecx, 1
    # nextln: 003606: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00360a: e9 0b 00 00 00                  jmp 0x361a
    # nextln: 00360f: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 003613: 83 c1 01                        add ecx, 1
    # nextln: 003616: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00361a: 45 85 e4                        test r12d, r12d
    # nextln: 00361d: 0f 84 08 00 00 00               je 0x362b
    # nextln: 003623: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 003626: e9 0b 00 00 00                  jmp 0x3636
    # nextln: 00362b: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 00362f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003633: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 003636: 85 c9                           test ecx, ecx
    # nextln: 003638: 0f 84 10 00 00 00               je 0x364e
    # nextln: 00363e: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 003642: 83 c1 01                        add ecx, 1
    # nextln: 003645: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 003649: e9 0b 00 00 00                  jmp 0x3659
    # nextln: 00364e: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 003652: 83 c1 01                        add ecx, 1
    # nextln: 003655: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 003659: 45 85 e4                        test r12d, r12d
    # nextln: 00365c: 0f 84 10 00 00 00               je 0x3672
    # nextln: 003662: 48 89 c1                        mov rcx, rax
    # nextln: 003665: 0f b6 01                        movzx eax, byte ptr [rcx]
    # nextln: 003668: 48 89 4c 24 30                  mov qword ptr [rsp + 0x30], rcx
    # nextln: 00366d: e9 11 00 00 00                  jmp 0x3683
    # nextln: 003672: 48 89 44 24 30                  mov qword ptr [rsp + 0x30], rax
    # nextln: 003677: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003681: ff d0                           call rax
    # nextln: 003683: 85 c0                           test eax, eax
    # nextln: 003685: 0f 84 10 00 00 00               je 0x369b
    # nextln: 00368b: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00368f: 83 c0 01                        add eax, 1
    # nextln: 003692: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003696: e9 0b 00 00 00                  jmp 0x36a6
    # nextln: 00369b: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00369f: 83 c0 01                        add eax, 1
    # nextln: 0036a2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0036a6: 45 85 e4                        test r12d, r12d
    # nextln: 0036a9: 0f 84 0d 00 00 00               je 0x36bc
    # nextln: 0036af: 48 8b 44 24 30                  mov rax, qword ptr [rsp + 0x30]
    # nextln: 0036b4: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 0036b7: e9 36 00 00 00                  jmp 0x36f2
    # nextln: 0036bc: 48 8b 44 24 30                  mov rax, qword ptr [rsp + 0x30]
    # nextln: 0036c1: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0036c6: 48 89 ca                        mov rdx, rcx
    # nextln: 0036c9: 48 83 c2 20                     add rdx, 0x20
    # nextln: 0036cd: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 0036d1: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 0036d3: 48 63 d7                        movsxd rdx, edi
    # nextln: 0036d6: 48 3b d6                        cmp rdx, rsi
    # nextln: 0036d9: 0f 8d 3d 0e 00 00               jge 0x451c
    # nextln: 0036df: 4c 89 f7                        mov rdi, r14
    # nextln: 0036e2: 48 0f af fa                     imul rdi, rdx
    # nextln: 0036e6: 48 89 da                        mov rdx, rbx
    # nextln: 0036e9: 48 03 d7                        add rdx, rdi
    # nextln: 0036ec: 48 03 ca                        add rcx, rdx
    # nextln: 0036ef: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 0036f2: 85 c9                           test ecx, ecx
    # nextln: 0036f4: 0f 84 10 00 00 00               je 0x370a
    # nextln: 0036fa: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0036fe: 83 c1 01                        add ecx, 1
    # nextln: 003701: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 003705: e9 0b 00 00 00                  jmp 0x3715
    # nextln: 00370a: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00370e: 83 c1 01                        add ecx, 1
    # nextln: 003711: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 003715: 45 85 e4                        test r12d, r12d
    # nextln: 003718: 0f 84 08 00 00 00               je 0x3726
    # nextln: 00371e: 0f b6 08                        movzx ecx, byte ptr [rax]
    # nextln: 003721: e9 31 00 00 00                  jmp 0x3757
    # nextln: 003726: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 00372b: 48 89 ca                        mov rdx, rcx
    # nextln: 00372e: 48 83 c2 20                     add rdx, 0x20
    # nextln: 003732: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 003736: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 003738: 48 63 d7                        movsxd rdx, edi
    # nextln: 00373b: 48 3b d6                        cmp rdx, rsi
    # nextln: 00373e: 0f 8d ca 0d 00 00               jge 0x450e
    # nextln: 003744: 4c 89 f7                        mov rdi, r14
    # nextln: 003747: 48 0f af fa                     imul rdi, rdx
    # nextln: 00374b: 48 89 da                        mov rdx, rbx
    # nextln: 00374e: 48 03 d7                        add rdx, rdi
    # nextln: 003751: 48 03 ca                        add rcx, rdx
    # nextln: 003754: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 003757: 85 c9                           test ecx, ecx
    # nextln: 003759: 0f 84 10 00 00 00               je 0x376f
    # nextln: 00375f: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 003763: 83 c1 01                        add ecx, 1
    # nextln: 003766: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 00376a: e9 0b 00 00 00                  jmp 0x377a
    # nextln: 00376f: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 003773: 83 c1 01                        add ecx, 1
    # nextln: 003776: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 00377a: 45 85 e4                        test r12d, r12d
    # nextln: 00377d: 0f 84 15 00 00 00               je 0x3798
    # nextln: 003783: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 003787: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00378b: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 00378e: 4c 89 7c 24 18                  mov qword ptr [rsp + 0x18], r15
    # nextln: 003793: e9 08 00 00 00                  jmp 0x37a0
    # nextln: 003798: 4c 89 f9                        mov rcx, r15
    # nextln: 00379b: 4c 89 7c 24 18                  mov qword ptr [rsp + 0x18], r15
    # nextln: 0037a0: 85 c9                           test ecx, ecx
    # nextln: 0037a2: 0f 84 10 00 00 00               je 0x37b8
    # nextln: 0037a8: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0037ac: 83 c1 01                        add ecx, 1
    # nextln: 0037af: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0037b3: e9 0b 00 00 00                  jmp 0x37c3
    # nextln: 0037b8: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0037bc: 83 c1 01                        add ecx, 1
    # nextln: 0037bf: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 0037c3: 45 85 e4                        test r12d, r12d
    # nextln: 0037c6: 0f 84 10 00 00 00               je 0x37dc
    # nextln: 0037cc: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 0037d0: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0037d4: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 0037d7: e9 03 00 00 00                  jmp 0x37df
    # nextln: 0037dc: 4c 89 e9                        mov rcx, r13
    # nextln: 0037df: 85 c9                           test ecx, ecx
    # nextln: 0037e1: 0f 84 10 00 00 00               je 0x37f7
    # nextln: 0037e7: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 0037eb: 83 c1 01                        add ecx, 1
    # nextln: 0037ee: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 0037f2: e9 0b 00 00 00                  jmp 0x3802
    # nextln: 0037f7: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 0037fb: 83 c1 01                        add ecx, 1
    # nextln: 0037fe: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 003802: 45 85 e4                        test r12d, r12d
    # nextln: 003805: 0f 84 10 00 00 00               je 0x381b
    # nextln: 00380b: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 00380f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003813: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 003816: e9 05 00 00 00                  jmp 0x3820
    # nextln: 00381b: 0f b6 4c 24 44                  movzx ecx, byte ptr [rsp + 0x44]
    # nextln: 003820: 85 c9                           test ecx, ecx
    # nextln: 003822: 0f 84 10 00 00 00               je 0x3838
    # nextln: 003828: 8b 4c 24 40                     mov ecx, dword ptr [rsp + 0x40]
    # nextln: 00382c: 83 c1 01                        add ecx, 1
    # nextln: 00382f: 89 4c 24 40                     mov dword ptr [rsp + 0x40], ecx
    # nextln: 003833: e9 0b 00 00 00                  jmp 0x3843
    # nextln: 003838: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00383c: 83 c1 01                        add ecx, 1
    # nextln: 00383f: 89 4c 24 38                     mov dword ptr [rsp + 0x38], ecx
    # nextln: 003843: 45 85 e4                        test r12d, r12d
    # nextln: 003846: 0f 84 13 00 00 00               je 0x385f
    # nextln: 00384c: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 003850: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003854: 0f b6 09                        movzx ecx, byte ptr [rcx]
    # nextln: 003857: 49 89 c7                        mov r15, rax
    # nextln: 00385a: e9 07 00 00 00                  jmp 0x3866
    # nextln: 00385f: 49 89 c7                        mov r15, rax
    # nextln: 003862: 41 0f b6 0f                     movzx ecx, byte ptr [r15]
    # nextln: 003866: 85 c9                           test ecx, ecx
    # nextln: 003868: 0f 84 10 00 00 00               je 0x387e
    # nextln: 00386e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003872: 83 c0 01                        add eax, 1
    # nextln: 003875: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003879: e9 0b 00 00 00                  jmp 0x3889
    # nextln: 00387e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003882: 83 c0 01                        add eax, 1
    # nextln: 003885: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003889: 45 85 e4                        test r12d, r12d
    # nextln: 00388c: 0f 84 10 00 00 00               je 0x38a2
    # nextln: 003892: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003896: 48 83 c0 20                     add rax, 0x20
    # nextln: 00389a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00389d: e9 0b 00 00 00                  jmp 0x38ad
    # nextln: 0038a2: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0038a6: 48 83 c0 20                     add rax, 0x20
    # nextln: 0038aa: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0038ad: 85 c0                           test eax, eax
    # nextln: 0038af: 0f 84 10 00 00 00               je 0x38c5
    # nextln: 0038b5: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0038b9: 83 c0 01                        add eax, 1
    # nextln: 0038bc: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0038c0: e9 0b 00 00 00                  jmp 0x38d0
    # nextln: 0038c5: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0038c9: 83 c0 01                        add eax, 1
    # nextln: 0038cc: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0038d0: 45 85 e4                        test r12d, r12d
    # nextln: 0038d3: 0f 84 10 00 00 00               je 0x38e9
    # nextln: 0038d9: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0038dd: 48 83 c0 20                     add rax, 0x20
    # nextln: 0038e1: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0038e4: e9 0c 00 00 00                  jmp 0x38f5
    # nextln: 0038e9: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0038f3: ff d0                           call rax
    # nextln: 0038f5: 85 c0                           test eax, eax
    # nextln: 0038f7: 0f 84 10 00 00 00               je 0x390d
    # nextln: 0038fd: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003901: 83 c0 01                        add eax, 1
    # nextln: 003904: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003908: e9 0b 00 00 00                  jmp 0x3918
    # nextln: 00390d: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003911: 83 c0 01                        add eax, 1
    # nextln: 003914: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003918: 45 85 e4                        test r12d, r12d
    # nextln: 00391b: 0f 84 10 00 00 00               je 0x3931
    # nextln: 003921: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003925: 48 83 c0 20                     add rax, 0x20
    # nextln: 003929: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00392c: e9 31 00 00 00                  jmp 0x3962
    # nextln: 003931: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003936: 48 89 c1                        mov rcx, rax
    # nextln: 003939: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00393d: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003941: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003943: 48 63 ca                        movsxd rcx, edx
    # nextln: 003946: 48 3b cf                        cmp rcx, rdi
    # nextln: 003949: 0f 8d b1 0b 00 00               jge 0x4500
    # nextln: 00394f: 4c 89 f2                        mov rdx, r14
    # nextln: 003952: 48 0f af d1                     imul rdx, rcx
    # nextln: 003956: 48 89 d9                        mov rcx, rbx
    # nextln: 003959: 48 03 ca                        add rcx, rdx
    # nextln: 00395c: 48 03 c1                        add rax, rcx
    # nextln: 00395f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003962: 85 c0                           test eax, eax
    # nextln: 003964: 0f 84 10 00 00 00               je 0x397a
    # nextln: 00396a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00396e: 83 c0 01                        add eax, 1
    # nextln: 003971: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003975: e9 0b 00 00 00                  jmp 0x3985
    # nextln: 00397a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00397e: 83 c0 01                        add eax, 1
    # nextln: 003981: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003985: 45 85 e4                        test r12d, r12d
    # nextln: 003988: 0f 84 10 00 00 00               je 0x399e
    # nextln: 00398e: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003992: 48 83 c0 20                     add rax, 0x20
    # nextln: 003996: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003999: e9 31 00 00 00                  jmp 0x39cf
    # nextln: 00399e: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0039a3: 48 89 c1                        mov rcx, rax
    # nextln: 0039a6: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0039aa: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0039ae: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0039b0: 48 63 ca                        movsxd rcx, edx
    # nextln: 0039b3: 48 3b cf                        cmp rcx, rdi
    # nextln: 0039b6: 0f 8d 36 0b 00 00               jge 0x44f2
    # nextln: 0039bc: 4c 89 f2                        mov rdx, r14
    # nextln: 0039bf: 48 0f af d1                     imul rdx, rcx
    # nextln: 0039c3: 48 89 d9                        mov rcx, rbx
    # nextln: 0039c6: 48 03 ca                        add rcx, rdx
    # nextln: 0039c9: 48 03 c1                        add rax, rcx
    # nextln: 0039cc: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0039cf: 85 c0                           test eax, eax
    # nextln: 0039d1: 0f 84 10 00 00 00               je 0x39e7
    # nextln: 0039d7: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0039db: 83 c0 01                        add eax, 1
    # nextln: 0039de: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0039e2: e9 0b 00 00 00                  jmp 0x39f2
    # nextln: 0039e7: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0039eb: 83 c0 01                        add eax, 1
    # nextln: 0039ee: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0039f2: 45 85 e4                        test r12d, r12d
    # nextln: 0039f5: 0f 84 11 00 00 00               je 0x3a0c
    # nextln: 0039fb: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003a05: ff d0                           call rax
    # nextln: 003a07: e9 05 00 00 00                  jmp 0x3a11
    # nextln: 003a0c: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 003a11: 85 c0                           test eax, eax
    # nextln: 003a13: 0f 84 10 00 00 00               je 0x3a29
    # nextln: 003a19: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003a1d: 83 c0 01                        add eax, 1
    # nextln: 003a20: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003a24: e9 0b 00 00 00                  jmp 0x3a34
    # nextln: 003a29: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003a2d: 83 c0 01                        add eax, 1
    # nextln: 003a30: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003a34: 45 85 e4                        test r12d, r12d
    # nextln: 003a37: 0f 84 11 00 00 00               je 0x3a4e
    # nextln: 003a3d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003a47: ff d0                           call rax
    # nextln: 003a49: e9 03 00 00 00                  jmp 0x3a51
    # nextln: 003a4e: 4c 89 e8                        mov rax, r13
    # nextln: 003a51: 85 c0                           test eax, eax
    # nextln: 003a53: 0f 84 10 00 00 00               je 0x3a69
    # nextln: 003a59: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003a5d: 83 c0 01                        add eax, 1
    # nextln: 003a60: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003a64: e9 0b 00 00 00                  jmp 0x3a74
    # nextln: 003a69: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003a6d: 83 c0 01                        add eax, 1
    # nextln: 003a70: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003a74: 45 85 e4                        test r12d, r12d
    # nextln: 003a77: 0f 84 11 00 00 00               je 0x3a8e
    # nextln: 003a7d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003a87: ff d0                           call rax
    # nextln: 003a89: e9 05 00 00 00                  jmp 0x3a93
    # nextln: 003a8e: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 003a93: 85 c0                           test eax, eax
    # nextln: 003a95: 0f 84 10 00 00 00               je 0x3aab
    # nextln: 003a9b: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003a9f: 83 c0 01                        add eax, 1
    # nextln: 003aa2: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003aa6: e9 0b 00 00 00                  jmp 0x3ab6
    # nextln: 003aab: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003aaf: 83 c0 01                        add eax, 1
    # nextln: 003ab2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003ab6: 45 85 e4                        test r12d, r12d
    # nextln: 003ab9: 0f 84 16 00 00 00               je 0x3ad5
    # nextln: 003abf: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003ac9: ff d0                           call rax
    # nextln: 003acb: 4c 89 7c 24 30                  mov qword ptr [rsp + 0x30], r15
    # nextln: 003ad0: e9 09 00 00 00                  jmp 0x3ade
    # nextln: 003ad5: 41 0f b6 07                     movzx eax, byte ptr [r15]
    # nextln: 003ad9: 4c 89 7c 24 30                  mov qword ptr [rsp + 0x30], r15
    # nextln: 003ade: 85 c0                           test eax, eax
    # nextln: 003ae0: 0f 84 10 00 00 00               je 0x3af6
    # nextln: 003ae6: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003aea: 83 c0 01                        add eax, 1
    # nextln: 003aed: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003af1: e9 0b 00 00 00                  jmp 0x3b01
    # nextln: 003af6: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003afa: 83 c0 01                        add eax, 1
    # nextln: 003afd: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003b01: 45 85 e4                        test r12d, r12d
    # nextln: 003b04: 0f 84 11 00 00 00               je 0x3b1b
    # nextln: 003b0a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003b14: ff d0                           call rax
    # nextln: 003b16: e9 0b 00 00 00                  jmp 0x3b26
    # nextln: 003b1b: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003b1f: 48 83 c0 20                     add rax, 0x20
    # nextln: 003b23: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003b26: 85 c0                           test eax, eax
    # nextln: 003b28: 0f 84 10 00 00 00               je 0x3b3e
    # nextln: 003b2e: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003b32: 83 c0 01                        add eax, 1
    # nextln: 003b35: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003b39: e9 0b 00 00 00                  jmp 0x3b49
    # nextln: 003b3e: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003b42: 83 c0 01                        add eax, 1
    # nextln: 003b45: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003b49: 45 85 e4                        test r12d, r12d
    # nextln: 003b4c: 0f 84 11 00 00 00               je 0x3b63
    # nextln: 003b52: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003b5c: ff d0                           call rax
    # nextln: 003b5e: e9 0c 00 00 00                  jmp 0x3b6f
    # nextln: 003b63: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003b6d: ff d0                           call rax
    # nextln: 003b6f: 85 c0                           test eax, eax
    # nextln: 003b71: 0f 84 10 00 00 00               je 0x3b87
    # nextln: 003b77: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003b7b: 83 c0 01                        add eax, 1
    # nextln: 003b7e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003b82: e9 0b 00 00 00                  jmp 0x3b92
    # nextln: 003b87: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003b8b: 83 c0 01                        add eax, 1
    # nextln: 003b8e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003b92: 45 85 e4                        test r12d, r12d
    # nextln: 003b95: 0f 84 11 00 00 00               je 0x3bac
    # nextln: 003b9b: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003ba5: ff d0                           call rax
    # nextln: 003ba7: e9 31 00 00 00                  jmp 0x3bdd
    # nextln: 003bac: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003bb1: 48 89 c1                        mov rcx, rax
    # nextln: 003bb4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003bb8: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 003bbc: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003bbe: 48 63 cf                        movsxd rcx, edi
    # nextln: 003bc1: 48 3b ca                        cmp rcx, rdx
    # nextln: 003bc4: 0f 8d 1a 09 00 00               jge 0x44e4
    # nextln: 003bca: 4c 89 f2                        mov rdx, r14
    # nextln: 003bcd: 48 0f af d1                     imul rdx, rcx
    # nextln: 003bd1: 48 89 d9                        mov rcx, rbx
    # nextln: 003bd4: 48 03 ca                        add rcx, rdx
    # nextln: 003bd7: 48 03 c1                        add rax, rcx
    # nextln: 003bda: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003bdd: 85 c0                           test eax, eax
    # nextln: 003bdf: 0f 84 10 00 00 00               je 0x3bf5
    # nextln: 003be5: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003be9: 83 c0 01                        add eax, 1
    # nextln: 003bec: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003bf0: e9 0b 00 00 00                  jmp 0x3c00
    # nextln: 003bf5: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003bf9: 83 c0 01                        add eax, 1
    # nextln: 003bfc: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003c00: 45 85 e4                        test r12d, r12d
    # nextln: 003c03: 0f 84 11 00 00 00               je 0x3c1a
    # nextln: 003c09: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003c13: ff d0                           call rax
    # nextln: 003c15: e9 31 00 00 00                  jmp 0x3c4b
    # nextln: 003c1a: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003c1f: 48 89 c1                        mov rcx, rax
    # nextln: 003c22: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003c26: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003c2a: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003c2c: 48 63 ca                        movsxd rcx, edx
    # nextln: 003c2f: 48 3b cf                        cmp rcx, rdi
    # nextln: 003c32: 0f 8d 9e 08 00 00               jge 0x44d6
    # nextln: 003c38: 4c 89 f2                        mov rdx, r14
    # nextln: 003c3b: 48 0f af d1                     imul rdx, rcx
    # nextln: 003c3f: 48 89 d9                        mov rcx, rbx
    # nextln: 003c42: 48 03 ca                        add rcx, rdx
    # nextln: 003c45: 48 03 c1                        add rax, rcx
    # nextln: 003c48: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003c4b: 85 c0                           test eax, eax
    # nextln: 003c4d: 0f 84 10 00 00 00               je 0x3c63
    # nextln: 003c53: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003c57: 83 c0 01                        add eax, 1
    # nextln: 003c5a: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003c5e: e9 0b 00 00 00                  jmp 0x3c6e
    # nextln: 003c63: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003c67: 83 c0 01                        add eax, 1
    # nextln: 003c6a: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003c6e: 45 85 e4                        test r12d, r12d
    # nextln: 003c71: 0f 84 49 00 00 00               je 0x3cc0
    # nextln: 003c77: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003c7c: 48 89 c1                        mov rcx, rax
    # nextln: 003c7f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003c83: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003c87: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003c89: 48 63 ca                        movsxd rcx, edx
    # nextln: 003c8c: 48 3b cf                        cmp rcx, rdi
    # nextln: 003c8f: 0f 8d 1d 00 00 00               jge 0x3cb2
    # nextln: 003c95: 4c 89 f2                        mov rdx, r14
    # nextln: 003c98: 48 0f af d1                     imul rdx, rcx
    # nextln: 003c9c: 48 89 d9                        mov rcx, rbx
    # nextln: 003c9f: 48 03 ca                        add rcx, rdx
    # nextln: 003ca2: 48 03 c1                        add rax, rcx
    # nextln: 003ca5: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003ca8: 4c 8b 7c 24 18                  mov r15, qword ptr [rsp + 0x18]
    # nextln: 003cad: e9 16 00 00 00                  jmp 0x3cc8
    # nextln: 003cb2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003cbc: ff d0                           call rax
    # nextln: 003cbe: 0f 0b                           ud2
    # nextln: 003cc0: 4c 8b 7c 24 18                  mov r15, qword ptr [rsp + 0x18]
    # nextln: 003cc5: 4c 89 f8                        mov rax, r15
    # nextln: 003cc8: 85 c0                           test eax, eax
    # nextln: 003cca: 0f 84 10 00 00 00               je 0x3ce0
    # nextln: 003cd0: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003cd4: 83 c0 01                        add eax, 1
    # nextln: 003cd7: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003cdb: e9 0b 00 00 00                  jmp 0x3ceb
    # nextln: 003ce0: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003ce4: 83 c0 01                        add eax, 1
    # nextln: 003ce7: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003ceb: 45 85 e4                        test r12d, r12d
    # nextln: 003cee: 0f 84 44 00 00 00               je 0x3d38
    # nextln: 003cf4: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003cf9: 48 89 c1                        mov rcx, rax
    # nextln: 003cfc: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003d00: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003d04: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003d06: 48 63 ca                        movsxd rcx, edx
    # nextln: 003d09: 48 3b cf                        cmp rcx, rdi
    # nextln: 003d0c: 0f 8d 18 00 00 00               jge 0x3d2a
    # nextln: 003d12: 4c 89 f2                        mov rdx, r14
    # nextln: 003d15: 48 0f af d1                     imul rdx, rcx
    # nextln: 003d19: 48 89 d9                        mov rcx, rbx
    # nextln: 003d1c: 48 03 ca                        add rcx, rdx
    # nextln: 003d1f: 48 03 c1                        add rax, rcx
    # nextln: 003d22: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003d25: e9 11 00 00 00                  jmp 0x3d3b
    # nextln: 003d2a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003d34: ff d0                           call rax
    # nextln: 003d36: 0f 0b                           ud2
    # nextln: 003d38: 4c 89 e8                        mov rax, r13
    # nextln: 003d3b: 85 c0                           test eax, eax
    # nextln: 003d3d: 0f 84 10 00 00 00               je 0x3d53
    # nextln: 003d43: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003d47: 83 c0 01                        add eax, 1
    # nextln: 003d4a: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003d4e: e9 0b 00 00 00                  jmp 0x3d5e
    # nextln: 003d53: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003d57: 83 c0 01                        add eax, 1
    # nextln: 003d5a: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003d5e: 45 85 e4                        test r12d, r12d
    # nextln: 003d61: 0f 84 44 00 00 00               je 0x3dab
    # nextln: 003d67: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003d6c: 48 89 c1                        mov rcx, rax
    # nextln: 003d6f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003d73: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003d77: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003d79: 48 63 ca                        movsxd rcx, edx
    # nextln: 003d7c: 48 3b cf                        cmp rcx, rdi
    # nextln: 003d7f: 0f 8d 18 00 00 00               jge 0x3d9d
    # nextln: 003d85: 4c 89 f2                        mov rdx, r14
    # nextln: 003d88: 48 0f af d1                     imul rdx, rcx
    # nextln: 003d8c: 48 89 d9                        mov rcx, rbx
    # nextln: 003d8f: 48 03 ca                        add rcx, rdx
    # nextln: 003d92: 48 03 c1                        add rax, rcx
    # nextln: 003d95: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003d98: e9 13 00 00 00                  jmp 0x3db0
    # nextln: 003d9d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003da7: ff d0                           call rax
    # nextln: 003da9: 0f 0b                           ud2
    # nextln: 003dab: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 003db0: 85 c0                           test eax, eax
    # nextln: 003db2: 0f 84 10 00 00 00               je 0x3dc8
    # nextln: 003db8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003dbc: 83 c0 01                        add eax, 1
    # nextln: 003dbf: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003dc3: e9 0b 00 00 00                  jmp 0x3dd3
    # nextln: 003dc8: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003dcc: 83 c0 01                        add eax, 1
    # nextln: 003dcf: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003dd3: 45 85 e4                        test r12d, r12d
    # nextln: 003dd6: 0f 84 44 00 00 00               je 0x3e20
    # nextln: 003ddc: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003de1: 48 89 c1                        mov rcx, rax
    # nextln: 003de4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003de8: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 003dec: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003dee: 48 63 cf                        movsxd rcx, edi
    # nextln: 003df1: 48 3b ca                        cmp rcx, rdx
    # nextln: 003df4: 0f 8d 18 00 00 00               jge 0x3e12
    # nextln: 003dfa: 4c 89 f2                        mov rdx, r14
    # nextln: 003dfd: 48 0f af d1                     imul rdx, rcx
    # nextln: 003e01: 48 89 d9                        mov rcx, rbx
    # nextln: 003e04: 48 03 ca                        add rcx, rdx
    # nextln: 003e07: 48 03 c1                        add rax, rcx
    # nextln: 003e0a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003e0d: e9 16 00 00 00                  jmp 0x3e28
    # nextln: 003e12: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003e1c: ff d0                           call rax
    # nextln: 003e1e: 0f 0b                           ud2
    # nextln: 003e20: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 003e25: 0f b6 01                        movzx eax, byte ptr [rcx]
    # nextln: 003e28: 85 c0                           test eax, eax
    # nextln: 003e2a: 0f 84 10 00 00 00               je 0x3e40
    # nextln: 003e30: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003e34: 83 c0 01                        add eax, 1
    # nextln: 003e37: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003e3b: e9 0b 00 00 00                  jmp 0x3e4b
    # nextln: 003e40: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003e44: 83 c0 01                        add eax, 1
    # nextln: 003e47: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003e4b: 45 85 e4                        test r12d, r12d
    # nextln: 003e4e: 0f 84 44 00 00 00               je 0x3e98
    # nextln: 003e54: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003e59: 48 89 c1                        mov rcx, rax
    # nextln: 003e5c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003e60: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003e64: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003e66: 48 63 ca                        movsxd rcx, edx
    # nextln: 003e69: 48 3b cf                        cmp rcx, rdi
    # nextln: 003e6c: 0f 8d 18 00 00 00               jge 0x3e8a
    # nextln: 003e72: 4c 89 f2                        mov rdx, r14
    # nextln: 003e75: 48 0f af d1                     imul rdx, rcx
    # nextln: 003e79: 48 89 d9                        mov rcx, rbx
    # nextln: 003e7c: 48 03 ca                        add rcx, rdx
    # nextln: 003e7f: 48 03 c1                        add rax, rcx
    # nextln: 003e82: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003e85: e9 19 00 00 00                  jmp 0x3ea3
    # nextln: 003e8a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003e94: ff d0                           call rax
    # nextln: 003e96: 0f 0b                           ud2
    # nextln: 003e98: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003e9c: 48 83 c0 20                     add rax, 0x20
    # nextln: 003ea0: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003ea3: 85 c0                           test eax, eax
    # nextln: 003ea5: 0f 84 10 00 00 00               je 0x3ebb
    # nextln: 003eab: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003eaf: 83 c0 01                        add eax, 1
    # nextln: 003eb2: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003eb6: e9 0b 00 00 00                  jmp 0x3ec6
    # nextln: 003ebb: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003ebf: 83 c0 01                        add eax, 1
    # nextln: 003ec2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003ec6: 45 85 e4                        test r12d, r12d
    # nextln: 003ec9: 0f 84 44 00 00 00               je 0x3f13
    # nextln: 003ecf: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003ed4: 48 89 c1                        mov rcx, rax
    # nextln: 003ed7: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003edb: 8b 7c 24 3c                     mov edi, dword ptr [rsp + 0x3c]
    # nextln: 003edf: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003ee1: 48 63 cf                        movsxd rcx, edi
    # nextln: 003ee4: 48 3b ca                        cmp rcx, rdx
    # nextln: 003ee7: 0f 8d 18 00 00 00               jge 0x3f05
    # nextln: 003eed: 4c 89 f2                        mov rdx, r14
    # nextln: 003ef0: 48 0f af d1                     imul rdx, rcx
    # nextln: 003ef4: 48 89 d9                        mov rcx, rbx
    # nextln: 003ef7: 48 03 ca                        add rcx, rdx
    # nextln: 003efa: 48 03 c1                        add rax, rcx
    # nextln: 003efd: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003f00: e9 1a 00 00 00                  jmp 0x3f1f
    # nextln: 003f05: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003f0f: ff d0                           call rax
    # nextln: 003f11: 0f 0b                           ud2
    # nextln: 003f13: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003f1d: ff d0                           call rax
    # nextln: 003f1f: 85 c0                           test eax, eax
    # nextln: 003f21: 0f 84 10 00 00 00               je 0x3f37
    # nextln: 003f27: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003f2b: 83 c0 01                        add eax, 1
    # nextln: 003f2e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003f32: e9 0b 00 00 00                  jmp 0x3f42
    # nextln: 003f37: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003f3b: 83 c0 01                        add eax, 1
    # nextln: 003f3e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003f42: 45 85 e4                        test r12d, r12d
    # nextln: 003f45: 0f 84 44 00 00 00               je 0x3f8f
    # nextln: 003f4b: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003f50: 48 89 c1                        mov rcx, rax
    # nextln: 003f53: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003f57: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003f5b: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003f5d: 48 63 ca                        movsxd rcx, edx
    # nextln: 003f60: 48 3b cf                        cmp rcx, rdi
    # nextln: 003f63: 0f 8d 18 00 00 00               jge 0x3f81
    # nextln: 003f69: 4c 89 f2                        mov rdx, r14
    # nextln: 003f6c: 48 0f af d1                     imul rdx, rcx
    # nextln: 003f70: 48 89 d9                        mov rcx, rbx
    # nextln: 003f73: 48 03 ca                        add rcx, rdx
    # nextln: 003f76: 48 03 c1                        add rax, rcx
    # nextln: 003f79: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003f7c: e9 3f 00 00 00                  jmp 0x3fc0
    # nextln: 003f81: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003f8b: ff d0                           call rax
    # nextln: 003f8d: 0f 0b                           ud2
    # nextln: 003f8f: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003f94: 48 89 c1                        mov rcx, rax
    # nextln: 003f97: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003f9b: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003f9f: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003fa1: 48 63 ca                        movsxd rcx, edx
    # nextln: 003fa4: 48 3b cf                        cmp rcx, rdi
    # nextln: 003fa7: 0f 8d 1b 05 00 00               jge 0x44c8
    # nextln: 003fad: 4c 89 f2                        mov rdx, r14
    # nextln: 003fb0: 48 0f af d1                     imul rdx, rcx
    # nextln: 003fb4: 48 89 d9                        mov rcx, rbx
    # nextln: 003fb7: 48 03 ca                        add rcx, rdx
    # nextln: 003fba: 48 03 c1                        add rax, rcx
    # nextln: 003fbd: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003fc0: 85 c0                           test eax, eax
    # nextln: 003fc2: 0f 84 10 00 00 00               je 0x3fd8
    # nextln: 003fc8: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 003fcc: 83 c0 01                        add eax, 1
    # nextln: 003fcf: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 003fd3: e9 0b 00 00 00                  jmp 0x3fe3
    # nextln: 003fd8: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 003fdc: 83 c0 01                        add eax, 1
    # nextln: 003fdf: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 003fe3: 45 85 e4                        test r12d, r12d
    # nextln: 003fe6: 0f 84 44 00 00 00               je 0x4030
    # nextln: 003fec: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003ff1: 48 89 c1                        mov rcx, rax
    # nextln: 003ff4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003ff8: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 003ffc: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003ffe: 48 63 ca                        movsxd rcx, edx
    # nextln: 004001: 48 3b cf                        cmp rcx, rdi
    # nextln: 004004: 0f 8d 18 00 00 00               jge 0x4022
    # nextln: 00400a: 4c 89 f2                        mov rdx, r14
    # nextln: 00400d: 48 0f af d1                     imul rdx, rcx
    # nextln: 004011: 48 89 d9                        mov rcx, rbx
    # nextln: 004014: 48 03 ca                        add rcx, rdx
    # nextln: 004017: 48 03 c1                        add rax, rcx
    # nextln: 00401a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00401d: e9 3f 00 00 00                  jmp 0x4061
    # nextln: 004022: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00402c: ff d0                           call rax
    # nextln: 00402e: 0f 0b                           ud2
    # nextln: 004030: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 004035: 48 89 c1                        mov rcx, rax
    # nextln: 004038: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00403c: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 004040: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 004042: 48 63 ca                        movsxd rcx, edx
    # nextln: 004045: 48 3b cf                        cmp rcx, rdi
    # nextln: 004048: 0f 8d 6c 04 00 00               jge 0x44ba
    # nextln: 00404e: 4c 89 f2                        mov rdx, r14
    # nextln: 004051: 48 0f af d1                     imul rdx, rcx
    # nextln: 004055: 48 89 d9                        mov rcx, rbx
    # nextln: 004058: 48 03 ca                        add rcx, rdx
    # nextln: 00405b: 48 03 c1                        add rax, rcx
    # nextln: 00405e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 004061: 85 c0                           test eax, eax
    # nextln: 004063: 0f 84 10 00 00 00               je 0x4079
    # nextln: 004069: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00406d: 83 c0 01                        add eax, 1
    # nextln: 004070: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 004074: e9 0b 00 00 00                  jmp 0x4084
    # nextln: 004079: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00407d: 83 c0 01                        add eax, 1
    # nextln: 004080: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 004084: 45 85 e4                        test r12d, r12d
    # nextln: 004087: 0f 84 45 00 00 00               je 0x40d2
    # nextln: 00408d: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 004092: 48 89 c1                        mov rcx, rax
    # nextln: 004095: 48 83 c1 20                     add rcx, 0x20
    # nextln: 004099: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00409d: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00409f: 48 63 ca                        movsxd rcx, edx
    # nextln: 0040a2: 48 3b cf                        cmp rcx, rdi
    # nextln: 0040a5: 0f 8d 19 00 00 00               jge 0x40c4
    # nextln: 0040ab: 4c 89 f2                        mov rdx, r14
    # nextln: 0040ae: 48 0f af d1                     imul rdx, rcx
    # nextln: 0040b2: 48 89 d9                        mov rcx, rbx
    # nextln: 0040b5: 48 03 ca                        add rcx, rdx
    # nextln: 0040b8: 48 03 c1                        add rax, rcx
    # nextln: 0040bb: 44 0f b6 38                     movzx r15d, byte ptr [rax]
    # nextln: 0040bf: e9 0e 00 00 00                  jmp 0x40d2
    # nextln: 0040c4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040ce: ff d0                           call rax
    # nextln: 0040d0: 0f 0b                           ud2
    # nextln: 0040d2: 45 85 ff                        test r15d, r15d
    # nextln: 0040d5: 0f 84 10 00 00 00               je 0x40eb
    # nextln: 0040db: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0040df: 83 c0 01                        add eax, 1
    # nextln: 0040e2: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0040e6: e9 0b 00 00 00                  jmp 0x40f6
    # nextln: 0040eb: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0040ef: 83 c0 01                        add eax, 1
    # nextln: 0040f2: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0040f6: 45 85 e4                        test r12d, r12d
    # nextln: 0040f9: 0f 84 45 00 00 00               je 0x4144
    # nextln: 0040ff: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 004104: 48 89 c1                        mov rcx, rax
    # nextln: 004107: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00410b: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00410f: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 004111: 48 63 ca                        movsxd rcx, edx
    # nextln: 004114: 48 3b cf                        cmp rcx, rdi
    # nextln: 004117: 0f 8d 19 00 00 00               jge 0x4136
    # nextln: 00411d: 4c 89 f2                        mov rdx, r14
    # nextln: 004120: 48 0f af d1                     imul rdx, rcx
    # nextln: 004124: 48 89 d9                        mov rcx, rbx
    # nextln: 004127: 48 03 ca                        add rcx, rdx
    # nextln: 00412a: 48 03 c1                        add rax, rcx
    # nextln: 00412d: 44 0f b6 28                     movzx r13d, byte ptr [rax]
    # nextln: 004131: e9 0e 00 00 00                  jmp 0x4144
    # nextln: 004136: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004140: ff d0                           call rax
    # nextln: 004142: 0f 0b                           ud2
    # nextln: 004144: 45 85 ed                        test r13d, r13d
    # nextln: 004147: 0f 84 10 00 00 00               je 0x415d
    # nextln: 00414d: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 004151: 83 c0 01                        add eax, 1
    # nextln: 004154: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 004158: e9 0b 00 00 00                  jmp 0x4168
    # nextln: 00415d: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 004161: 83 c0 01                        add eax, 1
    # nextln: 004164: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 004168: 45 85 e4                        test r12d, r12d
    # nextln: 00416b: 0f 84 44 00 00 00               je 0x41b5
    # nextln: 004171: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 004176: 48 89 c1                        mov rcx, rax
    # nextln: 004179: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00417d: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 004181: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 004183: 48 63 ca                        movsxd rcx, edx
    # nextln: 004186: 48 3b cf                        cmp rcx, rdi
    # nextln: 004189: 0f 8d 18 00 00 00               jge 0x41a7
    # nextln: 00418f: 4c 89 f2                        mov rdx, r14
    # nextln: 004192: 48 0f af d1                     imul rdx, rcx
    # nextln: 004196: 48 89 d9                        mov rcx, rbx
    # nextln: 004199: 48 03 ca                        add rcx, rdx
    # nextln: 00419c: 48 03 c1                        add rax, rcx
    # nextln: 00419f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0041a2: e9 13 00 00 00                  jmp 0x41ba
    # nextln: 0041a7: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041b1: ff d0                           call rax
    # nextln: 0041b3: 0f 0b                           ud2
    # nextln: 0041b5: 0f b6 44 24 44                  movzx eax, byte ptr [rsp + 0x44]
    # nextln: 0041ba: 85 c0                           test eax, eax
    # nextln: 0041bc: 0f 84 10 00 00 00               je 0x41d2
    # nextln: 0041c2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0041c6: 83 c0 01                        add eax, 1
    # nextln: 0041c9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0041cd: e9 0b 00 00 00                  jmp 0x41dd
    # nextln: 0041d2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0041d6: 83 c0 01                        add eax, 1
    # nextln: 0041d9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0041dd: 45 85 e4                        test r12d, r12d
    # nextln: 0041e0: 0f 84 44 00 00 00               je 0x422a
    # nextln: 0041e6: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0041eb: 48 89 c1                        mov rcx, rax
    # nextln: 0041ee: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0041f2: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0041f6: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0041f8: 48 63 ca                        movsxd rcx, edx
    # nextln: 0041fb: 48 3b cf                        cmp rcx, rdi
    # nextln: 0041fe: 0f 8d 18 00 00 00               jge 0x421c
    # nextln: 004204: 4c 89 f2                        mov rdx, r14
    # nextln: 004207: 48 0f af d1                     imul rdx, rcx
    # nextln: 00420b: 48 89 d9                        mov rcx, rbx
    # nextln: 00420e: 48 03 ca                        add rcx, rdx
    # nextln: 004211: 48 03 c1                        add rax, rcx
    # nextln: 004214: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 004217: e9 16 00 00 00                  jmp 0x4232
    # nextln: 00421c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004226: ff d0                           call rax
    # nextln: 004228: 0f 0b                           ud2
    # nextln: 00422a: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 00422f: 0f b6 01                        movzx eax, byte ptr [rcx]
    # nextln: 004232: 85 c0                           test eax, eax
    # nextln: 004234: 0f 84 10 00 00 00               je 0x424a
    # nextln: 00423a: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00423e: 83 c0 01                        add eax, 1
    # nextln: 004241: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 004245: e9 0b 00 00 00                  jmp 0x4255
    # nextln: 00424a: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00424e: 83 c0 01                        add eax, 1
    # nextln: 004251: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 004255: 45 85 e4                        test r12d, r12d
    # nextln: 004258: 0f 84 44 00 00 00               je 0x42a2
    # nextln: 00425e: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 004263: 48 89 c1                        mov rcx, rax
    # nextln: 004266: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00426a: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 00426e: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 004270: 48 63 ca                        movsxd rcx, edx
    # nextln: 004273: 48 3b cf                        cmp rcx, rdi
    # nextln: 004276: 0f 8d 18 00 00 00               jge 0x4294
    # nextln: 00427c: 4c 89 f2                        mov rdx, r14
    # nextln: 00427f: 48 0f af d1                     imul rdx, rcx
    # nextln: 004283: 48 89 d9                        mov rcx, rbx
    # nextln: 004286: 48 03 ca                        add rcx, rdx
    # nextln: 004289: 48 03 c1                        add rax, rcx
    # nextln: 00428c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00428f: e9 19 00 00 00                  jmp 0x42ad
    # nextln: 004294: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00429e: ff d0                           call rax
    # nextln: 0042a0: 0f 0b                           ud2
    # nextln: 0042a2: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0042a6: 48 83 c0 20                     add rax, 0x20
    # nextln: 0042aa: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0042ad: 85 c0                           test eax, eax
    # nextln: 0042af: 0f 84 10 00 00 00               je 0x42c5
    # nextln: 0042b5: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0042b9: 83 c0 01                        add eax, 1
    # nextln: 0042bc: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0042c0: e9 0b 00 00 00                  jmp 0x42d0
    # nextln: 0042c5: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0042c9: 83 c0 01                        add eax, 1
    # nextln: 0042cc: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0042d0: 45 85 e4                        test r12d, r12d
    # nextln: 0042d3: 0f 84 44 00 00 00               je 0x431d
    # nextln: 0042d9: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0042de: 48 89 c1                        mov rcx, rax
    # nextln: 0042e1: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0042e5: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0042e9: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0042eb: 48 63 ca                        movsxd rcx, edx
    # nextln: 0042ee: 48 3b cf                        cmp rcx, rdi
    # nextln: 0042f1: 0f 8d 18 00 00 00               jge 0x430f
    # nextln: 0042f7: 4c 89 f2                        mov rdx, r14
    # nextln: 0042fa: 48 0f af d1                     imul rdx, rcx
    # nextln: 0042fe: 48 89 d9                        mov rcx, rbx
    # nextln: 004301: 48 03 ca                        add rcx, rdx
    # nextln: 004304: 48 03 c1                        add rax, rcx
    # nextln: 004307: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00430a: e9 1a 00 00 00                  jmp 0x4329
    # nextln: 00430f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004319: ff d0                           call rax
    # nextln: 00431b: 0f 0b                           ud2
    # nextln: 00431d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 004327: ff d0                           call rax
    # nextln: 004329: 85 c0                           test eax, eax
    # nextln: 00432b: 0f 84 10 00 00 00               je 0x4341
    # nextln: 004331: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 004335: 83 c0 01                        add eax, 1
    # nextln: 004338: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 00433c: e9 0b 00 00 00                  jmp 0x434c
    # nextln: 004341: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 004345: 83 c0 01                        add eax, 1
    # nextln: 004348: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 00434c: 45 85 e4                        test r12d, r12d
    # nextln: 00434f: 0f 84 44 00 00 00               je 0x4399
    # nextln: 004355: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 00435a: 48 89 c1                        mov rcx, rax
    # nextln: 00435d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 004361: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 004365: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 004367: 48 63 ca                        movsxd rcx, edx
    # nextln: 00436a: 48 3b cf                        cmp rcx, rdi
    # nextln: 00436d: 0f 8d 18 00 00 00               jge 0x438b
    # nextln: 004373: 4c 89 f2                        mov rdx, r14
    # nextln: 004376: 48 0f af d1                     imul rdx, rcx
    # nextln: 00437a: 48 89 d9                        mov rcx, rbx
    # nextln: 00437d: 48 03 ca                        add rcx, rdx
    # nextln: 004380: 48 03 c1                        add rax, rcx
    # nextln: 004383: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 004386: e9 3f 00 00 00                  jmp 0x43ca
    # nextln: 00438b: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004395: ff d0                           call rax
    # nextln: 004397: 0f 0b                           ud2
    # nextln: 004399: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00439e: 48 89 c1                        mov rcx, rax
    # nextln: 0043a1: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0043a5: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 0043a9: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0043ab: 48 63 ca                        movsxd rcx, edx
    # nextln: 0043ae: 48 3b cf                        cmp rcx, rdi
    # nextln: 0043b1: 0f 8d f5 00 00 00               jge 0x44ac
    # nextln: 0043b7: 4c 89 f2                        mov rdx, r14
    # nextln: 0043ba: 48 0f af d1                     imul rdx, rcx
    # nextln: 0043be: 48 89 d9                        mov rcx, rbx
    # nextln: 0043c1: 48 03 ca                        add rcx, rdx
    # nextln: 0043c4: 48 03 c1                        add rax, rcx
    # nextln: 0043c7: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0043ca: 85 c0                           test eax, eax
    # nextln: 0043cc: 0f 84 10 00 00 00               je 0x43e2
    # nextln: 0043d2: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 0043d6: 83 c0 01                        add eax, 1
    # nextln: 0043d9: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 0043dd: e9 0b 00 00 00                  jmp 0x43ed
    # nextln: 0043e2: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 0043e6: 83 c0 01                        add eax, 1
    # nextln: 0043e9: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 0043ed: 45 85 e4                        test r12d, r12d
    # nextln: 0043f0: 0f 84 3e 00 00 00               je 0x4434
    # nextln: 0043f6: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0043fb: 48 89 c1                        mov rcx, rax
    # nextln: 0043fe: 48 83 c1 20                     add rcx, 0x20
    # nextln: 004402: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 004406: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 004408: 48 63 ca                        movsxd rcx, edx
    # nextln: 00440b: 48 3b cf                        cmp rcx, rdi
    # nextln: 00440e: 0f 8d 12 00 00 00               jge 0x4426
    # nextln: 004414: 4c 0f af f1                     imul r14, rcx
    # nextln: 004418: 49 03 de                        add rbx, r14
    # nextln: 00441b: 48 03 c3                        add rax, rbx
    # nextln: 00441e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 004421: e9 39 00 00 00                  jmp 0x445f
    # nextln: 004426: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004430: ff d0                           call rax
    # nextln: 004432: 0f 0b                           ud2
    # nextln: 004434: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 004439: 48 89 c1                        mov rcx, rax
    # nextln: 00443c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 004440: 8b 54 24 3c                     mov edx, dword ptr [rsp + 0x3c]
    # nextln: 004444: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 004446: 48 63 ca                        movsxd rcx, edx
    # nextln: 004449: 48 3b cf                        cmp rcx, rdi
    # nextln: 00444c: 0f 8d 4c 00 00 00               jge 0x449e
    # nextln: 004452: 4c 0f af f1                     imul r14, rcx
    # nextln: 004456: 49 03 de                        add rbx, r14
    # nextln: 004459: 48 03 c3                        add rax, rbx
    # nextln: 00445c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00445f: 85 c0                           test eax, eax
    # nextln: 004461: 0f 84 10 00 00 00               je 0x4477
    # nextln: 004467: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 00446b: 83 c0 01                        add eax, 1
    # nextln: 00446e: 89 44 24 40                     mov dword ptr [rsp + 0x40], eax
    # nextln: 004472: e9 0b 00 00 00                  jmp 0x4482
    # nextln: 004477: 8b 44 24 38                     mov eax, dword ptr [rsp + 0x38]
    # nextln: 00447b: 83 c0 01                        add eax, 1
    # nextln: 00447e: 89 44 24 38                     mov dword ptr [rsp + 0x38], eax
    # nextln: 004482: 8b 44 24 40                     mov eax, dword ptr [rsp + 0x40]
    # nextln: 004486: 6b c0 02                        imul eax, eax, 2
    # nextln: 004489: 8b 4c 24 38                     mov ecx, dword ptr [rsp + 0x38]
    # nextln: 00448d: 2b c1                           sub eax, ecx
    # nextln: 00448f: 48 83 c4 58                     add rsp, 0x58
    # nextln: 004493: 5b                              pop rbx
    # nextln: 004494: 41 5c                           pop r12
    # nextln: 004496: 41 5d                           pop r13
    # nextln: 004498: 41 5e                           pop r14
    # nextln: 00449a: 41 5f                           pop r15
    # nextln: 00449c: 5d                              pop rbp
    # nextln: 00449d: c3                              ret
    # nextln: 00449e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0044a8: ff d0                           call rax
    # nextln: 0044aa: 0f 0b                           ud2
    # nextln: 0044ac: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0044b6: ff d0                           call rax
    # nextln: 0044b8: 0f 0b                           ud2
    # nextln: 0044ba: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0044c4: ff d0                           call rax
    # nextln: 0044c6: 0f 0b                           ud2
    # nextln: 0044c8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0044d2: ff d0                           call rax
    # nextln: 0044d4: 0f 0b                           ud2
    # nextln: 0044d6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0044e0: ff d0                           call rax
    # nextln: 0044e2: 0f 0b                           ud2
    # nextln: 0044e4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0044ee: ff d0                           call rax
    # nextln: 0044f0: 0f 0b                           ud2
    # nextln: 0044f2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0044fc: ff d0                           call rax
    # nextln: 0044fe: 0f 0b                           ud2
    # nextln: 004500: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00450a: ff d0                           call rax
    # nextln: 00450c: 0f 0b                           ud2
    # nextln: 00450e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004518: ff d0                           call rax
    # nextln: 00451a: 0f 0b                           ud2
    # nextln: 00451c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004526: ff d0                           call rax
    # nextln: 004528: 0f 0b                           ud2
    # nextln: 00452a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004534: ff d0                           call rax
    # nextln: 004536: 0f 0b                           ud2
    # nextln: 004538: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004542: ff d0                           call rax
    # nextln: 004544: 0f 0b                           ud2
    # nextln: 004546: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004550: ff d0                           call rax
    # nextln: 004552: 0f 0b                           ud2
    # nextln: 004554: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00455e: ff d0                           call rax
    # nextln: 004560: 0f 0b                           ud2
    # nextln: 004562: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00456c: ff d0                           call rax
    # nextln: 00456e: 0f 0b                           ud2
    # nextln: 004570: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00457a: ff d0                           call rax
    # nextln: 00457c: 0f 0b                           ud2
    # nextln: 00457e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004588: ff d0                           call rax
    # nextln: 00458a: 0f 0b                           ud2
    # nextln: 00458c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004596: ff d0                           call rax
    # nextln: 004598: 0f 0b                           ud2
    # nextln: 00459a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0045a4: ff d0                           call rax
    # nextln: 0045a6: 0f 0b                           ud2
    # nextln: 0045a8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0045b2: ff d0                           call rax
    # nextln: 0045b4: 0f 0b                           ud2
    # nextln: 0045b6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0045c0: ff d0                           call rax
    # nextln: 0045c2: 0f 0b                           ud2
    # nextln: 0045c4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0045ce: ff d0                           call rax
    # nextln: 0045d0: 0f 0b                           ud2
    # nextln: 0045d2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0045dc: ff d0                           call rax
    # nextln: 0045de: 0f 0b                           ud2
    # nextln: 0045e0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0045ea: ff d0                           call rax
    # nextln: 0045ec: 0f 0b                           ud2
    # nextln: 0045ee: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0045f8: ff d0                           call rax
    # nextln: 0045fa: 0f 0b                           ud2
    # nextln: 0045fc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004606: ff d0                           call rax
    # nextln: 004608: 0f 0b                           ud2
    # nextln: 00460a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004614: ff d0                           call rax
    # nextln: 004616: 0f 0b                           ud2
    # nextln: 004618: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004622: ff d0                           call rax
    # nextln: 004624: 0f 0b                           ud2
    # nextln: 004626: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004630: ff d0                           call rax
    # nextln: 004632: 0f 0b                           ud2
    # nextln: 004634: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00463e: ff d0                           call rax
    # nextln: 004640: 0f 0b                           ud2
    # nextln: 004642: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00464c: ff d0                           call rax
    # nextln: 00464e: 0f 0b                           ud2
    # nextln: 004650: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00465a: ff d0                           call rax
    # nextln: 00465c: 0f 0b                           ud2
    # nextln: 00465e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004668: ff d0                           call rax
    # nextln: 00466a: 0f 0b                           ud2
    # nextln: 00466c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004676: ff d0                           call rax
    # nextln: 004678: 0f 0b                           ud2
    # nextln: 00467a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004684: ff d0                           call rax
    # nextln: 004686: 0f 0b                           ud2
    # nextln: 004688: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004692: ff d0                           call rax
    # nextln: 004694: 0f 0b                           ud2
    # nextln: 004696: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0046a0: ff d0                           call rax
    # nextln: 0046a2: 0f 0b                           ud2
    # nextln: 0046a4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0046ae: ff d0                           call rax
    # nextln: 0046b0: 0f 0b                           ud2
    # nextln: 0046b2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0046bc: ff d0                           call rax
    # nextln: 0046be: 0f 0b                           ud2
    # nextln: 0046c0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0046ca: ff d0                           call rax
    # nextln: 0046cc: 0f 0b                           ud2
    # nextln: 0046ce: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0046d8: ff d0                           call rax
    # nextln: 0046da: 0f 0b                           ud2
    # nextln: 0046dc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0046e6: ff d0                           call rax
    # nextln: 0046e8: 0f 0b                           ud2
    # nextln: 0046ea: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0046f4: ff d0                           call rax
    # nextln: 0046f6: 0f 0b                           ud2
    # nextln: 0046f8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004702: ff d0                           call rax
    # nextln: 004704: 0f 0b                           ud2
    # nextln: 004706: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004710: ff d0                           call rax
    # nextln: 004712: 0f 0b                           ud2
    # nextln: 004714: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00471e: ff d0                           call rax
    # nextln: 004720: 0f 0b                           ud2
    # nextln: 004722: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00472c: ff d0                           call rax
    # nextln: 00472e: 0f 0b                           ud2
    # nextln: 004730: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00473a: ff d0                           call rax
    # nextln: 00473c: 0f 0b                           ud2
    # nextln: 00473e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004748: ff d0                           call rax
    # nextln: 00474a: 0f 0b                           ud2
    # nextln: 00474c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004756: ff d0                           call rax
    # nextln: 004758: 0f 0b                           ud2
    # nextln: 00475a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004764: ff d0                           call rax
    # nextln: 004766: 0f 0b                           ud2
    # nextln: 004768: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004772: ff d0                           call rax
    # nextln: 004774: 0f 0b                           ud2
    # nextln: 004776: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004780: ff d0                           call rax
    # nextln: 004782: 0f 0b                           ud2
    # nextln: 004784: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00478e: ff d0                           call rax
    # nextln: 004790: 0f 0b                           ud2
    # nextln: 004792: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00479c: ff d0                           call rax
    # nextln: 00479e: 0f 0b                           ud2
    # nextln: 0047a0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0047aa: ff d0                           call rax
    # nextln: 0047ac: 0f 0b                           ud2
    # nextln: 0047ae: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0047b8: ff d0                           call rax
    # nextln: 0047ba: 0f 0b                           ud2
    # nextln: 0047bc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0047c6: ff d0                           call rax
    # nextln: 0047c8: 0f 0b                           ud2
    # nextln: 0047ca: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0047d4: ff d0                           call rax
    # nextln: 0047d6: 0f 0b                           ud2
    # nextln: 0047d8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0047e2: ff d0                           call rax
    # nextln: 0047e4: 0f 0b                           ud2
    # nextln: 0047e6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0047f0: ff d0                           call rax
    # nextln: 0047f2: 0f 0b                           ud2
    # nextln: 0047f4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0047fe: ff d0                           call rax
    # nextln: 004800: 0f 0b                           ud2
    # nextln: 004802: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00480c: ff d0                           call rax
    # nextln: 00480e: 0f 0b                           ud2
    # nextln: 004810: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00481a: ff d0                           call rax
    # nextln: 00481c: 0f 0b                           ud2
    # nextln: 00481e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004828: ff d0                           call rax
    # nextln: 00482a: 0f 0b                           ud2
    # nextln: 00482c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004836: ff d0                           call rax
    # nextln: 004838: 0f 0b                           ud2
    # nextln: 00483a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004844: ff d0                           call rax
    # nextln: 004846: 0f 0b                           ud2

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 2
    %4:i64 = iext %3
    %5:i64 = sfill 32 %4
    %6:ptr = stackslot 4:4
    %7:ptr = stackslot 4:4
    %8:i32 = iconst 1
    %9:i64 = iext %8
    %10:i64 = sfill 32 %9
    %11:i64 = iconst 32
    %12:ptr = stackslot 8:8
    %13:ptr = stackslot 4:4
    %14:i64 = iconst 1
    %16:i64 = imul %14, %10
    %15:i64 = imul %14, %5
    %17:i64 = iconst 40
    %19:i64 = iadd %17, %16
    %18:i64 = iadd %17, %15
    %20:i32 = iconst 0
    %25:ctrl = store.4 %1, %20, %7
    %26:ctrl = store.4 %25, %20, %6
    %27:ctrl = store.4 %26, %20, %13
    %21:i64 = iext %20
    %22:i64 = sfill 32 %21
    %23:i64 = imul %14, %22
    %24:i64 = iadd %17, %23
    %28:ptr = stackslot 8:8
    %29:ptr = stackslot 8:8
    %30:ptr = iconst 105690555220944
    %31:ptr = stackslot 1:1
    %32:ctrl = store.1 %27, %20, %31
    %33:i64 = iconst 34
    %34:i64 = iconst 33
    %35:ptr = iconst 105690555221008
    %36:ptr = iconst 105690555220976
    %37:i32 = iconst 3
    %38:i64 = iext %37
    %39:i64 = sfill 32 %38
    %40:i64 = imul %39, %14
    %41:i64 = iconst 48
    %42:i64 = iadd %40, %41
    %43:ptr = iconst 106721347401152
    %44:i64 = iconst 35
    %45:ptr = iconst 106721347409152
    %46:ptr = iconst 0
    %47:ctrl = store.8 %32, %46, %29
    %48:ctrl = store.8 %47, %46, %12
    %49:ctrl = store.8 %48, %46, %28
    %50:ctrl, %51:phisel = region %49
    %52:ctrl = store.4 %50, %20, %7
    %53:ctrl = store.4 %52, %20, %6
    %54:ctrl = store.4 %53, %8, %13
    %55:ctrl = store.1 %54, %8, %31
    %56:ctrl, %57:ptr = call @gc_new %55, %45, %44
    %58:ctrl = call @"System.Void Tests.Bool_No_Op::.ctor()" %56, %57
    %59:ctrl = store.8 %58, %57, %29
    %60:ctrl, %61:ptr = call @gc_new %59, %43, %42
    %62:ptr = ptroff %61, %11
    %63:ctrl = store.4 %60, %39, %62
    %64:ctrl = store.8 %63, %61, %12
    %65:ctrl, %66:ptr = call @gc_new %64, %43, %42
    %67:ptr = ptroff %66, %11
    %68:ctrl = store.4 %65, %39, %67
    %69:ctrl = store.8 %68, %66, %28
    %70:ctrl, %71:ptr = load.8 %69, %28
    %73:ptr = ptroff %71, %11
    %74:ctrl, %75:i64 = load.4 %70, %73
    %76:i64 = icmp slt %22, %75
    %77:ctrl, %78:ctrl = brcond %74, %76
    %79:ctrl, %80:phisel = region %77
    %8171:ctrl, %8172:phisel = region %78
    %8173:ctrl = call @throw_index_out_of_range_exception %8171
    unreachable %8173
    %72:ptr = ptroff %71, %24
    %81:ctrl = store.1 %79, %8, %72
    %82:ctrl, %83:ptr = load.8 %81, %28
    %85:ptr = ptroff %83, %11
    %86:ctrl, %87:i64 = load.4 %82, %85
    %88:i64 = icmp slt %10, %87
    %89:ctrl, %90:ctrl = brcond %86, %88
    %91:ctrl, %92:phisel = region %89
    %8168:ctrl, %8169:phisel = region %90
    %8170:ctrl = call @throw_index_out_of_range_exception %8168
    unreachable %8170
    %84:ptr = ptroff %83, %19
    %93:ctrl = store.1 %91, %8, %84
    %94:ctrl, %95:ptr = load.8 %93, %28
    %97:ptr = ptroff %95, %11
    %98:ctrl, %99:i64 = load.4 %94, %97
    %100:i64 = icmp slt %5, %99
    %101:ctrl, %102:ctrl = brcond %98, %100
    %103:ctrl, %104:phisel = region %101
    %8165:ctrl, %8166:phisel = region %102
    %8167:ctrl = call @throw_index_out_of_range_exception %8165
    unreachable %8167
    %96:ptr = ptroff %95, %18
    %105:ctrl = store.1 %103, %8, %96
    %106:ctrl = store.1 %105, %8, %30
    %107:ctrl = store.1 %106, %20, %36
    %108:ctrl = store.1 %107, %8, %35
    %109:ctrl, %110:ptr = load.8 %108, %29
    %111:ptr = ptroff %110, %11
    %112:ctrl = store.1 %109, %8, %111
    %113:ctrl, %114:ptr = load.8 %112, %29
    %115:ptr = ptroff %114, %34
    %116:ctrl = store.1 %113, %20, %115
    %117:ctrl, %118:ptr = load.8 %116, %29
    %119:ptr = ptroff %118, %33
    %120:ctrl = store.1 %117, %8, %119
    %121:ctrl, %122:i32 = load.4 %120, %7
    %123:i32 = iadd %122, %8
    %124:ctrl = store.4 %121, %123, %7
    %125:ctrl, %126:i32 = load.4 %124, %7
    %127:i32 = iadd %126, %8
    %128:ctrl = store.4 %125, %127, %7
    %129:ctrl, %130:i32 = load.4 %128, %7
    %131:i32 = iadd %130, %8
    %132:ctrl = store.4 %129, %131, %7
    %133:ctrl, %134:i32 = load.4 %132, %7
    %135:i32 = iadd %134, %8
    %136:ctrl = store.4 %133, %135, %7
    %137:ctrl, %138:i32 = load.4 %136, %7
    %139:i32 = iadd %138, %8
    %140:ctrl = store.4 %137, %139, %7
    %141:ctrl, %142:i32 = load.4 %140, %7
    %143:i32 = iadd %142, %8
    %144:ctrl = store.4 %141, %143, %7
    %145:ctrl, %146:i32 = load.4 %144, %7
    %147:i32 = iadd %146, %8
    %148:ctrl = store.4 %145, %147, %7
    %149:ctrl, %150:i32 = load.4 %148, %7
    %151:i32 = iadd %150, %8
    %152:ctrl = store.4 %149, %151, %7
    %153:ctrl, %154:i32 = load.4 %152, %6
    %155:i32 = iadd %154, %8
    %156:ctrl = store.4 %153, %155, %6
    %157:ctrl, %158:i32 = load.4 %156, %6
    %159:i32 = iadd %158, %8
    %160:ctrl = store.4 %157, %159, %6
    %161:ctrl, %162:i32 = load.4 %160, %6
    %163:i32 = iadd %162, %8
    %164:ctrl = store.4 %161, %163, %6
    %165:ctrl, %166:i32 = load.4 %164, %6
    %167:i32 = iadd %166, %8
    %168:ctrl = store.4 %165, %167, %6
    %169:ctrl, %170:i32 = load.4 %168, %6
    %171:i32 = iadd %170, %8
    %172:ctrl = store.4 %169, %171, %6
    %173:ctrl, %174:i32 = load.4 %172, %6
    %175:i32 = iadd %174, %8
    %176:ctrl = store.4 %173, %175, %6
    %177:ctrl, %178:i32 = load.4 %176, %6
    %179:i32 = iadd %178, %8
    %180:ctrl = store.4 %177, %179, %6
    %181:ctrl, %182:i32 = load.4 %180, %6
    %183:i32 = iadd %182, %8
    %184:ctrl = store.4 %181, %183, %6
    %185:ctrl, %186:i32 = load.1 %184, %31
    %187:ctrl, %188:ctrl = brcond %185, %186
    %189:ctrl, %190:phisel = region %187
    %191:ctrl, %192:i32 = load.4 %189, %7
    %193:i32 = iadd %192, %8
    %194:ctrl = store.4 %191, %193, %7
    %195:ctrl, %196:phisel = region %188
    %197:ctrl, %198:i32 = load.4 %195, %6
    %199:i32 = iadd %198, %8
    %200:ctrl = store.4 %197, %199, %6
    %201:ctrl, %202:phisel = region %194, %200
    %203:ctrl, %204:i32 = load.1 %201, %31
    %205:ctrl, %206:ctrl = brcond %203, %204
    %207:ctrl, %208:phisel = region %205
    %209:ctrl, %210:i32 = load.4 %207, %7
    %211:i32 = iadd %210, %8
    %212:ctrl = store.4 %209, %211, %7
    %213:ctrl, %214:phisel = region %206
    %215:ctrl, %216:i32 = load.4 %213, %6
    %217:i32 = iadd %216, %8
    %218:ctrl = store.4 %215, %217, %6
    %219:ctrl, %220:phisel = region %212, %218
    %221:ctrl, %222:i32 = load.1 %219, %31
    %223:ctrl, %224:ctrl = brcond %221, %222
    %225:ctrl, %226:phisel = region %223
    %227:ctrl, %228:i32 = load.4 %225, %7
    %229:i32 = iadd %228, %8
    %230:ctrl = store.4 %227, %229, %7
    %231:ctrl, %232:phisel = region %224
    %233:ctrl, %234:i32 = load.4 %231, %6
    %235:i32 = iadd %234, %8
    %236:ctrl = store.4 %233, %235, %6
    %237:ctrl, %238:phisel = region %230, %236
    %239:ctrl, %240:i32 = load.1 %237, %31
    %241:ctrl, %242:ctrl = brcond %239, %240
    %243:ctrl, %244:phisel = region %241
    %245:ctrl, %246:i32 = load.4 %243, %7
    %247:i32 = iadd %246, %8
    %248:ctrl = store.4 %245, %247, %7
    %249:ctrl, %250:phisel = region %242
    %251:ctrl, %252:i32 = load.4 %249, %6
    %253:i32 = iadd %252, %8
    %254:ctrl = store.4 %251, %253, %6
    %255:ctrl, %256:phisel = region %248, %254
    %257:ctrl, %258:i32 = load.1 %255, %31
    %259:ctrl, %260:ctrl = brcond %257, %258
    %261:ctrl, %262:phisel = region %259
    %263:ctrl, %264:i32 = load.4 %261, %7
    %265:i32 = iadd %264, %8
    %266:ctrl = store.4 %263, %265, %7
    %267:ctrl, %268:phisel = region %260
    %269:ctrl, %270:i32 = load.4 %267, %6
    %271:i32 = iadd %270, %8
    %272:ctrl = store.4 %269, %271, %6
    %273:ctrl, %274:phisel = region %266, %272
    %275:ctrl, %276:i32 = load.1 %273, %31
    %277:ctrl, %278:ctrl = brcond %275, %276
    %279:ctrl, %280:phisel = region %277
    %281:ctrl, %282:i32 = load.4 %279, %7
    %283:i32 = iadd %282, %8
    %284:ctrl = store.4 %281, %283, %7
    %285:ctrl, %286:phisel = region %278
    %287:ctrl, %288:i32 = load.4 %285, %6
    %289:i32 = iadd %288, %8
    %290:ctrl = store.4 %287, %289, %6
    %291:ctrl, %292:phisel = region %284, %290
    %293:ctrl, %294:i32 = load.1 %291, %31
    %295:ctrl, %296:ctrl = brcond %293, %294
    %297:ctrl, %298:phisel = region %295
    %299:ctrl, %300:i32 = load.4 %297, %7
    %301:i32 = iadd %300, %8
    %302:ctrl = store.4 %299, %301, %7
    %303:ctrl, %304:phisel = region %296
    %305:ctrl, %306:i32 = load.4 %303, %6
    %307:i32 = iadd %306, %8
    %308:ctrl = store.4 %305, %307, %6
    %309:ctrl, %310:phisel = region %302, %308
    %311:ctrl, %312:i32 = load.1 %309, %31
    %313:ctrl, %314:ctrl = brcond %311, %312
    %315:ctrl, %316:phisel = region %313
    %317:ctrl, %318:i32 = load.4 %315, %7
    %319:i32 = iadd %318, %8
    %320:ctrl = store.4 %317, %319, %7
    %321:ctrl, %322:phisel = region %314
    %323:ctrl, %324:i32 = load.4 %321, %6
    %325:i32 = iadd %324, %8
    %326:ctrl = store.4 %323, %325, %6
    %327:ctrl, %328:phisel = region %320, %326
    %329:ctrl, %330:i32 = load.1 %327, %30
    %331:ctrl, %332:ctrl = brcond %329, %330
    %333:ctrl, %334:phisel = region %331
    %335:ctrl, %336:i32 = load.4 %333, %7
    %337:i32 = iadd %336, %8
    %338:ctrl = store.4 %335, %337, %7
    %339:ctrl, %340:phisel = region %332
    %341:ctrl, %342:i32 = load.4 %339, %6
    %343:i32 = iadd %342, %8
    %344:ctrl = store.4 %341, %343, %6
    %345:ctrl, %346:phisel = region %338, %344
    %347:ctrl, %348:i32 = load.1 %345, %30
    %349:ctrl, %350:ctrl = brcond %347, %348
    %351:ctrl, %352:phisel = region %349
    %353:ctrl, %354:i32 = load.4 %351, %7
    %355:i32 = iadd %354, %8
    %356:ctrl = store.4 %353, %355, %7
    %357:ctrl, %358:phisel = region %350
    %359:ctrl, %360:i32 = load.4 %357, %6
    %361:i32 = iadd %360, %8
    %362:ctrl = store.4 %359, %361, %6
    %363:ctrl, %364:phisel = region %356, %362
    %365:ctrl, %366:i32 = load.1 %363, %30
    %367:ctrl, %368:ctrl = brcond %365, %366
    %369:ctrl, %370:phisel = region %367
    %371:ctrl, %372:i32 = load.4 %369, %7
    %373:i32 = iadd %372, %8
    %374:ctrl = store.4 %371, %373, %7
    %375:ctrl, %376:phisel = region %368
    %377:ctrl, %378:i32 = load.4 %375, %6
    %379:i32 = iadd %378, %8
    %380:ctrl = store.4 %377, %379, %6
    %381:ctrl, %382:phisel = region %374, %380
    %383:ctrl, %384:i32 = load.1 %381, %30
    %385:ctrl, %386:ctrl = brcond %383, %384
    %387:ctrl, %388:phisel = region %385
    %389:ctrl, %390:i32 = load.4 %387, %7
    %391:i32 = iadd %390, %8
    %392:ctrl = store.4 %389, %391, %7
    %393:ctrl, %394:phisel = region %386
    %395:ctrl, %396:i32 = load.4 %393, %6
    %397:i32 = iadd %396, %8
    %398:ctrl = store.4 %395, %397, %6
    %399:ctrl, %400:phisel = region %392, %398
    %401:ctrl, %402:i32 = load.1 %399, %30
    %403:ctrl, %404:ctrl = brcond %401, %402
    %405:ctrl, %406:phisel = region %403
    %407:ctrl, %408:i32 = load.4 %405, %7
    %409:i32 = iadd %408, %8
    %410:ctrl = store.4 %407, %409, %7
    %411:ctrl, %412:phisel = region %404
    %413:ctrl, %414:i32 = load.4 %411, %6
    %415:i32 = iadd %414, %8
    %416:ctrl = store.4 %413, %415, %6
    %417:ctrl, %418:phisel = region %410, %416
    %419:ctrl, %420:i32 = load.1 %417, %30
    %421:ctrl, %422:ctrl = brcond %419, %420
    %423:ctrl, %424:phisel = region %421
    %425:ctrl, %426:i32 = load.4 %423, %7
    %427:i32 = iadd %426, %8
    %428:ctrl = store.4 %425, %427, %7
    %429:ctrl, %430:phisel = region %422
    %431:ctrl, %432:i32 = load.4 %429, %6
    %433:i32 = iadd %432, %8
    %434:ctrl = store.4 %431, %433, %6
    %435:ctrl, %436:phisel = region %428, %434
    %437:ctrl, %438:i32 = load.1 %435, %30
    %439:ctrl, %440:ctrl = brcond %437, %438
    %441:ctrl, %442:phisel = region %439
    %443:ctrl, %444:i32 = load.4 %441, %7
    %445:i32 = iadd %444, %8
    %446:ctrl = store.4 %443, %445, %7
    %447:ctrl, %448:phisel = region %440
    %449:ctrl, %450:i32 = load.4 %447, %6
    %451:i32 = iadd %450, %8
    %452:ctrl = store.4 %449, %451, %6
    %453:ctrl, %454:phisel = region %446, %452
    %455:ctrl, %456:i32 = load.1 %453, %30
    %457:ctrl, %458:ctrl = brcond %455, %456
    %459:ctrl, %460:phisel = region %457
    %461:ctrl, %462:i32 = load.4 %459, %7
    %463:i32 = iadd %462, %8
    %464:ctrl = store.4 %461, %463, %7
    %465:ctrl, %466:phisel = region %458
    %467:ctrl, %468:i32 = load.4 %465, %6
    %469:i32 = iadd %468, %8
    %470:ctrl = store.4 %467, %469, %6
    %471:ctrl, %472:phisel = region %464, %470
    %473:ctrl, %474:ptr = load.8 %471, %29
    %475:ptr = ptroff %474, %11
    %476:ctrl, %477:i32 = load.1 %473, %475
    %478:ctrl, %479:ctrl = brcond %476, %477
    %480:ctrl, %481:phisel = region %478
    %482:ctrl, %483:i32 = load.4 %480, %7
    %484:i32 = iadd %483, %8
    %485:ctrl = store.4 %482, %484, %7
    %486:ctrl, %487:phisel = region %479
    %488:ctrl, %489:i32 = load.4 %486, %6
    %490:i32 = iadd %489, %8
    %491:ctrl = store.4 %488, %490, %6
    %492:ctrl, %493:phisel = region %485, %491
    %494:ctrl, %495:ptr = load.8 %492, %29
    %496:ptr = ptroff %495, %11
    %497:ctrl, %498:i32 = load.1 %494, %496
    %499:ctrl, %500:ctrl = brcond %497, %498
    %501:ctrl, %502:phisel = region %499
    %503:ctrl, %504:i32 = load.4 %501, %7
    %505:i32 = iadd %504, %8
    %506:ctrl = store.4 %503, %505, %7
    %507:ctrl, %508:phisel = region %500
    %509:ctrl, %510:i32 = load.4 %507, %6
    %511:i32 = iadd %510, %8
    %512:ctrl = store.4 %509, %511, %6
    %513:ctrl, %514:phisel = region %506, %512
    %515:ctrl, %516:ptr = load.8 %513, %29
    %517:ptr = ptroff %516, %11
    %518:ctrl, %519:i32 = load.1 %515, %517
    %520:ctrl, %521:ctrl = brcond %518, %519
    %522:ctrl, %523:phisel = region %520
    %524:ctrl, %525:i32 = load.4 %522, %7
    %526:i32 = iadd %525, %8
    %527:ctrl = store.4 %524, %526, %7
    %528:ctrl, %529:phisel = region %521
    %530:ctrl, %531:i32 = load.4 %528, %6
    %532:i32 = iadd %531, %8
    %533:ctrl = store.4 %530, %532, %6
    %534:ctrl, %535:phisel = region %527, %533
    %536:ctrl, %537:ptr = load.8 %534, %29
    %538:ptr = ptroff %537, %11
    %539:ctrl, %540:i32 = load.1 %536, %538
    %541:ctrl, %542:ctrl = brcond %539, %540
    %543:ctrl, %544:phisel = region %541
    %545:ctrl, %546:i32 = load.4 %543, %7
    %547:i32 = iadd %546, %8
    %548:ctrl = store.4 %545, %547, %7
    %549:ctrl, %550:phisel = region %542
    %551:ctrl, %552:i32 = load.4 %549, %6
    %553:i32 = iadd %552, %8
    %554:ctrl = store.4 %551, %553, %6
    %555:ctrl, %556:phisel = region %548, %554
    %557:ctrl, %558:ptr = load.8 %555, %29
    %559:ptr = ptroff %558, %11
    %560:ctrl, %561:i32 = load.1 %557, %559
    %562:ctrl, %563:ctrl = brcond %560, %561
    %564:ctrl, %565:phisel = region %562
    %566:ctrl, %567:i32 = load.4 %564, %7
    %568:i32 = iadd %567, %8
    %569:ctrl = store.4 %566, %568, %7
    %570:ctrl, %571:phisel = region %563
    %572:ctrl, %573:i32 = load.4 %570, %6
    %574:i32 = iadd %573, %8
    %575:ctrl = store.4 %572, %574, %6
    %576:ctrl, %577:phisel = region %569, %575
    %578:ctrl, %579:ptr = load.8 %576, %29
    %580:ptr = ptroff %579, %11
    %581:ctrl, %582:i32 = load.1 %578, %580
    %583:ctrl, %584:ctrl = brcond %581, %582
    %585:ctrl, %586:phisel = region %583
    %587:ctrl, %588:i32 = load.4 %585, %7
    %589:i32 = iadd %588, %8
    %590:ctrl = store.4 %587, %589, %7
    %591:ctrl, %592:phisel = region %584
    %593:ctrl, %594:i32 = load.4 %591, %6
    %595:i32 = iadd %594, %8
    %596:ctrl = store.4 %593, %595, %6
    %597:ctrl, %598:phisel = region %590, %596
    %599:ctrl, %600:ptr = load.8 %597, %29
    %601:ptr = ptroff %600, %11
    %602:ctrl, %603:i32 = load.1 %599, %601
    %604:ctrl, %605:ctrl = brcond %602, %603
    %606:ctrl, %607:phisel = region %604
    %608:ctrl, %609:i32 = load.4 %606, %7
    %610:i32 = iadd %609, %8
    %611:ctrl = store.4 %608, %610, %7
    %612:ctrl, %613:phisel = region %605
    %614:ctrl, %615:i32 = load.4 %612, %6
    %616:i32 = iadd %615, %8
    %617:ctrl = store.4 %614, %616, %6
    %618:ctrl, %619:phisel = region %611, %617
    %620:ctrl, %621:ptr = load.8 %618, %29
    %622:ptr = ptroff %621, %11
    %623:ctrl, %624:i32 = load.1 %620, %622
    %625:ctrl, %626:ctrl = brcond %623, %624
    %627:ctrl, %628:phisel = region %625
    %629:ctrl, %630:i32 = load.4 %627, %7
    %631:i32 = iadd %630, %8
    %632:ctrl = store.4 %629, %631, %7
    %633:ctrl, %634:phisel = region %626
    %635:ctrl, %636:i32 = load.4 %633, %6
    %637:i32 = iadd %636, %8
    %638:ctrl = store.4 %635, %637, %6
    %639:ctrl, %640:phisel = region %632, %638
    %641:ctrl, %642:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %639
    %643:ctrl, %644:ctrl = brcond %641, %642
    %645:ctrl, %646:phisel = region %643
    %647:ctrl, %648:i32 = load.4 %645, %7
    %649:i32 = iadd %648, %8
    %650:ctrl = store.4 %647, %649, %7
    %651:ctrl, %652:phisel = region %644
    %653:ctrl, %654:i32 = load.4 %651, %6
    %655:i32 = iadd %654, %8
    %656:ctrl = store.4 %653, %655, %6
    %657:ctrl, %658:phisel = region %650, %656
    %659:ctrl, %660:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %657
    %661:ctrl, %662:ctrl = brcond %659, %660
    %663:ctrl, %664:phisel = region %661
    %665:ctrl, %666:i32 = load.4 %663, %7
    %667:i32 = iadd %666, %8
    %668:ctrl = store.4 %665, %667, %7
    %669:ctrl, %670:phisel = region %662
    %671:ctrl, %672:i32 = load.4 %669, %6
    %673:i32 = iadd %672, %8
    %674:ctrl = store.4 %671, %673, %6
    %675:ctrl, %676:phisel = region %668, %674
    %677:ctrl, %678:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %675
    %679:ctrl, %680:ctrl = brcond %677, %678
    %681:ctrl, %682:phisel = region %679
    %683:ctrl, %684:i32 = load.4 %681, %7
    %685:i32 = iadd %684, %8
    %686:ctrl = store.4 %683, %685, %7
    %687:ctrl, %688:phisel = region %680
    %689:ctrl, %690:i32 = load.4 %687, %6
    %691:i32 = iadd %690, %8
    %692:ctrl = store.4 %689, %691, %6
    %693:ctrl, %694:phisel = region %686, %692
    %695:ctrl, %696:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %693
    %697:ctrl, %698:ctrl = brcond %695, %696
    %699:ctrl, %700:phisel = region %697
    %701:ctrl, %702:i32 = load.4 %699, %7
    %703:i32 = iadd %702, %8
    %704:ctrl = store.4 %701, %703, %7
    %705:ctrl, %706:phisel = region %698
    %707:ctrl, %708:i32 = load.4 %705, %6
    %709:i32 = iadd %708, %8
    %710:ctrl = store.4 %707, %709, %6
    %711:ctrl, %712:phisel = region %704, %710
    %713:ctrl, %714:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %711
    %715:ctrl, %716:ctrl = brcond %713, %714
    %717:ctrl, %718:phisel = region %715
    %719:ctrl, %720:i32 = load.4 %717, %7
    %721:i32 = iadd %720, %8
    %722:ctrl = store.4 %719, %721, %7
    %723:ctrl, %724:phisel = region %716
    %725:ctrl, %726:i32 = load.4 %723, %6
    %727:i32 = iadd %726, %8
    %728:ctrl = store.4 %725, %727, %6
    %729:ctrl, %730:phisel = region %722, %728
    %731:ctrl, %732:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %729
    %733:ctrl, %734:ctrl = brcond %731, %732
    %735:ctrl, %736:phisel = region %733
    %737:ctrl, %738:i32 = load.4 %735, %7
    %739:i32 = iadd %738, %8
    %740:ctrl = store.4 %737, %739, %7
    %741:ctrl, %742:phisel = region %734
    %743:ctrl, %744:i32 = load.4 %741, %6
    %745:i32 = iadd %744, %8
    %746:ctrl = store.4 %743, %745, %6
    %747:ctrl, %748:phisel = region %740, %746
    %749:ctrl, %750:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %747
    %751:ctrl, %752:ctrl = brcond %749, %750
    %753:ctrl, %754:phisel = region %751
    %755:ctrl, %756:i32 = load.4 %753, %7
    %757:i32 = iadd %756, %8
    %758:ctrl = store.4 %755, %757, %7
    %759:ctrl, %760:phisel = region %752
    %761:ctrl, %762:i32 = load.4 %759, %6
    %763:i32 = iadd %762, %8
    %764:ctrl = store.4 %761, %763, %6
    %765:ctrl, %766:phisel = region %758, %764
    %767:ctrl, %768:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %765
    %769:ctrl, %770:ctrl = brcond %767, %768
    %771:ctrl, %772:phisel = region %769
    %773:ctrl, %774:i32 = load.4 %771, %7
    %775:i32 = iadd %774, %8
    %776:ctrl = store.4 %773, %775, %7
    %777:ctrl, %778:phisel = region %770
    %779:ctrl, %780:i32 = load.4 %777, %6
    %781:i32 = iadd %780, %8
    %782:ctrl = store.4 %779, %781, %6
    %783:ctrl, %784:phisel = region %776, %782
    %785:ctrl, %786:ptr = load.8 %783, %28
    %787:ctrl, %788:i32 = load.4 %785, %13
    %789:i64 = iext %788
    %790:i64 = sfill 32 %789
    %791:i64 = imul %14, %790
    %792:i64 = iadd %17, %791
    %794:ptr = ptroff %786, %11
    %795:ctrl, %796:i64 = load.4 %787, %794
    %797:i64 = icmp slt %790, %796
    %798:ctrl, %799:ctrl = brcond %795, %797
    %800:ctrl, %801:phisel = region %798
    %2662:ctrl, %2663:phisel = region %799
    %2664:ctrl = call @throw_index_out_of_range_exception %2662
    unreachable %2664
    %793:ptr = ptroff %786, %792
    %802:ctrl, %803:i32 = load.1 %800, %793
    %804:ctrl, %805:ctrl = brcond %802, %803
    %806:ctrl, %807:phisel = region %804
    %808:ctrl, %809:i32 = load.4 %806, %7
    %810:i32 = iadd %809, %8
    %811:ctrl = store.4 %808, %810, %7
    %812:ctrl, %813:phisel = region %805
    %814:ctrl, %815:i32 = load.4 %812, %6
    %816:i32 = iadd %815, %8
    %817:ctrl = store.4 %814, %816, %6
    %818:ctrl, %819:phisel = region %811, %817
    %820:ctrl, %821:ptr = load.8 %818, %28
    %822:ctrl, %823:i32 = load.4 %820, %13
    %824:i64 = iext %823
    %825:i64 = sfill 32 %824
    %826:i64 = imul %14, %825
    %827:i64 = iadd %17, %826
    %829:ptr = ptroff %821, %11
    %830:ctrl, %831:i64 = load.4 %822, %829
    %832:i64 = icmp slt %825, %831
    %833:ctrl, %834:ctrl = brcond %830, %832
    %835:ctrl, %836:phisel = region %833
    %2659:ctrl, %2660:phisel = region %834
    %2661:ctrl = call @throw_index_out_of_range_exception %2659
    unreachable %2661
    %828:ptr = ptroff %821, %827
    %837:ctrl, %838:i32 = load.1 %835, %828
    %839:ctrl, %840:ctrl = brcond %837, %838
    %841:ctrl, %842:phisel = region %839
    %843:ctrl, %844:i32 = load.4 %841, %7
    %845:i32 = iadd %844, %8
    %846:ctrl = store.4 %843, %845, %7
    %847:ctrl, %848:phisel = region %840
    %849:ctrl, %850:i32 = load.4 %847, %6
    %851:i32 = iadd %850, %8
    %852:ctrl = store.4 %849, %851, %6
    %853:ctrl, %854:phisel = region %846, %852
    %855:ctrl, %856:ptr = load.8 %853, %28
    %857:ctrl, %858:i32 = load.4 %855, %13
    %859:i64 = iext %858
    %860:i64 = sfill 32 %859
    %861:i64 = imul %14, %860
    %862:i64 = iadd %17, %861
    %864:ptr = ptroff %856, %11
    %865:ctrl, %866:i64 = load.4 %857, %864
    %867:i64 = icmp slt %860, %866
    %868:ctrl, %869:ctrl = brcond %865, %867
    %870:ctrl, %871:phisel = region %868
    %2656:ctrl, %2657:phisel = region %869
    %2658:ctrl = call @throw_index_out_of_range_exception %2656
    unreachable %2658
    %863:ptr = ptroff %856, %862
    %872:ctrl, %873:i32 = load.1 %870, %863
    %874:ctrl, %875:ctrl = brcond %872, %873
    %876:ctrl, %877:phisel = region %874
    %878:ctrl, %879:i32 = load.4 %876, %7
    %880:i32 = iadd %879, %8
    %881:ctrl = store.4 %878, %880, %7
    %882:ctrl, %883:phisel = region %875
    %884:ctrl, %885:i32 = load.4 %882, %6
    %886:i32 = iadd %885, %8
    %887:ctrl = store.4 %884, %886, %6
    %888:ctrl, %889:phisel = region %881, %887
    %890:ctrl, %891:ptr = load.8 %888, %28
    %892:ctrl, %893:i32 = load.4 %890, %13
    %894:i64 = iext %893
    %895:i64 = sfill 32 %894
    %896:i64 = imul %14, %895
    %897:i64 = iadd %17, %896
    %899:ptr = ptroff %891, %11
    %900:ctrl, %901:i64 = load.4 %892, %899
    %902:i64 = icmp slt %895, %901
    %903:ctrl, %904:ctrl = brcond %900, %902
    %905:ctrl, %906:phisel = region %903
    %2653:ctrl, %2654:phisel = region %904
    %2655:ctrl = call @throw_index_out_of_range_exception %2653
    unreachable %2655
    %898:ptr = ptroff %891, %897
    %907:ctrl, %908:i32 = load.1 %905, %898
    %909:ctrl, %910:ctrl = brcond %907, %908
    %911:ctrl, %912:phisel = region %909
    %913:ctrl, %914:i32 = load.4 %911, %7
    %915:i32 = iadd %914, %8
    %916:ctrl = store.4 %913, %915, %7
    %917:ctrl, %918:phisel = region %910
    %919:ctrl, %920:i32 = load.4 %917, %6
    %921:i32 = iadd %920, %8
    %922:ctrl = store.4 %919, %921, %6
    %923:ctrl, %924:phisel = region %916, %922
    %925:ctrl, %926:ptr = load.8 %923, %28
    %927:ctrl, %928:i32 = load.4 %925, %13
    %929:i64 = iext %928
    %930:i64 = sfill 32 %929
    %931:i64 = imul %14, %930
    %932:i64 = iadd %17, %931
    %934:ptr = ptroff %926, %11
    %935:ctrl, %936:i64 = load.4 %927, %934
    %937:i64 = icmp slt %930, %936
    %938:ctrl, %939:ctrl = brcond %935, %937
    %940:ctrl, %941:phisel = region %938
    %2650:ctrl, %2651:phisel = region %939
    %2652:ctrl = call @throw_index_out_of_range_exception %2650
    unreachable %2652
    %933:ptr = ptroff %926, %932
    %942:ctrl, %943:i32 = load.1 %940, %933
    %944:ctrl, %945:ctrl = brcond %942, %943
    %946:ctrl, %947:phisel = region %944
    %948:ctrl, %949:i32 = load.4 %946, %7
    %950:i32 = iadd %949, %8
    %951:ctrl = store.4 %948, %950, %7
    %952:ctrl, %953:phisel = region %945
    %954:ctrl, %955:i32 = load.4 %952, %6
    %956:i32 = iadd %955, %8
    %957:ctrl = store.4 %954, %956, %6
    %958:ctrl, %959:phisel = region %951, %957
    %960:ctrl, %961:ptr = load.8 %958, %28
    %962:ctrl, %963:i32 = load.4 %960, %13
    %964:i64 = iext %963
    %965:i64 = sfill 32 %964
    %966:i64 = imul %14, %965
    %967:i64 = iadd %17, %966
    %969:ptr = ptroff %961, %11
    %970:ctrl, %971:i64 = load.4 %962, %969
    %972:i64 = icmp slt %965, %971
    %973:ctrl, %974:ctrl = brcond %970, %972
    %975:ctrl, %976:phisel = region %973
    %2647:ctrl, %2648:phisel = region %974
    %2649:ctrl = call @throw_index_out_of_range_exception %2647
    unreachable %2649
    %968:ptr = ptroff %961, %967
    %977:ctrl, %978:i32 = load.1 %975, %968
    %979:ctrl, %980:ctrl = brcond %977, %978
    %981:ctrl, %982:phisel = region %979
    %983:ctrl, %984:i32 = load.4 %981, %7
    %985:i32 = iadd %984, %8
    %986:ctrl = store.4 %983, %985, %7
    %987:ctrl, %988:phisel = region %980
    %989:ctrl, %990:i32 = load.4 %987, %6
    %991:i32 = iadd %990, %8
    %992:ctrl = store.4 %989, %991, %6
    %993:ctrl, %994:phisel = region %986, %992
    %995:ctrl, %996:ptr = load.8 %993, %28
    %997:ctrl, %998:i32 = load.4 %995, %13
    %999:i64 = iext %998
    %1000:i64 = sfill 32 %999
    %1001:i64 = imul %14, %1000
    %1002:i64 = iadd %17, %1001
    %1004:ptr = ptroff %996, %11
    %1005:ctrl, %1006:i64 = load.4 %997, %1004
    %1007:i64 = icmp slt %1000, %1006
    %1008:ctrl, %1009:ctrl = brcond %1005, %1007
    %1010:ctrl, %1011:phisel = region %1008
    %2644:ctrl, %2645:phisel = region %1009
    %2646:ctrl = call @throw_index_out_of_range_exception %2644
    unreachable %2646
    %1003:ptr = ptroff %996, %1002
    %1012:ctrl, %1013:i32 = load.1 %1010, %1003
    %1014:ctrl, %1015:ctrl = brcond %1012, %1013
    %1016:ctrl, %1017:phisel = region %1014
    %1018:ctrl, %1019:i32 = load.4 %1016, %7
    %1020:i32 = iadd %1019, %8
    %1021:ctrl = store.4 %1018, %1020, %7
    %1022:ctrl, %1023:phisel = region %1015
    %1024:ctrl, %1025:i32 = load.4 %1022, %6
    %1026:i32 = iadd %1025, %8
    %1027:ctrl = store.4 %1024, %1026, %6
    %1028:ctrl, %1029:phisel = region %1021, %1027
    %1030:ctrl, %1031:ptr = load.8 %1028, %28
    %1032:ctrl, %1033:i32 = load.4 %1030, %13
    %1034:i64 = iext %1033
    %1035:i64 = sfill 32 %1034
    %1036:i64 = imul %14, %1035
    %1037:i64 = iadd %17, %1036
    %1039:ptr = ptroff %1031, %11
    %1040:ctrl, %1041:i64 = load.4 %1032, %1039
    %1042:i64 = icmp slt %1035, %1041
    %1043:ctrl, %1044:ctrl = brcond %1040, %1042
    %1045:ctrl, %1046:phisel = region %1043
    %2641:ctrl, %2642:phisel = region %1044
    %2643:ctrl = call @throw_index_out_of_range_exception %2641
    unreachable %2643
    %1038:ptr = ptroff %1031, %1037
    %1047:ctrl, %1048:i32 = load.1 %1045, %1038
    %1049:ctrl, %1050:ctrl = brcond %1047, %1048
    %1051:ctrl, %1052:phisel = region %1049
    %1053:ctrl, %1054:i32 = load.4 %1051, %7
    %1055:i32 = iadd %1054, %8
    %1056:ctrl = store.4 %1053, %1055, %7
    %1057:ctrl, %1058:phisel = region %1050
    %1059:ctrl, %1060:i32 = load.4 %1057, %6
    %1061:i32 = iadd %1060, %8
    %1062:ctrl = store.4 %1059, %1061, %6
    %1063:ctrl, %1064:phisel = region %1056, %1062
    %1065:ctrl, %1066:ptr = load.8 %1063, %12
    %1067:ctrl, %1068:i32 = load.4 %1065, %13
    %1069:i64 = iext %1068
    %1070:i64 = sfill 32 %1069
    %1071:i64 = imul %14, %1070
    %1072:i64 = iadd %17, %1071
    %1074:ptr = ptroff %1066, %11
    %1075:ctrl, %1076:i64 = load.4 %1067, %1074
    %1077:i64 = icmp slt %1070, %1076
    %1078:ctrl, %1079:ctrl = brcond %1075, %1077
    %1080:ctrl, %1081:phisel = region %1078
    %2638:ctrl, %2639:phisel = region %1079
    %2640:ctrl = call @throw_index_out_of_range_exception %2638
    unreachable %2640
    %1073:ptr = ptroff %1066, %1072
    %1082:ctrl, %1083:i32 = load.1 %1080, %1073
    %1084:ctrl, %1085:ctrl = brcond %1082, %1083
    %1086:ctrl, %1087:phisel = region %1084
    %1088:ctrl, %1089:i32 = load.4 %1086, %7
    %1090:i32 = iadd %1089, %8
    %1091:ctrl = store.4 %1088, %1090, %7
    %1092:ctrl, %1093:phisel = region %1085
    %1094:ctrl, %1095:i32 = load.4 %1092, %6
    %1096:i32 = iadd %1095, %8
    %1097:ctrl = store.4 %1094, %1096, %6
    %1098:ctrl, %1099:phisel = region %1091, %1097
    %1100:ctrl, %1101:ptr = load.8 %1098, %12
    %1102:ctrl, %1103:i32 = load.4 %1100, %13
    %1104:i64 = iext %1103
    %1105:i64 = sfill 32 %1104
    %1106:i64 = imul %14, %1105
    %1107:i64 = iadd %17, %1106
    %1109:ptr = ptroff %1101, %11
    %1110:ctrl, %1111:i64 = load.4 %1102, %1109
    %1112:i64 = icmp slt %1105, %1111
    %1113:ctrl, %1114:ctrl = brcond %1110, %1112
    %1115:ctrl, %1116:phisel = region %1113
    %2635:ctrl, %2636:phisel = region %1114
    %2637:ctrl = call @throw_index_out_of_range_exception %2635
    unreachable %2637
    %1108:ptr = ptroff %1101, %1107
    %1117:ctrl, %1118:i32 = load.1 %1115, %1108
    %1119:ctrl, %1120:ctrl = brcond %1117, %1118
    %1121:ctrl, %1122:phisel = region %1119
    %1123:ctrl, %1124:i32 = load.4 %1121, %7
    %1125:i32 = iadd %1124, %8
    %1126:ctrl = store.4 %1123, %1125, %7
    %1127:ctrl, %1128:phisel = region %1120
    %1129:ctrl, %1130:i32 = load.4 %1127, %6
    %1131:i32 = iadd %1130, %8
    %1132:ctrl = store.4 %1129, %1131, %6
    %1133:ctrl, %1134:phisel = region %1126, %1132
    %1135:ctrl, %1136:ptr = load.8 %1133, %12
    %1137:ctrl, %1138:i32 = load.4 %1135, %13
    %1139:i64 = iext %1138
    %1140:i64 = sfill 32 %1139
    %1141:i64 = imul %14, %1140
    %1142:i64 = iadd %17, %1141
    %1144:ptr = ptroff %1136, %11
    %1145:ctrl, %1146:i64 = load.4 %1137, %1144
    %1147:i64 = icmp slt %1140, %1146
    %1148:ctrl, %1149:ctrl = brcond %1145, %1147
    %1150:ctrl, %1151:phisel = region %1148
    %2632:ctrl, %2633:phisel = region %1149
    %2634:ctrl = call @throw_index_out_of_range_exception %2632
    unreachable %2634
    %1143:ptr = ptroff %1136, %1142
    %1152:ctrl, %1153:i32 = load.1 %1150, %1143
    %1154:ctrl, %1155:ctrl = brcond %1152, %1153
    %1156:ctrl, %1157:phisel = region %1154
    %1158:ctrl, %1159:i32 = load.4 %1156, %7
    %1160:i32 = iadd %1159, %8
    %1161:ctrl = store.4 %1158, %1160, %7
    %1162:ctrl, %1163:phisel = region %1155
    %1164:ctrl, %1165:i32 = load.4 %1162, %6
    %1166:i32 = iadd %1165, %8
    %1167:ctrl = store.4 %1164, %1166, %6
    %1168:ctrl, %1169:phisel = region %1161, %1167
    %1170:ctrl, %1171:ptr = load.8 %1168, %12
    %1172:ctrl, %1173:i32 = load.4 %1170, %13
    %1174:i64 = iext %1173
    %1175:i64 = sfill 32 %1174
    %1176:i64 = imul %14, %1175
    %1177:i64 = iadd %17, %1176
    %1179:ptr = ptroff %1171, %11
    %1180:ctrl, %1181:i64 = load.4 %1172, %1179
    %1182:i64 = icmp slt %1175, %1181
    %1183:ctrl, %1184:ctrl = brcond %1180, %1182
    %1185:ctrl, %1186:phisel = region %1183
    %2629:ctrl, %2630:phisel = region %1184
    %2631:ctrl = call @throw_index_out_of_range_exception %2629
    unreachable %2631
    %1178:ptr = ptroff %1171, %1177
    %1187:ctrl, %1188:i32 = load.1 %1185, %1178
    %1189:ctrl, %1190:ctrl = brcond %1187, %1188
    %1191:ctrl, %1192:phisel = region %1189
    %1193:ctrl, %1194:i32 = load.4 %1191, %7
    %1195:i32 = iadd %1194, %8
    %1196:ctrl = store.4 %1193, %1195, %7
    %1197:ctrl, %1198:phisel = region %1190
    %1199:ctrl, %1200:i32 = load.4 %1197, %6
    %1201:i32 = iadd %1200, %8
    %1202:ctrl = store.4 %1199, %1201, %6
    %1203:ctrl, %1204:phisel = region %1196, %1202
    %1205:ctrl, %1206:ptr = load.8 %1203, %12
    %1207:ctrl, %1208:i32 = load.4 %1205, %13
    %1209:i64 = iext %1208
    %1210:i64 = sfill 32 %1209
    %1211:i64 = imul %14, %1210
    %1212:i64 = iadd %17, %1211
    %1214:ptr = ptroff %1206, %11
    %1215:ctrl, %1216:i64 = load.4 %1207, %1214
    %1217:i64 = icmp slt %1210, %1216
    %1218:ctrl, %1219:ctrl = brcond %1215, %1217
    %1220:ctrl, %1221:phisel = region %1218
    %2626:ctrl, %2627:phisel = region %1219
    %2628:ctrl = call @throw_index_out_of_range_exception %2626
    unreachable %2628
    %1213:ptr = ptroff %1206, %1212
    %1222:ctrl, %1223:i32 = load.1 %1220, %1213
    %1224:ctrl, %1225:ctrl = brcond %1222, %1223
    %1226:ctrl, %1227:phisel = region %1224
    %1228:ctrl, %1229:i32 = load.4 %1226, %7
    %1230:i32 = iadd %1229, %8
    %1231:ctrl = store.4 %1228, %1230, %7
    %1232:ctrl, %1233:phisel = region %1225
    %1234:ctrl, %1235:i32 = load.4 %1232, %6
    %1236:i32 = iadd %1235, %8
    %1237:ctrl = store.4 %1234, %1236, %6
    %1238:ctrl, %1239:phisel = region %1231, %1237
    %1240:ctrl, %1241:ptr = load.8 %1238, %12
    %1242:ctrl, %1243:i32 = load.4 %1240, %13
    %1244:i64 = iext %1243
    %1245:i64 = sfill 32 %1244
    %1246:i64 = imul %14, %1245
    %1247:i64 = iadd %17, %1246
    %1249:ptr = ptroff %1241, %11
    %1250:ctrl, %1251:i64 = load.4 %1242, %1249
    %1252:i64 = icmp slt %1245, %1251
    %1253:ctrl, %1254:ctrl = brcond %1250, %1252
    %1255:ctrl, %1256:phisel = region %1253
    %2623:ctrl, %2624:phisel = region %1254
    %2625:ctrl = call @throw_index_out_of_range_exception %2623
    unreachable %2625
    %1248:ptr = ptroff %1241, %1247
    %1257:ctrl, %1258:i32 = load.1 %1255, %1248
    %1259:ctrl, %1260:ctrl = brcond %1257, %1258
    %1261:ctrl, %1262:phisel = region %1259
    %1263:ctrl, %1264:i32 = load.4 %1261, %7
    %1265:i32 = iadd %1264, %8
    %1266:ctrl = store.4 %1263, %1265, %7
    %1267:ctrl, %1268:phisel = region %1260
    %1269:ctrl, %1270:i32 = load.4 %1267, %6
    %1271:i32 = iadd %1270, %8
    %1272:ctrl = store.4 %1269, %1271, %6
    %1273:ctrl, %1274:phisel = region %1266, %1272
    %1275:ctrl, %1276:ptr = load.8 %1273, %12
    %1277:ctrl, %1278:i32 = load.4 %1275, %13
    %1279:i64 = iext %1278
    %1280:i64 = sfill 32 %1279
    %1281:i64 = imul %14, %1280
    %1282:i64 = iadd %17, %1281
    %1284:ptr = ptroff %1276, %11
    %1285:ctrl, %1286:i64 = load.4 %1277, %1284
    %1287:i64 = icmp slt %1280, %1286
    %1288:ctrl, %1289:ctrl = brcond %1285, %1287
    %1290:ctrl, %1291:phisel = region %1288
    %2620:ctrl, %2621:phisel = region %1289
    %2622:ctrl = call @throw_index_out_of_range_exception %2620
    unreachable %2622
    %1283:ptr = ptroff %1276, %1282
    %1292:ctrl, %1293:i32 = load.1 %1290, %1283
    %1294:ctrl, %1295:ctrl = brcond %1292, %1293
    %1296:ctrl, %1297:phisel = region %1294
    %1298:ctrl, %1299:i32 = load.4 %1296, %7
    %1300:i32 = iadd %1299, %8
    %1301:ctrl = store.4 %1298, %1300, %7
    %1302:ctrl, %1303:phisel = region %1295
    %1304:ctrl, %1305:i32 = load.4 %1302, %6
    %1306:i32 = iadd %1305, %8
    %1307:ctrl = store.4 %1304, %1306, %6
    %1308:ctrl, %1309:phisel = region %1301, %1307
    %1310:ctrl, %1311:ptr = load.8 %1308, %12
    %1312:ctrl, %1313:i32 = load.4 %1310, %13
    %1314:i64 = iext %1313
    %1315:i64 = sfill 32 %1314
    %1316:i64 = imul %14, %1315
    %1317:i64 = iadd %17, %1316
    %1319:ptr = ptroff %1311, %11
    %1320:ctrl, %1321:i64 = load.4 %1312, %1319
    %1322:i64 = icmp slt %1315, %1321
    %1323:ctrl, %1324:ctrl = brcond %1320, %1322
    %1325:ctrl, %1326:phisel = region %1323
    %2617:ctrl, %2618:phisel = region %1324
    %2619:ctrl = call @throw_index_out_of_range_exception %2617
    unreachable %2619
    %1318:ptr = ptroff %1311, %1317
    %1327:ctrl, %1328:i32 = load.1 %1325, %1318
    %1329:ctrl, %1330:ctrl = brcond %1327, %1328
    %1331:ctrl, %1332:phisel = region %1329
    %1333:ctrl, %1334:i32 = load.4 %1331, %7
    %1335:i32 = iadd %1334, %8
    %1336:ctrl = store.4 %1333, %1335, %7
    %1337:ctrl, %1338:phisel = region %1330
    %1339:ctrl, %1340:i32 = load.4 %1337, %6
    %1341:i32 = iadd %1340, %8
    %1342:ctrl = store.4 %1339, %1341, %6
    %1343:ctrl, %1344:phisel = region %1336, %1342
    %1345:ctrl, %1346:i32 = load.4 %1343, %7
    %1347:i32 = iadd %1346, %8
    %1348:ctrl = store.4 %1345, %1347, %7
    %1349:ctrl, %1350:i32 = load.4 %1348, %6
    %1351:i32 = iadd %1350, %8
    %1352:ctrl = store.4 %1349, %1351, %6
    %1353:ctrl, %1354:i32 = load.1 %1352, %31
    %1355:ctrl, %1356:ctrl = brcond %1353, %1354
    %1357:ctrl, %1358:phisel = region %1355
    %1359:ctrl, %1360:i32 = load.4 %1357, %7
    %1361:i32 = iadd %1360, %8
    %1362:ctrl = store.4 %1359, %1361, %7
    %1363:ctrl, %1364:phisel = region %1356
    %1365:ctrl, %1366:i32 = load.4 %1363, %6
    %1367:i32 = iadd %1366, %8
    %1368:ctrl = store.4 %1365, %1367, %6
    %1369:ctrl, %1370:phisel = region %1362, %1368
    %1371:ctrl, %1372:i32 = load.1 %1369, %30
    %1373:ctrl, %1374:ctrl = brcond %1371, %1372
    %1375:ctrl, %1376:phisel = region %1373
    %1377:ctrl, %1378:i32 = load.4 %1375, %7
    %1379:i32 = iadd %1378, %8
    %1380:ctrl = store.4 %1377, %1379, %7
    %1381:ctrl, %1382:phisel = region %1374
    %1383:ctrl, %1384:i32 = load.4 %1381, %6
    %1385:i32 = iadd %1384, %8
    %1386:ctrl = store.4 %1383, %1385, %6
    %1387:ctrl, %1388:phisel = region %1380, %1386
    %1389:ctrl, %1390:ptr = load.8 %1387, %29
    %1391:ptr = ptroff %1390, %11
    %1392:ctrl, %1393:i32 = load.1 %1389, %1391
    %1394:ctrl, %1395:ctrl = brcond %1392, %1393
    %1396:ctrl, %1397:phisel = region %1394
    %1398:ctrl, %1399:i32 = load.4 %1396, %7
    %1400:i32 = iadd %1399, %8
    %1401:ctrl = store.4 %1398, %1400, %7
    %1402:ctrl, %1403:phisel = region %1395
    %1404:ctrl, %1405:i32 = load.4 %1402, %6
    %1406:i32 = iadd %1405, %8
    %1407:ctrl = store.4 %1404, %1406, %6
    %1408:ctrl, %1409:phisel = region %1401, %1407
    %1410:ctrl, %1411:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1408
    %1412:ctrl, %1413:ctrl = brcond %1410, %1411
    %1414:ctrl, %1415:phisel = region %1412
    %1416:ctrl, %1417:i32 = load.4 %1414, %7
    %1418:i32 = iadd %1417, %8
    %1419:ctrl = store.4 %1416, %1418, %7
    %1420:ctrl, %1421:phisel = region %1413
    %1422:ctrl, %1423:i32 = load.4 %1420, %6
    %1424:i32 = iadd %1423, %8
    %1425:ctrl = store.4 %1422, %1424, %6
    %1426:ctrl, %1427:phisel = region %1419, %1425
    %1428:ctrl, %1429:ptr = load.8 %1426, %28
    %1430:ctrl, %1431:i32 = load.4 %1428, %13
    %1432:i64 = iext %1431
    %1433:i64 = sfill 32 %1432
    %1434:i64 = imul %14, %1433
    %1435:i64 = iadd %17, %1434
    %1437:ptr = ptroff %1429, %11
    %1438:ctrl, %1439:i64 = load.4 %1430, %1437
    %1440:i64 = icmp slt %1433, %1439
    %1441:ctrl, %1442:ctrl = brcond %1438, %1440
    %1443:ctrl, %1444:phisel = region %1441
    %2614:ctrl, %2615:phisel = region %1442
    %2616:ctrl = call @throw_index_out_of_range_exception %2614
    unreachable %2616
    %1436:ptr = ptroff %1429, %1435
    %1445:ctrl, %1446:i32 = load.1 %1443, %1436
    %1447:ctrl, %1448:ctrl = brcond %1445, %1446
    %1449:ctrl, %1450:phisel = region %1447
    %1451:ctrl, %1452:i32 = load.4 %1449, %7
    %1453:i32 = iadd %1452, %8
    %1454:ctrl = store.4 %1451, %1453, %7
    %1455:ctrl, %1456:phisel = region %1448
    %1457:ctrl, %1458:i32 = load.4 %1455, %6
    %1459:i32 = iadd %1458, %8
    %1460:ctrl = store.4 %1457, %1459, %6
    %1461:ctrl, %1462:phisel = region %1454, %1460
    %1463:ctrl, %1464:ptr = load.8 %1461, %12
    %1465:ctrl, %1466:i32 = load.4 %1463, %13
    %1467:i64 = iext %1466
    %1468:i64 = sfill 32 %1467
    %1469:i64 = imul %14, %1468
    %1470:i64 = iadd %17, %1469
    %1472:ptr = ptroff %1464, %11
    %1473:ctrl, %1474:i64 = load.4 %1465, %1472
    %1475:i64 = icmp slt %1468, %1474
    %1476:ctrl, %1477:ctrl = brcond %1473, %1475
    %1478:ctrl, %1479:phisel = region %1476
    %2611:ctrl, %2612:phisel = region %1477
    %2613:ctrl = call @throw_index_out_of_range_exception %2611
    unreachable %2613
    %1471:ptr = ptroff %1464, %1470
    %1480:ctrl, %1481:i32 = load.1 %1478, %1471
    %1482:ctrl, %1483:ctrl = brcond %1480, %1481
    %1484:ctrl, %1485:phisel = region %1482
    %1486:ctrl, %1487:i32 = load.4 %1484, %7
    %1488:i32 = iadd %1487, %8
    %1489:ctrl = store.4 %1486, %1488, %7
    %1490:ctrl, %1491:phisel = region %1483
    %1492:ctrl, %1493:i32 = load.4 %1490, %6
    %1494:i32 = iadd %1493, %8
    %1495:ctrl = store.4 %1492, %1494, %6
    %1496:ctrl, %1497:phisel = region %1489, %1495
    %1498:ctrl, %1499:i32 = load.4 %1496, %7
    %1500:i32 = iadd %1499, %8
    %1501:ctrl = store.4 %1498, %1500, %7
    %1502:ctrl, %1503:i32 = load.4 %1501, %6
    %1504:i32 = iadd %1503, %8
    %1505:ctrl = store.4 %1502, %1504, %6
    %1506:ctrl, %1507:i32 = load.1 %1505, %31
    %1508:ctrl, %1509:ctrl = brcond %1506, %1507
    %1510:ctrl, %1511:phisel = region %1508
    %1512:ctrl, %1513:i32 = load.4 %1510, %7
    %1514:i32 = iadd %1513, %8
    %1515:ctrl = store.4 %1512, %1514, %7
    %1516:ctrl, %1517:phisel = region %1509
    %1518:ctrl, %1519:i32 = load.4 %1516, %6
    %1520:i32 = iadd %1519, %8
    %1521:ctrl = store.4 %1518, %1520, %6
    %1522:ctrl, %1523:phisel = region %1515, %1521
    %1524:ctrl, %1525:i32 = load.1 %1522, %30
    %1526:ctrl, %1527:ctrl = brcond %1524, %1525
    %1528:ctrl, %1529:phisel = region %1526
    %1530:ctrl, %1531:i32 = load.4 %1528, %7
    %1532:i32 = iadd %1531, %8
    %1533:ctrl = store.4 %1530, %1532, %7
    %1534:ctrl, %1535:phisel = region %1527
    %1536:ctrl, %1537:i32 = load.4 %1534, %6
    %1538:i32 = iadd %1537, %8
    %1539:ctrl = store.4 %1536, %1538, %6
    %1540:ctrl, %1541:phisel = region %1533, %1539
    %1542:ctrl, %1543:ptr = load.8 %1540, %29
    %1544:ptr = ptroff %1543, %11
    %1545:ctrl, %1546:i32 = load.1 %1542, %1544
    %1547:ctrl, %1548:ctrl = brcond %1545, %1546
    %1549:ctrl, %1550:phisel = region %1547
    %1551:ctrl, %1552:i32 = load.4 %1549, %7
    %1553:i32 = iadd %1552, %8
    %1554:ctrl = store.4 %1551, %1553, %7
    %1555:ctrl, %1556:phisel = region %1548
    %1557:ctrl, %1558:i32 = load.4 %1555, %6
    %1559:i32 = iadd %1558, %8
    %1560:ctrl = store.4 %1557, %1559, %6
    %1561:ctrl, %1562:phisel = region %1554, %1560
    %1563:ctrl, %1564:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1561
    %1565:ctrl, %1566:ctrl = brcond %1563, %1564
    %1567:ctrl, %1568:phisel = region %1565
    %1569:ctrl, %1570:i32 = load.4 %1567, %7
    %1571:i32 = iadd %1570, %8
    %1572:ctrl = store.4 %1569, %1571, %7
    %1573:ctrl, %1574:phisel = region %1566
    %1575:ctrl, %1576:i32 = load.4 %1573, %6
    %1577:i32 = iadd %1576, %8
    %1578:ctrl = store.4 %1575, %1577, %6
    %1579:ctrl, %1580:phisel = region %1572, %1578
    %1581:ctrl, %1582:ptr = load.8 %1579, %28
    %1583:ctrl, %1584:i32 = load.4 %1581, %13
    %1585:i64 = iext %1584
    %1586:i64 = sfill 32 %1585
    %1587:i64 = imul %14, %1586
    %1588:i64 = iadd %17, %1587
    %1590:ptr = ptroff %1582, %11
    %1591:ctrl, %1592:i64 = load.4 %1583, %1590
    %1593:i64 = icmp slt %1586, %1592
    %1594:ctrl, %1595:ctrl = brcond %1591, %1593
    %1596:ctrl, %1597:phisel = region %1594
    %2608:ctrl, %2609:phisel = region %1595
    %2610:ctrl = call @throw_index_out_of_range_exception %2608
    unreachable %2610
    %1589:ptr = ptroff %1582, %1588
    %1598:ctrl, %1599:i32 = load.1 %1596, %1589
    %1600:ctrl, %1601:ctrl = brcond %1598, %1599
    %1602:ctrl, %1603:phisel = region %1600
    %1604:ctrl, %1605:i32 = load.4 %1602, %7
    %1606:i32 = iadd %1605, %8
    %1607:ctrl = store.4 %1604, %1606, %7
    %1608:ctrl, %1609:phisel = region %1601
    %1610:ctrl, %1611:i32 = load.4 %1608, %6
    %1612:i32 = iadd %1611, %8
    %1613:ctrl = store.4 %1610, %1612, %6
    %1614:ctrl, %1615:phisel = region %1607, %1613
    %1616:ctrl, %1617:ptr = load.8 %1614, %12
    %1618:ctrl, %1619:i32 = load.4 %1616, %13
    %1620:i64 = iext %1619
    %1621:i64 = sfill 32 %1620
    %1622:i64 = imul %14, %1621
    %1623:i64 = iadd %17, %1622
    %1625:ptr = ptroff %1617, %11
    %1626:ctrl, %1627:i64 = load.4 %1618, %1625
    %1628:i64 = icmp slt %1621, %1627
    %1629:ctrl, %1630:ctrl = brcond %1626, %1628
    %1631:ctrl, %1632:phisel = region %1629
    %2605:ctrl, %2606:phisel = region %1630
    %2607:ctrl = call @throw_index_out_of_range_exception %2605
    unreachable %2607
    %1624:ptr = ptroff %1617, %1623
    %1633:ctrl, %1634:i32 = load.1 %1631, %1624
    %1635:ctrl, %1636:ctrl = brcond %1633, %1634
    %1637:ctrl, %1638:phisel = region %1635
    %1639:ctrl, %1640:i32 = load.4 %1637, %7
    %1641:i32 = iadd %1640, %8
    %1642:ctrl = store.4 %1639, %1641, %7
    %1643:ctrl, %1644:phisel = region %1636
    %1645:ctrl, %1646:i32 = load.4 %1643, %6
    %1647:i32 = iadd %1646, %8
    %1648:ctrl = store.4 %1645, %1647, %6
    %1649:ctrl, %1650:phisel = region %1642, %1648
    %1651:ctrl, %1652:i32 = load.4 %1649, %7
    %1653:i32 = iadd %1652, %8
    %1654:ctrl = store.4 %1651, %1653, %7
    %1655:ctrl, %1656:i32 = load.4 %1654, %6
    %1657:i32 = iadd %1656, %8
    %1658:ctrl = store.4 %1655, %1657, %6
    %1659:ctrl, %1660:i32 = load.1 %1658, %31
    %1661:ctrl, %1662:ctrl = brcond %1659, %1660
    %1663:ctrl, %1664:phisel = region %1661
    %1665:ctrl, %1666:i32 = load.4 %1663, %7
    %1667:i32 = iadd %1666, %8
    %1668:ctrl = store.4 %1665, %1667, %7
    %1669:ctrl, %1670:phisel = region %1662
    %1671:ctrl, %1672:i32 = load.4 %1669, %6
    %1673:i32 = iadd %1672, %8
    %1674:ctrl = store.4 %1671, %1673, %6
    %1675:ctrl, %1676:phisel = region %1668, %1674
    %1677:ctrl, %1678:i32 = load.1 %1675, %30
    %1679:ctrl, %1680:ctrl = brcond %1677, %1678
    %1681:ctrl, %1682:phisel = region %1679
    %1683:ctrl, %1684:i32 = load.4 %1681, %7
    %1685:i32 = iadd %1684, %8
    %1686:ctrl = store.4 %1683, %1685, %7
    %1687:ctrl, %1688:phisel = region %1680
    %1689:ctrl, %1690:i32 = load.4 %1687, %6
    %1691:i32 = iadd %1690, %8
    %1692:ctrl = store.4 %1689, %1691, %6
    %1693:ctrl, %1694:phisel = region %1686, %1692
    %1695:ctrl, %1696:ptr = load.8 %1693, %29
    %1697:ptr = ptroff %1696, %11
    %1698:ctrl, %1699:i32 = load.1 %1695, %1697
    %1700:ctrl, %1701:ctrl = brcond %1698, %1699
    %1702:ctrl, %1703:phisel = region %1700
    %1704:ctrl, %1705:i32 = load.4 %1702, %7
    %1706:i32 = iadd %1705, %8
    %1707:ctrl = store.4 %1704, %1706, %7
    %1708:ctrl, %1709:phisel = region %1701
    %1710:ctrl, %1711:i32 = load.4 %1708, %6
    %1712:i32 = iadd %1711, %8
    %1713:ctrl = store.4 %1710, %1712, %6
    %1714:ctrl, %1715:phisel = region %1707, %1713
    %1716:ctrl, %1717:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1714
    %1718:ctrl, %1719:ctrl = brcond %1716, %1717
    %1720:ctrl, %1721:phisel = region %1718
    %1722:ctrl, %1723:i32 = load.4 %1720, %7
    %1724:i32 = iadd %1723, %8
    %1725:ctrl = store.4 %1722, %1724, %7
    %1726:ctrl, %1727:phisel = region %1719
    %1728:ctrl, %1729:i32 = load.4 %1726, %6
    %1730:i32 = iadd %1729, %8
    %1731:ctrl = store.4 %1728, %1730, %6
    %1732:ctrl, %1733:phisel = region %1725, %1731
    %1734:ctrl, %1735:ptr = load.8 %1732, %28
    %1736:ctrl, %1737:i32 = load.4 %1734, %13
    %1738:i64 = iext %1737
    %1739:i64 = sfill 32 %1738
    %1740:i64 = imul %14, %1739
    %1741:i64 = iadd %17, %1740
    %1743:ptr = ptroff %1735, %11
    %1744:ctrl, %1745:i64 = load.4 %1736, %1743
    %1746:i64 = icmp slt %1739, %1745
    %1747:ctrl, %1748:ctrl = brcond %1744, %1746
    %1749:ctrl, %1750:phisel = region %1747
    %2602:ctrl, %2603:phisel = region %1748
    %2604:ctrl = call @throw_index_out_of_range_exception %2602
    unreachable %2604
    %1742:ptr = ptroff %1735, %1741
    %1751:ctrl, %1752:i32 = load.1 %1749, %1742
    %1753:ctrl, %1754:ctrl = brcond %1751, %1752
    %1755:ctrl, %1756:phisel = region %1753
    %1757:ctrl, %1758:i32 = load.4 %1755, %7
    %1759:i32 = iadd %1758, %8
    %1760:ctrl = store.4 %1757, %1759, %7
    %1761:ctrl, %1762:phisel = region %1754
    %1763:ctrl, %1764:i32 = load.4 %1761, %6
    %1765:i32 = iadd %1764, %8
    %1766:ctrl = store.4 %1763, %1765, %6
    %1767:ctrl, %1768:phisel = region %1760, %1766
    %1769:ctrl, %1770:ptr = load.8 %1767, %12
    %1771:ctrl, %1772:i32 = load.4 %1769, %13
    %1773:i64 = iext %1772
    %1774:i64 = sfill 32 %1773
    %1775:i64 = imul %14, %1774
    %1776:i64 = iadd %17, %1775
    %1778:ptr = ptroff %1770, %11
    %1779:ctrl, %1780:i64 = load.4 %1771, %1778
    %1781:i64 = icmp slt %1774, %1780
    %1782:ctrl, %1783:ctrl = brcond %1779, %1781
    %1784:ctrl, %1785:phisel = region %1782
    %2599:ctrl, %2600:phisel = region %1783
    %2601:ctrl = call @throw_index_out_of_range_exception %2599
    unreachable %2601
    %1777:ptr = ptroff %1770, %1776
    %1786:ctrl, %1787:i32 = load.1 %1784, %1777
    %1788:ctrl, %1789:ctrl = brcond %1786, %1787
    %1790:ctrl, %1791:phisel = region %1788
    %1792:ctrl, %1793:i32 = load.4 %1790, %7
    %1794:i32 = iadd %1793, %8
    %1795:ctrl = store.4 %1792, %1794, %7
    %1796:ctrl, %1797:phisel = region %1789
    %1798:ctrl, %1799:i32 = load.4 %1796, %6
    %1800:i32 = iadd %1799, %8
    %1801:ctrl = store.4 %1798, %1800, %6
    %1802:ctrl, %1803:phisel = region %1795, %1801
    %1804:ctrl, %1805:i32 = load.4 %1802, %7
    %1806:i32 = iadd %1805, %8
    %1807:ctrl = store.4 %1804, %1806, %7
    %1808:ctrl, %1809:i32 = load.4 %1807, %6
    %1810:i32 = iadd %1809, %8
    %1811:ctrl = store.4 %1808, %1810, %6
    %1812:ctrl, %1813:i32 = load.1 %1811, %31
    %1814:ctrl, %1815:ctrl = brcond %1812, %1813
    %1816:ctrl, %1817:phisel = region %1814
    %1818:ctrl, %1819:i32 = load.4 %1816, %7
    %1820:i32 = iadd %1819, %8
    %1821:ctrl = store.4 %1818, %1820, %7
    %1822:ctrl, %1823:phisel = region %1815
    %1824:ctrl, %1825:i32 = load.4 %1822, %6
    %1826:i32 = iadd %1825, %8
    %1827:ctrl = store.4 %1824, %1826, %6
    %1828:ctrl, %1829:phisel = region %1821, %1827
    %1830:ctrl, %1831:i32 = load.1 %1828, %30
    %1832:ctrl, %1833:ctrl = brcond %1830, %1831
    %1834:ctrl, %1835:phisel = region %1832
    %1836:ctrl, %1837:i32 = load.4 %1834, %7
    %1838:i32 = iadd %1837, %8
    %1839:ctrl = store.4 %1836, %1838, %7
    %1840:ctrl, %1841:phisel = region %1833
    %1842:ctrl, %1843:i32 = load.4 %1840, %6
    %1844:i32 = iadd %1843, %8
    %1845:ctrl = store.4 %1842, %1844, %6
    %1846:ctrl, %1847:phisel = region %1839, %1845
    %1848:ctrl, %1849:ptr = load.8 %1846, %29
    %1850:ptr = ptroff %1849, %11
    %1851:ctrl, %1852:i32 = load.1 %1848, %1850
    %1853:ctrl, %1854:ctrl = brcond %1851, %1852
    %1855:ctrl, %1856:phisel = region %1853
    %1857:ctrl, %1858:i32 = load.4 %1855, %7
    %1859:i32 = iadd %1858, %8
    %1860:ctrl = store.4 %1857, %1859, %7
    %1861:ctrl, %1862:phisel = region %1854
    %1863:ctrl, %1864:i32 = load.4 %1861, %6
    %1865:i32 = iadd %1864, %8
    %1866:ctrl = store.4 %1863, %1865, %6
    %1867:ctrl, %1868:phisel = region %1860, %1866
    %1869:ctrl, %1870:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1867
    %1871:ctrl, %1872:ctrl = brcond %1869, %1870
    %1873:ctrl, %1874:phisel = region %1871
    %1875:ctrl, %1876:i32 = load.4 %1873, %7
    %1877:i32 = iadd %1876, %8
    %1878:ctrl = store.4 %1875, %1877, %7
    %1879:ctrl, %1880:phisel = region %1872
    %1881:ctrl, %1882:i32 = load.4 %1879, %6
    %1883:i32 = iadd %1882, %8
    %1884:ctrl = store.4 %1881, %1883, %6
    %1885:ctrl, %1886:phisel = region %1878, %1884
    %1887:ctrl, %1888:ptr = load.8 %1885, %28
    %1889:ctrl, %1890:i32 = load.4 %1887, %13
    %1891:i64 = iext %1890
    %1892:i64 = sfill 32 %1891
    %1893:i64 = imul %14, %1892
    %1894:i64 = iadd %17, %1893
    %1896:ptr = ptroff %1888, %11
    %1897:ctrl, %1898:i64 = load.4 %1889, %1896
    %1899:i64 = icmp slt %1892, %1898
    %1900:ctrl, %1901:ctrl = brcond %1897, %1899
    %1902:ctrl, %1903:phisel = region %1900
    %2596:ctrl, %2597:phisel = region %1901
    %2598:ctrl = call @throw_index_out_of_range_exception %2596
    unreachable %2598
    %1895:ptr = ptroff %1888, %1894
    %1904:ctrl, %1905:i32 = load.1 %1902, %1895
    %1906:ctrl, %1907:ctrl = brcond %1904, %1905
    %1908:ctrl, %1909:phisel = region %1906
    %1910:ctrl, %1911:i32 = load.4 %1908, %7
    %1912:i32 = iadd %1911, %8
    %1913:ctrl = store.4 %1910, %1912, %7
    %1914:ctrl, %1915:phisel = region %1907
    %1916:ctrl, %1917:i32 = load.4 %1914, %6
    %1918:i32 = iadd %1917, %8
    %1919:ctrl = store.4 %1916, %1918, %6
    %1920:ctrl, %1921:phisel = region %1913, %1919
    %1922:ctrl, %1923:ptr = load.8 %1920, %12
    %1924:ctrl, %1925:i32 = load.4 %1922, %13
    %1926:i64 = iext %1925
    %1927:i64 = sfill 32 %1926
    %1928:i64 = imul %14, %1927
    %1929:i64 = iadd %17, %1928
    %1931:ptr = ptroff %1923, %11
    %1932:ctrl, %1933:i64 = load.4 %1924, %1931
    %1934:i64 = icmp slt %1927, %1933
    %1935:ctrl, %1936:ctrl = brcond %1932, %1934
    %1937:ctrl, %1938:phisel = region %1935
    %2593:ctrl, %2594:phisel = region %1936
    %2595:ctrl = call @throw_index_out_of_range_exception %2593
    unreachable %2595
    %1930:ptr = ptroff %1923, %1929
    %1939:ctrl, %1940:i32 = load.1 %1937, %1930
    %1941:ctrl, %1942:ctrl = brcond %1939, %1940
    %1943:ctrl, %1944:phisel = region %1941
    %1945:ctrl, %1946:i32 = load.4 %1943, %7
    %1947:i32 = iadd %1946, %8
    %1948:ctrl = store.4 %1945, %1947, %7
    %1949:ctrl, %1950:phisel = region %1942
    %1951:ctrl, %1952:i32 = load.4 %1949, %6
    %1953:i32 = iadd %1952, %8
    %1954:ctrl = store.4 %1951, %1953, %6
    %1955:ctrl, %1956:phisel = region %1948, %1954
    %1957:ctrl, %1958:i32 = load.4 %1955, %7
    %1959:i32 = iadd %1958, %8
    %1960:ctrl = store.4 %1957, %1959, %7
    %1961:ctrl, %1962:i32 = load.4 %1960, %6
    %1963:i32 = iadd %1962, %8
    %1964:ctrl = store.4 %1961, %1963, %6
    %1965:ctrl, %1966:i32 = load.1 %1964, %31
    %1967:ctrl, %1968:ctrl = brcond %1965, %1966
    %1969:ctrl, %1970:phisel = region %1967
    %1971:ctrl, %1972:i32 = load.4 %1969, %7
    %1973:i32 = iadd %1972, %8
    %1974:ctrl = store.4 %1971, %1973, %7
    %1975:ctrl, %1976:phisel = region %1968
    %1977:ctrl, %1978:i32 = load.4 %1975, %6
    %1979:i32 = iadd %1978, %8
    %1980:ctrl = store.4 %1977, %1979, %6
    %1981:ctrl, %1982:phisel = region %1974, %1980
    %1983:ctrl, %1984:i32 = load.1 %1981, %30
    %1985:ctrl, %1986:ctrl = brcond %1983, %1984
    %1987:ctrl, %1988:phisel = region %1985
    %1989:ctrl, %1990:i32 = load.4 %1987, %7
    %1991:i32 = iadd %1990, %8
    %1992:ctrl = store.4 %1989, %1991, %7
    %1993:ctrl, %1994:phisel = region %1986
    %1995:ctrl, %1996:i32 = load.4 %1993, %6
    %1997:i32 = iadd %1996, %8
    %1998:ctrl = store.4 %1995, %1997, %6
    %1999:ctrl, %2000:phisel = region %1992, %1998
    %2001:ctrl, %2002:ptr = load.8 %1999, %29
    %2003:ptr = ptroff %2002, %11
    %2004:ctrl, %2005:i32 = load.1 %2001, %2003
    %2006:ctrl, %2007:ctrl = brcond %2004, %2005
    %2008:ctrl, %2009:phisel = region %2006
    %2010:ctrl, %2011:i32 = load.4 %2008, %7
    %2012:i32 = iadd %2011, %8
    %2013:ctrl = store.4 %2010, %2012, %7
    %2014:ctrl, %2015:phisel = region %2007
    %2016:ctrl, %2017:i32 = load.4 %2014, %6
    %2018:i32 = iadd %2017, %8
    %2019:ctrl = store.4 %2016, %2018, %6
    %2020:ctrl, %2021:phisel = region %2013, %2019
    %2022:ctrl, %2023:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2020
    %2024:ctrl, %2025:ctrl = brcond %2022, %2023
    %2026:ctrl, %2027:phisel = region %2024
    %2028:ctrl, %2029:i32 = load.4 %2026, %7
    %2030:i32 = iadd %2029, %8
    %2031:ctrl = store.4 %2028, %2030, %7
    %2032:ctrl, %2033:phisel = region %2025
    %2034:ctrl, %2035:i32 = load.4 %2032, %6
    %2036:i32 = iadd %2035, %8
    %2037:ctrl = store.4 %2034, %2036, %6
    %2038:ctrl, %2039:phisel = region %2031, %2037
    %2040:ctrl, %2041:ptr = load.8 %2038, %28
    %2042:ctrl, %2043:i32 = load.4 %2040, %13
    %2044:i64 = iext %2043
    %2045:i64 = sfill 32 %2044
    %2046:i64 = imul %14, %2045
    %2047:i64 = iadd %17, %2046
    %2049:ptr = ptroff %2041, %11
    %2050:ctrl, %2051:i64 = load.4 %2042, %2049
    %2052:i64 = icmp slt %2045, %2051
    %2053:ctrl, %2054:ctrl = brcond %2050, %2052
    %2055:ctrl, %2056:phisel = region %2053
    %2590:ctrl, %2591:phisel = region %2054
    %2592:ctrl = call @throw_index_out_of_range_exception %2590
    unreachable %2592
    %2048:ptr = ptroff %2041, %2047
    %2057:ctrl, %2058:i32 = load.1 %2055, %2048
    %2059:ctrl, %2060:ctrl = brcond %2057, %2058
    %2061:ctrl, %2062:phisel = region %2059
    %2063:ctrl, %2064:i32 = load.4 %2061, %7
    %2065:i32 = iadd %2064, %8
    %2066:ctrl = store.4 %2063, %2065, %7
    %2067:ctrl, %2068:phisel = region %2060
    %2069:ctrl, %2070:i32 = load.4 %2067, %6
    %2071:i32 = iadd %2070, %8
    %2072:ctrl = store.4 %2069, %2071, %6
    %2073:ctrl, %2074:phisel = region %2066, %2072
    %2075:ctrl, %2076:ptr = load.8 %2073, %12
    %2077:ctrl, %2078:i32 = load.4 %2075, %13
    %2079:i64 = iext %2078
    %2080:i64 = sfill 32 %2079
    %2081:i64 = imul %14, %2080
    %2082:i64 = iadd %17, %2081
    %2084:ptr = ptroff %2076, %11
    %2085:ctrl, %2086:i64 = load.4 %2077, %2084
    %2087:i64 = icmp slt %2080, %2086
    %2088:ctrl, %2089:ctrl = brcond %2085, %2087
    %2090:ctrl, %2091:phisel = region %2088
    %2587:ctrl, %2588:phisel = region %2089
    %2589:ctrl = call @throw_index_out_of_range_exception %2587
    unreachable %2589
    %2083:ptr = ptroff %2076, %2082
    %2092:ctrl, %2093:i32 = load.1 %2090, %2083
    %2094:ctrl, %2095:ctrl = brcond %2092, %2093
    %2096:ctrl, %2097:phisel = region %2094
    %2098:ctrl, %2099:i32 = load.4 %2096, %7
    %2100:i32 = iadd %2099, %8
    %2101:ctrl = store.4 %2098, %2100, %7
    %2102:ctrl, %2103:phisel = region %2095
    %2104:ctrl, %2105:i32 = load.4 %2102, %6
    %2106:i32 = iadd %2105, %8
    %2107:ctrl = store.4 %2104, %2106, %6
    %2108:ctrl, %2109:phisel = region %2101, %2107
    %2110:ctrl, %2111:i32 = load.4 %2108, %7
    %2112:i32 = iadd %2111, %8
    %2113:ctrl = store.4 %2110, %2112, %7
    %2114:ctrl, %2115:i32 = load.4 %2113, %6
    %2116:i32 = iadd %2115, %8
    %2117:ctrl = store.4 %2114, %2116, %6
    %2118:ctrl, %2119:i32 = load.1 %2117, %31
    %2120:ctrl, %2121:ctrl = brcond %2118, %2119
    %2122:ctrl, %2123:phisel = region %2120
    %2124:ctrl, %2125:i32 = load.4 %2122, %7
    %2126:i32 = iadd %2125, %8
    %2127:ctrl = store.4 %2124, %2126, %7
    %2128:ctrl, %2129:phisel = region %2121
    %2130:ctrl, %2131:i32 = load.4 %2128, %6
    %2132:i32 = iadd %2131, %8
    %2133:ctrl = store.4 %2130, %2132, %6
    %2134:ctrl, %2135:phisel = region %2127, %2133
    %2136:ctrl, %2137:i32 = load.1 %2134, %30
    %2138:ctrl, %2139:ctrl = brcond %2136, %2137
    %2140:ctrl, %2141:phisel = region %2138
    %2142:ctrl, %2143:i32 = load.4 %2140, %7
    %2144:i32 = iadd %2143, %8
    %2145:ctrl = store.4 %2142, %2144, %7
    %2146:ctrl, %2147:phisel = region %2139
    %2148:ctrl, %2149:i32 = load.4 %2146, %6
    %2150:i32 = iadd %2149, %8
    %2151:ctrl = store.4 %2148, %2150, %6
    %2152:ctrl, %2153:phisel = region %2145, %2151
    %2154:ctrl, %2155:ptr = load.8 %2152, %29
    %2156:ptr = ptroff %2155, %11
    %2157:ctrl, %2158:i32 = load.1 %2154, %2156
    %2159:ctrl, %2160:ctrl = brcond %2157, %2158
    %2161:ctrl, %2162:phisel = region %2159
    %2163:ctrl, %2164:i32 = load.4 %2161, %7
    %2165:i32 = iadd %2164, %8
    %2166:ctrl = store.4 %2163, %2165, %7
    %2167:ctrl, %2168:phisel = region %2160
    %2169:ctrl, %2170:i32 = load.4 %2167, %6
    %2171:i32 = iadd %2170, %8
    %2172:ctrl = store.4 %2169, %2171, %6
    %2173:ctrl, %2174:phisel = region %2166, %2172
    %2175:ctrl, %2176:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2173
    %2177:ctrl, %2178:ctrl = brcond %2175, %2176
    %2179:ctrl, %2180:phisel = region %2177
    %2181:ctrl, %2182:i32 = load.4 %2179, %7
    %2183:i32 = iadd %2182, %8
    %2184:ctrl = store.4 %2181, %2183, %7
    %2185:ctrl, %2186:phisel = region %2178
    %2187:ctrl, %2188:i32 = load.4 %2185, %6
    %2189:i32 = iadd %2188, %8
    %2190:ctrl = store.4 %2187, %2189, %6
    %2191:ctrl, %2192:phisel = region %2184, %2190
    %2193:ctrl, %2194:ptr = load.8 %2191, %28
    %2195:ctrl, %2196:i32 = load.4 %2193, %13
    %2197:i64 = iext %2196
    %2198:i64 = sfill 32 %2197
    %2199:i64 = imul %14, %2198
    %2200:i64 = iadd %17, %2199
    %2202:ptr = ptroff %2194, %11
    %2203:ctrl, %2204:i64 = load.4 %2195, %2202
    %2205:i64 = icmp slt %2198, %2204
    %2206:ctrl, %2207:ctrl = brcond %2203, %2205
    %2208:ctrl, %2209:phisel = region %2206
    %2584:ctrl, %2585:phisel = region %2207
    %2586:ctrl = call @throw_index_out_of_range_exception %2584
    unreachable %2586
    %2201:ptr = ptroff %2194, %2200
    %2210:ctrl, %2211:i32 = load.1 %2208, %2201
    %2212:ctrl, %2213:ctrl = brcond %2210, %2211
    %2214:ctrl, %2215:phisel = region %2212
    %2216:ctrl, %2217:i32 = load.4 %2214, %7
    %2218:i32 = iadd %2217, %8
    %2219:ctrl = store.4 %2216, %2218, %7
    %2220:ctrl, %2221:phisel = region %2213
    %2222:ctrl, %2223:i32 = load.4 %2220, %6
    %2224:i32 = iadd %2223, %8
    %2225:ctrl = store.4 %2222, %2224, %6
    %2226:ctrl, %2227:phisel = region %2219, %2225
    %2228:ctrl, %2229:ptr = load.8 %2226, %12
    %2230:ctrl, %2231:i32 = load.4 %2228, %13
    %2232:i64 = iext %2231
    %2233:i64 = sfill 32 %2232
    %2234:i64 = imul %14, %2233
    %2235:i64 = iadd %17, %2234
    %2237:ptr = ptroff %2229, %11
    %2238:ctrl, %2239:i64 = load.4 %2230, %2237
    %2240:i64 = icmp slt %2233, %2239
    %2241:ctrl, %2242:ctrl = brcond %2238, %2240
    %2243:ctrl, %2244:phisel = region %2241
    %2581:ctrl, %2582:phisel = region %2242
    %2583:ctrl = call @throw_index_out_of_range_exception %2581
    unreachable %2583
    %2236:ptr = ptroff %2229, %2235
    %2245:ctrl, %2246:i32 = load.1 %2243, %2236
    %2247:ctrl, %2248:ctrl = brcond %2245, %2246
    %2249:ctrl, %2250:phisel = region %2247
    %2251:ctrl, %2252:i32 = load.4 %2249, %7
    %2253:i32 = iadd %2252, %8
    %2254:ctrl = store.4 %2251, %2253, %7
    %2255:ctrl, %2256:phisel = region %2248
    %2257:ctrl, %2258:i32 = load.4 %2255, %6
    %2259:i32 = iadd %2258, %8
    %2260:ctrl = store.4 %2257, %2259, %6
    %2261:ctrl, %2262:phisel = region %2254, %2260
    %2263:ctrl, %2264:i32 = load.4 %2261, %7
    %2265:i32 = iadd %2264, %8
    %2266:ctrl = store.4 %2263, %2265, %7
    %2267:ctrl, %2268:i32 = load.4 %2266, %6
    %2269:i32 = iadd %2268, %8
    %2270:ctrl = store.4 %2267, %2269, %6
    %2271:ctrl, %2272:i32 = load.1 %2270, %31
    %2273:ctrl, %2274:ctrl = brcond %2271, %2272
    %2275:ctrl, %2276:phisel = region %2273
    %2277:ctrl, %2278:i32 = load.4 %2275, %7
    %2279:i32 = iadd %2278, %8
    %2280:ctrl = store.4 %2277, %2279, %7
    %2281:ctrl, %2282:phisel = region %2274
    %2283:ctrl, %2284:i32 = load.4 %2281, %6
    %2285:i32 = iadd %2284, %8
    %2286:ctrl = store.4 %2283, %2285, %6
    %2287:ctrl, %2288:phisel = region %2280, %2286
    %2289:ctrl, %2290:i32 = load.1 %2287, %30
    %2291:ctrl, %2292:ctrl = brcond %2289, %2290
    %2293:ctrl, %2294:phisel = region %2291
    %2295:ctrl, %2296:i32 = load.4 %2293, %7
    %2297:i32 = iadd %2296, %8
    %2298:ctrl = store.4 %2295, %2297, %7
    %2299:ctrl, %2300:phisel = region %2292
    %2301:ctrl, %2302:i32 = load.4 %2299, %6
    %2303:i32 = iadd %2302, %8
    %2304:ctrl = store.4 %2301, %2303, %6
    %2305:ctrl, %2306:phisel = region %2298, %2304
    %2307:ctrl, %2308:ptr = load.8 %2305, %29
    %2309:ptr = ptroff %2308, %11
    %2310:ctrl, %2311:i32 = load.1 %2307, %2309
    %2312:ctrl, %2313:ctrl = brcond %2310, %2311
    %2314:ctrl, %2315:phisel = region %2312
    %2316:ctrl, %2317:i32 = load.4 %2314, %7
    %2318:i32 = iadd %2317, %8
    %2319:ctrl = store.4 %2316, %2318, %7
    %2320:ctrl, %2321:phisel = region %2313
    %2322:ctrl, %2323:i32 = load.4 %2320, %6
    %2324:i32 = iadd %2323, %8
    %2325:ctrl = store.4 %2322, %2324, %6
    %2326:ctrl, %2327:phisel = region %2319, %2325
    %2328:ctrl, %2329:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2326
    %2330:ctrl, %2331:ctrl = brcond %2328, %2329
    %2332:ctrl, %2333:phisel = region %2330
    %2334:ctrl, %2335:i32 = load.4 %2332, %7
    %2336:i32 = iadd %2335, %8
    %2337:ctrl = store.4 %2334, %2336, %7
    %2338:ctrl, %2339:phisel = region %2331
    %2340:ctrl, %2341:i32 = load.4 %2338, %6
    %2342:i32 = iadd %2341, %8
    %2343:ctrl = store.4 %2340, %2342, %6
    %2344:ctrl, %2345:phisel = region %2337, %2343
    %2346:ctrl, %2347:ptr = load.8 %2344, %28
    %2348:ctrl, %2349:i32 = load.4 %2346, %13
    %2350:i64 = iext %2349
    %2351:i64 = sfill 32 %2350
    %2352:i64 = imul %14, %2351
    %2353:i64 = iadd %17, %2352
    %2355:ptr = ptroff %2347, %11
    %2356:ctrl, %2357:i64 = load.4 %2348, %2355
    %2358:i64 = icmp slt %2351, %2357
    %2359:ctrl, %2360:ctrl = brcond %2356, %2358
    %2361:ctrl, %2362:phisel = region %2359
    %2578:ctrl, %2579:phisel = region %2360
    %2580:ctrl = call @throw_index_out_of_range_exception %2578
    unreachable %2580
    %2354:ptr = ptroff %2347, %2353
    %2363:ctrl, %2364:i32 = load.1 %2361, %2354
    %2365:ctrl, %2366:ctrl = brcond %2363, %2364
    %2367:ctrl, %2368:phisel = region %2365
    %2369:ctrl, %2370:i32 = load.4 %2367, %7
    %2371:i32 = iadd %2370, %8
    %2372:ctrl = store.4 %2369, %2371, %7
    %2373:ctrl, %2374:phisel = region %2366
    %2375:ctrl, %2376:i32 = load.4 %2373, %6
    %2377:i32 = iadd %2376, %8
    %2378:ctrl = store.4 %2375, %2377, %6
    %2379:ctrl, %2380:phisel = region %2372, %2378
    %2381:ctrl, %2382:ptr = load.8 %2379, %12
    %2383:ctrl, %2384:i32 = load.4 %2381, %13
    %2385:i64 = iext %2384
    %2386:i64 = sfill 32 %2385
    %2387:i64 = imul %14, %2386
    %2388:i64 = iadd %17, %2387
    %2390:ptr = ptroff %2382, %11
    %2391:ctrl, %2392:i64 = load.4 %2383, %2390
    %2393:i64 = icmp slt %2386, %2392
    %2394:ctrl, %2395:ctrl = brcond %2391, %2393
    %2396:ctrl, %2397:phisel = region %2394
    %2575:ctrl, %2576:phisel = region %2395
    %2577:ctrl = call @throw_index_out_of_range_exception %2575
    unreachable %2577
    %2389:ptr = ptroff %2382, %2388
    %2398:ctrl, %2399:i32 = load.1 %2396, %2389
    %2400:ctrl, %2401:ctrl = brcond %2398, %2399
    %2402:ctrl, %2403:phisel = region %2400
    %2404:ctrl, %2405:i32 = load.4 %2402, %7
    %2406:i32 = iadd %2405, %8
    %2407:ctrl = store.4 %2404, %2406, %7
    %2408:ctrl, %2409:phisel = region %2401
    %2410:ctrl, %2411:i32 = load.4 %2408, %6
    %2412:i32 = iadd %2411, %8
    %2413:ctrl = store.4 %2410, %2412, %6
    %2414:ctrl, %2415:phisel = region %2407, %2413
    %2416:ctrl, %2417:i32 = load.4 %2414, %7
    %2418:i32 = iadd %2417, %8
    %2419:ctrl = store.4 %2416, %2418, %7
    %2420:ctrl, %2421:i32 = load.4 %2419, %6
    %2422:i32 = iadd %2421, %8
    %2423:ctrl = store.4 %2420, %2422, %6
    %2424:ctrl, %2425:i32 = load.1 %2423, %31
    %2426:ctrl, %2427:ctrl = brcond %2424, %2425
    %2428:ctrl, %2429:phisel = region %2426
    %2430:ctrl, %2431:i32 = load.4 %2428, %7
    %2432:i32 = iadd %2431, %8
    %2433:ctrl = store.4 %2430, %2432, %7
    %2434:ctrl, %2435:phisel = region %2427
    %2436:ctrl, %2437:i32 = load.4 %2434, %6
    %2438:i32 = iadd %2437, %8
    %2439:ctrl = store.4 %2436, %2438, %6
    %2440:ctrl, %2441:phisel = region %2433, %2439
    %2442:ctrl, %2443:i32 = load.1 %2440, %30
    %2444:ctrl, %2445:ctrl = brcond %2442, %2443
    %2446:ctrl, %2447:phisel = region %2444
    %2448:ctrl, %2449:i32 = load.4 %2446, %7
    %2450:i32 = iadd %2449, %8
    %2451:ctrl = store.4 %2448, %2450, %7
    %2452:ctrl, %2453:phisel = region %2445
    %2454:ctrl, %2455:i32 = load.4 %2452, %6
    %2456:i32 = iadd %2455, %8
    %2457:ctrl = store.4 %2454, %2456, %6
    %2458:ctrl, %2459:phisel = region %2451, %2457
    %2460:ctrl, %2461:ptr = load.8 %2458, %29
    %2462:ptr = ptroff %2461, %11
    %2463:ctrl, %2464:i32 = load.1 %2460, %2462
    %2465:ctrl, %2466:ctrl = brcond %2463, %2464
    %2467:ctrl, %2468:phisel = region %2465
    %2469:ctrl, %2470:i32 = load.4 %2467, %7
    %2471:i32 = iadd %2470, %8
    %2472:ctrl = store.4 %2469, %2471, %7
    %2473:ctrl, %2474:phisel = region %2466
    %2475:ctrl, %2476:i32 = load.4 %2473, %6
    %2477:i32 = iadd %2476, %8
    %2478:ctrl = store.4 %2475, %2477, %6
    %2479:ctrl, %2480:phisel = region %2472, %2478
    %2481:ctrl, %2482:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2479
    %2483:ctrl, %2484:ctrl = brcond %2481, %2482
    %2485:ctrl, %2486:phisel = region %2483
    %2487:ctrl, %2488:i32 = load.4 %2485, %7
    %2489:i32 = iadd %2488, %8
    %2490:ctrl = store.4 %2487, %2489, %7
    %2491:ctrl, %2492:phisel = region %2484
    %2493:ctrl, %2494:i32 = load.4 %2491, %6
    %2495:i32 = iadd %2494, %8
    %2496:ctrl = store.4 %2493, %2495, %6
    %2497:ctrl, %2498:phisel = region %2490, %2496
    %2499:ctrl, %2500:ptr = load.8 %2497, %28
    %2501:ctrl, %2502:i32 = load.4 %2499, %13
    %2503:i64 = iext %2502
    %2504:i64 = sfill 32 %2503
    %2505:i64 = imul %14, %2504
    %2506:i64 = iadd %17, %2505
    %2508:ptr = ptroff %2500, %11
    %2509:ctrl, %2510:i64 = load.4 %2501, %2508
    %2511:i64 = icmp slt %2504, %2510
    %2512:ctrl, %2513:ctrl = brcond %2509, %2511
    %2514:ctrl, %2515:phisel = region %2512
    %2572:ctrl, %2573:phisel = region %2513
    %2574:ctrl = call @throw_index_out_of_range_exception %2572
    unreachable %2574
    %2507:ptr = ptroff %2500, %2506
    %2516:ctrl, %2517:i32 = load.1 %2514, %2507
    %2518:ctrl, %2519:ctrl = brcond %2516, %2517
    %2520:ctrl, %2521:phisel = region %2518
    %2522:ctrl, %2523:i32 = load.4 %2520, %7
    %2524:i32 = iadd %2523, %8
    %2525:ctrl = store.4 %2522, %2524, %7
    %2526:ctrl, %2527:phisel = region %2519
    %2528:ctrl, %2529:i32 = load.4 %2526, %6
    %2530:i32 = iadd %2529, %8
    %2531:ctrl = store.4 %2528, %2530, %6
    %2532:ctrl, %2533:phisel = region %2525, %2531
    %2534:ctrl, %2535:ptr = load.8 %2532, %12
    %2536:ctrl, %2537:i32 = load.4 %2534, %13
    %2538:i64 = iext %2537
    %2539:i64 = sfill 32 %2538
    %2540:i64 = imul %14, %2539
    %2541:i64 = iadd %17, %2540
    %2543:ptr = ptroff %2535, %11
    %2544:ctrl, %2545:i64 = load.4 %2536, %2543
    %2546:i64 = icmp slt %2539, %2545
    %2547:ctrl, %2548:ctrl = brcond %2544, %2546
    %2549:ctrl, %2550:phisel = region %2547
    %2569:ctrl, %2570:phisel = region %2548
    %2571:ctrl = call @throw_index_out_of_range_exception %2569
    unreachable %2571
    %2542:ptr = ptroff %2535, %2541
    %2551:ctrl, %2552:i32 = load.1 %2549, %2542
    %2553:ctrl, %2554:ctrl = brcond %2551, %2552
    %2555:ctrl, %2556:phisel = region %2553
    %2557:ctrl, %2558:i32 = load.4 %2555, %7
    %2559:i32 = iadd %2558, %8
    %2560:ctrl = store.4 %2557, %2559, %7
    %2561:ctrl, %2562:phisel = region %2554
    %2563:ctrl, %2564:i32 = load.4 %2561, %6
    %2565:i32 = iadd %2564, %8
    %2566:ctrl = store.4 %2563, %2565, %6
    %2567:ctrl, %2568:phisel = region %2560, %2566
    %5349:i32 = phi %202, %20, %20
    %5350:i32 = phi %220, %5349, %5349
    %5351:i32 = phi %238, %5350, %5350
    %5352:i32 = phi %256, %5351, %5351
    %5353:i32 = phi %274, %5352, %5352
    %5354:i32 = phi %292, %5353, %5353
    %5355:i32 = phi %310, %5354, %5354
    %5356:i32 = phi %328, %5355, %5355
    %5357:i32 = phi %346, %5356, %5356
    %5358:i32 = phi %364, %5357, %5357
    %5359:i32 = phi %382, %5358, %5358
    %5360:i32 = phi %400, %5359, %5359
    %5361:i32 = phi %418, %5360, %5360
    %5362:i32 = phi %436, %5361, %5361
    %5363:i32 = phi %454, %5362, %5362
    %5364:i32 = phi %472, %5363, %5363
    %5365:i32 = phi %493, %5364, %5364
    %5366:i32 = phi %514, %5365, %5365
    %5367:i32 = phi %535, %5366, %5366
    %5368:i32 = phi %556, %5367, %5367
    %5369:i32 = phi %577, %5368, %5368
    %5370:i32 = phi %598, %5369, %5369
    %5371:i32 = phi %619, %5370, %5370
    %5372:i32 = phi %640, %5371, %5371
    %5373:i32 = phi %658, %5372, %5372
    %5374:i32 = phi %676, %5373, %5373
    %5375:i32 = phi %694, %5374, %5374
    %5376:i32 = phi %712, %5375, %5375
    %5377:i32 = phi %730, %5376, %5376
    %5378:i32 = phi %748, %5377, %5377
    %5379:i32 = phi %766, %5378, %5378
    %5380:i32 = phi %784, %5379, %5379
    %5381:i32 = phi %819, %5380, %5380
    %5382:i32 = phi %854, %5381, %5381
    %5383:i32 = phi %889, %5382, %5382
    %5384:i32 = phi %924, %5383, %5383
    %5385:i32 = phi %959, %5384, %5384
    %5386:i32 = phi %994, %5385, %5385
    %5387:i32 = phi %1029, %5386, %5386
    %5388:i32 = phi %1064, %5387, %5387
    %5389:i32 = phi %1099, %5388, %5388
    %5390:i32 = phi %1134, %5389, %5389
    %5391:i32 = phi %1169, %5390, %5390
    %5392:i32 = phi %1204, %5391, %5391
    %5393:i32 = phi %1239, %5392, %5392
    %5394:i32 = phi %1274, %5393, %5393
    %5395:i32 = phi %1309, %5394, %5394
    %5396:i32 = phi %1344, %5395, %5395
    %5397:i32 = phi %1370, %5396, %5396
    %5398:i32 = phi %1388, %5397, %5397
    %5399:i32 = phi %1409, %5398, %5398
    %5400:i32 = phi %1427, %5399, %5399
    %5401:i32 = phi %1462, %5400, %5400
    %5402:i32 = phi %1497, %5401, %5401
    %5403:i32 = phi %1523, %5402, %5402
    %5404:i32 = phi %1541, %5403, %5403
    %5405:i32 = phi %1562, %5404, %5404
    %5406:i32 = phi %1580, %5405, %5405
    %5407:i32 = phi %1615, %5406, %5406
    %5408:i32 = phi %1650, %5407, %5407
    %5409:i32 = phi %1676, %5408, %5408
    %5410:i32 = phi %1694, %5409, %5409
    %5411:i32 = phi %1715, %5410, %5410
    %5412:i32 = phi %1733, %5411, %5411
    %5413:i32 = phi %1768, %5412, %5412
    %5414:i32 = phi %1803, %5413, %5413
    %5415:i32 = phi %1829, %5414, %5414
    %5416:i32 = phi %1847, %5415, %5415
    %5417:i32 = phi %1868, %5416, %5416
    %5418:i32 = phi %1886, %5417, %5417
    %5419:i32 = phi %1921, %5418, %5418
    %5420:i32 = phi %1956, %5419, %5419
    %5421:i32 = phi %1982, %5420, %5420
    %5422:i32 = phi %2000, %5421, %5421
    %5423:i32 = phi %2021, %5422, %5422
    %5424:i32 = phi %2039, %5423, %5423
    %5425:i32 = phi %2074, %5424, %5424
    %5426:i32 = phi %2109, %5425, %5425
    %5427:i32 = phi %2135, %5426, %5426
    %5428:i32 = phi %2153, %5427, %5427
    %5429:i32 = phi %2174, %5428, %5428
    %5430:i32 = phi %2192, %5429, %5429
    %5431:i32 = phi %2227, %5430, %5430
    %5432:i32 = phi %2262, %5431, %5431
    %5433:i32 = phi %2288, %5432, %5432
    %5434:i32 = phi %2306, %5433, %5433
    %5435:i32 = phi %2327, %5434, %5434
    %5436:i32 = phi %2345, %5435, %5435
    %5437:i32 = phi %2380, %5436, %5436
    %5438:i32 = phi %2415, %5437, %5437
    %5439:i32 = phi %2441, %5438, %5438
    %5440:i32 = phi %2459, %5439, %5439
    %5441:i32 = phi %2480, %5440, %5440
    %5442:i32 = phi %2498, %5441, %5441
    %5443:i32 = phi %2533, %5442, %5442
    %5444:i32 = phi %2568, %5443, %5443
    %2665:i32 = phi %202, %8, %8
    %2666:i32 = phi %220, %2665, %2665
    %2667:i32 = phi %238, %2666, %2666
    %2668:i32 = phi %256, %2667, %2667
    %2669:i32 = phi %274, %2668, %2668
    %2670:i32 = phi %292, %2669, %2669
    %2671:i32 = phi %310, %2670, %2670
    %2672:i32 = phi %328, %2671, %2671
    %2673:i32 = phi %346, %2672, %2672
    %2674:i32 = phi %364, %2673, %2673
    %2675:i32 = phi %382, %2674, %2674
    %2676:i32 = phi %400, %2675, %2675
    %2677:i32 = phi %418, %2676, %2676
    %2678:i32 = phi %436, %2677, %2677
    %2679:i32 = phi %454, %2678, %2678
    %2680:i32 = phi %472, %2679, %2679
    %2681:i32 = phi %493, %2680, %2680
    %2682:i32 = phi %514, %2681, %2681
    %2683:i32 = phi %535, %2682, %2682
    %2684:i32 = phi %556, %2683, %2683
    %2685:i32 = phi %577, %2684, %2684
    %2686:i32 = phi %598, %2685, %2685
    %2687:i32 = phi %619, %2686, %2686
    %2688:i32 = phi %640, %2687, %2687
    %2689:i32 = phi %658, %2688, %2688
    %2690:i32 = phi %676, %2689, %2689
    %2691:i32 = phi %694, %2690, %2690
    %2692:i32 = phi %712, %2691, %2691
    %2693:i32 = phi %730, %2692, %2692
    %2694:i32 = phi %748, %2693, %2693
    %2695:i32 = phi %766, %2694, %2694
    %2696:i32 = phi %784, %2695, %2695
    %2697:i32 = phi %819, %2696, %2696
    %2698:i32 = phi %854, %2697, %2697
    %2699:i32 = phi %889, %2698, %2698
    %2700:i32 = phi %924, %2699, %2699
    %2701:i32 = phi %959, %2700, %2700
    %2702:i32 = phi %994, %2701, %2701
    %2703:i32 = phi %1029, %2702, %2702
    %2704:i32 = phi %1064, %2703, %2703
    %2705:i32 = phi %1099, %2704, %2704
    %2706:i32 = phi %1134, %2705, %2705
    %2707:i32 = phi %1169, %2706, %2706
    %2708:i32 = phi %1204, %2707, %2707
    %2709:i32 = phi %1239, %2708, %2708
    %2710:i32 = phi %1274, %2709, %2709
    %2711:i32 = phi %1309, %2710, %2710
    %2712:i32 = phi %1344, %2711, %2711
    %2713:i32 = phi %1370, %2712, %2712
    %2714:i32 = phi %1388, %2713, %2713
    %2715:i32 = phi %1409, %2714, %2714
    %2716:i32 = phi %1427, %2715, %2715
    %2717:i32 = phi %1462, %2716, %2716
    %2718:i32 = phi %1497, %2717, %2717
    %2719:i32 = phi %1523, %2718, %2718
    %2720:i32 = phi %1541, %2719, %2719
    %2721:i32 = phi %1562, %2720, %2720
    %2722:i32 = phi %1580, %2721, %2721
    %2723:i32 = phi %1615, %2722, %2722
    %2724:i32 = phi %1650, %2723, %2723
    %2725:i32 = phi %1676, %2724, %2724
    %2726:i32 = phi %1694, %2725, %2725
    %2727:i32 = phi %1715, %2726, %2726
    %2728:i32 = phi %1733, %2727, %2727
    %2729:i32 = phi %1768, %2728, %2728
    %2730:i32 = phi %1803, %2729, %2729
    %2731:i32 = phi %1829, %2730, %2730
    %2732:i32 = phi %1847, %2731, %2731
    %2733:i32 = phi %1868, %2732, %2732
    %2734:i32 = phi %1886, %2733, %2733
    %2735:i32 = phi %1921, %2734, %2734
    %2736:i32 = phi %1956, %2735, %2735
    %2737:i32 = phi %1982, %2736, %2736
    %2738:i32 = phi %2000, %2737, %2737
    %2739:i32 = phi %2021, %2738, %2738
    %2740:i32 = phi %2039, %2739, %2739
    %2741:i32 = phi %2074, %2740, %2740
    %2742:i32 = phi %2109, %2741, %2741
    %2743:i32 = phi %2135, %2742, %2742
    %2744:i32 = phi %2153, %2743, %2743
    %2745:i32 = phi %2174, %2744, %2744
    %2746:i32 = phi %2192, %2745, %2745
    %2747:i32 = phi %2227, %2746, %2746
    %2748:i32 = phi %2262, %2747, %2747
    %2749:i32 = phi %2288, %2748, %2748
    %2750:i32 = phi %2306, %2749, %2749
    %2751:i32 = phi %2327, %2750, %2750
    %2752:i32 = phi %2345, %2751, %2751
    %2753:i32 = phi %2380, %2752, %2752
    %2754:i32 = phi %2415, %2753, %2753
    %2755:i32 = phi %2441, %2754, %2754
    %2756:i32 = phi %2459, %2755, %2755
    %2757:i32 = phi %2480, %2756, %2756
    %2758:i32 = phi %2498, %2757, %2757
    %2759:i32 = phi %2533, %2758, %2758
    %2760:i32 = phi %2568, %2759, %2759
    %2761:ctrl, %2762:ctrl = brcond %2567, %2760
    %2763:ctrl, %2764:phisel = region %2761
    %2765:ctrl, %2766:phisel = region %2762
    %2767:ctrl, %2768:phisel = region %2765, %2763
    %5445:i32 = phi %2768, %5444, %5444
    %2786:i32 = phi %2768, %2760, %2760
    %2769:i32 = phi %2768, %8, %8
    %2770:ctrl, %2771:ctrl = brcond %2767, %2769
    %2772:ctrl, %2773:phisel = region %2770
    %2774:ctrl, %2775:i32 = load.4 %2772, %7
    %2776:i32 = iadd %2775, %8
    %2777:ctrl = store.4 %2774, %2776, %7
    %2778:ctrl, %2779:phisel = region %2771
    %2780:ctrl, %2781:i32 = load.4 %2778, %6
    %2782:i32 = iadd %2781, %8
    %2783:ctrl = store.4 %2780, %2782, %6
    %2784:ctrl, %2785:phisel = region %2777, %2783
    %5446:i32 = phi %2785, %5445, %5445
    %2787:i32 = phi %2785, %2786, %2786
    %2788:i32 = icmp ult %20, %2787
    %2789:ctrl, %2790:ctrl = brcond %2784, %2788
    %2791:ctrl, %2792:phisel = region %2789
    %2793:ctrl, %2794:i32 = load.4 %2791, %7
    %2795:i32 = iadd %2794, %8
    %2796:ctrl = store.4 %2793, %2795, %7
    %2797:ctrl, %2798:phisel = region %2790
    %2799:ctrl, %2800:i32 = load.4 %2797, %6
    %2801:i32 = iadd %2800, %8
    %2802:ctrl = store.4 %2799, %2801, %6
    %2803:ctrl, %2804:phisel = region %2796, %2802
    %5447:i32 = phi %2804, %5446, %5446
    %2805:i32 = phi %2804, %2787, %2787
    %2806:ctrl, %2807:ctrl = brcond %2803, %2805
    %2808:ctrl, %2809:phisel = region %2806
    %2810:ctrl, %2811:phisel = region %2807
    %2812:ctrl, %2813:i32 = load.1 %2810, %31
    %2814:ctrl, %2815:phisel = region %2812, %2808
    %5448:i32 = phi %2815, %5447, %5447
    %2816:i32 = phi %2815, %2805, %2805
    %2817:i32 = phi %2815, %2813, %8
    %2818:ctrl, %2819:ctrl = brcond %2814, %2817
    %2820:ctrl, %2821:phisel = region %2818
    %2822:ctrl, %2823:i32 = load.4 %2820, %7
    %2824:i32 = iadd %2823, %8
    %2825:ctrl = store.4 %2822, %2824, %7
    %2826:ctrl, %2827:phisel = region %2819
    %2828:ctrl, %2829:i32 = load.4 %2826, %6
    %2830:i32 = iadd %2829, %8
    %2831:ctrl = store.4 %2828, %2830, %6
    %2832:ctrl, %2833:phisel = region %2825, %2831
    %5449:i32 = phi %2833, %5448, %5448
    %2834:i32 = phi %2833, %2816, %2816
    %2835:ctrl, %2836:ctrl = brcond %2832, %2834
    %2837:ctrl, %2838:phisel = region %2835
    %2839:ctrl, %2840:phisel = region %2836
    %2841:ctrl, %2842:i32 = load.1 %2839, %30
    %2843:ctrl, %2844:phisel = region %2841, %2837
    %5450:i32 = phi %2844, %5449, %5449
    %2845:i32 = phi %2844, %2834, %2834
    %2846:i32 = phi %2844, %2842, %8
    %2847:ctrl, %2848:ctrl = brcond %2843, %2846
    %2849:ctrl, %2850:phisel = region %2847
    %2851:ctrl, %2852:i32 = load.4 %2849, %7
    %2853:i32 = iadd %2852, %8
    %2854:ctrl = store.4 %2851, %2853, %7
    %2855:ctrl, %2856:phisel = region %2848
    %2857:ctrl, %2858:i32 = load.4 %2855, %6
    %2859:i32 = iadd %2858, %8
    %2860:ctrl = store.4 %2857, %2859, %6
    %2861:ctrl, %2862:phisel = region %2854, %2860
    %5451:i32 = phi %2862, %5450, %5450
    %2863:i32 = phi %2862, %2845, %2845
    %2864:ctrl, %2865:ctrl = brcond %2861, %2863
    %2866:ctrl, %2867:phisel = region %2864
    %2868:ctrl, %2869:phisel = region %2865
    %2870:ctrl, %2871:ptr = load.8 %2868, %29
    %2872:ptr = ptroff %2871, %11
    %2873:ctrl, %2874:i32 = load.1 %2870, %2872
    %2875:ctrl, %2876:phisel = region %2873, %2866
    %5452:i32 = phi %2876, %5451, %5451
    %2877:i32 = phi %2876, %2863, %2863
    %2878:i32 = phi %2876, %2874, %8
    %2879:ctrl, %2880:ctrl = brcond %2875, %2878
    %2881:ctrl, %2882:phisel = region %2879
    %2883:ctrl, %2884:i32 = load.4 %2881, %7
    %2885:i32 = iadd %2884, %8
    %2886:ctrl = store.4 %2883, %2885, %7
    %2887:ctrl, %2888:phisel = region %2880
    %2889:ctrl, %2890:i32 = load.4 %2887, %6
    %2891:i32 = iadd %2890, %8
    %2892:ctrl = store.4 %2889, %2891, %6
    %2893:ctrl, %2894:phisel = region %2886, %2892
    %5453:i32 = phi %2894, %5452, %5452
    %2895:i32 = phi %2894, %2877, %2877
    %2896:ctrl, %2897:ctrl = brcond %2893, %2895
    %2898:ctrl, %2899:phisel = region %2896
    %2900:ctrl, %2901:phisel = region %2897
    %2902:ctrl, %2903:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2900
    %2904:ctrl, %2905:phisel = region %2902, %2898
    %5454:i32 = phi %2905, %5453, %5453
    %2906:i32 = phi %2905, %2895, %2895
    %2907:i32 = phi %2905, %2903, %8
    %2908:ctrl, %2909:ctrl = brcond %2904, %2907
    %2910:ctrl, %2911:phisel = region %2908
    %2912:ctrl, %2913:i32 = load.4 %2910, %7
    %2914:i32 = iadd %2913, %8
    %2915:ctrl = store.4 %2912, %2914, %7
    %2916:ctrl, %2917:phisel = region %2909
    %2918:ctrl, %2919:i32 = load.4 %2916, %6
    %2920:i32 = iadd %2919, %8
    %2921:ctrl = store.4 %2918, %2920, %6
    %2922:ctrl, %2923:phisel = region %2915, %2921
    %5455:i32 = phi %2923, %5454, %5454
    %2924:i32 = phi %2923, %2906, %2906
    %2925:ctrl, %2926:ctrl = brcond %2922, %2924
    %2927:ctrl, %2928:phisel = region %2925
    %2929:ctrl, %2930:phisel = region %2926
    %2931:ctrl, %2932:ptr = load.8 %2929, %28
    %2933:ctrl, %2934:i32 = load.4 %2931, %13
    %2935:i64 = iext %2934
    %2936:i64 = sfill 32 %2935
    %2937:i64 = imul %14, %2936
    %2938:i64 = iadd %17, %2937
    %2940:ptr = ptroff %2932, %11
    %2941:ctrl, %2942:i64 = load.4 %2933, %2940
    %2943:i64 = icmp slt %2936, %2942
    %2944:ctrl, %2945:ctrl = brcond %2941, %2943
    %2946:ctrl, %2947:phisel = region %2944
    %5346:ctrl, %5347:phisel = region %2945
    %5348:ctrl = call @throw_index_out_of_range_exception %5346
    unreachable %5348
    %2939:ptr = ptroff %2932, %2938
    %2948:ctrl, %2949:i32 = load.1 %2946, %2939
    %2950:ctrl, %2951:phisel = region %2948, %2927
    %5456:i32 = phi %2951, %5455, %5455
    %2952:i32 = phi %2951, %2924, %2924
    %2953:i32 = phi %2951, %2949, %8
    %2954:ctrl, %2955:ctrl = brcond %2950, %2953
    %2956:ctrl, %2957:phisel = region %2954
    %2958:ctrl, %2959:i32 = load.4 %2956, %7
    %2960:i32 = iadd %2959, %8
    %2961:ctrl = store.4 %2958, %2960, %7
    %2962:ctrl, %2963:phisel = region %2955
    %2964:ctrl, %2965:i32 = load.4 %2962, %6
    %2966:i32 = iadd %2965, %8
    %2967:ctrl = store.4 %2964, %2966, %6
    %2968:ctrl, %2969:phisel = region %2961, %2967
    %5457:i32 = phi %2969, %5456, %5456
    %2970:i32 = phi %2969, %2952, %2952
    %2971:ctrl, %2972:ctrl = brcond %2968, %2970
    %2973:ctrl, %2974:phisel = region %2971
    %2975:ctrl, %2976:phisel = region %2972
    %2977:ctrl, %2978:ptr = load.8 %2975, %12
    %2979:ctrl, %2980:i32 = load.4 %2977, %13
    %2981:i64 = iext %2980
    %2982:i64 = sfill 32 %2981
    %2983:i64 = imul %14, %2982
    %2984:i64 = iadd %17, %2983
    %2986:ptr = ptroff %2978, %11
    %2987:ctrl, %2988:i64 = load.4 %2979, %2986
    %2989:i64 = icmp slt %2982, %2988
    %2990:ctrl, %2991:ctrl = brcond %2987, %2989
    %2992:ctrl, %2993:phisel = region %2990
    %5343:ctrl, %5344:phisel = region %2991
    %5345:ctrl = call @throw_index_out_of_range_exception %5343
    unreachable %5345
    %2985:ptr = ptroff %2978, %2984
    %2994:ctrl, %2995:i32 = load.1 %2992, %2985
    %2996:ctrl, %2997:phisel = region %2994, %2973
    %5458:i32 = phi %2997, %5457, %5457
    %2998:i32 = phi %2997, %2970, %2970
    %2999:i32 = phi %2997, %2995, %8
    %3000:ctrl, %3001:ctrl = brcond %2996, %2999
    %3002:ctrl, %3003:phisel = region %3000
    %3004:ctrl, %3005:i32 = load.4 %3002, %7
    %3006:i32 = iadd %3005, %8
    %3007:ctrl = store.4 %3004, %3006, %7
    %3008:ctrl, %3009:phisel = region %3001
    %3010:ctrl, %3011:i32 = load.4 %3008, %6
    %3012:i32 = iadd %3011, %8
    %3013:ctrl = store.4 %3010, %3012, %6
    %3014:ctrl, %3015:phisel = region %3007, %3013
    %5459:i32 = phi %3015, %5458, %5458
    %3016:i32 = phi %3015, %2998, %2998
    %3017:i32 = icmp eq %3016, %20
    %3018:ctrl, %3019:ctrl = brcond %3014, %3017
    %3020:ctrl, %3021:phisel = region %3018
    %3022:ctrl, %3023:i32 = load.4 %3020, %7
    %3024:i32 = iadd %3023, %8
    %3025:ctrl = store.4 %3022, %3024, %7
    %3026:ctrl, %3027:phisel = region %3019
    %3028:ctrl, %3029:i32 = load.4 %3026, %6
    %3030:i32 = iadd %3029, %8
    %3031:ctrl = store.4 %3028, %3030, %6
    %3032:ctrl, %3033:phisel = region %3025, %3031
    %5460:i32 = phi %3033, %5459, %5459
    %3034:i32 = phi %3033, %3016, %3016
    %3035:ctrl, %3036:ctrl = brcond %3032, %3034
    %3037:ctrl, %3038:phisel = region %3035
    %3039:ctrl, %3040:phisel = region %3036
    %3041:ctrl, %3042:phisel = region %3039, %3037
    %5461:i32 = phi %3042, %5460, %5460
    %3060:i32 = phi %3042, %3034, %3034
    %3043:i32 = phi %3042, %20, %20
    %3044:ctrl, %3045:ctrl = brcond %3041, %3043
    %3046:ctrl, %3047:phisel = region %3044
    %3048:ctrl, %3049:i32 = load.4 %3046, %7
    %3050:i32 = iadd %3049, %8
    %3051:ctrl = store.4 %3048, %3050, %7
    %3052:ctrl, %3053:phisel = region %3045
    %3054:ctrl, %3055:i32 = load.4 %3052, %6
    %3056:i32 = iadd %3055, %8
    %3057:ctrl = store.4 %3054, %3056, %6
    %3058:ctrl, %3059:phisel = region %3051, %3057
    %5462:i32 = phi %3059, %5461, %5461
    %3061:i32 = phi %3059, %3060, %3060
    %3062:ctrl, %3063:ctrl = brcond %3058, %3061
    %3064:ctrl, %3065:phisel = region %3062
    %3066:ctrl, %3067:phisel = region %3063
    %3068:ctrl, %3069:i32 = load.1 %3066, %31
    %3070:ctrl, %3071:phisel = region %3068, %3064
    %5463:i32 = phi %3071, %5462, %5462
    %3072:i32 = phi %3071, %3061, %3061
    %3073:i32 = phi %3071, %3069, %20
    %3074:ctrl, %3075:ctrl = brcond %3070, %3073
    %3076:ctrl, %3077:phisel = region %3074
    %3078:ctrl, %3079:i32 = load.4 %3076, %7
    %3080:i32 = iadd %3079, %8
    %3081:ctrl = store.4 %3078, %3080, %7
    %3082:ctrl, %3083:phisel = region %3075
    %3084:ctrl, %3085:i32 = load.4 %3082, %6
    %3086:i32 = iadd %3085, %8
    %3087:ctrl = store.4 %3084, %3086, %6
    %3088:ctrl, %3089:phisel = region %3081, %3087
    %5464:i32 = phi %3089, %5463, %5463
    %3090:i32 = phi %3089, %3072, %3072
    %3091:ctrl, %3092:ctrl = brcond %3088, %3090
    %3093:ctrl, %3094:phisel = region %3091
    %3095:ctrl, %3096:phisel = region %3092
    %3097:ctrl, %3098:i32 = load.1 %3095, %30
    %3099:ctrl, %3100:phisel = region %3097, %3093
    %5465:i32 = phi %3100, %5464, %5464
    %3101:i32 = phi %3100, %3090, %3090
    %3102:i32 = phi %3100, %3098, %20
    %3103:ctrl, %3104:ctrl = brcond %3099, %3102
    %3105:ctrl, %3106:phisel = region %3103
    %3107:ctrl, %3108:i32 = load.4 %3105, %7
    %3109:i32 = iadd %3108, %8
    %3110:ctrl = store.4 %3107, %3109, %7
    %3111:ctrl, %3112:phisel = region %3104
    %3113:ctrl, %3114:i32 = load.4 %3111, %6
    %3115:i32 = iadd %3114, %8
    %3116:ctrl = store.4 %3113, %3115, %6
    %3117:ctrl, %3118:phisel = region %3110, %3116
    %5466:i32 = phi %3118, %5465, %5465
    %3119:i32 = phi %3118, %3101, %3101
    %3120:ctrl, %3121:ctrl = brcond %3117, %3119
    %3122:ctrl, %3123:phisel = region %3120
    %3124:ctrl, %3125:phisel = region %3121
    %3126:ctrl, %3127:ptr = load.8 %3124, %29
    %3128:ptr = ptroff %3127, %11
    %3129:ctrl, %3130:i32 = load.1 %3126, %3128
    %3131:ctrl, %3132:phisel = region %3129, %3122
    %5467:i32 = phi %3132, %5466, %5466
    %3133:i32 = phi %3132, %3119, %3119
    %3134:i32 = phi %3132, %3130, %20
    %3135:ctrl, %3136:ctrl = brcond %3131, %3134
    %3137:ctrl, %3138:phisel = region %3135
    %3139:ctrl, %3140:i32 = load.4 %3137, %7
    %3141:i32 = iadd %3140, %8
    %3142:ctrl = store.4 %3139, %3141, %7
    %3143:ctrl, %3144:phisel = region %3136
    %3145:ctrl, %3146:i32 = load.4 %3143, %6
    %3147:i32 = iadd %3146, %8
    %3148:ctrl = store.4 %3145, %3147, %6
    %3149:ctrl, %3150:phisel = region %3142, %3148
    %5468:i32 = phi %3150, %5467, %5467
    %3151:i32 = phi %3150, %3133, %3133
    %3152:ctrl, %3153:ctrl = brcond %3149, %3151
    %3154:ctrl, %3155:phisel = region %3152
    %3156:ctrl, %3157:phisel = region %3153
    %3158:ctrl, %3159:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3156
    %3160:ctrl, %3161:phisel = region %3158, %3154
    %5469:i32 = phi %3161, %5468, %5468
    %3162:i32 = phi %3161, %3151, %3151
    %3163:i32 = phi %3161, %3159, %20
    %3164:ctrl, %3165:ctrl = brcond %3160, %3163
    %3166:ctrl, %3167:phisel = region %3164
    %3168:ctrl, %3169:i32 = load.4 %3166, %7
    %3170:i32 = iadd %3169, %8
    %3171:ctrl = store.4 %3168, %3170, %7
    %3172:ctrl, %3173:phisel = region %3165
    %3174:ctrl, %3175:i32 = load.4 %3172, %6
    %3176:i32 = iadd %3175, %8
    %3177:ctrl = store.4 %3174, %3176, %6
    %3178:ctrl, %3179:phisel = region %3171, %3177
    %5470:i32 = phi %3179, %5469, %5469
    %3180:i32 = phi %3179, %3162, %3162
    %3181:ctrl, %3182:ctrl = brcond %3178, %3180
    %3183:ctrl, %3184:phisel = region %3181
    %3185:ctrl, %3186:phisel = region %3182
    %3187:ctrl, %3188:ptr = load.8 %3185, %28
    %3189:ctrl, %3190:i32 = load.4 %3187, %13
    %3191:i64 = iext %3190
    %3192:i64 = sfill 32 %3191
    %3193:i64 = imul %14, %3192
    %3194:i64 = iadd %17, %3193
    %3196:ptr = ptroff %3188, %11
    %3197:ctrl, %3198:i64 = load.4 %3189, %3196
    %3199:i64 = icmp slt %3192, %3198
    %3200:ctrl, %3201:ctrl = brcond %3197, %3199
    %3202:ctrl, %3203:phisel = region %3200
    %5340:ctrl, %5341:phisel = region %3201
    %5342:ctrl = call @throw_index_out_of_range_exception %5340
    unreachable %5342
    %3195:ptr = ptroff %3188, %3194
    %3204:ctrl, %3205:i32 = load.1 %3202, %3195
    %3206:ctrl, %3207:phisel = region %3204, %3183
    %5471:i32 = phi %3207, %5470, %5470
    %3208:i32 = phi %3207, %3180, %3180
    %3209:i32 = phi %3207, %3205, %20
    %3210:ctrl, %3211:ctrl = brcond %3206, %3209
    %3212:ctrl, %3213:phisel = region %3210
    %3214:ctrl, %3215:i32 = load.4 %3212, %7
    %3216:i32 = iadd %3215, %8
    %3217:ctrl = store.4 %3214, %3216, %7
    %3218:ctrl, %3219:phisel = region %3211
    %3220:ctrl, %3221:i32 = load.4 %3218, %6
    %3222:i32 = iadd %3221, %8
    %3223:ctrl = store.4 %3220, %3222, %6
    %3224:ctrl, %3225:phisel = region %3217, %3223
    %5472:i32 = phi %3225, %5471, %5471
    %3226:i32 = phi %3225, %3208, %3208
    %3227:ctrl, %3228:ctrl = brcond %3224, %3226
    %3229:ctrl, %3230:phisel = region %3227
    %3231:ctrl, %3232:phisel = region %3228
    %3233:ctrl, %3234:ptr = load.8 %3231, %12
    %3235:ctrl, %3236:i32 = load.4 %3233, %13
    %3237:i64 = iext %3236
    %3238:i64 = sfill 32 %3237
    %3239:i64 = imul %14, %3238
    %3240:i64 = iadd %17, %3239
    %3242:ptr = ptroff %3234, %11
    %3243:ctrl, %3244:i64 = load.4 %3235, %3242
    %3245:i64 = icmp slt %3238, %3244
    %3246:ctrl, %3247:ctrl = brcond %3243, %3245
    %3248:ctrl, %3249:phisel = region %3246
    %5337:ctrl, %5338:phisel = region %3247
    %5339:ctrl = call @throw_index_out_of_range_exception %5337
    unreachable %5339
    %3241:ptr = ptroff %3234, %3240
    %3250:ctrl, %3251:i32 = load.1 %3248, %3241
    %3252:ctrl, %3253:phisel = region %3250, %3229
    %5473:i32 = phi %3253, %5472, %5472
    %3254:i32 = phi %3253, %3226, %3226
    %3255:i32 = phi %3253, %3251, %20
    %3256:ctrl, %3257:ctrl = brcond %3252, %3255
    %3258:ctrl, %3259:phisel = region %3256
    %3260:ctrl, %3261:i32 = load.4 %3258, %7
    %3262:i32 = iadd %3261, %8
    %3263:ctrl = store.4 %3260, %3262, %7
    %3264:ctrl, %3265:phisel = region %3257
    %3266:ctrl, %3267:i32 = load.4 %3264, %6
    %3268:i32 = iadd %3267, %8
    %3269:ctrl = store.4 %3266, %3268, %6
    %3270:ctrl, %3271:phisel = region %3263, %3269
    %5474:i32 = phi %3271, %5473, %5473
    %3272:i32 = phi %3271, %3254, %3254
    %3273:ctrl, %3274:ctrl = brcond %3270, %3272
    %3275:ctrl, %3276:phisel = region %3273
    %3277:ctrl, %3278:i32 = load.1 %3275, %31
    %3279:ctrl, %3280:phisel = region %3274
    %3281:ctrl, %3282:phisel = region %3279, %3277
    %5475:i32 = phi %3282, %5474, %5474
    %3300:i32 = phi %3282, %3272, %3272
    %3283:i32 = phi %3282, %8, %3278
    %3284:ctrl, %3285:ctrl = brcond %3281, %3283
    %3286:ctrl, %3287:phisel = region %3284
    %3288:ctrl, %3289:i32 = load.4 %3286, %7
    %3290:i32 = iadd %3289, %8
    %3291:ctrl = store.4 %3288, %3290, %7
    %3292:ctrl, %3293:phisel = region %3285
    %3294:ctrl, %3295:i32 = load.4 %3292, %6
    %3296:i32 = iadd %3295, %8
    %3297:ctrl = store.4 %3294, %3296, %6
    %3298:ctrl, %3299:phisel = region %3291, %3297
    %5476:i32 = phi %3299, %5475, %5475
    %3301:i32 = phi %3299, %3300, %3300
    %3302:ctrl, %3303:ctrl = brcond %3298, %3301
    %3304:ctrl, %3305:phisel = region %3302
    %3306:ctrl, %3307:i32 = load.1 %3304, %31
    %3308:ctrl, %3309:phisel = region %3303
    %3310:ctrl, %3311:phisel = region %3308, %3306
    %5477:i32 = phi %3311, %5476, %5476
    %3329:i32 = phi %3311, %3301, %3301
    %3312:i32 = phi %3311, %20, %3307
    %3313:ctrl, %3314:ctrl = brcond %3310, %3312
    %3315:ctrl, %3316:phisel = region %3313
    %3317:ctrl, %3318:i32 = load.4 %3315, %7
    %3319:i32 = iadd %3318, %8
    %3320:ctrl = store.4 %3317, %3319, %7
    %3321:ctrl, %3322:phisel = region %3314
    %3323:ctrl, %3324:i32 = load.4 %3321, %6
    %3325:i32 = iadd %3324, %8
    %3326:ctrl = store.4 %3323, %3325, %6
    %3327:ctrl, %3328:phisel = region %3320, %3326
    %5478:i32 = phi %3328, %5477, %5477
    %3330:i32 = phi %3328, %3329, %3329
    %3331:ctrl, %3332:ctrl = brcond %3327, %3330
    %3333:ctrl, %3334:phisel = region %3331
    %3335:ctrl, %3336:i32 = load.1 %3333, %31
    %3337:ctrl, %3338:phisel = region %3332
    %3339:ctrl, %3340:i32 = load.1 %3337, %31
    %3341:ctrl, %3342:phisel = region %3339, %3335
    %5479:i32 = phi %3342, %5478, %5478
    %3343:i32 = phi %3342, %3330, %3330
    %3344:i32 = phi %3342, %3340, %3336
    %3345:ctrl, %3346:ctrl = brcond %3341, %3344
    %3347:ctrl, %3348:phisel = region %3345
    %3349:ctrl, %3350:i32 = load.4 %3347, %7
    %3351:i32 = iadd %3350, %8
    %3352:ctrl = store.4 %3349, %3351, %7
    %3353:ctrl, %3354:phisel = region %3346
    %3355:ctrl, %3356:i32 = load.4 %3353, %6
    %3357:i32 = iadd %3356, %8
    %3358:ctrl = store.4 %3355, %3357, %6
    %3359:ctrl, %3360:phisel = region %3352, %3358
    %5480:i32 = phi %3360, %5479, %5479
    %3361:i32 = phi %3360, %3343, %3343
    %3362:ctrl, %3363:ctrl = brcond %3359, %3361
    %3364:ctrl, %3365:phisel = region %3362
    %3366:ctrl, %3367:i32 = load.1 %3364, %31
    %3368:ctrl, %3369:phisel = region %3363
    %3370:ctrl, %3371:i32 = load.1 %3368, %30
    %3372:ctrl, %3373:phisel = region %3370, %3366
    %5481:i32 = phi %3373, %5480, %5480
    %3374:i32 = phi %3373, %3361, %3361
    %3375:i32 = phi %3373, %3371, %3367
    %3376:ctrl, %3377:ctrl = brcond %3372, %3375
    %3378:ctrl, %3379:phisel = region %3376
    %3380:ctrl, %3381:i32 = load.4 %3378, %7
    %3382:i32 = iadd %3381, %8
    %3383:ctrl = store.4 %3380, %3382, %7
    %3384:ctrl, %3385:phisel = region %3377
    %3386:ctrl, %3387:i32 = load.4 %3384, %6
    %3388:i32 = iadd %3387, %8
    %3389:ctrl = store.4 %3386, %3388, %6
    %3390:ctrl, %3391:phisel = region %3383, %3389
    %5482:i32 = phi %3391, %5481, %5481
    %3392:i32 = phi %3391, %3374, %3374
    %3393:ctrl, %3394:ctrl = brcond %3390, %3392
    %3395:ctrl, %3396:phisel = region %3393
    %3397:ctrl, %3398:i32 = load.1 %3395, %31
    %3399:ctrl, %3400:phisel = region %3394
    %3401:ctrl, %3402:ptr = load.8 %3399, %29
    %3403:ptr = ptroff %3402, %11
    %3404:ctrl, %3405:i32 = load.1 %3401, %3403
    %3406:ctrl, %3407:phisel = region %3404, %3397
    %5483:i32 = phi %3407, %5482, %5482
    %3408:i32 = phi %3407, %3392, %3392
    %3409:i32 = phi %3407, %3405, %3398
    %3410:ctrl, %3411:ctrl = brcond %3406, %3409
    %3412:ctrl, %3413:phisel = region %3410
    %3414:ctrl, %3415:i32 = load.4 %3412, %7
    %3416:i32 = iadd %3415, %8
    %3417:ctrl = store.4 %3414, %3416, %7
    %3418:ctrl, %3419:phisel = region %3411
    %3420:ctrl, %3421:i32 = load.4 %3418, %6
    %3422:i32 = iadd %3421, %8
    %3423:ctrl = store.4 %3420, %3422, %6
    %3424:ctrl, %3425:phisel = region %3417, %3423
    %5484:i32 = phi %3425, %5483, %5483
    %3426:i32 = phi %3425, %3408, %3408
    %3427:ctrl, %3428:ctrl = brcond %3424, %3426
    %3429:ctrl, %3430:phisel = region %3427
    %3431:ctrl, %3432:i32 = load.1 %3429, %31
    %3433:ctrl, %3434:phisel = region %3428
    %3435:ctrl, %3436:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3433
    %3437:ctrl, %3438:phisel = region %3435, %3431
    %5485:i32 = phi %3438, %5484, %5484
    %3439:i32 = phi %3438, %3426, %3426
    %3440:i32 = phi %3438, %3436, %3432
    %3441:ctrl, %3442:ctrl = brcond %3437, %3440
    %3443:ctrl, %3444:phisel = region %3441
    %3445:ctrl, %3446:i32 = load.4 %3443, %7
    %3447:i32 = iadd %3446, %8
    %3448:ctrl = store.4 %3445, %3447, %7
    %3449:ctrl, %3450:phisel = region %3442
    %3451:ctrl, %3452:i32 = load.4 %3449, %6
    %3453:i32 = iadd %3452, %8
    %3454:ctrl = store.4 %3451, %3453, %6
    %3455:ctrl, %3456:phisel = region %3448, %3454
    %5486:i32 = phi %3456, %5485, %5485
    %3457:i32 = phi %3456, %3439, %3439
    %3458:ctrl, %3459:ctrl = brcond %3455, %3457
    %3460:ctrl, %3461:phisel = region %3458
    %3462:ctrl, %3463:i32 = load.1 %3460, %31
    %3464:ctrl, %3465:phisel = region %3459
    %3466:ctrl, %3467:ptr = load.8 %3464, %28
    %3468:ctrl, %3469:i32 = load.4 %3466, %13
    %3470:i64 = iext %3469
    %3471:i64 = sfill 32 %3470
    %3472:i64 = imul %14, %3471
    %3473:i64 = iadd %17, %3472
    %3475:ptr = ptroff %3467, %11
    %3476:ctrl, %3477:i64 = load.4 %3468, %3475
    %3478:i64 = icmp slt %3471, %3477
    %3479:ctrl, %3480:ctrl = brcond %3476, %3478
    %3481:ctrl, %3482:phisel = region %3479
    %5334:ctrl, %5335:phisel = region %3480
    %5336:ctrl = call @throw_index_out_of_range_exception %5334
    unreachable %5336
    %3474:ptr = ptroff %3467, %3473
    %3483:ctrl, %3484:i32 = load.1 %3481, %3474
    %3485:ctrl, %3486:phisel = region %3483, %3462
    %5487:i32 = phi %3486, %5486, %5486
    %3487:i32 = phi %3486, %3457, %3457
    %3488:i32 = phi %3486, %3484, %3463
    %3489:ctrl, %3490:ctrl = brcond %3485, %3488
    %3491:ctrl, %3492:phisel = region %3489
    %3493:ctrl, %3494:i32 = load.4 %3491, %7
    %3495:i32 = iadd %3494, %8
    %3496:ctrl = store.4 %3493, %3495, %7
    %3497:ctrl, %3498:phisel = region %3490
    %3499:ctrl, %3500:i32 = load.4 %3497, %6
    %3501:i32 = iadd %3500, %8
    %3502:ctrl = store.4 %3499, %3501, %6
    %3503:ctrl, %3504:phisel = region %3496, %3502
    %5488:i32 = phi %3504, %5487, %5487
    %3505:i32 = phi %3504, %3487, %3487
    %3506:ctrl, %3507:ctrl = brcond %3503, %3505
    %3508:ctrl, %3509:phisel = region %3506
    %3510:ctrl, %3511:i32 = load.1 %3508, %31
    %3512:ctrl, %3513:phisel = region %3507
    %3514:ctrl, %3515:ptr = load.8 %3512, %12
    %3516:ctrl, %3517:i32 = load.4 %3514, %13
    %3518:i64 = iext %3517
    %3519:i64 = sfill 32 %3518
    %3520:i64 = imul %14, %3519
    %3521:i64 = iadd %17, %3520
    %3523:ptr = ptroff %3515, %11
    %3524:ctrl, %3525:i64 = load.4 %3516, %3523
    %3526:i64 = icmp slt %3519, %3525
    %3527:ctrl, %3528:ctrl = brcond %3524, %3526
    %3529:ctrl, %3530:phisel = region %3527
    %5331:ctrl, %5332:phisel = region %3528
    %5333:ctrl = call @throw_index_out_of_range_exception %5331
    unreachable %5333
    %3522:ptr = ptroff %3515, %3521
    %3531:ctrl, %3532:i32 = load.1 %3529, %3522
    %3533:ctrl, %3534:phisel = region %3531, %3510
    %5489:i32 = phi %3534, %5488, %5488
    %3535:i32 = phi %3534, %3505, %3505
    %3536:i32 = phi %3534, %3532, %3511
    %3537:ctrl, %3538:ctrl = brcond %3533, %3536
    %3539:ctrl, %3540:phisel = region %3537
    %3541:ctrl, %3542:i32 = load.4 %3539, %7
    %3543:i32 = iadd %3542, %8
    %3544:ctrl = store.4 %3541, %3543, %7
    %3545:ctrl, %3546:phisel = region %3538
    %3547:ctrl, %3548:i32 = load.4 %3545, %6
    %3549:i32 = iadd %3548, %8
    %3550:ctrl = store.4 %3547, %3549, %6
    %3551:ctrl, %3552:phisel = region %3544, %3550
    %5490:i32 = phi %3552, %5489, %5489
    %3553:i32 = phi %3552, %3535, %3535
    %3554:ctrl, %3555:ctrl = brcond %3551, %3553
    %3556:ctrl, %3557:phisel = region %3554
    %3558:ctrl, %3559:i32 = load.1 %3556, %30
    %3560:ctrl, %3561:phisel = region %3555
    %3562:ctrl, %3563:phisel = region %3560, %3558
    %5491:i32 = phi %3563, %5490, %5490
    %3581:i32 = phi %3563, %3553, %3553
    %3564:i32 = phi %3563, %8, %3559
    %3565:ctrl, %3566:ctrl = brcond %3562, %3564
    %3567:ctrl, %3568:phisel = region %3565
    %3569:ctrl, %3570:i32 = load.4 %3567, %7
    %3571:i32 = iadd %3570, %8
    %3572:ctrl = store.4 %3569, %3571, %7
    %3573:ctrl, %3574:phisel = region %3566
    %3575:ctrl, %3576:i32 = load.4 %3573, %6
    %3577:i32 = iadd %3576, %8
    %3578:ctrl = store.4 %3575, %3577, %6
    %3579:ctrl, %3580:phisel = region %3572, %3578
    %5492:i32 = phi %3580, %5491, %5491
    %3582:i32 = phi %3580, %3581, %3581
    %3583:ctrl, %3584:ctrl = brcond %3579, %3582
    %3585:ctrl, %3586:phisel = region %3583
    %3587:ctrl, %3588:i32 = load.1 %3585, %30
    %3589:ctrl, %3590:phisel = region %3584
    %3591:ctrl, %3592:phisel = region %3589, %3587
    %5493:i32 = phi %3592, %5492, %5492
    %3610:i32 = phi %3592, %3582, %3582
    %3593:i32 = phi %3592, %20, %3588
    %3594:ctrl, %3595:ctrl = brcond %3591, %3593
    %3596:ctrl, %3597:phisel = region %3594
    %3598:ctrl, %3599:i32 = load.4 %3596, %7
    %3600:i32 = iadd %3599, %8
    %3601:ctrl = store.4 %3598, %3600, %7
    %3602:ctrl, %3603:phisel = region %3595
    %3604:ctrl, %3605:i32 = load.4 %3602, %6
    %3606:i32 = iadd %3605, %8
    %3607:ctrl = store.4 %3604, %3606, %6
    %3608:ctrl, %3609:phisel = region %3601, %3607
    %5494:i32 = phi %3609, %5493, %5493
    %3611:i32 = phi %3609, %3610, %3610
    %3612:ctrl, %3613:ctrl = brcond %3608, %3611
    %3614:ctrl, %3615:phisel = region %3612
    %3616:ctrl, %3617:i32 = load.1 %3614, %30
    %3618:ctrl, %3619:phisel = region %3613
    %3620:ctrl, %3621:i32 = load.1 %3618, %31
    %3622:ctrl, %3623:phisel = region %3620, %3616
    %5495:i32 = phi %3623, %5494, %5494
    %3624:i32 = phi %3623, %3611, %3611
    %3625:i32 = phi %3623, %3621, %3617
    %3626:ctrl, %3627:ctrl = brcond %3622, %3625
    %3628:ctrl, %3629:phisel = region %3626
    %3630:ctrl, %3631:i32 = load.4 %3628, %7
    %3632:i32 = iadd %3631, %8
    %3633:ctrl = store.4 %3630, %3632, %7
    %3634:ctrl, %3635:phisel = region %3627
    %3636:ctrl, %3637:i32 = load.4 %3634, %6
    %3638:i32 = iadd %3637, %8
    %3639:ctrl = store.4 %3636, %3638, %6
    %3640:ctrl, %3641:phisel = region %3633, %3639
    %5496:i32 = phi %3641, %5495, %5495
    %3642:i32 = phi %3641, %3624, %3624
    %3643:ctrl, %3644:ctrl = brcond %3640, %3642
    %3645:ctrl, %3646:phisel = region %3643
    %3647:ctrl, %3648:i32 = load.1 %3645, %30
    %3649:ctrl, %3650:phisel = region %3644
    %3651:ctrl, %3652:i32 = load.1 %3649, %30
    %3653:ctrl, %3654:phisel = region %3651, %3647
    %5497:i32 = phi %3654, %5496, %5496
    %3655:i32 = phi %3654, %3642, %3642
    %3656:i32 = phi %3654, %3652, %3648
    %3657:ctrl, %3658:ctrl = brcond %3653, %3656
    %3659:ctrl, %3660:phisel = region %3657
    %3661:ctrl, %3662:i32 = load.4 %3659, %7
    %3663:i32 = iadd %3662, %8
    %3664:ctrl = store.4 %3661, %3663, %7
    %3665:ctrl, %3666:phisel = region %3658
    %3667:ctrl, %3668:i32 = load.4 %3665, %6
    %3669:i32 = iadd %3668, %8
    %3670:ctrl = store.4 %3667, %3669, %6
    %3671:ctrl, %3672:phisel = region %3664, %3670
    %5498:i32 = phi %3672, %5497, %5497
    %3673:i32 = phi %3672, %3655, %3655
    %3674:ctrl, %3675:ctrl = brcond %3671, %3673
    %3676:ctrl, %3677:phisel = region %3674
    %3678:ctrl, %3679:i32 = load.1 %3676, %30
    %3680:ctrl, %3681:phisel = region %3675
    %3682:ctrl, %3683:ptr = load.8 %3680, %29
    %3684:ptr = ptroff %3683, %11
    %3685:ctrl, %3686:i32 = load.1 %3682, %3684
    %3687:ctrl, %3688:phisel = region %3685, %3678
    %5499:i32 = phi %3688, %5498, %5498
    %3689:i32 = phi %3688, %3673, %3673
    %3690:i32 = phi %3688, %3686, %3679
    %3691:ctrl, %3692:ctrl = brcond %3687, %3690
    %3693:ctrl, %3694:phisel = region %3691
    %3695:ctrl, %3696:i32 = load.4 %3693, %7
    %3697:i32 = iadd %3696, %8
    %3698:ctrl = store.4 %3695, %3697, %7
    %3699:ctrl, %3700:phisel = region %3692
    %3701:ctrl, %3702:i32 = load.4 %3699, %6
    %3703:i32 = iadd %3702, %8
    %3704:ctrl = store.4 %3701, %3703, %6
    %3705:ctrl, %3706:phisel = region %3698, %3704
    %5500:i32 = phi %3706, %5499, %5499
    %3707:i32 = phi %3706, %3689, %3689
    %3708:ctrl, %3709:ctrl = brcond %3705, %3707
    %3710:ctrl, %3711:phisel = region %3708
    %3712:ctrl, %3713:i32 = load.1 %3710, %30
    %3714:ctrl, %3715:phisel = region %3709
    %3716:ctrl, %3717:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3714
    %3718:ctrl, %3719:phisel = region %3716, %3712
    %5501:i32 = phi %3719, %5500, %5500
    %3720:i32 = phi %3719, %3707, %3707
    %3721:i32 = phi %3719, %3717, %3713
    %3722:ctrl, %3723:ctrl = brcond %3718, %3721
    %3724:ctrl, %3725:phisel = region %3722
    %3726:ctrl, %3727:i32 = load.4 %3724, %7
    %3728:i32 = iadd %3727, %8
    %3729:ctrl = store.4 %3726, %3728, %7
    %3730:ctrl, %3731:phisel = region %3723
    %3732:ctrl, %3733:i32 = load.4 %3730, %6
    %3734:i32 = iadd %3733, %8
    %3735:ctrl = store.4 %3732, %3734, %6
    %3736:ctrl, %3737:phisel = region %3729, %3735
    %5502:i32 = phi %3737, %5501, %5501
    %3738:i32 = phi %3737, %3720, %3720
    %3739:ctrl, %3740:ctrl = brcond %3736, %3738
    %3741:ctrl, %3742:phisel = region %3739
    %3743:ctrl, %3744:i32 = load.1 %3741, %30
    %3745:ctrl, %3746:phisel = region %3740
    %3747:ctrl, %3748:ptr = load.8 %3745, %28
    %3749:ctrl, %3750:i32 = load.4 %3747, %13
    %3751:i64 = iext %3750
    %3752:i64 = sfill 32 %3751
    %3753:i64 = imul %14, %3752
    %3754:i64 = iadd %17, %3753
    %3756:ptr = ptroff %3748, %11
    %3757:ctrl, %3758:i64 = load.4 %3749, %3756
    %3759:i64 = icmp slt %3752, %3758
    %3760:ctrl, %3761:ctrl = brcond %3757, %3759
    %3762:ctrl, %3763:phisel = region %3760
    %5328:ctrl, %5329:phisel = region %3761
    %5330:ctrl = call @throw_index_out_of_range_exception %5328
    unreachable %5330
    %3755:ptr = ptroff %3748, %3754
    %3764:ctrl, %3765:i32 = load.1 %3762, %3755
    %3766:ctrl, %3767:phisel = region %3764, %3743
    %5503:i32 = phi %3767, %5502, %5502
    %3768:i32 = phi %3767, %3738, %3738
    %3769:i32 = phi %3767, %3765, %3744
    %3770:ctrl, %3771:ctrl = brcond %3766, %3769
    %3772:ctrl, %3773:phisel = region %3770
    %3774:ctrl, %3775:i32 = load.4 %3772, %7
    %3776:i32 = iadd %3775, %8
    %3777:ctrl = store.4 %3774, %3776, %7
    %3778:ctrl, %3779:phisel = region %3771
    %3780:ctrl, %3781:i32 = load.4 %3778, %6
    %3782:i32 = iadd %3781, %8
    %3783:ctrl = store.4 %3780, %3782, %6
    %3784:ctrl, %3785:phisel = region %3777, %3783
    %5504:i32 = phi %3785, %5503, %5503
    %3786:i32 = phi %3785, %3768, %3768
    %3787:ctrl, %3788:ctrl = brcond %3784, %3786
    %3789:ctrl, %3790:phisel = region %3787
    %3791:ctrl, %3792:i32 = load.1 %3789, %30
    %3793:ctrl, %3794:phisel = region %3788
    %3795:ctrl, %3796:ptr = load.8 %3793, %12
    %3797:ctrl, %3798:i32 = load.4 %3795, %13
    %3799:i64 = iext %3798
    %3800:i64 = sfill 32 %3799
    %3801:i64 = imul %14, %3800
    %3802:i64 = iadd %17, %3801
    %3804:ptr = ptroff %3796, %11
    %3805:ctrl, %3806:i64 = load.4 %3797, %3804
    %3807:i64 = icmp slt %3800, %3806
    %3808:ctrl, %3809:ctrl = brcond %3805, %3807
    %3810:ctrl, %3811:phisel = region %3808
    %5325:ctrl, %5326:phisel = region %3809
    %5327:ctrl = call @throw_index_out_of_range_exception %5325
    unreachable %5327
    %3803:ptr = ptroff %3796, %3802
    %3812:ctrl, %3813:i32 = load.1 %3810, %3803
    %3814:ctrl, %3815:phisel = region %3812, %3791
    %5505:i32 = phi %3815, %5504, %5504
    %3816:i32 = phi %3815, %3786, %3786
    %3817:i32 = phi %3815, %3813, %3792
    %3818:ctrl, %3819:ctrl = brcond %3814, %3817
    %3820:ctrl, %3821:phisel = region %3818
    %3822:ctrl, %3823:i32 = load.4 %3820, %7
    %3824:i32 = iadd %3823, %8
    %3825:ctrl = store.4 %3822, %3824, %7
    %3826:ctrl, %3827:phisel = region %3819
    %3828:ctrl, %3829:i32 = load.4 %3826, %6
    %3830:i32 = iadd %3829, %8
    %3831:ctrl = store.4 %3828, %3830, %6
    %3832:ctrl, %3833:phisel = region %3825, %3831
    %5506:i32 = phi %3833, %5505, %5505
    %3834:i32 = phi %3833, %3816, %3816
    %3835:ctrl, %3836:ctrl = brcond %3832, %3834
    %3837:ctrl, %3838:phisel = region %3835
    %3839:ctrl, %3840:ptr = load.8 %3837, %29
    %3841:ptr = ptroff %3840, %11
    %3842:ctrl, %3843:i32 = load.1 %3839, %3841
    %3844:ctrl, %3845:phisel = region %3836
    %3846:ctrl, %3847:phisel = region %3844, %3842
    %5507:i32 = phi %3847, %5506, %5506
    %3865:i32 = phi %3847, %3834, %3834
    %3848:i32 = phi %3847, %8, %3843
    %3849:ctrl, %3850:ctrl = brcond %3846, %3848
    %3851:ctrl, %3852:phisel = region %3849
    %3853:ctrl, %3854:i32 = load.4 %3851, %7
    %3855:i32 = iadd %3854, %8
    %3856:ctrl = store.4 %3853, %3855, %7
    %3857:ctrl, %3858:phisel = region %3850
    %3859:ctrl, %3860:i32 = load.4 %3857, %6
    %3861:i32 = iadd %3860, %8
    %3862:ctrl = store.4 %3859, %3861, %6
    %3863:ctrl, %3864:phisel = region %3856, %3862
    %5508:i32 = phi %3864, %5507, %5507
    %3866:i32 = phi %3864, %3865, %3865
    %3867:ctrl, %3868:ctrl = brcond %3863, %3866
    %3869:ctrl, %3870:phisel = region %3867
    %3871:ctrl, %3872:ptr = load.8 %3869, %29
    %3873:ptr = ptroff %3872, %11
    %3874:ctrl, %3875:i32 = load.1 %3871, %3873
    %3876:ctrl, %3877:phisel = region %3868
    %3878:ctrl, %3879:phisel = region %3876, %3874
    %5509:i32 = phi %3879, %5508, %5508
    %3897:i32 = phi %3879, %3866, %3866
    %3880:i32 = phi %3879, %20, %3875
    %3881:ctrl, %3882:ctrl = brcond %3878, %3880
    %3883:ctrl, %3884:phisel = region %3881
    %3885:ctrl, %3886:i32 = load.4 %3883, %7
    %3887:i32 = iadd %3886, %8
    %3888:ctrl = store.4 %3885, %3887, %7
    %3889:ctrl, %3890:phisel = region %3882
    %3891:ctrl, %3892:i32 = load.4 %3889, %6
    %3893:i32 = iadd %3892, %8
    %3894:ctrl = store.4 %3891, %3893, %6
    %3895:ctrl, %3896:phisel = region %3888, %3894
    %5510:i32 = phi %3896, %5509, %5509
    %3898:i32 = phi %3896, %3897, %3897
    %3899:ctrl, %3900:ctrl = brcond %3895, %3898
    %3901:ctrl, %3902:phisel = region %3899
    %3903:ctrl, %3904:ptr = load.8 %3901, %29
    %3905:ptr = ptroff %3904, %11
    %3906:ctrl, %3907:i32 = load.1 %3903, %3905
    %3908:ctrl, %3909:phisel = region %3900
    %3910:ctrl, %3911:i32 = load.1 %3908, %31
    %3912:ctrl, %3913:phisel = region %3910, %3906
    %5511:i32 = phi %3913, %5510, %5510
    %3914:i32 = phi %3913, %3898, %3898
    %3915:i32 = phi %3913, %3911, %3907
    %3916:ctrl, %3917:ctrl = brcond %3912, %3915
    %3918:ctrl, %3919:phisel = region %3916
    %3920:ctrl, %3921:i32 = load.4 %3918, %7
    %3922:i32 = iadd %3921, %8
    %3923:ctrl = store.4 %3920, %3922, %7
    %3924:ctrl, %3925:phisel = region %3917
    %3926:ctrl, %3927:i32 = load.4 %3924, %6
    %3928:i32 = iadd %3927, %8
    %3929:ctrl = store.4 %3926, %3928, %6
    %3930:ctrl, %3931:phisel = region %3923, %3929
    %5512:i32 = phi %3931, %5511, %5511
    %3932:i32 = phi %3931, %3914, %3914
    %3933:ctrl, %3934:ctrl = brcond %3930, %3932
    %3935:ctrl, %3936:phisel = region %3933
    %3937:ctrl, %3938:ptr = load.8 %3935, %29
    %3939:ptr = ptroff %3938, %11
    %3940:ctrl, %3941:i32 = load.1 %3937, %3939
    %3942:ctrl, %3943:phisel = region %3934
    %3944:ctrl, %3945:i32 = load.1 %3942, %30
    %3946:ctrl, %3947:phisel = region %3944, %3940
    %5513:i32 = phi %3947, %5512, %5512
    %3948:i32 = phi %3947, %3932, %3932
    %3949:i32 = phi %3947, %3945, %3941
    %3950:ctrl, %3951:ctrl = brcond %3946, %3949
    %3952:ctrl, %3953:phisel = region %3950
    %3954:ctrl, %3955:i32 = load.4 %3952, %7
    %3956:i32 = iadd %3955, %8
    %3957:ctrl = store.4 %3954, %3956, %7
    %3958:ctrl, %3959:phisel = region %3951
    %3960:ctrl, %3961:i32 = load.4 %3958, %6
    %3962:i32 = iadd %3961, %8
    %3963:ctrl = store.4 %3960, %3962, %6
    %3964:ctrl, %3965:phisel = region %3957, %3963
    %5514:i32 = phi %3965, %5513, %5513
    %3966:i32 = phi %3965, %3948, %3948
    %3967:ctrl, %3968:ctrl = brcond %3964, %3966
    %3969:ctrl, %3970:phisel = region %3967
    %3971:ctrl, %3972:ptr = load.8 %3969, %29
    %3973:ptr = ptroff %3972, %11
    %3974:ctrl, %3975:i32 = load.1 %3971, %3973
    %3976:ctrl, %3977:phisel = region %3968
    %3978:ctrl, %3979:ptr = load.8 %3976, %29
    %3980:ptr = ptroff %3979, %11
    %3981:ctrl, %3982:i32 = load.1 %3978, %3980
    %3983:ctrl, %3984:phisel = region %3981, %3974
    %5515:i32 = phi %3984, %5514, %5514
    %3985:i32 = phi %3984, %3966, %3966
    %3986:i32 = phi %3984, %3982, %3975
    %3987:ctrl, %3988:ctrl = brcond %3983, %3986
    %3989:ctrl, %3990:phisel = region %3987
    %3991:ctrl, %3992:i32 = load.4 %3989, %7
    %3993:i32 = iadd %3992, %8
    %3994:ctrl = store.4 %3991, %3993, %7
    %3995:ctrl, %3996:phisel = region %3988
    %3997:ctrl, %3998:i32 = load.4 %3995, %6
    %3999:i32 = iadd %3998, %8
    %4000:ctrl = store.4 %3997, %3999, %6
    %4001:ctrl, %4002:phisel = region %3994, %4000
    %5516:i32 = phi %4002, %5515, %5515
    %4003:i32 = phi %4002, %3985, %3985
    %4004:ctrl, %4005:ctrl = brcond %4001, %4003
    %4006:ctrl, %4007:phisel = region %4004
    %4008:ctrl, %4009:ptr = load.8 %4006, %29
    %4010:ptr = ptroff %4009, %11
    %4011:ctrl, %4012:i32 = load.1 %4008, %4010
    %4013:ctrl, %4014:phisel = region %4005
    %4015:ctrl, %4016:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4013
    %4017:ctrl, %4018:phisel = region %4015, %4011
    %5517:i32 = phi %4018, %5516, %5516
    %4019:i32 = phi %4018, %4003, %4003
    %4020:i32 = phi %4018, %4016, %4012
    %4021:ctrl, %4022:ctrl = brcond %4017, %4020
    %4023:ctrl, %4024:phisel = region %4021
    %4025:ctrl, %4026:i32 = load.4 %4023, %7
    %4027:i32 = iadd %4026, %8
    %4028:ctrl = store.4 %4025, %4027, %7
    %4029:ctrl, %4030:phisel = region %4022
    %4031:ctrl, %4032:i32 = load.4 %4029, %6
    %4033:i32 = iadd %4032, %8
    %4034:ctrl = store.4 %4031, %4033, %6
    %4035:ctrl, %4036:phisel = region %4028, %4034
    %5518:i32 = phi %4036, %5517, %5517
    %4037:i32 = phi %4036, %4019, %4019
    %4038:ctrl, %4039:ctrl = brcond %4035, %4037
    %4040:ctrl, %4041:phisel = region %4038
    %4042:ctrl, %4043:ptr = load.8 %4040, %29
    %4044:ptr = ptroff %4043, %11
    %4045:ctrl, %4046:i32 = load.1 %4042, %4044
    %4047:ctrl, %4048:phisel = region %4039
    %4049:ctrl, %4050:ptr = load.8 %4047, %28
    %4051:ctrl, %4052:i32 = load.4 %4049, %13
    %4053:i64 = iext %4052
    %4054:i64 = sfill 32 %4053
    %4055:i64 = imul %14, %4054
    %4056:i64 = iadd %17, %4055
    %4058:ptr = ptroff %4050, %11
    %4059:ctrl, %4060:i64 = load.4 %4051, %4058
    %4061:i64 = icmp slt %4054, %4060
    %4062:ctrl, %4063:ctrl = brcond %4059, %4061
    %4064:ctrl, %4065:phisel = region %4062
    %5322:ctrl, %5323:phisel = region %4063
    %5324:ctrl = call @throw_index_out_of_range_exception %5322
    unreachable %5324
    %4057:ptr = ptroff %4050, %4056
    %4066:ctrl, %4067:i32 = load.1 %4064, %4057
    %4068:ctrl, %4069:phisel = region %4066, %4045
    %5519:i32 = phi %4069, %5518, %5518
    %4070:i32 = phi %4069, %4037, %4037
    %4071:i32 = phi %4069, %4067, %4046
    %4072:ctrl, %4073:ctrl = brcond %4068, %4071
    %4074:ctrl, %4075:phisel = region %4072
    %4076:ctrl, %4077:i32 = load.4 %4074, %7
    %4078:i32 = iadd %4077, %8
    %4079:ctrl = store.4 %4076, %4078, %7
    %4080:ctrl, %4081:phisel = region %4073
    %4082:ctrl, %4083:i32 = load.4 %4080, %6
    %4084:i32 = iadd %4083, %8
    %4085:ctrl = store.4 %4082, %4084, %6
    %4086:ctrl, %4087:phisel = region %4079, %4085
    %5520:i32 = phi %4087, %5519, %5519
    %4088:i32 = phi %4087, %4070, %4070
    %4089:ctrl, %4090:ctrl = brcond %4086, %4088
    %4091:ctrl, %4092:phisel = region %4089
    %4093:ctrl, %4094:ptr = load.8 %4091, %29
    %4095:ptr = ptroff %4094, %11
    %4096:ctrl, %4097:i32 = load.1 %4093, %4095
    %4098:ctrl, %4099:phisel = region %4090
    %4100:ctrl, %4101:ptr = load.8 %4098, %12
    %4102:ctrl, %4103:i32 = load.4 %4100, %13
    %4104:i64 = iext %4103
    %4105:i64 = sfill 32 %4104
    %4106:i64 = imul %14, %4105
    %4107:i64 = iadd %17, %4106
    %4109:ptr = ptroff %4101, %11
    %4110:ctrl, %4111:i64 = load.4 %4102, %4109
    %4112:i64 = icmp slt %4105, %4111
    %4113:ctrl, %4114:ctrl = brcond %4110, %4112
    %4115:ctrl, %4116:phisel = region %4113
    %5319:ctrl, %5320:phisel = region %4114
    %5321:ctrl = call @throw_index_out_of_range_exception %5319
    unreachable %5321
    %4108:ptr = ptroff %4101, %4107
    %4117:ctrl, %4118:i32 = load.1 %4115, %4108
    %4119:ctrl, %4120:phisel = region %4117, %4096
    %5521:i32 = phi %4120, %5520, %5520
    %4121:i32 = phi %4120, %4088, %4088
    %4122:i32 = phi %4120, %4118, %4097
    %4123:ctrl, %4124:ctrl = brcond %4119, %4122
    %4125:ctrl, %4126:phisel = region %4123
    %4127:ctrl, %4128:i32 = load.4 %4125, %7
    %4129:i32 = iadd %4128, %8
    %4130:ctrl = store.4 %4127, %4129, %7
    %4131:ctrl, %4132:phisel = region %4124
    %4133:ctrl, %4134:i32 = load.4 %4131, %6
    %4135:i32 = iadd %4134, %8
    %4136:ctrl = store.4 %4133, %4135, %6
    %4137:ctrl, %4138:phisel = region %4130, %4136
    %5522:i32 = phi %4138, %5521, %5521
    %4139:i32 = phi %4138, %4121, %4121
    %4140:ctrl, %4141:ctrl = brcond %4137, %4139
    %4142:ctrl, %4143:phisel = region %4140
    %4144:ctrl, %4145:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4142
    %4146:ctrl, %4147:phisel = region %4141
    %4148:ctrl, %4149:phisel = region %4146, %4144
    %5523:i32 = phi %4149, %5522, %5522
    %4167:i32 = phi %4149, %4139, %4139
    %4150:i32 = phi %4149, %8, %4145
    %4151:ctrl, %4152:ctrl = brcond %4148, %4150
    %4153:ctrl, %4154:phisel = region %4151
    %4155:ctrl, %4156:i32 = load.4 %4153, %7
    %4157:i32 = iadd %4156, %8
    %4158:ctrl = store.4 %4155, %4157, %7
    %4159:ctrl, %4160:phisel = region %4152
    %4161:ctrl, %4162:i32 = load.4 %4159, %6
    %4163:i32 = iadd %4162, %8
    %4164:ctrl = store.4 %4161, %4163, %6
    %4165:ctrl, %4166:phisel = region %4158, %4164
    %5524:i32 = phi %4166, %5523, %5523
    %4168:i32 = phi %4166, %4167, %4167
    %4169:ctrl, %4170:ctrl = brcond %4165, %4168
    %4171:ctrl, %4172:phisel = region %4169
    %4173:ctrl, %4174:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4171
    %4175:ctrl, %4176:phisel = region %4170
    %4177:ctrl, %4178:phisel = region %4175, %4173
    %5525:i32 = phi %4178, %5524, %5524
    %4196:i32 = phi %4178, %4168, %4168
    %4179:i32 = phi %4178, %20, %4174
    %4180:ctrl, %4181:ctrl = brcond %4177, %4179
    %4182:ctrl, %4183:phisel = region %4180
    %4184:ctrl, %4185:i32 = load.4 %4182, %7
    %4186:i32 = iadd %4185, %8
    %4187:ctrl = store.4 %4184, %4186, %7
    %4188:ctrl, %4189:phisel = region %4181
    %4190:ctrl, %4191:i32 = load.4 %4188, %6
    %4192:i32 = iadd %4191, %8
    %4193:ctrl = store.4 %4190, %4192, %6
    %4194:ctrl, %4195:phisel = region %4187, %4193
    %5526:i32 = phi %4195, %5525, %5525
    %4197:i32 = phi %4195, %4196, %4196
    %4198:ctrl, %4199:ctrl = brcond %4194, %4197
    %4200:ctrl, %4201:phisel = region %4198
    %4202:ctrl, %4203:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4200
    %4204:ctrl, %4205:phisel = region %4199
    %4206:ctrl, %4207:i32 = load.1 %4204, %31
    %4208:ctrl, %4209:phisel = region %4206, %4202
    %5527:i32 = phi %4209, %5526, %5526
    %4210:i32 = phi %4209, %4197, %4197
    %4211:i32 = phi %4209, %4207, %4203
    %4212:ctrl, %4213:ctrl = brcond %4208, %4211
    %4214:ctrl, %4215:phisel = region %4212
    %4216:ctrl, %4217:i32 = load.4 %4214, %7
    %4218:i32 = iadd %4217, %8
    %4219:ctrl = store.4 %4216, %4218, %7
    %4220:ctrl, %4221:phisel = region %4213
    %4222:ctrl, %4223:i32 = load.4 %4220, %6
    %4224:i32 = iadd %4223, %8
    %4225:ctrl = store.4 %4222, %4224, %6
    %4226:ctrl, %4227:phisel = region %4219, %4225
    %5528:i32 = phi %4227, %5527, %5527
    %4228:i32 = phi %4227, %4210, %4210
    %4229:ctrl, %4230:ctrl = brcond %4226, %4228
    %4231:ctrl, %4232:phisel = region %4229
    %4233:ctrl, %4234:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4231
    %4235:ctrl, %4236:phisel = region %4230
    %4237:ctrl, %4238:i32 = load.1 %4235, %30
    %4239:ctrl, %4240:phisel = region %4237, %4233
    %5529:i32 = phi %4240, %5528, %5528
    %4241:i32 = phi %4240, %4228, %4228
    %4242:i32 = phi %4240, %4238, %4234
    %4243:ctrl, %4244:ctrl = brcond %4239, %4242
    %4245:ctrl, %4246:phisel = region %4243
    %4247:ctrl, %4248:i32 = load.4 %4245, %7
    %4249:i32 = iadd %4248, %8
    %4250:ctrl = store.4 %4247, %4249, %7
    %4251:ctrl, %4252:phisel = region %4244
    %4253:ctrl, %4254:i32 = load.4 %4251, %6
    %4255:i32 = iadd %4254, %8
    %4256:ctrl = store.4 %4253, %4255, %6
    %4257:ctrl, %4258:phisel = region %4250, %4256
    %5530:i32 = phi %4258, %5529, %5529
    %4259:i32 = phi %4258, %4241, %4241
    %4260:ctrl, %4261:ctrl = brcond %4257, %4259
    %4262:ctrl, %4263:phisel = region %4260
    %4264:ctrl, %4265:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4262
    %4266:ctrl, %4267:phisel = region %4261
    %4268:ctrl, %4269:ptr = load.8 %4266, %29
    %4270:ptr = ptroff %4269, %11
    %4271:ctrl, %4272:i32 = load.1 %4268, %4270
    %4273:ctrl, %4274:phisel = region %4271, %4264
    %5531:i32 = phi %4274, %5530, %5530
    %4275:i32 = phi %4274, %4259, %4259
    %4276:i32 = phi %4274, %4272, %4265
    %4277:ctrl, %4278:ctrl = brcond %4273, %4276
    %4279:ctrl, %4280:phisel = region %4277
    %4281:ctrl, %4282:i32 = load.4 %4279, %7
    %4283:i32 = iadd %4282, %8
    %4284:ctrl = store.4 %4281, %4283, %7
    %4285:ctrl, %4286:phisel = region %4278
    %4287:ctrl, %4288:i32 = load.4 %4285, %6
    %4289:i32 = iadd %4288, %8
    %4290:ctrl = store.4 %4287, %4289, %6
    %4291:ctrl, %4292:phisel = region %4284, %4290
    %5532:i32 = phi %4292, %5531, %5531
    %4293:i32 = phi %4292, %4275, %4275
    %4294:ctrl, %4295:ctrl = brcond %4291, %4293
    %4296:ctrl, %4297:phisel = region %4294
    %4298:ctrl, %4299:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4296
    %4300:ctrl, %4301:phisel = region %4295
    %4302:ctrl, %4303:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4300
    %4304:ctrl, %4305:phisel = region %4302, %4298
    %5533:i32 = phi %4305, %5532, %5532
    %4306:i32 = phi %4305, %4293, %4293
    %4307:i32 = phi %4305, %4303, %4299
    %4308:ctrl, %4309:ctrl = brcond %4304, %4307
    %4310:ctrl, %4311:phisel = region %4308
    %4312:ctrl, %4313:i32 = load.4 %4310, %7
    %4314:i32 = iadd %4313, %8
    %4315:ctrl = store.4 %4312, %4314, %7
    %4316:ctrl, %4317:phisel = region %4309
    %4318:ctrl, %4319:i32 = load.4 %4316, %6
    %4320:i32 = iadd %4319, %8
    %4321:ctrl = store.4 %4318, %4320, %6
    %4322:ctrl, %4323:phisel = region %4315, %4321
    %5534:i32 = phi %4323, %5533, %5533
    %4324:i32 = phi %4323, %4306, %4306
    %4325:ctrl, %4326:ctrl = brcond %4322, %4324
    %4327:ctrl, %4328:phisel = region %4325
    %4329:ctrl, %4330:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4327
    %4331:ctrl, %4332:phisel = region %4326
    %4333:ctrl, %4334:ptr = load.8 %4331, %28
    %4335:ctrl, %4336:i32 = load.4 %4333, %13
    %4337:i64 = iext %4336
    %4338:i64 = sfill 32 %4337
    %4339:i64 = imul %14, %4338
    %4340:i64 = iadd %17, %4339
    %4342:ptr = ptroff %4334, %11
    %4343:ctrl, %4344:i64 = load.4 %4335, %4342
    %4345:i64 = icmp slt %4338, %4344
    %4346:ctrl, %4347:ctrl = brcond %4343, %4345
    %4348:ctrl, %4349:phisel = region %4346
    %5316:ctrl, %5317:phisel = region %4347
    %5318:ctrl = call @throw_index_out_of_range_exception %5316
    unreachable %5318
    %4341:ptr = ptroff %4334, %4340
    %4350:ctrl, %4351:i32 = load.1 %4348, %4341
    %4352:ctrl, %4353:phisel = region %4350, %4329
    %5535:i32 = phi %4353, %5534, %5534
    %4354:i32 = phi %4353, %4324, %4324
    %4355:i32 = phi %4353, %4351, %4330
    %4356:ctrl, %4357:ctrl = brcond %4352, %4355
    %4358:ctrl, %4359:phisel = region %4356
    %4360:ctrl, %4361:i32 = load.4 %4358, %7
    %4362:i32 = iadd %4361, %8
    %4363:ctrl = store.4 %4360, %4362, %7
    %4364:ctrl, %4365:phisel = region %4357
    %4366:ctrl, %4367:i32 = load.4 %4364, %6
    %4368:i32 = iadd %4367, %8
    %4369:ctrl = store.4 %4366, %4368, %6
    %4370:ctrl, %4371:phisel = region %4363, %4369
    %5536:i32 = phi %4371, %5535, %5535
    %4372:i32 = phi %4371, %4354, %4354
    %4373:ctrl, %4374:ctrl = brcond %4370, %4372
    %4375:ctrl, %4376:phisel = region %4373
    %4377:ctrl, %4378:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4375
    %4379:ctrl, %4380:phisel = region %4374
    %4381:ctrl, %4382:ptr = load.8 %4379, %12
    %4383:ctrl, %4384:i32 = load.4 %4381, %13
    %4385:i64 = iext %4384
    %4386:i64 = sfill 32 %4385
    %4387:i64 = imul %14, %4386
    %4388:i64 = iadd %17, %4387
    %4390:ptr = ptroff %4382, %11
    %4391:ctrl, %4392:i64 = load.4 %4383, %4390
    %4393:i64 = icmp slt %4386, %4392
    %4394:ctrl, %4395:ctrl = brcond %4391, %4393
    %4396:ctrl, %4397:phisel = region %4394
    %5313:ctrl, %5314:phisel = region %4395
    %5315:ctrl = call @throw_index_out_of_range_exception %5313
    unreachable %5315
    %4389:ptr = ptroff %4382, %4388
    %4398:ctrl, %4399:i32 = load.1 %4396, %4389
    %4400:ctrl, %4401:phisel = region %4398, %4377
    %5537:i32 = phi %4401, %5536, %5536
    %4402:i32 = phi %4401, %4372, %4372
    %4403:i32 = phi %4401, %4399, %4378
    %4404:ctrl, %4405:ctrl = brcond %4400, %4403
    %4406:ctrl, %4407:phisel = region %4404
    %4408:ctrl, %4409:i32 = load.4 %4406, %7
    %4410:i32 = iadd %4409, %8
    %4411:ctrl = store.4 %4408, %4410, %7
    %4412:ctrl, %4413:phisel = region %4405
    %4414:ctrl, %4415:i32 = load.4 %4412, %6
    %4416:i32 = iadd %4415, %8
    %4417:ctrl = store.4 %4414, %4416, %6
    %4418:ctrl, %4419:phisel = region %4411, %4417
    %5538:i32 = phi %4419, %5537, %5537
    %4420:i32 = phi %4419, %4402, %4402
    %4421:ctrl, %4422:ctrl = brcond %4418, %4420
    %4423:ctrl, %4424:phisel = region %4421
    %4425:ctrl, %4426:ptr = load.8 %4423, %28
    %4427:ctrl, %4428:i32 = load.4 %4425, %13
    %4429:i64 = iext %4428
    %4430:i64 = sfill 32 %4429
    %4431:i64 = imul %14, %4430
    %4432:i64 = iadd %17, %4431
    %4434:ptr = ptroff %4426, %11
    %4435:ctrl, %4436:i64 = load.4 %4427, %4434
    %4437:i64 = icmp slt %4430, %4436
    %4438:ctrl, %4439:ctrl = brcond %4435, %4437
    %4440:ctrl, %4441:phisel = region %4438
    %4444:ctrl, %4445:phisel = region %4439
    %4446:ctrl = call @throw_index_out_of_range_exception %4444
    unreachable %4446
    %4433:ptr = ptroff %4426, %4432
    %4442:ctrl, %4443:i32 = load.1 %4440, %4433
    %4447:ctrl, %4448:phisel = region %4422
    %4449:ctrl, %4450:phisel = region %4447, %4442
    %5539:i32 = phi %4450, %5538, %5538
    %4468:i32 = phi %4450, %4420, %4420
    %4451:i32 = phi %4450, %8, %4443
    %4452:ctrl, %4453:ctrl = brcond %4449, %4451
    %4454:ctrl, %4455:phisel = region %4452
    %4456:ctrl, %4457:i32 = load.4 %4454, %7
    %4458:i32 = iadd %4457, %8
    %4459:ctrl = store.4 %4456, %4458, %7
    %4460:ctrl, %4461:phisel = region %4453
    %4462:ctrl, %4463:i32 = load.4 %4460, %6
    %4464:i32 = iadd %4463, %8
    %4465:ctrl = store.4 %4462, %4464, %6
    %4466:ctrl, %4467:phisel = region %4459, %4465
    %5540:i32 = phi %4467, %5539, %5539
    %4469:i32 = phi %4467, %4468, %4468
    %4470:ctrl, %4471:ctrl = brcond %4466, %4469
    %4472:ctrl, %4473:phisel = region %4470
    %4474:ctrl, %4475:ptr = load.8 %4472, %28
    %4476:ctrl, %4477:i32 = load.4 %4474, %13
    %4478:i64 = iext %4477
    %4479:i64 = sfill 32 %4478
    %4480:i64 = imul %14, %4479
    %4481:i64 = iadd %17, %4480
    %4483:ptr = ptroff %4475, %11
    %4484:ctrl, %4485:i64 = load.4 %4476, %4483
    %4486:i64 = icmp slt %4479, %4485
    %4487:ctrl, %4488:ctrl = brcond %4484, %4486
    %4489:ctrl, %4490:phisel = region %4487
    %4493:ctrl, %4494:phisel = region %4488
    %4495:ctrl = call @throw_index_out_of_range_exception %4493
    unreachable %4495
    %4482:ptr = ptroff %4475, %4481
    %4491:ctrl, %4492:i32 = load.1 %4489, %4482
    %4496:ctrl, %4497:phisel = region %4471
    %4498:ctrl, %4499:phisel = region %4496, %4491
    %5541:i32 = phi %4499, %5540, %5540
    %4517:i32 = phi %4499, %4469, %4469
    %4500:i32 = phi %4499, %20, %4492
    %4501:ctrl, %4502:ctrl = brcond %4498, %4500
    %4503:ctrl, %4504:phisel = region %4501
    %4505:ctrl, %4506:i32 = load.4 %4503, %7
    %4507:i32 = iadd %4506, %8
    %4508:ctrl = store.4 %4505, %4507, %7
    %4509:ctrl, %4510:phisel = region %4502
    %4511:ctrl, %4512:i32 = load.4 %4509, %6
    %4513:i32 = iadd %4512, %8
    %4514:ctrl = store.4 %4511, %4513, %6
    %4515:ctrl, %4516:phisel = region %4508, %4514
    %5542:i32 = phi %4516, %5541, %5541
    %4518:i32 = phi %4516, %4517, %4517
    %4519:ctrl, %4520:ctrl = brcond %4515, %4518
    %4521:ctrl, %4522:phisel = region %4519
    %4523:ctrl, %4524:ptr = load.8 %4521, %28
    %4525:ctrl, %4526:i32 = load.4 %4523, %13
    %4527:i64 = iext %4526
    %4528:i64 = sfill 32 %4527
    %4529:i64 = imul %14, %4528
    %4530:i64 = iadd %17, %4529
    %4532:ptr = ptroff %4524, %11
    %4533:ctrl, %4534:i64 = load.4 %4525, %4532
    %4535:i64 = icmp slt %4528, %4534
    %4536:ctrl, %4537:ctrl = brcond %4533, %4535
    %4538:ctrl, %4539:phisel = region %4536
    %4542:ctrl, %4543:phisel = region %4537
    %4544:ctrl = call @throw_index_out_of_range_exception %4542
    unreachable %4544
    %4531:ptr = ptroff %4524, %4530
    %4540:ctrl, %4541:i32 = load.1 %4538, %4531
    %4545:ctrl, %4546:phisel = region %4520
    %4547:ctrl, %4548:i32 = load.1 %4545, %31
    %4549:ctrl, %4550:phisel = region %4547, %4540
    %5543:i32 = phi %4550, %5542, %5542
    %4551:i32 = phi %4550, %4518, %4518
    %4552:i32 = phi %4550, %4548, %4541
    %4553:ctrl, %4554:ctrl = brcond %4549, %4552
    %4555:ctrl, %4556:phisel = region %4553
    %4557:ctrl, %4558:i32 = load.4 %4555, %7
    %4559:i32 = iadd %4558, %8
    %4560:ctrl = store.4 %4557, %4559, %7
    %4561:ctrl, %4562:phisel = region %4554
    %4563:ctrl, %4564:i32 = load.4 %4561, %6
    %4565:i32 = iadd %4564, %8
    %4566:ctrl = store.4 %4563, %4565, %6
    %4567:ctrl, %4568:phisel = region %4560, %4566
    %5544:i32 = phi %4568, %5543, %5543
    %4569:i32 = phi %4568, %4551, %4551
    %4570:ctrl, %4571:ctrl = brcond %4567, %4569
    %4572:ctrl, %4573:phisel = region %4570
    %4574:ctrl, %4575:ptr = load.8 %4572, %28
    %4576:ctrl, %4577:i32 = load.4 %4574, %13
    %4578:i64 = iext %4577
    %4579:i64 = sfill 32 %4578
    %4580:i64 = imul %14, %4579
    %4581:i64 = iadd %17, %4580
    %4583:ptr = ptroff %4575, %11
    %4584:ctrl, %4585:i64 = load.4 %4576, %4583
    %4586:i64 = icmp slt %4579, %4585
    %4587:ctrl, %4588:ctrl = brcond %4584, %4586
    %4589:ctrl, %4590:phisel = region %4587
    %4593:ctrl, %4594:phisel = region %4588
    %4595:ctrl = call @throw_index_out_of_range_exception %4593
    unreachable %4595
    %4582:ptr = ptroff %4575, %4581
    %4591:ctrl, %4592:i32 = load.1 %4589, %4582
    %4596:ctrl, %4597:phisel = region %4571
    %4598:ctrl, %4599:i32 = load.1 %4596, %30
    %4600:ctrl, %4601:phisel = region %4598, %4591
    %5545:i32 = phi %4601, %5544, %5544
    %4602:i32 = phi %4601, %4569, %4569
    %4603:i32 = phi %4601, %4599, %4592
    %4604:ctrl, %4605:ctrl = brcond %4600, %4603
    %4606:ctrl, %4607:phisel = region %4604
    %4608:ctrl, %4609:i32 = load.4 %4606, %7
    %4610:i32 = iadd %4609, %8
    %4611:ctrl = store.4 %4608, %4610, %7
    %4612:ctrl, %4613:phisel = region %4605
    %4614:ctrl, %4615:i32 = load.4 %4612, %6
    %4616:i32 = iadd %4615, %8
    %4617:ctrl = store.4 %4614, %4616, %6
    %4618:ctrl, %4619:phisel = region %4611, %4617
    %5546:i32 = phi %4619, %5545, %5545
    %4620:i32 = phi %4619, %4602, %4602
    %4621:ctrl, %4622:ctrl = brcond %4618, %4620
    %4623:ctrl, %4624:phisel = region %4621
    %4625:ctrl, %4626:ptr = load.8 %4623, %28
    %4627:ctrl, %4628:i32 = load.4 %4625, %13
    %4629:i64 = iext %4628
    %4630:i64 = sfill 32 %4629
    %4631:i64 = imul %14, %4630
    %4632:i64 = iadd %17, %4631
    %4634:ptr = ptroff %4626, %11
    %4635:ctrl, %4636:i64 = load.4 %4627, %4634
    %4637:i64 = icmp slt %4630, %4636
    %4638:ctrl, %4639:ctrl = brcond %4635, %4637
    %4640:ctrl, %4641:phisel = region %4638
    %4644:ctrl, %4645:phisel = region %4639
    %4646:ctrl = call @throw_index_out_of_range_exception %4644
    unreachable %4646
    %4633:ptr = ptroff %4626, %4632
    %4642:ctrl, %4643:i32 = load.1 %4640, %4633
    %4647:ctrl, %4648:phisel = region %4622
    %4649:ctrl, %4650:ptr = load.8 %4647, %29
    %4651:ptr = ptroff %4650, %11
    %4652:ctrl, %4653:i32 = load.1 %4649, %4651
    %4654:ctrl, %4655:phisel = region %4652, %4642
    %5547:i32 = phi %4655, %5546, %5546
    %4656:i32 = phi %4655, %4620, %4620
    %4657:i32 = phi %4655, %4653, %4643
    %4658:ctrl, %4659:ctrl = brcond %4654, %4657
    %4660:ctrl, %4661:phisel = region %4658
    %4662:ctrl, %4663:i32 = load.4 %4660, %7
    %4664:i32 = iadd %4663, %8
    %4665:ctrl = store.4 %4662, %4664, %7
    %4666:ctrl, %4667:phisel = region %4659
    %4668:ctrl, %4669:i32 = load.4 %4666, %6
    %4670:i32 = iadd %4669, %8
    %4671:ctrl = store.4 %4668, %4670, %6
    %4672:ctrl, %4673:phisel = region %4665, %4671
    %5548:i32 = phi %4673, %5547, %5547
    %4674:i32 = phi %4673, %4656, %4656
    %4675:ctrl, %4676:ctrl = brcond %4672, %4674
    %4677:ctrl, %4678:phisel = region %4675
    %4679:ctrl, %4680:ptr = load.8 %4677, %28
    %4681:ctrl, %4682:i32 = load.4 %4679, %13
    %4683:i64 = iext %4682
    %4684:i64 = sfill 32 %4683
    %4685:i64 = imul %14, %4684
    %4686:i64 = iadd %17, %4685
    %4688:ptr = ptroff %4680, %11
    %4689:ctrl, %4690:i64 = load.4 %4681, %4688
    %4691:i64 = icmp slt %4684, %4690
    %4692:ctrl, %4693:ctrl = brcond %4689, %4691
    %4694:ctrl, %4695:phisel = region %4692
    %4698:ctrl, %4699:phisel = region %4693
    %4700:ctrl = call @throw_index_out_of_range_exception %4698
    unreachable %4700
    %4687:ptr = ptroff %4680, %4686
    %4696:ctrl, %4697:i32 = load.1 %4694, %4687
    %4701:ctrl, %4702:phisel = region %4676
    %4703:ctrl, %4704:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4701
    %4705:ctrl, %4706:phisel = region %4703, %4696
    %5549:i32 = phi %4706, %5548, %5548
    %4707:i32 = phi %4706, %4674, %4674
    %4708:i32 = phi %4706, %4704, %4697
    %4709:ctrl, %4710:ctrl = brcond %4705, %4708
    %4711:ctrl, %4712:phisel = region %4709
    %4713:ctrl, %4714:i32 = load.4 %4711, %7
    %4715:i32 = iadd %4714, %8
    %4716:ctrl = store.4 %4713, %4715, %7
    %4717:ctrl, %4718:phisel = region %4710
    %4719:ctrl, %4720:i32 = load.4 %4717, %6
    %4721:i32 = iadd %4720, %8
    %4722:ctrl = store.4 %4719, %4721, %6
    %4723:ctrl, %4724:phisel = region %4716, %4722
    %5550:i32 = phi %4724, %5549, %5549
    %4725:i32 = phi %4724, %4707, %4707
    %4726:ctrl, %4727:ctrl = brcond %4723, %4725
    %4728:ctrl, %4729:phisel = region %4726
    %4730:ctrl, %4731:ptr = load.8 %4728, %28
    %4732:ctrl, %4733:i32 = load.4 %4730, %13
    %4734:i64 = iext %4733
    %4735:i64 = sfill 32 %4734
    %4736:i64 = imul %14, %4735
    %4737:i64 = iadd %17, %4736
    %4739:ptr = ptroff %4731, %11
    %4740:ctrl, %4741:i64 = load.4 %4732, %4739
    %4742:i64 = icmp slt %4735, %4741
    %4743:ctrl, %4744:ctrl = brcond %4740, %4742
    %4745:ctrl, %4746:phisel = region %4743
    %4749:ctrl, %4750:phisel = region %4744
    %4751:ctrl = call @throw_index_out_of_range_exception %4749
    unreachable %4751
    %4738:ptr = ptroff %4731, %4737
    %4747:ctrl, %4748:i32 = load.1 %4745, %4738
    %4752:ctrl, %4753:phisel = region %4727
    %4754:ctrl, %4755:ptr = load.8 %4752, %28
    %4756:ctrl, %4757:i32 = load.4 %4754, %13
    %4758:i64 = iext %4757
    %4759:i64 = sfill 32 %4758
    %4760:i64 = imul %14, %4759
    %4761:i64 = iadd %17, %4760
    %4763:ptr = ptroff %4755, %11
    %4764:ctrl, %4765:i64 = load.4 %4756, %4763
    %4766:i64 = icmp slt %4759, %4765
    %4767:ctrl, %4768:ctrl = brcond %4764, %4766
    %4769:ctrl, %4770:phisel = region %4767
    %5310:ctrl, %5311:phisel = region %4768
    %5312:ctrl = call @throw_index_out_of_range_exception %5310
    unreachable %5312
    %4762:ptr = ptroff %4755, %4761
    %4771:ctrl, %4772:i32 = load.1 %4769, %4762
    %4773:ctrl, %4774:phisel = region %4771, %4747
    %5551:i32 = phi %4774, %5550, %5550
    %4775:i32 = phi %4774, %4725, %4725
    %4776:i32 = phi %4774, %4772, %4748
    %4777:ctrl, %4778:ctrl = brcond %4773, %4776
    %4779:ctrl, %4780:phisel = region %4777
    %4781:ctrl, %4782:i32 = load.4 %4779, %7
    %4783:i32 = iadd %4782, %8
    %4784:ctrl = store.4 %4781, %4783, %7
    %4785:ctrl, %4786:phisel = region %4778
    %4787:ctrl, %4788:i32 = load.4 %4785, %6
    %4789:i32 = iadd %4788, %8
    %4790:ctrl = store.4 %4787, %4789, %6
    %4791:ctrl, %4792:phisel = region %4784, %4790
    %5552:i32 = phi %4792, %5551, %5551
    %4793:i32 = phi %4792, %4775, %4775
    %4794:ctrl, %4795:ctrl = brcond %4791, %4793
    %4796:ctrl, %4797:phisel = region %4794
    %4798:ctrl, %4799:ptr = load.8 %4796, %28
    %4800:ctrl, %4801:i32 = load.4 %4798, %13
    %4802:i64 = iext %4801
    %4803:i64 = sfill 32 %4802
    %4804:i64 = imul %14, %4803
    %4805:i64 = iadd %17, %4804
    %4807:ptr = ptroff %4799, %11
    %4808:ctrl, %4809:i64 = load.4 %4800, %4807
    %4810:i64 = icmp slt %4803, %4809
    %4811:ctrl, %4812:ctrl = brcond %4808, %4810
    %4813:ctrl, %4814:phisel = region %4811
    %4817:ctrl, %4818:phisel = region %4812
    %4819:ctrl = call @throw_index_out_of_range_exception %4817
    unreachable %4819
    %4806:ptr = ptroff %4799, %4805
    %4815:ctrl, %4816:i32 = load.1 %4813, %4806
    %4820:ctrl, %4821:phisel = region %4795
    %4822:ctrl, %4823:ptr = load.8 %4820, %12
    %4824:ctrl, %4825:i32 = load.4 %4822, %13
    %4826:i64 = iext %4825
    %4827:i64 = sfill 32 %4826
    %4828:i64 = imul %14, %4827
    %4829:i64 = iadd %17, %4828
    %4831:ptr = ptroff %4823, %11
    %4832:ctrl, %4833:i64 = load.4 %4824, %4831
    %4834:i64 = icmp slt %4827, %4833
    %4835:ctrl, %4836:ctrl = brcond %4832, %4834
    %4837:ctrl, %4838:phisel = region %4835
    %5307:ctrl, %5308:phisel = region %4836
    %5309:ctrl = call @throw_index_out_of_range_exception %5307
    unreachable %5309
    %4830:ptr = ptroff %4823, %4829
    %4839:ctrl, %4840:i32 = load.1 %4837, %4830
    %4841:ctrl, %4842:phisel = region %4839, %4815
    %5553:i32 = phi %4842, %5552, %5552
    %4843:i32 = phi %4842, %4793, %4793
    %4844:i32 = phi %4842, %4840, %4816
    %4845:ctrl, %4846:ctrl = brcond %4841, %4844
    %4847:ctrl, %4848:phisel = region %4845
    %4849:ctrl, %4850:i32 = load.4 %4847, %7
    %4851:i32 = iadd %4850, %8
    %4852:ctrl = store.4 %4849, %4851, %7
    %4853:ctrl, %4854:phisel = region %4846
    %4855:ctrl, %4856:i32 = load.4 %4853, %6
    %4857:i32 = iadd %4856, %8
    %4858:ctrl = store.4 %4855, %4857, %6
    %4859:ctrl, %4860:phisel = region %4852, %4858
    %5554:i32 = phi %4860, %5553, %5553
    %4861:i32 = phi %4860, %4843, %4843
    %4862:ctrl, %4863:ctrl = brcond %4859, %4861
    %4864:ctrl, %4865:phisel = region %4862
    %4866:ctrl, %4867:ptr = load.8 %4864, %12
    %4868:ctrl, %4869:i32 = load.4 %4866, %13
    %4870:i64 = iext %4869
    %4871:i64 = sfill 32 %4870
    %4872:i64 = imul %14, %4871
    %4873:i64 = iadd %17, %4872
    %4875:ptr = ptroff %4867, %11
    %4876:ctrl, %4877:i64 = load.4 %4868, %4875
    %4878:i64 = icmp slt %4871, %4877
    %4879:ctrl, %4880:ctrl = brcond %4876, %4878
    %4881:ctrl, %4882:phisel = region %4879
    %4885:ctrl, %4886:phisel = region %4880
    %4887:ctrl = call @throw_index_out_of_range_exception %4885
    unreachable %4887
    %4874:ptr = ptroff %4867, %4873
    %4883:ctrl, %4884:i32 = load.1 %4881, %4874
    %4888:ctrl, %4889:phisel = region %4863
    %4890:ctrl, %4891:phisel = region %4888, %4883
    %5555:i32 = phi %4891, %5554, %5554
    %4909:i32 = phi %4891, %4861, %4861
    %4892:i32 = phi %4891, %8, %4884
    %4893:ctrl, %4894:ctrl = brcond %4890, %4892
    %4895:ctrl, %4896:phisel = region %4893
    %4897:ctrl, %4898:i32 = load.4 %4895, %7
    %4899:i32 = iadd %4898, %8
    %4900:ctrl = store.4 %4897, %4899, %7
    %4901:ctrl, %4902:phisel = region %4894
    %4903:ctrl, %4904:i32 = load.4 %4901, %6
    %4905:i32 = iadd %4904, %8
    %4906:ctrl = store.4 %4903, %4905, %6
    %4907:ctrl, %4908:phisel = region %4900, %4906
    %5556:i32 = phi %4908, %5555, %5555
    %4910:i32 = phi %4908, %4909, %4909
    %4911:ctrl, %4912:ctrl = brcond %4907, %4910
    %4913:ctrl, %4914:phisel = region %4911
    %4915:ctrl, %4916:ptr = load.8 %4913, %12
    %4917:ctrl, %4918:i32 = load.4 %4915, %13
    %4919:i64 = iext %4918
    %4920:i64 = sfill 32 %4919
    %4921:i64 = imul %14, %4920
    %4922:i64 = iadd %17, %4921
    %4924:ptr = ptroff %4916, %11
    %4925:ctrl, %4926:i64 = load.4 %4917, %4924
    %4927:i64 = icmp slt %4920, %4926
    %4928:ctrl, %4929:ctrl = brcond %4925, %4927
    %4930:ctrl, %4931:phisel = region %4928
    %4934:ctrl, %4935:phisel = region %4929
    %4936:ctrl = call @throw_index_out_of_range_exception %4934
    unreachable %4936
    %4923:ptr = ptroff %4916, %4922
    %4932:ctrl, %4933:i32 = load.1 %4930, %4923
    %4937:ctrl, %4938:phisel = region %4912
    %4939:ctrl, %4940:phisel = region %4937, %4932
    %5557:i32 = phi %4940, %5556, %5556
    %4958:i32 = phi %4940, %4910, %4910
    %4941:i32 = phi %4940, %20, %4933
    %4942:ctrl, %4943:ctrl = brcond %4939, %4941
    %4944:ctrl, %4945:phisel = region %4942
    %4946:ctrl, %4947:i32 = load.4 %4944, %7
    %4948:i32 = iadd %4947, %8
    %4949:ctrl = store.4 %4946, %4948, %7
    %4950:ctrl, %4951:phisel = region %4943
    %4952:ctrl, %4953:i32 = load.4 %4950, %6
    %4954:i32 = iadd %4953, %8
    %4955:ctrl = store.4 %4952, %4954, %6
    %4956:ctrl, %4957:phisel = region %4949, %4955
    %5558:i32 = phi %4957, %5557, %5557
    %4959:i32 = phi %4957, %4958, %4958
    %4960:ctrl, %4961:ctrl = brcond %4956, %4959
    %4962:ctrl, %4963:phisel = region %4960
    %4964:ctrl, %4965:ptr = load.8 %4962, %12
    %4966:ctrl, %4967:i32 = load.4 %4964, %13
    %4968:i64 = iext %4967
    %4969:i64 = sfill 32 %4968
    %4970:i64 = imul %14, %4969
    %4971:i64 = iadd %17, %4970
    %4973:ptr = ptroff %4965, %11
    %4974:ctrl, %4975:i64 = load.4 %4966, %4973
    %4976:i64 = icmp slt %4969, %4975
    %4977:ctrl, %4978:ctrl = brcond %4974, %4976
    %4979:ctrl, %4980:phisel = region %4977
    %4983:ctrl, %4984:phisel = region %4978
    %4985:ctrl = call @throw_index_out_of_range_exception %4983
    unreachable %4985
    %4972:ptr = ptroff %4965, %4971
    %4981:ctrl, %4982:i32 = load.1 %4979, %4972
    %4986:ctrl, %4987:phisel = region %4961
    %4988:ctrl, %4989:i32 = load.1 %4986, %31
    %4990:ctrl, %4991:phisel = region %4988, %4981
    %5559:i32 = phi %4991, %5558, %5558
    %4992:i32 = phi %4991, %4959, %4959
    %4993:i32 = phi %4991, %4989, %4982
    %4994:ctrl, %4995:ctrl = brcond %4990, %4993
    %4996:ctrl, %4997:phisel = region %4994
    %4998:ctrl, %4999:i32 = load.4 %4996, %7
    %5000:i32 = iadd %4999, %8
    %5001:ctrl = store.4 %4998, %5000, %7
    %5002:ctrl, %5003:phisel = region %4995
    %5004:ctrl, %5005:i32 = load.4 %5002, %6
    %5006:i32 = iadd %5005, %8
    %5007:ctrl = store.4 %5004, %5006, %6
    %5008:ctrl, %5009:phisel = region %5001, %5007
    %5560:i32 = phi %5009, %5559, %5559
    %5010:i32 = phi %5009, %4992, %4992
    %5011:ctrl, %5012:ctrl = brcond %5008, %5010
    %5013:ctrl, %5014:phisel = region %5011
    %5015:ctrl, %5016:ptr = load.8 %5013, %12
    %5017:ctrl, %5018:i32 = load.4 %5015, %13
    %5019:i64 = iext %5018
    %5020:i64 = sfill 32 %5019
    %5021:i64 = imul %14, %5020
    %5022:i64 = iadd %17, %5021
    %5024:ptr = ptroff %5016, %11
    %5025:ctrl, %5026:i64 = load.4 %5017, %5024
    %5027:i64 = icmp slt %5020, %5026
    %5028:ctrl, %5029:ctrl = brcond %5025, %5027
    %5030:ctrl, %5031:phisel = region %5028
    %5034:ctrl, %5035:phisel = region %5029
    %5036:ctrl = call @throw_index_out_of_range_exception %5034
    unreachable %5036
    %5023:ptr = ptroff %5016, %5022
    %5032:ctrl, %5033:i32 = load.1 %5030, %5023
    %5037:ctrl, %5038:phisel = region %5012
    %5039:ctrl, %5040:i32 = load.1 %5037, %30
    %5041:ctrl, %5042:phisel = region %5039, %5032
    %5561:i32 = phi %5042, %5560, %5560
    %5043:i32 = phi %5042, %5010, %5010
    %5044:i32 = phi %5042, %5040, %5033
    %5045:ctrl, %5046:ctrl = brcond %5041, %5044
    %5047:ctrl, %5048:phisel = region %5045
    %5049:ctrl, %5050:i32 = load.4 %5047, %7
    %5051:i32 = iadd %5050, %8
    %5052:ctrl = store.4 %5049, %5051, %7
    %5053:ctrl, %5054:phisel = region %5046
    %5055:ctrl, %5056:i32 = load.4 %5053, %6
    %5057:i32 = iadd %5056, %8
    %5058:ctrl = store.4 %5055, %5057, %6
    %5059:ctrl, %5060:phisel = region %5052, %5058
    %5562:i32 = phi %5060, %5561, %5561
    %5061:i32 = phi %5060, %5043, %5043
    %5062:ctrl, %5063:ctrl = brcond %5059, %5061
    %5064:ctrl, %5065:phisel = region %5062
    %5066:ctrl, %5067:ptr = load.8 %5064, %12
    %5068:ctrl, %5069:i32 = load.4 %5066, %13
    %5070:i64 = iext %5069
    %5071:i64 = sfill 32 %5070
    %5072:i64 = imul %14, %5071
    %5073:i64 = iadd %17, %5072
    %5075:ptr = ptroff %5067, %11
    %5076:ctrl, %5077:i64 = load.4 %5068, %5075
    %5078:i64 = icmp slt %5071, %5077
    %5079:ctrl, %5080:ctrl = brcond %5076, %5078
    %5081:ctrl, %5082:phisel = region %5079
    %5085:ctrl, %5086:phisel = region %5080
    %5087:ctrl = call @throw_index_out_of_range_exception %5085
    unreachable %5087
    %5074:ptr = ptroff %5067, %5073
    %5083:ctrl, %5084:i32 = load.1 %5081, %5074
    %5088:ctrl, %5089:phisel = region %5063
    %5090:ctrl, %5091:ptr = load.8 %5088, %29
    %5092:ptr = ptroff %5091, %11
    %5093:ctrl, %5094:i32 = load.1 %5090, %5092
    %5095:ctrl, %5096:phisel = region %5093, %5083
    %5563:i32 = phi %5096, %5562, %5562
    %5097:i32 = phi %5096, %5061, %5061
    %5098:i32 = phi %5096, %5094, %5084
    %5099:ctrl, %5100:ctrl = brcond %5095, %5098
    %5101:ctrl, %5102:phisel = region %5099
    %5103:ctrl, %5104:i32 = load.4 %5101, %7
    %5105:i32 = iadd %5104, %8
    %5106:ctrl = store.4 %5103, %5105, %7
    %5107:ctrl, %5108:phisel = region %5100
    %5109:ctrl, %5110:i32 = load.4 %5107, %6
    %5111:i32 = iadd %5110, %8
    %5112:ctrl = store.4 %5109, %5111, %6
    %5113:ctrl, %5114:phisel = region %5106, %5112
    %5564:i32 = phi %5114, %5563, %5563
    %5115:i32 = phi %5114, %5097, %5097
    %5116:ctrl, %5117:ctrl = brcond %5113, %5115
    %5118:ctrl, %5119:phisel = region %5116
    %5120:ctrl, %5121:ptr = load.8 %5118, %12
    %5122:ctrl, %5123:i32 = load.4 %5120, %13
    %5124:i64 = iext %5123
    %5125:i64 = sfill 32 %5124
    %5126:i64 = imul %14, %5125
    %5127:i64 = iadd %17, %5126
    %5129:ptr = ptroff %5121, %11
    %5130:ctrl, %5131:i64 = load.4 %5122, %5129
    %5132:i64 = icmp slt %5125, %5131
    %5133:ctrl, %5134:ctrl = brcond %5130, %5132
    %5135:ctrl, %5136:phisel = region %5133
    %5139:ctrl, %5140:phisel = region %5134
    %5141:ctrl = call @throw_index_out_of_range_exception %5139
    unreachable %5141
    %5128:ptr = ptroff %5121, %5127
    %5137:ctrl, %5138:i32 = load.1 %5135, %5128
    %5142:ctrl, %5143:phisel = region %5117
    %5144:ctrl, %5145:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5142
    %5146:ctrl, %5147:phisel = region %5144, %5137
    %5565:i32 = phi %5147, %5564, %5564
    %5148:i32 = phi %5147, %5115, %5115
    %5149:i32 = phi %5147, %5145, %5138
    %5150:ctrl, %5151:ctrl = brcond %5146, %5149
    %5152:ctrl, %5153:phisel = region %5150
    %5154:ctrl, %5155:i32 = load.4 %5152, %7
    %5156:i32 = iadd %5155, %8
    %5157:ctrl = store.4 %5154, %5156, %7
    %5158:ctrl, %5159:phisel = region %5151
    %5160:ctrl, %5161:i32 = load.4 %5158, %6
    %5162:i32 = iadd %5161, %8
    %5163:ctrl = store.4 %5160, %5162, %6
    %5164:ctrl, %5165:phisel = region %5157, %5163
    %5566:i32 = phi %5165, %5565, %5565
    %5166:i32 = phi %5165, %5148, %5148
    %5167:ctrl, %5168:ctrl = brcond %5164, %5166
    %5169:ctrl, %5170:phisel = region %5167
    %5171:ctrl, %5172:ptr = load.8 %5169, %12
    %5173:ctrl, %5174:i32 = load.4 %5171, %13
    %5175:i64 = iext %5174
    %5176:i64 = sfill 32 %5175
    %5177:i64 = imul %14, %5176
    %5178:i64 = iadd %17, %5177
    %5180:ptr = ptroff %5172, %11
    %5181:ctrl, %5182:i64 = load.4 %5173, %5180
    %5183:i64 = icmp slt %5176, %5182
    %5184:ctrl, %5185:ctrl = brcond %5181, %5183
    %5186:ctrl, %5187:phisel = region %5184
    %5190:ctrl, %5191:phisel = region %5185
    %5192:ctrl = call @throw_index_out_of_range_exception %5190
    unreachable %5192
    %5179:ptr = ptroff %5172, %5178
    %5188:ctrl, %5189:i32 = load.1 %5186, %5179
    %5193:ctrl, %5194:phisel = region %5168
    %5195:ctrl, %5196:ptr = load.8 %5193, %28
    %5197:ctrl, %5198:i32 = load.4 %5195, %13
    %5199:i64 = iext %5198
    %5200:i64 = sfill 32 %5199
    %5201:i64 = imul %14, %5200
    %5202:i64 = iadd %17, %5201
    %5204:ptr = ptroff %5196, %11
    %5205:ctrl, %5206:i64 = load.4 %5197, %5204
    %5207:i64 = icmp slt %5200, %5206
    %5208:ctrl, %5209:ctrl = brcond %5205, %5207
    %5210:ctrl, %5211:phisel = region %5208
    %5304:ctrl, %5305:phisel = region %5209
    %5306:ctrl = call @throw_index_out_of_range_exception %5304
    unreachable %5306
    %5203:ptr = ptroff %5196, %5202
    %5212:ctrl, %5213:i32 = load.1 %5210, %5203
    %5214:ctrl, %5215:phisel = region %5212, %5188
    %5567:i32 = phi %5215, %5566, %5566
    %5216:i32 = phi %5215, %5166, %5166
    %5217:i32 = phi %5215, %5213, %5189
    %5218:ctrl, %5219:ctrl = brcond %5214, %5217
    %5220:ctrl, %5221:phisel = region %5218
    %5222:ctrl, %5223:i32 = load.4 %5220, %7
    %5224:i32 = iadd %5223, %8
    %5225:ctrl = store.4 %5222, %5224, %7
    %5226:ctrl, %5227:phisel = region %5219
    %5228:ctrl, %5229:i32 = load.4 %5226, %6
    %5230:i32 = iadd %5229, %8
    %5231:ctrl = store.4 %5228, %5230, %6
    %5232:ctrl, %5233:phisel = region %5225, %5231
    %5568:i32 = phi %5233, %5567, %5567
    %5234:i32 = phi %5233, %5216, %5216
    %5235:ctrl, %5236:ctrl = brcond %5232, %5234
    %5237:ctrl, %5238:phisel = region %5235
    %5239:ctrl, %5240:ptr = load.8 %5237, %12
    %5241:ctrl, %5242:i32 = load.4 %5239, %13
    %5243:i64 = iext %5242
    %5244:i64 = sfill 32 %5243
    %5245:i64 = imul %14, %5244
    %5246:i64 = iadd %17, %5245
    %5248:ptr = ptroff %5240, %11
    %5249:ctrl, %5250:i64 = load.4 %5241, %5248
    %5251:i64 = icmp slt %5244, %5250
    %5252:ctrl, %5253:ctrl = brcond %5249, %5251
    %5254:ctrl, %5255:phisel = region %5252
    %5258:ctrl, %5259:phisel = region %5253
    %5260:ctrl = call @throw_index_out_of_range_exception %5258
    unreachable %5260
    %5247:ptr = ptroff %5240, %5246
    %5256:ctrl, %5257:i32 = load.1 %5254, %5247
    %5261:ctrl, %5262:phisel = region %5236
    %5263:ctrl, %5264:ptr = load.8 %5261, %12
    %5265:ctrl, %5266:i32 = load.4 %5263, %13
    %5267:i64 = iext %5266
    %5268:i64 = sfill 32 %5267
    %5269:i64 = imul %14, %5268
    %5270:i64 = iadd %17, %5269
    %5272:ptr = ptroff %5264, %11
    %5273:ctrl, %5274:i64 = load.4 %5265, %5272
    %5275:i64 = icmp slt %5268, %5274
    %5276:ctrl, %5277:ctrl = brcond %5273, %5275
    %5278:ctrl, %5279:phisel = region %5276
    %5301:ctrl, %5302:phisel = region %5277
    %5303:ctrl = call @throw_index_out_of_range_exception %5301
    unreachable %5303
    %5271:ptr = ptroff %5264, %5270
    %5280:ctrl, %5281:i32 = load.1 %5278, %5271
    %5282:ctrl, %5283:phisel = region %5280, %5256
    %5569:i32 = phi %5283, %5568, %5568
    %5284:i32 = phi %5283, %5281, %5257
    %5285:ctrl, %5286:ctrl = brcond %5282, %5284
    %5287:ctrl, %5288:phisel = region %5285
    %5289:ctrl, %5290:i32 = load.4 %5287, %7
    %5291:i32 = iadd %5290, %8
    %5292:ctrl = store.4 %5289, %5291, %7
    %5293:ctrl, %5294:phisel = region %5286
    %5295:ctrl, %5296:i32 = load.4 %5293, %6
    %5297:i32 = iadd %5296, %8
    %5298:ctrl = store.4 %5295, %5297, %6
    %5299:ctrl, %5300:phisel = region %5292, %5298
    %5570:i32 = phi %5300, %5569, %5569
    %5571:ctrl, %5572:ctrl = brcond %5299, %5570
    %5573:ctrl, %5574:phisel = region %5571
    %5575:ctrl, %5576:phisel = region %5572
    %5577:ctrl, %5578:phisel = region %5575, %5573
    %5596:i32 = phi %5578, %5570, %5570
    %5579:i32 = phi %5578, %8, %8
    %5580:ctrl, %5581:ctrl = brcond %5577, %5579
    %5582:ctrl, %5583:phisel = region %5580
    %5584:ctrl, %5585:i32 = load.4 %5582, %7
    %5586:i32 = iadd %5585, %8
    %5587:ctrl = store.4 %5584, %5586, %7
    %5588:ctrl, %5589:phisel = region %5581
    %5590:ctrl, %5591:i32 = load.4 %5588, %6
    %5592:i32 = iadd %5591, %8
    %5593:ctrl = store.4 %5590, %5592, %6
    %5594:ctrl, %5595:phisel = region %5587, %5593
    %5597:i32 = phi %5595, %5596, %5596
    %5598:i32 = icmp ult %20, %5597
    %5599:ctrl, %5600:ctrl = brcond %5594, %5598
    %5601:ctrl, %5602:phisel = region %5599
    %5603:ctrl, %5604:i32 = load.4 %5601, %7
    %5605:i32 = iadd %5604, %8
    %5606:ctrl = store.4 %5603, %5605, %7
    %5607:ctrl, %5608:phisel = region %5600
    %5609:ctrl, %5610:i32 = load.4 %5607, %6
    %5611:i32 = iadd %5610, %8
    %5612:ctrl = store.4 %5609, %5611, %6
    %5613:ctrl, %5614:phisel = region %5606, %5612
    %5615:i32 = phi %5614, %5597, %5597
    %5616:ctrl, %5617:ctrl = brcond %5613, %5615
    %5618:ctrl, %5619:phisel = region %5616
    %5620:ctrl, %5621:phisel = region %5617
    %5622:ctrl, %5623:i32 = load.1 %5620, %31
    %5624:ctrl, %5625:phisel = region %5622, %5618
    %5626:i32 = phi %5625, %5615, %5615
    %5627:i32 = phi %5625, %5623, %8
    %5628:ctrl, %5629:ctrl = brcond %5624, %5627
    %5630:ctrl, %5631:phisel = region %5628
    %5632:ctrl, %5633:i32 = load.4 %5630, %7
    %5634:i32 = iadd %5633, %8
    %5635:ctrl = store.4 %5632, %5634, %7
    %5636:ctrl, %5637:phisel = region %5629
    %5638:ctrl, %5639:i32 = load.4 %5636, %6
    %5640:i32 = iadd %5639, %8
    %5641:ctrl = store.4 %5638, %5640, %6
    %5642:ctrl, %5643:phisel = region %5635, %5641
    %5644:i32 = phi %5643, %5626, %5626
    %5645:ctrl, %5646:ctrl = brcond %5642, %5644
    %5647:ctrl, %5648:phisel = region %5645
    %5649:ctrl, %5650:phisel = region %5646
    %5651:ctrl, %5652:i32 = load.1 %5649, %30
    %5653:ctrl, %5654:phisel = region %5651, %5647
    %5655:i32 = phi %5654, %5644, %5644
    %5656:i32 = phi %5654, %5652, %8
    %5657:ctrl, %5658:ctrl = brcond %5653, %5656
    %5659:ctrl, %5660:phisel = region %5657
    %5661:ctrl, %5662:i32 = load.4 %5659, %7
    %5663:i32 = iadd %5662, %8
    %5664:ctrl = store.4 %5661, %5663, %7
    %5665:ctrl, %5666:phisel = region %5658
    %5667:ctrl, %5668:i32 = load.4 %5665, %6
    %5669:i32 = iadd %5668, %8
    %5670:ctrl = store.4 %5667, %5669, %6
    %5671:ctrl, %5672:phisel = region %5664, %5670
    %5673:i32 = phi %5672, %5655, %5655
    %5674:ctrl, %5675:ctrl = brcond %5671, %5673
    %5676:ctrl, %5677:phisel = region %5674
    %5678:ctrl, %5679:phisel = region %5675
    %5680:ctrl, %5681:ptr = load.8 %5678, %29
    %5682:ptr = ptroff %5681, %11
    %5683:ctrl, %5684:i32 = load.1 %5680, %5682
    %5685:ctrl, %5686:phisel = region %5683, %5676
    %5687:i32 = phi %5686, %5673, %5673
    %5688:i32 = phi %5686, %5684, %8
    %5689:ctrl, %5690:ctrl = brcond %5685, %5688
    %5691:ctrl, %5692:phisel = region %5689
    %5693:ctrl, %5694:i32 = load.4 %5691, %7
    %5695:i32 = iadd %5694, %8
    %5696:ctrl = store.4 %5693, %5695, %7
    %5697:ctrl, %5698:phisel = region %5690
    %5699:ctrl, %5700:i32 = load.4 %5697, %6
    %5701:i32 = iadd %5700, %8
    %5702:ctrl = store.4 %5699, %5701, %6
    %5703:ctrl, %5704:phisel = region %5696, %5702
    %5705:i32 = phi %5704, %5687, %5687
    %5706:ctrl, %5707:ctrl = brcond %5703, %5705
    %5708:ctrl, %5709:phisel = region %5706
    %5710:ctrl, %5711:phisel = region %5707
    %5712:ctrl, %5713:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5710
    %5714:ctrl, %5715:phisel = region %5712, %5708
    %5716:i32 = phi %5715, %5705, %5705
    %5717:i32 = phi %5715, %5713, %8
    %5718:ctrl, %5719:ctrl = brcond %5714, %5717
    %5720:ctrl, %5721:phisel = region %5718
    %5722:ctrl, %5723:i32 = load.4 %5720, %7
    %5724:i32 = iadd %5723, %8
    %5725:ctrl = store.4 %5722, %5724, %7
    %5726:ctrl, %5727:phisel = region %5719
    %5728:ctrl, %5729:i32 = load.4 %5726, %6
    %5730:i32 = iadd %5729, %8
    %5731:ctrl = store.4 %5728, %5730, %6
    %5732:ctrl, %5733:phisel = region %5725, %5731
    %5734:i32 = phi %5733, %5716, %5716
    %5735:ctrl, %5736:ctrl = brcond %5732, %5734
    %5737:ctrl, %5738:phisel = region %5735
    %5739:ctrl, %5740:phisel = region %5736
    %5741:ctrl, %5742:ptr = load.8 %5739, %28
    %5743:ctrl, %5744:i32 = load.4 %5741, %13
    %5745:i64 = iext %5744
    %5746:i64 = sfill 32 %5745
    %5747:i64 = imul %14, %5746
    %5748:i64 = iadd %17, %5747
    %5750:ptr = ptroff %5742, %11
    %5751:ctrl, %5752:i64 = load.4 %5743, %5750
    %5753:i64 = icmp slt %5746, %5752
    %5754:ctrl, %5755:ctrl = brcond %5751, %5753
    %5756:ctrl, %5757:phisel = region %5754
    %8162:ctrl, %8163:phisel = region %5755
    %8164:ctrl = call @throw_index_out_of_range_exception %8162
    unreachable %8164
    %5749:ptr = ptroff %5742, %5748
    %5758:ctrl, %5759:i32 = load.1 %5756, %5749
    %5760:ctrl, %5761:phisel = region %5758, %5737
    %5762:i32 = phi %5761, %5734, %5734
    %5763:i32 = phi %5761, %5759, %8
    %5764:ctrl, %5765:ctrl = brcond %5760, %5763
    %5766:ctrl, %5767:phisel = region %5764
    %5768:ctrl, %5769:i32 = load.4 %5766, %7
    %5770:i32 = iadd %5769, %8
    %5771:ctrl = store.4 %5768, %5770, %7
    %5772:ctrl, %5773:phisel = region %5765
    %5774:ctrl, %5775:i32 = load.4 %5772, %6
    %5776:i32 = iadd %5775, %8
    %5777:ctrl = store.4 %5774, %5776, %6
    %5778:ctrl, %5779:phisel = region %5771, %5777
    %5780:i32 = phi %5779, %5762, %5762
    %5781:ctrl, %5782:ctrl = brcond %5778, %5780
    %5783:ctrl, %5784:phisel = region %5781
    %5785:ctrl, %5786:phisel = region %5782
    %5787:ctrl, %5788:ptr = load.8 %5785, %12
    %5789:ctrl, %5790:i32 = load.4 %5787, %13
    %5791:i64 = iext %5790
    %5792:i64 = sfill 32 %5791
    %5793:i64 = imul %14, %5792
    %5794:i64 = iadd %17, %5793
    %5796:ptr = ptroff %5788, %11
    %5797:ctrl, %5798:i64 = load.4 %5789, %5796
    %5799:i64 = icmp slt %5792, %5798
    %5800:ctrl, %5801:ctrl = brcond %5797, %5799
    %5802:ctrl, %5803:phisel = region %5800
    %8159:ctrl, %8160:phisel = region %5801
    %8161:ctrl = call @throw_index_out_of_range_exception %8159
    unreachable %8161
    %5795:ptr = ptroff %5788, %5794
    %5804:ctrl, %5805:i32 = load.1 %5802, %5795
    %5806:ctrl, %5807:phisel = region %5804, %5783
    %5808:i32 = phi %5807, %5780, %5780
    %5809:i32 = phi %5807, %5805, %8
    %5810:ctrl, %5811:ctrl = brcond %5806, %5809
    %5812:ctrl, %5813:phisel = region %5810
    %5814:ctrl, %5815:i32 = load.4 %5812, %7
    %5816:i32 = iadd %5815, %8
    %5817:ctrl = store.4 %5814, %5816, %7
    %5818:ctrl, %5819:phisel = region %5811
    %5820:ctrl, %5821:i32 = load.4 %5818, %6
    %5822:i32 = iadd %5821, %8
    %5823:ctrl = store.4 %5820, %5822, %6
    %5824:ctrl, %5825:phisel = region %5817, %5823
    %5826:i32 = phi %5825, %5808, %5808
    %5827:i32 = icmp eq %5826, %20
    %5828:ctrl, %5829:ctrl = brcond %5824, %5827
    %5830:ctrl, %5831:phisel = region %5828
    %5832:ctrl, %5833:i32 = load.4 %5830, %7
    %5834:i32 = iadd %5833, %8
    %5835:ctrl = store.4 %5832, %5834, %7
    %5836:ctrl, %5837:phisel = region %5829
    %5838:ctrl, %5839:i32 = load.4 %5836, %6
    %5840:i32 = iadd %5839, %8
    %5841:ctrl = store.4 %5838, %5840, %6
    %5842:ctrl, %5843:phisel = region %5835, %5841
    %5844:i32 = phi %5843, %5826, %5826
    %5845:ctrl, %5846:ctrl = brcond %5842, %5844
    %5847:ctrl, %5848:phisel = region %5845
    %5849:ctrl, %5850:phisel = region %5846
    %5851:ctrl, %5852:phisel = region %5849, %5847
    %5870:i32 = phi %5852, %5844, %5844
    %5853:i32 = phi %5852, %20, %20
    %5854:ctrl, %5855:ctrl = brcond %5851, %5853
    %5856:ctrl, %5857:phisel = region %5854
    %5858:ctrl, %5859:i32 = load.4 %5856, %7
    %5860:i32 = iadd %5859, %8
    %5861:ctrl = store.4 %5858, %5860, %7
    %5862:ctrl, %5863:phisel = region %5855
    %5864:ctrl, %5865:i32 = load.4 %5862, %6
    %5866:i32 = iadd %5865, %8
    %5867:ctrl = store.4 %5864, %5866, %6
    %5868:ctrl, %5869:phisel = region %5861, %5867
    %5871:i32 = phi %5869, %5870, %5870
    %5872:ctrl, %5873:ctrl = brcond %5868, %5871
    %5874:ctrl, %5875:phisel = region %5872
    %5876:ctrl, %5877:phisel = region %5873
    %5878:ctrl, %5879:i32 = load.1 %5876, %31
    %5880:ctrl, %5881:phisel = region %5878, %5874
    %5882:i32 = phi %5881, %5871, %5871
    %5883:i32 = phi %5881, %5879, %20
    %5884:ctrl, %5885:ctrl = brcond %5880, %5883
    %5886:ctrl, %5887:phisel = region %5884
    %5888:ctrl, %5889:i32 = load.4 %5886, %7
    %5890:i32 = iadd %5889, %8
    %5891:ctrl = store.4 %5888, %5890, %7
    %5892:ctrl, %5893:phisel = region %5885
    %5894:ctrl, %5895:i32 = load.4 %5892, %6
    %5896:i32 = iadd %5895, %8
    %5897:ctrl = store.4 %5894, %5896, %6
    %5898:ctrl, %5899:phisel = region %5891, %5897
    %5900:i32 = phi %5899, %5882, %5882
    %5901:ctrl, %5902:ctrl = brcond %5898, %5900
    %5903:ctrl, %5904:phisel = region %5901
    %5905:ctrl, %5906:phisel = region %5902
    %5907:ctrl, %5908:i32 = load.1 %5905, %30
    %5909:ctrl, %5910:phisel = region %5907, %5903
    %5911:i32 = phi %5910, %5900, %5900
    %5912:i32 = phi %5910, %5908, %20
    %5913:ctrl, %5914:ctrl = brcond %5909, %5912
    %5915:ctrl, %5916:phisel = region %5913
    %5917:ctrl, %5918:i32 = load.4 %5915, %7
    %5919:i32 = iadd %5918, %8
    %5920:ctrl = store.4 %5917, %5919, %7
    %5921:ctrl, %5922:phisel = region %5914
    %5923:ctrl, %5924:i32 = load.4 %5921, %6
    %5925:i32 = iadd %5924, %8
    %5926:ctrl = store.4 %5923, %5925, %6
    %5927:ctrl, %5928:phisel = region %5920, %5926
    %5929:i32 = phi %5928, %5911, %5911
    %5930:ctrl, %5931:ctrl = brcond %5927, %5929
    %5932:ctrl, %5933:phisel = region %5930
    %5934:ctrl, %5935:phisel = region %5931
    %5936:ctrl, %5937:ptr = load.8 %5934, %29
    %5938:ptr = ptroff %5937, %11
    %5939:ctrl, %5940:i32 = load.1 %5936, %5938
    %5941:ctrl, %5942:phisel = region %5939, %5932
    %5943:i32 = phi %5942, %5929, %5929
    %5944:i32 = phi %5942, %5940, %20
    %5945:ctrl, %5946:ctrl = brcond %5941, %5944
    %5947:ctrl, %5948:phisel = region %5945
    %5949:ctrl, %5950:i32 = load.4 %5947, %7
    %5951:i32 = iadd %5950, %8
    %5952:ctrl = store.4 %5949, %5951, %7
    %5953:ctrl, %5954:phisel = region %5946
    %5955:ctrl, %5956:i32 = load.4 %5953, %6
    %5957:i32 = iadd %5956, %8
    %5958:ctrl = store.4 %5955, %5957, %6
    %5959:ctrl, %5960:phisel = region %5952, %5958
    %5961:i32 = phi %5960, %5943, %5943
    %5962:ctrl, %5963:ctrl = brcond %5959, %5961
    %5964:ctrl, %5965:phisel = region %5962
    %5966:ctrl, %5967:phisel = region %5963
    %5968:ctrl, %5969:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5966
    %5970:ctrl, %5971:phisel = region %5968, %5964
    %5972:i32 = phi %5971, %5961, %5961
    %5973:i32 = phi %5971, %5969, %20
    %5974:ctrl, %5975:ctrl = brcond %5970, %5973
    %5976:ctrl, %5977:phisel = region %5974
    %5978:ctrl, %5979:i32 = load.4 %5976, %7
    %5980:i32 = iadd %5979, %8
    %5981:ctrl = store.4 %5978, %5980, %7
    %5982:ctrl, %5983:phisel = region %5975
    %5984:ctrl, %5985:i32 = load.4 %5982, %6
    %5986:i32 = iadd %5985, %8
    %5987:ctrl = store.4 %5984, %5986, %6
    %5988:ctrl, %5989:phisel = region %5981, %5987
    %5990:i32 = phi %5989, %5972, %5972
    %5991:ctrl, %5992:ctrl = brcond %5988, %5990
    %5993:ctrl, %5994:phisel = region %5991
    %5995:ctrl, %5996:phisel = region %5992
    %5997:ctrl, %5998:ptr = load.8 %5995, %28
    %5999:ctrl, %6000:i32 = load.4 %5997, %13
    %6001:i64 = iext %6000
    %6002:i64 = sfill 32 %6001
    %6003:i64 = imul %14, %6002
    %6004:i64 = iadd %17, %6003
    %6006:ptr = ptroff %5998, %11
    %6007:ctrl, %6008:i64 = load.4 %5999, %6006
    %6009:i64 = icmp slt %6002, %6008
    %6010:ctrl, %6011:ctrl = brcond %6007, %6009
    %6012:ctrl, %6013:phisel = region %6010
    %8156:ctrl, %8157:phisel = region %6011
    %8158:ctrl = call @throw_index_out_of_range_exception %8156
    unreachable %8158
    %6005:ptr = ptroff %5998, %6004
    %6014:ctrl, %6015:i32 = load.1 %6012, %6005
    %6016:ctrl, %6017:phisel = region %6014, %5993
    %6018:i32 = phi %6017, %5990, %5990
    %6019:i32 = phi %6017, %6015, %20
    %6020:ctrl, %6021:ctrl = brcond %6016, %6019
    %6022:ctrl, %6023:phisel = region %6020
    %6024:ctrl, %6025:i32 = load.4 %6022, %7
    %6026:i32 = iadd %6025, %8
    %6027:ctrl = store.4 %6024, %6026, %7
    %6028:ctrl, %6029:phisel = region %6021
    %6030:ctrl, %6031:i32 = load.4 %6028, %6
    %6032:i32 = iadd %6031, %8
    %6033:ctrl = store.4 %6030, %6032, %6
    %6034:ctrl, %6035:phisel = region %6027, %6033
    %6036:i32 = phi %6035, %6018, %6018
    %6037:ctrl, %6038:ctrl = brcond %6034, %6036
    %6039:ctrl, %6040:phisel = region %6037
    %6041:ctrl, %6042:phisel = region %6038
    %6043:ctrl, %6044:ptr = load.8 %6041, %12
    %6045:ctrl, %6046:i32 = load.4 %6043, %13
    %6047:i64 = iext %6046
    %6048:i64 = sfill 32 %6047
    %6049:i64 = imul %14, %6048
    %6050:i64 = iadd %17, %6049
    %6052:ptr = ptroff %6044, %11
    %6053:ctrl, %6054:i64 = load.4 %6045, %6052
    %6055:i64 = icmp slt %6048, %6054
    %6056:ctrl, %6057:ctrl = brcond %6053, %6055
    %6058:ctrl, %6059:phisel = region %6056
    %8153:ctrl, %8154:phisel = region %6057
    %8155:ctrl = call @throw_index_out_of_range_exception %8153
    unreachable %8155
    %6051:ptr = ptroff %6044, %6050
    %6060:ctrl, %6061:i32 = load.1 %6058, %6051
    %6062:ctrl, %6063:phisel = region %6060, %6039
    %6064:i32 = phi %6063, %6036, %6036
    %6065:i32 = phi %6063, %6061, %20
    %6066:ctrl, %6067:ctrl = brcond %6062, %6065
    %6068:ctrl, %6069:phisel = region %6066
    %6070:ctrl, %6071:i32 = load.4 %6068, %7
    %6072:i32 = iadd %6071, %8
    %6073:ctrl = store.4 %6070, %6072, %7
    %6074:ctrl, %6075:phisel = region %6067
    %6076:ctrl, %6077:i32 = load.4 %6074, %6
    %6078:i32 = iadd %6077, %8
    %6079:ctrl = store.4 %6076, %6078, %6
    %6080:ctrl, %6081:phisel = region %6073, %6079
    %6082:i32 = phi %6081, %6064, %6064
    %6083:ctrl, %6084:ctrl = brcond %6080, %6082
    %6085:ctrl, %6086:phisel = region %6083
    %6087:ctrl, %6088:i32 = load.1 %6085, %31
    %6089:ctrl, %6090:phisel = region %6084
    %6091:ctrl, %6092:phisel = region %6089, %6087
    %6110:i32 = phi %6092, %6082, %6082
    %6093:i32 = phi %6092, %8, %6088
    %6094:ctrl, %6095:ctrl = brcond %6091, %6093
    %6096:ctrl, %6097:phisel = region %6094
    %6098:ctrl, %6099:i32 = load.4 %6096, %7
    %6100:i32 = iadd %6099, %8
    %6101:ctrl = store.4 %6098, %6100, %7
    %6102:ctrl, %6103:phisel = region %6095
    %6104:ctrl, %6105:i32 = load.4 %6102, %6
    %6106:i32 = iadd %6105, %8
    %6107:ctrl = store.4 %6104, %6106, %6
    %6108:ctrl, %6109:phisel = region %6101, %6107
    %6111:i32 = phi %6109, %6110, %6110
    %6112:ctrl, %6113:ctrl = brcond %6108, %6111
    %6114:ctrl, %6115:phisel = region %6112
    %6116:ctrl, %6117:i32 = load.1 %6114, %31
    %6118:ctrl, %6119:phisel = region %6113
    %6120:ctrl, %6121:phisel = region %6118, %6116
    %6139:i32 = phi %6121, %6111, %6111
    %6122:i32 = phi %6121, %20, %6117
    %6123:ctrl, %6124:ctrl = brcond %6120, %6122
    %6125:ctrl, %6126:phisel = region %6123
    %6127:ctrl, %6128:i32 = load.4 %6125, %7
    %6129:i32 = iadd %6128, %8
    %6130:ctrl = store.4 %6127, %6129, %7
    %6131:ctrl, %6132:phisel = region %6124
    %6133:ctrl, %6134:i32 = load.4 %6131, %6
    %6135:i32 = iadd %6134, %8
    %6136:ctrl = store.4 %6133, %6135, %6
    %6137:ctrl, %6138:phisel = region %6130, %6136
    %6140:i32 = phi %6138, %6139, %6139
    %6141:ctrl, %6142:ctrl = brcond %6137, %6140
    %6143:ctrl, %6144:phisel = region %6141
    %6145:ctrl, %6146:i32 = load.1 %6143, %31
    %6147:ctrl, %6148:phisel = region %6142
    %6149:ctrl, %6150:i32 = load.1 %6147, %31
    %6151:ctrl, %6152:phisel = region %6149, %6145
    %6153:i32 = phi %6152, %6140, %6140
    %6154:i32 = phi %6152, %6150, %6146
    %6155:ctrl, %6156:ctrl = brcond %6151, %6154
    %6157:ctrl, %6158:phisel = region %6155
    %6159:ctrl, %6160:i32 = load.4 %6157, %7
    %6161:i32 = iadd %6160, %8
    %6162:ctrl = store.4 %6159, %6161, %7
    %6163:ctrl, %6164:phisel = region %6156
    %6165:ctrl, %6166:i32 = load.4 %6163, %6
    %6167:i32 = iadd %6166, %8
    %6168:ctrl = store.4 %6165, %6167, %6
    %6169:ctrl, %6170:phisel = region %6162, %6168
    %6171:i32 = phi %6170, %6153, %6153
    %6172:ctrl, %6173:ctrl = brcond %6169, %6171
    %6174:ctrl, %6175:phisel = region %6172
    %6176:ctrl, %6177:i32 = load.1 %6174, %31
    %6178:ctrl, %6179:phisel = region %6173
    %6180:ctrl, %6181:i32 = load.1 %6178, %30
    %6182:ctrl, %6183:phisel = region %6180, %6176
    %6184:i32 = phi %6183, %6171, %6171
    %6185:i32 = phi %6183, %6181, %6177
    %6186:ctrl, %6187:ctrl = brcond %6182, %6185
    %6188:ctrl, %6189:phisel = region %6186
    %6190:ctrl, %6191:i32 = load.4 %6188, %7
    %6192:i32 = iadd %6191, %8
    %6193:ctrl = store.4 %6190, %6192, %7
    %6194:ctrl, %6195:phisel = region %6187
    %6196:ctrl, %6197:i32 = load.4 %6194, %6
    %6198:i32 = iadd %6197, %8
    %6199:ctrl = store.4 %6196, %6198, %6
    %6200:ctrl, %6201:phisel = region %6193, %6199
    %6202:i32 = phi %6201, %6184, %6184
    %6203:ctrl, %6204:ctrl = brcond %6200, %6202
    %6205:ctrl, %6206:phisel = region %6203
    %6207:ctrl, %6208:i32 = load.1 %6205, %31
    %6209:ctrl, %6210:phisel = region %6204
    %6211:ctrl, %6212:ptr = load.8 %6209, %29
    %6213:ptr = ptroff %6212, %11
    %6214:ctrl, %6215:i32 = load.1 %6211, %6213
    %6216:ctrl, %6217:phisel = region %6214, %6207
    %6218:i32 = phi %6217, %6202, %6202
    %6219:i32 = phi %6217, %6215, %6208
    %6220:ctrl, %6221:ctrl = brcond %6216, %6219
    %6222:ctrl, %6223:phisel = region %6220
    %6224:ctrl, %6225:i32 = load.4 %6222, %7
    %6226:i32 = iadd %6225, %8
    %6227:ctrl = store.4 %6224, %6226, %7
    %6228:ctrl, %6229:phisel = region %6221
    %6230:ctrl, %6231:i32 = load.4 %6228, %6
    %6232:i32 = iadd %6231, %8
    %6233:ctrl = store.4 %6230, %6232, %6
    %6234:ctrl, %6235:phisel = region %6227, %6233
    %6236:i32 = phi %6235, %6218, %6218
    %6237:ctrl, %6238:ctrl = brcond %6234, %6236
    %6239:ctrl, %6240:phisel = region %6237
    %6241:ctrl, %6242:i32 = load.1 %6239, %31
    %6243:ctrl, %6244:phisel = region %6238
    %6245:ctrl, %6246:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6243
    %6247:ctrl, %6248:phisel = region %6245, %6241
    %6249:i32 = phi %6248, %6236, %6236
    %6250:i32 = phi %6248, %6246, %6242
    %6251:ctrl, %6252:ctrl = brcond %6247, %6250
    %6253:ctrl, %6254:phisel = region %6251
    %6255:ctrl, %6256:i32 = load.4 %6253, %7
    %6257:i32 = iadd %6256, %8
    %6258:ctrl = store.4 %6255, %6257, %7
    %6259:ctrl, %6260:phisel = region %6252
    %6261:ctrl, %6262:i32 = load.4 %6259, %6
    %6263:i32 = iadd %6262, %8
    %6264:ctrl = store.4 %6261, %6263, %6
    %6265:ctrl, %6266:phisel = region %6258, %6264
    %6267:i32 = phi %6266, %6249, %6249
    %6268:ctrl, %6269:ctrl = brcond %6265, %6267
    %6270:ctrl, %6271:phisel = region %6268
    %6272:ctrl, %6273:i32 = load.1 %6270, %31
    %6274:ctrl, %6275:phisel = region %6269
    %6276:ctrl, %6277:ptr = load.8 %6274, %28
    %6278:ctrl, %6279:i32 = load.4 %6276, %13
    %6280:i64 = iext %6279
    %6281:i64 = sfill 32 %6280
    %6282:i64 = imul %14, %6281
    %6283:i64 = iadd %17, %6282
    %6285:ptr = ptroff %6277, %11
    %6286:ctrl, %6287:i64 = load.4 %6278, %6285
    %6288:i64 = icmp slt %6281, %6287
    %6289:ctrl, %6290:ctrl = brcond %6286, %6288
    %6291:ctrl, %6292:phisel = region %6289
    %8150:ctrl, %8151:phisel = region %6290
    %8152:ctrl = call @throw_index_out_of_range_exception %8150
    unreachable %8152
    %6284:ptr = ptroff %6277, %6283
    %6293:ctrl, %6294:i32 = load.1 %6291, %6284
    %6295:ctrl, %6296:phisel = region %6293, %6272
    %6297:i32 = phi %6296, %6267, %6267
    %6298:i32 = phi %6296, %6294, %6273
    %6299:ctrl, %6300:ctrl = brcond %6295, %6298
    %6301:ctrl, %6302:phisel = region %6299
    %6303:ctrl, %6304:i32 = load.4 %6301, %7
    %6305:i32 = iadd %6304, %8
    %6306:ctrl = store.4 %6303, %6305, %7
    %6307:ctrl, %6308:phisel = region %6300
    %6309:ctrl, %6310:i32 = load.4 %6307, %6
    %6311:i32 = iadd %6310, %8
    %6312:ctrl = store.4 %6309, %6311, %6
    %6313:ctrl, %6314:phisel = region %6306, %6312
    %6315:i32 = phi %6314, %6297, %6297
    %6316:ctrl, %6317:ctrl = brcond %6313, %6315
    %6318:ctrl, %6319:phisel = region %6316
    %6320:ctrl, %6321:i32 = load.1 %6318, %31
    %6322:ctrl, %6323:phisel = region %6317
    %6324:ctrl, %6325:ptr = load.8 %6322, %12
    %6326:ctrl, %6327:i32 = load.4 %6324, %13
    %6328:i64 = iext %6327
    %6329:i64 = sfill 32 %6328
    %6330:i64 = imul %14, %6329
    %6331:i64 = iadd %17, %6330
    %6333:ptr = ptroff %6325, %11
    %6334:ctrl, %6335:i64 = load.4 %6326, %6333
    %6336:i64 = icmp slt %6329, %6335
    %6337:ctrl, %6338:ctrl = brcond %6334, %6336
    %6339:ctrl, %6340:phisel = region %6337
    %8147:ctrl, %8148:phisel = region %6338
    %8149:ctrl = call @throw_index_out_of_range_exception %8147
    unreachable %8149
    %6332:ptr = ptroff %6325, %6331
    %6341:ctrl, %6342:i32 = load.1 %6339, %6332
    %6343:ctrl, %6344:phisel = region %6341, %6320
    %6345:i32 = phi %6344, %6315, %6315
    %6346:i32 = phi %6344, %6342, %6321
    %6347:ctrl, %6348:ctrl = brcond %6343, %6346
    %6349:ctrl, %6350:phisel = region %6347
    %6351:ctrl, %6352:i32 = load.4 %6349, %7
    %6353:i32 = iadd %6352, %8
    %6354:ctrl = store.4 %6351, %6353, %7
    %6355:ctrl, %6356:phisel = region %6348
    %6357:ctrl, %6358:i32 = load.4 %6355, %6
    %6359:i32 = iadd %6358, %8
    %6360:ctrl = store.4 %6357, %6359, %6
    %6361:ctrl, %6362:phisel = region %6354, %6360
    %6363:i32 = phi %6362, %6345, %6345
    %6364:ctrl, %6365:ctrl = brcond %6361, %6363
    %6366:ctrl, %6367:phisel = region %6364
    %6368:ctrl, %6369:i32 = load.1 %6366, %30
    %6370:ctrl, %6371:phisel = region %6365
    %6372:ctrl, %6373:phisel = region %6370, %6368
    %6391:i32 = phi %6373, %6363, %6363
    %6374:i32 = phi %6373, %8, %6369
    %6375:ctrl, %6376:ctrl = brcond %6372, %6374
    %6377:ctrl, %6378:phisel = region %6375
    %6379:ctrl, %6380:i32 = load.4 %6377, %7
    %6381:i32 = iadd %6380, %8
    %6382:ctrl = store.4 %6379, %6381, %7
    %6383:ctrl, %6384:phisel = region %6376
    %6385:ctrl, %6386:i32 = load.4 %6383, %6
    %6387:i32 = iadd %6386, %8
    %6388:ctrl = store.4 %6385, %6387, %6
    %6389:ctrl, %6390:phisel = region %6382, %6388
    %6392:i32 = phi %6390, %6391, %6391
    %6393:ctrl, %6394:ctrl = brcond %6389, %6392
    %6395:ctrl, %6396:phisel = region %6393
    %6397:ctrl, %6398:i32 = load.1 %6395, %30
    %6399:ctrl, %6400:phisel = region %6394
    %6401:ctrl, %6402:phisel = region %6399, %6397
    %6420:i32 = phi %6402, %6392, %6392
    %6403:i32 = phi %6402, %20, %6398
    %6404:ctrl, %6405:ctrl = brcond %6401, %6403
    %6406:ctrl, %6407:phisel = region %6404
    %6408:ctrl, %6409:i32 = load.4 %6406, %7
    %6410:i32 = iadd %6409, %8
    %6411:ctrl = store.4 %6408, %6410, %7
    %6412:ctrl, %6413:phisel = region %6405
    %6414:ctrl, %6415:i32 = load.4 %6412, %6
    %6416:i32 = iadd %6415, %8
    %6417:ctrl = store.4 %6414, %6416, %6
    %6418:ctrl, %6419:phisel = region %6411, %6417
    %6421:i32 = phi %6419, %6420, %6420
    %6422:ctrl, %6423:ctrl = brcond %6418, %6421
    %6424:ctrl, %6425:phisel = region %6422
    %6426:ctrl, %6427:i32 = load.1 %6424, %30
    %6428:ctrl, %6429:phisel = region %6423
    %6430:ctrl, %6431:i32 = load.1 %6428, %31
    %6432:ctrl, %6433:phisel = region %6430, %6426
    %6434:i32 = phi %6433, %6421, %6421
    %6435:i32 = phi %6433, %6431, %6427
    %6436:ctrl, %6437:ctrl = brcond %6432, %6435
    %6438:ctrl, %6439:phisel = region %6436
    %6440:ctrl, %6441:i32 = load.4 %6438, %7
    %6442:i32 = iadd %6441, %8
    %6443:ctrl = store.4 %6440, %6442, %7
    %6444:ctrl, %6445:phisel = region %6437
    %6446:ctrl, %6447:i32 = load.4 %6444, %6
    %6448:i32 = iadd %6447, %8
    %6449:ctrl = store.4 %6446, %6448, %6
    %6450:ctrl, %6451:phisel = region %6443, %6449
    %6452:i32 = phi %6451, %6434, %6434
    %6453:ctrl, %6454:ctrl = brcond %6450, %6452
    %6455:ctrl, %6456:phisel = region %6453
    %6457:ctrl, %6458:i32 = load.1 %6455, %30
    %6459:ctrl, %6460:phisel = region %6454
    %6461:ctrl, %6462:i32 = load.1 %6459, %30
    %6463:ctrl, %6464:phisel = region %6461, %6457
    %6465:i32 = phi %6464, %6452, %6452
    %6466:i32 = phi %6464, %6462, %6458
    %6467:ctrl, %6468:ctrl = brcond %6463, %6466
    %6469:ctrl, %6470:phisel = region %6467
    %6471:ctrl, %6472:i32 = load.4 %6469, %7
    %6473:i32 = iadd %6472, %8
    %6474:ctrl = store.4 %6471, %6473, %7
    %6475:ctrl, %6476:phisel = region %6468
    %6477:ctrl, %6478:i32 = load.4 %6475, %6
    %6479:i32 = iadd %6478, %8
    %6480:ctrl = store.4 %6477, %6479, %6
    %6481:ctrl, %6482:phisel = region %6474, %6480
    %6483:i32 = phi %6482, %6465, %6465
    %6484:ctrl, %6485:ctrl = brcond %6481, %6483
    %6486:ctrl, %6487:phisel = region %6484
    %6488:ctrl, %6489:i32 = load.1 %6486, %30
    %6490:ctrl, %6491:phisel = region %6485
    %6492:ctrl, %6493:ptr = load.8 %6490, %29
    %6494:ptr = ptroff %6493, %11
    %6495:ctrl, %6496:i32 = load.1 %6492, %6494
    %6497:ctrl, %6498:phisel = region %6495, %6488
    %6499:i32 = phi %6498, %6483, %6483
    %6500:i32 = phi %6498, %6496, %6489
    %6501:ctrl, %6502:ctrl = brcond %6497, %6500
    %6503:ctrl, %6504:phisel = region %6501
    %6505:ctrl, %6506:i32 = load.4 %6503, %7
    %6507:i32 = iadd %6506, %8
    %6508:ctrl = store.4 %6505, %6507, %7
    %6509:ctrl, %6510:phisel = region %6502
    %6511:ctrl, %6512:i32 = load.4 %6509, %6
    %6513:i32 = iadd %6512, %8
    %6514:ctrl = store.4 %6511, %6513, %6
    %6515:ctrl, %6516:phisel = region %6508, %6514
    %6517:i32 = phi %6516, %6499, %6499
    %6518:ctrl, %6519:ctrl = brcond %6515, %6517
    %6520:ctrl, %6521:phisel = region %6518
    %6522:ctrl, %6523:i32 = load.1 %6520, %30
    %6524:ctrl, %6525:phisel = region %6519
    %6526:ctrl, %6527:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6524
    %6528:ctrl, %6529:phisel = region %6526, %6522
    %6530:i32 = phi %6529, %6517, %6517
    %6531:i32 = phi %6529, %6527, %6523
    %6532:ctrl, %6533:ctrl = brcond %6528, %6531
    %6534:ctrl, %6535:phisel = region %6532
    %6536:ctrl, %6537:i32 = load.4 %6534, %7
    %6538:i32 = iadd %6537, %8
    %6539:ctrl = store.4 %6536, %6538, %7
    %6540:ctrl, %6541:phisel = region %6533
    %6542:ctrl, %6543:i32 = load.4 %6540, %6
    %6544:i32 = iadd %6543, %8
    %6545:ctrl = store.4 %6542, %6544, %6
    %6546:ctrl, %6547:phisel = region %6539, %6545
    %6548:i32 = phi %6547, %6530, %6530
    %6549:ctrl, %6550:ctrl = brcond %6546, %6548
    %6551:ctrl, %6552:phisel = region %6549
    %6553:ctrl, %6554:i32 = load.1 %6551, %30
    %6555:ctrl, %6556:phisel = region %6550
    %6557:ctrl, %6558:ptr = load.8 %6555, %28
    %6559:ctrl, %6560:i32 = load.4 %6557, %13
    %6561:i64 = iext %6560
    %6562:i64 = sfill 32 %6561
    %6563:i64 = imul %14, %6562
    %6564:i64 = iadd %17, %6563
    %6566:ptr = ptroff %6558, %11
    %6567:ctrl, %6568:i64 = load.4 %6559, %6566
    %6569:i64 = icmp slt %6562, %6568
    %6570:ctrl, %6571:ctrl = brcond %6567, %6569
    %6572:ctrl, %6573:phisel = region %6570
    %8144:ctrl, %8145:phisel = region %6571
    %8146:ctrl = call @throw_index_out_of_range_exception %8144
    unreachable %8146
    %6565:ptr = ptroff %6558, %6564
    %6574:ctrl, %6575:i32 = load.1 %6572, %6565
    %6576:ctrl, %6577:phisel = region %6574, %6553
    %6578:i32 = phi %6577, %6548, %6548
    %6579:i32 = phi %6577, %6575, %6554
    %6580:ctrl, %6581:ctrl = brcond %6576, %6579
    %6582:ctrl, %6583:phisel = region %6580
    %6584:ctrl, %6585:i32 = load.4 %6582, %7
    %6586:i32 = iadd %6585, %8
    %6587:ctrl = store.4 %6584, %6586, %7
    %6588:ctrl, %6589:phisel = region %6581
    %6590:ctrl, %6591:i32 = load.4 %6588, %6
    %6592:i32 = iadd %6591, %8
    %6593:ctrl = store.4 %6590, %6592, %6
    %6594:ctrl, %6595:phisel = region %6587, %6593
    %6596:i32 = phi %6595, %6578, %6578
    %6597:ctrl, %6598:ctrl = brcond %6594, %6596
    %6599:ctrl, %6600:phisel = region %6597
    %6601:ctrl, %6602:i32 = load.1 %6599, %30
    %6603:ctrl, %6604:phisel = region %6598
    %6605:ctrl, %6606:ptr = load.8 %6603, %12
    %6607:ctrl, %6608:i32 = load.4 %6605, %13
    %6609:i64 = iext %6608
    %6610:i64 = sfill 32 %6609
    %6611:i64 = imul %14, %6610
    %6612:i64 = iadd %17, %6611
    %6614:ptr = ptroff %6606, %11
    %6615:ctrl, %6616:i64 = load.4 %6607, %6614
    %6617:i64 = icmp slt %6610, %6616
    %6618:ctrl, %6619:ctrl = brcond %6615, %6617
    %6620:ctrl, %6621:phisel = region %6618
    %8141:ctrl, %8142:phisel = region %6619
    %8143:ctrl = call @throw_index_out_of_range_exception %8141
    unreachable %8143
    %6613:ptr = ptroff %6606, %6612
    %6622:ctrl, %6623:i32 = load.1 %6620, %6613
    %6624:ctrl, %6625:phisel = region %6622, %6601
    %6626:i32 = phi %6625, %6596, %6596
    %6627:i32 = phi %6625, %6623, %6602
    %6628:ctrl, %6629:ctrl = brcond %6624, %6627
    %6630:ctrl, %6631:phisel = region %6628
    %6632:ctrl, %6633:i32 = load.4 %6630, %7
    %6634:i32 = iadd %6633, %8
    %6635:ctrl = store.4 %6632, %6634, %7
    %6636:ctrl, %6637:phisel = region %6629
    %6638:ctrl, %6639:i32 = load.4 %6636, %6
    %6640:i32 = iadd %6639, %8
    %6641:ctrl = store.4 %6638, %6640, %6
    %6642:ctrl, %6643:phisel = region %6635, %6641
    %6644:i32 = phi %6643, %6626, %6626
    %6645:ctrl, %6646:ctrl = brcond %6642, %6644
    %6647:ctrl, %6648:phisel = region %6645
    %6649:ctrl, %6650:ptr = load.8 %6647, %29
    %6651:ptr = ptroff %6650, %11
    %6652:ctrl, %6653:i32 = load.1 %6649, %6651
    %6654:ctrl, %6655:phisel = region %6646
    %6656:ctrl, %6657:phisel = region %6654, %6652
    %6675:i32 = phi %6657, %6644, %6644
    %6658:i32 = phi %6657, %8, %6653
    %6659:ctrl, %6660:ctrl = brcond %6656, %6658
    %6661:ctrl, %6662:phisel = region %6659
    %6663:ctrl, %6664:i32 = load.4 %6661, %7
    %6665:i32 = iadd %6664, %8
    %6666:ctrl = store.4 %6663, %6665, %7
    %6667:ctrl, %6668:phisel = region %6660
    %6669:ctrl, %6670:i32 = load.4 %6667, %6
    %6671:i32 = iadd %6670, %8
    %6672:ctrl = store.4 %6669, %6671, %6
    %6673:ctrl, %6674:phisel = region %6666, %6672
    %6676:i32 = phi %6674, %6675, %6675
    %6677:ctrl, %6678:ctrl = brcond %6673, %6676
    %6679:ctrl, %6680:phisel = region %6677
    %6681:ctrl, %6682:ptr = load.8 %6679, %29
    %6683:ptr = ptroff %6682, %11
    %6684:ctrl, %6685:i32 = load.1 %6681, %6683
    %6686:ctrl, %6687:phisel = region %6678
    %6688:ctrl, %6689:phisel = region %6686, %6684
    %6707:i32 = phi %6689, %6676, %6676
    %6690:i32 = phi %6689, %20, %6685
    %6691:ctrl, %6692:ctrl = brcond %6688, %6690
    %6693:ctrl, %6694:phisel = region %6691
    %6695:ctrl, %6696:i32 = load.4 %6693, %7
    %6697:i32 = iadd %6696, %8
    %6698:ctrl = store.4 %6695, %6697, %7
    %6699:ctrl, %6700:phisel = region %6692
    %6701:ctrl, %6702:i32 = load.4 %6699, %6
    %6703:i32 = iadd %6702, %8
    %6704:ctrl = store.4 %6701, %6703, %6
    %6705:ctrl, %6706:phisel = region %6698, %6704
    %6708:i32 = phi %6706, %6707, %6707
    %6709:ctrl, %6710:ctrl = brcond %6705, %6708
    %6711:ctrl, %6712:phisel = region %6709
    %6713:ctrl, %6714:ptr = load.8 %6711, %29
    %6715:ptr = ptroff %6714, %11
    %6716:ctrl, %6717:i32 = load.1 %6713, %6715
    %6718:ctrl, %6719:phisel = region %6710
    %6720:ctrl, %6721:i32 = load.1 %6718, %31
    %6722:ctrl, %6723:phisel = region %6720, %6716
    %6724:i32 = phi %6723, %6708, %6708
    %6725:i32 = phi %6723, %6721, %6717
    %6726:ctrl, %6727:ctrl = brcond %6722, %6725
    %6728:ctrl, %6729:phisel = region %6726
    %6730:ctrl, %6731:i32 = load.4 %6728, %7
    %6732:i32 = iadd %6731, %8
    %6733:ctrl = store.4 %6730, %6732, %7
    %6734:ctrl, %6735:phisel = region %6727
    %6736:ctrl, %6737:i32 = load.4 %6734, %6
    %6738:i32 = iadd %6737, %8
    %6739:ctrl = store.4 %6736, %6738, %6
    %6740:ctrl, %6741:phisel = region %6733, %6739
    %6742:i32 = phi %6741, %6724, %6724
    %6743:ctrl, %6744:ctrl = brcond %6740, %6742
    %6745:ctrl, %6746:phisel = region %6743
    %6747:ctrl, %6748:ptr = load.8 %6745, %29
    %6749:ptr = ptroff %6748, %11
    %6750:ctrl, %6751:i32 = load.1 %6747, %6749
    %6752:ctrl, %6753:phisel = region %6744
    %6754:ctrl, %6755:i32 = load.1 %6752, %30
    %6756:ctrl, %6757:phisel = region %6754, %6750
    %6758:i32 = phi %6757, %6742, %6742
    %6759:i32 = phi %6757, %6755, %6751
    %6760:ctrl, %6761:ctrl = brcond %6756, %6759
    %6762:ctrl, %6763:phisel = region %6760
    %6764:ctrl, %6765:i32 = load.4 %6762, %7
    %6766:i32 = iadd %6765, %8
    %6767:ctrl = store.4 %6764, %6766, %7
    %6768:ctrl, %6769:phisel = region %6761
    %6770:ctrl, %6771:i32 = load.4 %6768, %6
    %6772:i32 = iadd %6771, %8
    %6773:ctrl = store.4 %6770, %6772, %6
    %6774:ctrl, %6775:phisel = region %6767, %6773
    %6776:i32 = phi %6775, %6758, %6758
    %6777:ctrl, %6778:ctrl = brcond %6774, %6776
    %6779:ctrl, %6780:phisel = region %6777
    %6781:ctrl, %6782:ptr = load.8 %6779, %29
    %6783:ptr = ptroff %6782, %11
    %6784:ctrl, %6785:i32 = load.1 %6781, %6783
    %6786:ctrl, %6787:phisel = region %6778
    %6788:ctrl, %6789:ptr = load.8 %6786, %29
    %6790:ptr = ptroff %6789, %11
    %6791:ctrl, %6792:i32 = load.1 %6788, %6790
    %6793:ctrl, %6794:phisel = region %6791, %6784
    %6795:i32 = phi %6794, %6776, %6776
    %6796:i32 = phi %6794, %6792, %6785
    %6797:ctrl, %6798:ctrl = brcond %6793, %6796
    %6799:ctrl, %6800:phisel = region %6797
    %6801:ctrl, %6802:i32 = load.4 %6799, %7
    %6803:i32 = iadd %6802, %8
    %6804:ctrl = store.4 %6801, %6803, %7
    %6805:ctrl, %6806:phisel = region %6798
    %6807:ctrl, %6808:i32 = load.4 %6805, %6
    %6809:i32 = iadd %6808, %8
    %6810:ctrl = store.4 %6807, %6809, %6
    %6811:ctrl, %6812:phisel = region %6804, %6810
    %6813:i32 = phi %6812, %6795, %6795
    %6814:ctrl, %6815:ctrl = brcond %6811, %6813
    %6816:ctrl, %6817:phisel = region %6814
    %6818:ctrl, %6819:ptr = load.8 %6816, %29
    %6820:ptr = ptroff %6819, %11
    %6821:ctrl, %6822:i32 = load.1 %6818, %6820
    %6823:ctrl, %6824:phisel = region %6815
    %6825:ctrl, %6826:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6823
    %6827:ctrl, %6828:phisel = region %6825, %6821
    %6829:i32 = phi %6828, %6813, %6813
    %6830:i32 = phi %6828, %6826, %6822
    %6831:ctrl, %6832:ctrl = brcond %6827, %6830
    %6833:ctrl, %6834:phisel = region %6831
    %6835:ctrl, %6836:i32 = load.4 %6833, %7
    %6837:i32 = iadd %6836, %8
    %6838:ctrl = store.4 %6835, %6837, %7
    %6839:ctrl, %6840:phisel = region %6832
    %6841:ctrl, %6842:i32 = load.4 %6839, %6
    %6843:i32 = iadd %6842, %8
    %6844:ctrl = store.4 %6841, %6843, %6
    %6845:ctrl, %6846:phisel = region %6838, %6844
    %6847:i32 = phi %6846, %6829, %6829
    %6848:ctrl, %6849:ctrl = brcond %6845, %6847
    %6850:ctrl, %6851:phisel = region %6848
    %6852:ctrl, %6853:ptr = load.8 %6850, %29
    %6854:ptr = ptroff %6853, %11
    %6855:ctrl, %6856:i32 = load.1 %6852, %6854
    %6857:ctrl, %6858:phisel = region %6849
    %6859:ctrl, %6860:ptr = load.8 %6857, %28
    %6861:ctrl, %6862:i32 = load.4 %6859, %13
    %6863:i64 = iext %6862
    %6864:i64 = sfill 32 %6863
    %6865:i64 = imul %14, %6864
    %6866:i64 = iadd %17, %6865
    %6868:ptr = ptroff %6860, %11
    %6869:ctrl, %6870:i64 = load.4 %6861, %6868
    %6871:i64 = icmp slt %6864, %6870
    %6872:ctrl, %6873:ctrl = brcond %6869, %6871
    %6874:ctrl, %6875:phisel = region %6872
    %8138:ctrl, %8139:phisel = region %6873
    %8140:ctrl = call @throw_index_out_of_range_exception %8138
    unreachable %8140
    %6867:ptr = ptroff %6860, %6866
    %6876:ctrl, %6877:i32 = load.1 %6874, %6867
    %6878:ctrl, %6879:phisel = region %6876, %6855
    %6880:i32 = phi %6879, %6847, %6847
    %6881:i32 = phi %6879, %6877, %6856
    %6882:ctrl, %6883:ctrl = brcond %6878, %6881
    %6884:ctrl, %6885:phisel = region %6882
    %6886:ctrl, %6887:i32 = load.4 %6884, %7
    %6888:i32 = iadd %6887, %8
    %6889:ctrl = store.4 %6886, %6888, %7
    %6890:ctrl, %6891:phisel = region %6883
    %6892:ctrl, %6893:i32 = load.4 %6890, %6
    %6894:i32 = iadd %6893, %8
    %6895:ctrl = store.4 %6892, %6894, %6
    %6896:ctrl, %6897:phisel = region %6889, %6895
    %6898:i32 = phi %6897, %6880, %6880
    %6899:ctrl, %6900:ctrl = brcond %6896, %6898
    %6901:ctrl, %6902:phisel = region %6899
    %6903:ctrl, %6904:ptr = load.8 %6901, %29
    %6905:ptr = ptroff %6904, %11
    %6906:ctrl, %6907:i32 = load.1 %6903, %6905
    %6908:ctrl, %6909:phisel = region %6900
    %6910:ctrl, %6911:ptr = load.8 %6908, %12
    %6912:ctrl, %6913:i32 = load.4 %6910, %13
    %6914:i64 = iext %6913
    %6915:i64 = sfill 32 %6914
    %6916:i64 = imul %14, %6915
    %6917:i64 = iadd %17, %6916
    %6919:ptr = ptroff %6911, %11
    %6920:ctrl, %6921:i64 = load.4 %6912, %6919
    %6922:i64 = icmp slt %6915, %6921
    %6923:ctrl, %6924:ctrl = brcond %6920, %6922
    %6925:ctrl, %6926:phisel = region %6923
    %8135:ctrl, %8136:phisel = region %6924
    %8137:ctrl = call @throw_index_out_of_range_exception %8135
    unreachable %8137
    %6918:ptr = ptroff %6911, %6917
    %6927:ctrl, %6928:i32 = load.1 %6925, %6918
    %6929:ctrl, %6930:phisel = region %6927, %6906
    %6931:i32 = phi %6930, %6898, %6898
    %6932:i32 = phi %6930, %6928, %6907
    %6933:ctrl, %6934:ctrl = brcond %6929, %6932
    %6935:ctrl, %6936:phisel = region %6933
    %6937:ctrl, %6938:i32 = load.4 %6935, %7
    %6939:i32 = iadd %6938, %8
    %6940:ctrl = store.4 %6937, %6939, %7
    %6941:ctrl, %6942:phisel = region %6934
    %6943:ctrl, %6944:i32 = load.4 %6941, %6
    %6945:i32 = iadd %6944, %8
    %6946:ctrl = store.4 %6943, %6945, %6
    %6947:ctrl, %6948:phisel = region %6940, %6946
    %6949:i32 = phi %6948, %6931, %6931
    %6950:ctrl, %6951:ctrl = brcond %6947, %6949
    %6952:ctrl, %6953:phisel = region %6950
    %6954:ctrl, %6955:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6952
    %6956:ctrl, %6957:phisel = region %6951
    %6958:ctrl, %6959:phisel = region %6956, %6954
    %6977:i32 = phi %6959, %6949, %6949
    %6960:i32 = phi %6959, %8, %6955
    %6961:ctrl, %6962:ctrl = brcond %6958, %6960
    %6963:ctrl, %6964:phisel = region %6961
    %6965:ctrl, %6966:i32 = load.4 %6963, %7
    %6967:i32 = iadd %6966, %8
    %6968:ctrl = store.4 %6965, %6967, %7
    %6969:ctrl, %6970:phisel = region %6962
    %6971:ctrl, %6972:i32 = load.4 %6969, %6
    %6973:i32 = iadd %6972, %8
    %6974:ctrl = store.4 %6971, %6973, %6
    %6975:ctrl, %6976:phisel = region %6968, %6974
    %6978:i32 = phi %6976, %6977, %6977
    %6979:ctrl, %6980:ctrl = brcond %6975, %6978
    %6981:ctrl, %6982:phisel = region %6979
    %6983:ctrl, %6984:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6981
    %6985:ctrl, %6986:phisel = region %6980
    %6987:ctrl, %6988:phisel = region %6985, %6983
    %7006:i32 = phi %6988, %6978, %6978
    %6989:i32 = phi %6988, %20, %6984
    %6990:ctrl, %6991:ctrl = brcond %6987, %6989
    %6992:ctrl, %6993:phisel = region %6990
    %6994:ctrl, %6995:i32 = load.4 %6992, %7
    %6996:i32 = iadd %6995, %8
    %6997:ctrl = store.4 %6994, %6996, %7
    %6998:ctrl, %6999:phisel = region %6991
    %7000:ctrl, %7001:i32 = load.4 %6998, %6
    %7002:i32 = iadd %7001, %8
    %7003:ctrl = store.4 %7000, %7002, %6
    %7004:ctrl, %7005:phisel = region %6997, %7003
    %7007:i32 = phi %7005, %7006, %7006
    %7008:ctrl, %7009:ctrl = brcond %7004, %7007
    %7010:ctrl, %7011:phisel = region %7008
    %7012:ctrl, %7013:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7010
    %7014:ctrl, %7015:phisel = region %7009
    %7016:ctrl, %7017:i32 = load.1 %7014, %31
    %7018:ctrl, %7019:phisel = region %7016, %7012
    %7020:i32 = phi %7019, %7007, %7007
    %7021:i32 = phi %7019, %7017, %7013
    %7022:ctrl, %7023:ctrl = brcond %7018, %7021
    %7024:ctrl, %7025:phisel = region %7022
    %7026:ctrl, %7027:i32 = load.4 %7024, %7
    %7028:i32 = iadd %7027, %8
    %7029:ctrl = store.4 %7026, %7028, %7
    %7030:ctrl, %7031:phisel = region %7023
    %7032:ctrl, %7033:i32 = load.4 %7030, %6
    %7034:i32 = iadd %7033, %8
    %7035:ctrl = store.4 %7032, %7034, %6
    %7036:ctrl, %7037:phisel = region %7029, %7035
    %7038:i32 = phi %7037, %7020, %7020
    %7039:ctrl, %7040:ctrl = brcond %7036, %7038
    %7041:ctrl, %7042:phisel = region %7039
    %7043:ctrl, %7044:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7041
    %7045:ctrl, %7046:phisel = region %7040
    %7047:ctrl, %7048:i32 = load.1 %7045, %30
    %7049:ctrl, %7050:phisel = region %7047, %7043
    %7051:i32 = phi %7050, %7038, %7038
    %7052:i32 = phi %7050, %7048, %7044
    %7053:ctrl, %7054:ctrl = brcond %7049, %7052
    %7055:ctrl, %7056:phisel = region %7053
    %7057:ctrl, %7058:i32 = load.4 %7055, %7
    %7059:i32 = iadd %7058, %8
    %7060:ctrl = store.4 %7057, %7059, %7
    %7061:ctrl, %7062:phisel = region %7054
    %7063:ctrl, %7064:i32 = load.4 %7061, %6
    %7065:i32 = iadd %7064, %8
    %7066:ctrl = store.4 %7063, %7065, %6
    %7067:ctrl, %7068:phisel = region %7060, %7066
    %7069:i32 = phi %7068, %7051, %7051
    %7070:ctrl, %7071:ctrl = brcond %7067, %7069
    %7072:ctrl, %7073:phisel = region %7070
    %7074:ctrl, %7075:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7072
    %7076:ctrl, %7077:phisel = region %7071
    %7078:ctrl, %7079:ptr = load.8 %7076, %29
    %7080:ptr = ptroff %7079, %11
    %7081:ctrl, %7082:i32 = load.1 %7078, %7080
    %7083:ctrl, %7084:phisel = region %7081, %7074
    %7085:i32 = phi %7084, %7069, %7069
    %7086:i32 = phi %7084, %7082, %7075
    %7087:ctrl, %7088:ctrl = brcond %7083, %7086
    %7089:ctrl, %7090:phisel = region %7087
    %7091:ctrl, %7092:i32 = load.4 %7089, %7
    %7093:i32 = iadd %7092, %8
    %7094:ctrl = store.4 %7091, %7093, %7
    %7095:ctrl, %7096:phisel = region %7088
    %7097:ctrl, %7098:i32 = load.4 %7095, %6
    %7099:i32 = iadd %7098, %8
    %7100:ctrl = store.4 %7097, %7099, %6
    %7101:ctrl, %7102:phisel = region %7094, %7100
    %7103:i32 = phi %7102, %7085, %7085
    %7104:ctrl, %7105:ctrl = brcond %7101, %7103
    %7106:ctrl, %7107:phisel = region %7104
    %7108:ctrl, %7109:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7106
    %7110:ctrl, %7111:phisel = region %7105
    %7112:ctrl, %7113:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7110
    %7114:ctrl, %7115:phisel = region %7112, %7108
    %7116:i32 = phi %7115, %7103, %7103
    %7117:i32 = phi %7115, %7113, %7109
    %7118:ctrl, %7119:ctrl = brcond %7114, %7117
    %7120:ctrl, %7121:phisel = region %7118
    %7122:ctrl, %7123:i32 = load.4 %7120, %7
    %7124:i32 = iadd %7123, %8
    %7125:ctrl = store.4 %7122, %7124, %7
    %7126:ctrl, %7127:phisel = region %7119
    %7128:ctrl, %7129:i32 = load.4 %7126, %6
    %7130:i32 = iadd %7129, %8
    %7131:ctrl = store.4 %7128, %7130, %6
    %7132:ctrl, %7133:phisel = region %7125, %7131
    %7134:i32 = phi %7133, %7116, %7116
    %7135:ctrl, %7136:ctrl = brcond %7132, %7134
    %7137:ctrl, %7138:phisel = region %7135
    %7139:ctrl, %7140:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7137
    %7141:ctrl, %7142:phisel = region %7136
    %7143:ctrl, %7144:ptr = load.8 %7141, %28
    %7145:ctrl, %7146:i32 = load.4 %7143, %13
    %7147:i64 = iext %7146
    %7148:i64 = sfill 32 %7147
    %7149:i64 = imul %14, %7148
    %7150:i64 = iadd %17, %7149
    %7152:ptr = ptroff %7144, %11
    %7153:ctrl, %7154:i64 = load.4 %7145, %7152
    %7155:i64 = icmp slt %7148, %7154
    %7156:ctrl, %7157:ctrl = brcond %7153, %7155
    %7158:ctrl, %7159:phisel = region %7156
    %8132:ctrl, %8133:phisel = region %7157
    %8134:ctrl = call @throw_index_out_of_range_exception %8132
    unreachable %8134
    %7151:ptr = ptroff %7144, %7150
    %7160:ctrl, %7161:i32 = load.1 %7158, %7151
    %7162:ctrl, %7163:phisel = region %7160, %7139
    %7164:i32 = phi %7163, %7134, %7134
    %7165:i32 = phi %7163, %7161, %7140
    %7166:ctrl, %7167:ctrl = brcond %7162, %7165
    %7168:ctrl, %7169:phisel = region %7166
    %7170:ctrl, %7171:i32 = load.4 %7168, %7
    %7172:i32 = iadd %7171, %8
    %7173:ctrl = store.4 %7170, %7172, %7
    %7174:ctrl, %7175:phisel = region %7167
    %7176:ctrl, %7177:i32 = load.4 %7174, %6
    %7178:i32 = iadd %7177, %8
    %7179:ctrl = store.4 %7176, %7178, %6
    %7180:ctrl, %7181:phisel = region %7173, %7179
    %7182:i32 = phi %7181, %7164, %7164
    %7183:ctrl, %7184:ctrl = brcond %7180, %7182
    %7185:ctrl, %7186:phisel = region %7183
    %7187:ctrl, %7188:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7185
    %7189:ctrl, %7190:phisel = region %7184
    %7191:ctrl, %7192:ptr = load.8 %7189, %12
    %7193:ctrl, %7194:i32 = load.4 %7191, %13
    %7195:i64 = iext %7194
    %7196:i64 = sfill 32 %7195
    %7197:i64 = imul %14, %7196
    %7198:i64 = iadd %17, %7197
    %7200:ptr = ptroff %7192, %11
    %7201:ctrl, %7202:i64 = load.4 %7193, %7200
    %7203:i64 = icmp slt %7196, %7202
    %7204:ctrl, %7205:ctrl = brcond %7201, %7203
    %7206:ctrl, %7207:phisel = region %7204
    %8129:ctrl, %8130:phisel = region %7205
    %8131:ctrl = call @throw_index_out_of_range_exception %8129
    unreachable %8131
    %7199:ptr = ptroff %7192, %7198
    %7208:ctrl, %7209:i32 = load.1 %7206, %7199
    %7210:ctrl, %7211:phisel = region %7208, %7187
    %7212:i32 = phi %7211, %7182, %7182
    %7213:i32 = phi %7211, %7209, %7188
    %7214:ctrl, %7215:ctrl = brcond %7210, %7213
    %7216:ctrl, %7217:phisel = region %7214
    %7218:ctrl, %7219:i32 = load.4 %7216, %7
    %7220:i32 = iadd %7219, %8
    %7221:ctrl = store.4 %7218, %7220, %7
    %7222:ctrl, %7223:phisel = region %7215
    %7224:ctrl, %7225:i32 = load.4 %7222, %6
    %7226:i32 = iadd %7225, %8
    %7227:ctrl = store.4 %7224, %7226, %6
    %7228:ctrl, %7229:phisel = region %7221, %7227
    %7230:i32 = phi %7229, %7212, %7212
    %7231:ctrl, %7232:ctrl = brcond %7228, %7230
    %7233:ctrl, %7234:phisel = region %7231
    %7235:ctrl, %7236:ptr = load.8 %7233, %28
    %7237:ctrl, %7238:i32 = load.4 %7235, %13
    %7239:i64 = iext %7238
    %7240:i64 = sfill 32 %7239
    %7241:i64 = imul %14, %7240
    %7242:i64 = iadd %17, %7241
    %7244:ptr = ptroff %7236, %11
    %7245:ctrl, %7246:i64 = load.4 %7237, %7244
    %7247:i64 = icmp slt %7240, %7246
    %7248:ctrl, %7249:ctrl = brcond %7245, %7247
    %7250:ctrl, %7251:phisel = region %7248
    %7254:ctrl, %7255:phisel = region %7249
    %7256:ctrl = call @throw_index_out_of_range_exception %7254
    unreachable %7256
    %7243:ptr = ptroff %7236, %7242
    %7252:ctrl, %7253:i32 = load.1 %7250, %7243
    %7257:ctrl, %7258:phisel = region %7232
    %7259:ctrl, %7260:phisel = region %7257, %7252
    %7278:i32 = phi %7260, %7230, %7230
    %7261:i32 = phi %7260, %8, %7253
    %7262:ctrl, %7263:ctrl = brcond %7259, %7261
    %7264:ctrl, %7265:phisel = region %7262
    %7266:ctrl, %7267:i32 = load.4 %7264, %7
    %7268:i32 = iadd %7267, %8
    %7269:ctrl = store.4 %7266, %7268, %7
    %7270:ctrl, %7271:phisel = region %7263
    %7272:ctrl, %7273:i32 = load.4 %7270, %6
    %7274:i32 = iadd %7273, %8
    %7275:ctrl = store.4 %7272, %7274, %6
    %7276:ctrl, %7277:phisel = region %7269, %7275
    %7279:i32 = phi %7277, %7278, %7278
    %7280:ctrl, %7281:ctrl = brcond %7276, %7279
    %7282:ctrl, %7283:phisel = region %7280
    %7284:ctrl, %7285:ptr = load.8 %7282, %28
    %7286:ctrl, %7287:i32 = load.4 %7284, %13
    %7288:i64 = iext %7287
    %7289:i64 = sfill 32 %7288
    %7290:i64 = imul %14, %7289
    %7291:i64 = iadd %17, %7290
    %7293:ptr = ptroff %7285, %11
    %7294:ctrl, %7295:i64 = load.4 %7286, %7293
    %7296:i64 = icmp slt %7289, %7295
    %7297:ctrl, %7298:ctrl = brcond %7294, %7296
    %7299:ctrl, %7300:phisel = region %7297
    %7303:ctrl, %7304:phisel = region %7298
    %7305:ctrl = call @throw_index_out_of_range_exception %7303
    unreachable %7305
    %7292:ptr = ptroff %7285, %7291
    %7301:ctrl, %7302:i32 = load.1 %7299, %7292
    %7306:ctrl, %7307:phisel = region %7281
    %7308:ctrl, %7309:phisel = region %7306, %7301
    %7327:i32 = phi %7309, %7279, %7279
    %7310:i32 = phi %7309, %20, %7302
    %7311:ctrl, %7312:ctrl = brcond %7308, %7310
    %7313:ctrl, %7314:phisel = region %7311
    %7315:ctrl, %7316:i32 = load.4 %7313, %7
    %7317:i32 = iadd %7316, %8
    %7318:ctrl = store.4 %7315, %7317, %7
    %7319:ctrl, %7320:phisel = region %7312
    %7321:ctrl, %7322:i32 = load.4 %7319, %6
    %7323:i32 = iadd %7322, %8
    %7324:ctrl = store.4 %7321, %7323, %6
    %7325:ctrl, %7326:phisel = region %7318, %7324
    %7328:i32 = phi %7326, %7327, %7327
    %7329:ctrl, %7330:ctrl = brcond %7325, %7328
    %7331:ctrl, %7332:phisel = region %7329
    %7333:ctrl, %7334:ptr = load.8 %7331, %28
    %7335:ctrl, %7336:i32 = load.4 %7333, %13
    %7337:i64 = iext %7336
    %7338:i64 = sfill 32 %7337
    %7339:i64 = imul %14, %7338
    %7340:i64 = iadd %17, %7339
    %7342:ptr = ptroff %7334, %11
    %7343:ctrl, %7344:i64 = load.4 %7335, %7342
    %7345:i64 = icmp slt %7338, %7344
    %7346:ctrl, %7347:ctrl = brcond %7343, %7345
    %7348:ctrl, %7349:phisel = region %7346
    %7352:ctrl, %7353:phisel = region %7347
    %7354:ctrl = call @throw_index_out_of_range_exception %7352
    unreachable %7354
    %7341:ptr = ptroff %7334, %7340
    %7350:ctrl, %7351:i32 = load.1 %7348, %7341
    %7355:ctrl, %7356:phisel = region %7330
    %7357:ctrl, %7358:i32 = load.1 %7355, %31
    %7359:ctrl, %7360:phisel = region %7357, %7350
    %7361:i32 = phi %7360, %7328, %7328
    %7362:i32 = phi %7360, %7358, %7351
    %7363:ctrl, %7364:ctrl = brcond %7359, %7362
    %7365:ctrl, %7366:phisel = region %7363
    %7367:ctrl, %7368:i32 = load.4 %7365, %7
    %7369:i32 = iadd %7368, %8
    %7370:ctrl = store.4 %7367, %7369, %7
    %7371:ctrl, %7372:phisel = region %7364
    %7373:ctrl, %7374:i32 = load.4 %7371, %6
    %7375:i32 = iadd %7374, %8
    %7376:ctrl = store.4 %7373, %7375, %6
    %7377:ctrl, %7378:phisel = region %7370, %7376
    %7379:i32 = phi %7378, %7361, %7361
    %7380:ctrl, %7381:ctrl = brcond %7377, %7379
    %7382:ctrl, %7383:phisel = region %7380
    %7384:ctrl, %7385:ptr = load.8 %7382, %28
    %7386:ctrl, %7387:i32 = load.4 %7384, %13
    %7388:i64 = iext %7387
    %7389:i64 = sfill 32 %7388
    %7390:i64 = imul %14, %7389
    %7391:i64 = iadd %17, %7390
    %7393:ptr = ptroff %7385, %11
    %7394:ctrl, %7395:i64 = load.4 %7386, %7393
    %7396:i64 = icmp slt %7389, %7395
    %7397:ctrl, %7398:ctrl = brcond %7394, %7396
    %7399:ctrl, %7400:phisel = region %7397
    %7403:ctrl, %7404:phisel = region %7398
    %7405:ctrl = call @throw_index_out_of_range_exception %7403
    unreachable %7405
    %7392:ptr = ptroff %7385, %7391
    %7401:ctrl, %7402:i32 = load.1 %7399, %7392
    %7406:ctrl, %7407:phisel = region %7381
    %7408:ctrl, %7409:i32 = load.1 %7406, %30
    %7410:ctrl, %7411:phisel = region %7408, %7401
    %7412:i32 = phi %7411, %7379, %7379
    %7413:i32 = phi %7411, %7409, %7402
    %7414:ctrl, %7415:ctrl = brcond %7410, %7413
    %7416:ctrl, %7417:phisel = region %7414
    %7418:ctrl, %7419:i32 = load.4 %7416, %7
    %7420:i32 = iadd %7419, %8
    %7421:ctrl = store.4 %7418, %7420, %7
    %7422:ctrl, %7423:phisel = region %7415
    %7424:ctrl, %7425:i32 = load.4 %7422, %6
    %7426:i32 = iadd %7425, %8
    %7427:ctrl = store.4 %7424, %7426, %6
    %7428:ctrl, %7429:phisel = region %7421, %7427
    %7430:i32 = phi %7429, %7412, %7412
    %7431:ctrl, %7432:ctrl = brcond %7428, %7430
    %7433:ctrl, %7434:phisel = region %7431
    %7435:ctrl, %7436:ptr = load.8 %7433, %28
    %7437:ctrl, %7438:i32 = load.4 %7435, %13
    %7439:i64 = iext %7438
    %7440:i64 = sfill 32 %7439
    %7441:i64 = imul %14, %7440
    %7442:i64 = iadd %17, %7441
    %7444:ptr = ptroff %7436, %11
    %7445:ctrl, %7446:i64 = load.4 %7437, %7444
    %7447:i64 = icmp slt %7440, %7446
    %7448:ctrl, %7449:ctrl = brcond %7445, %7447
    %7450:ctrl, %7451:phisel = region %7448
    %7454:ctrl, %7455:phisel = region %7449
    %7456:ctrl = call @throw_index_out_of_range_exception %7454
    unreachable %7456
    %7443:ptr = ptroff %7436, %7442
    %7452:ctrl, %7453:i32 = load.1 %7450, %7443
    %7457:ctrl, %7458:phisel = region %7432
    %7459:ctrl, %7460:ptr = load.8 %7457, %29
    %7461:ptr = ptroff %7460, %11
    %7462:ctrl, %7463:i32 = load.1 %7459, %7461
    %7464:ctrl, %7465:phisel = region %7462, %7452
    %7466:i32 = phi %7465, %7430, %7430
    %7467:i32 = phi %7465, %7463, %7453
    %7468:ctrl, %7469:ctrl = brcond %7464, %7467
    %7470:ctrl, %7471:phisel = region %7468
    %7472:ctrl, %7473:i32 = load.4 %7470, %7
    %7474:i32 = iadd %7473, %8
    %7475:ctrl = store.4 %7472, %7474, %7
    %7476:ctrl, %7477:phisel = region %7469
    %7478:ctrl, %7479:i32 = load.4 %7476, %6
    %7480:i32 = iadd %7479, %8
    %7481:ctrl = store.4 %7478, %7480, %6
    %7482:ctrl, %7483:phisel = region %7475, %7481
    %7484:i32 = phi %7483, %7466, %7466
    %7485:ctrl, %7486:ctrl = brcond %7482, %7484
    %7487:ctrl, %7488:phisel = region %7485
    %7489:ctrl, %7490:ptr = load.8 %7487, %28
    %7491:ctrl, %7492:i32 = load.4 %7489, %13
    %7493:i64 = iext %7492
    %7494:i64 = sfill 32 %7493
    %7495:i64 = imul %14, %7494
    %7496:i64 = iadd %17, %7495
    %7498:ptr = ptroff %7490, %11
    %7499:ctrl, %7500:i64 = load.4 %7491, %7498
    %7501:i64 = icmp slt %7494, %7500
    %7502:ctrl, %7503:ctrl = brcond %7499, %7501
    %7504:ctrl, %7505:phisel = region %7502
    %7508:ctrl, %7509:phisel = region %7503
    %7510:ctrl = call @throw_index_out_of_range_exception %7508
    unreachable %7510
    %7497:ptr = ptroff %7490, %7496
    %7506:ctrl, %7507:i32 = load.1 %7504, %7497
    %7511:ctrl, %7512:phisel = region %7486
    %7513:ctrl, %7514:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7511
    %7515:ctrl, %7516:phisel = region %7513, %7506
    %7517:i32 = phi %7516, %7484, %7484
    %7518:i32 = phi %7516, %7514, %7507
    %7519:ctrl, %7520:ctrl = brcond %7515, %7518
    %7521:ctrl, %7522:phisel = region %7519
    %7523:ctrl, %7524:i32 = load.4 %7521, %7
    %7525:i32 = iadd %7524, %8
    %7526:ctrl = store.4 %7523, %7525, %7
    %7527:ctrl, %7528:phisel = region %7520
    %7529:ctrl, %7530:i32 = load.4 %7527, %6
    %7531:i32 = iadd %7530, %8
    %7532:ctrl = store.4 %7529, %7531, %6
    %7533:ctrl, %7534:phisel = region %7526, %7532
    %7535:i32 = phi %7534, %7517, %7517
    %7536:ctrl, %7537:ctrl = brcond %7533, %7535
    %7538:ctrl, %7539:phisel = region %7536
    %7540:ctrl, %7541:ptr = load.8 %7538, %28
    %7542:ctrl, %7543:i32 = load.4 %7540, %13
    %7544:i64 = iext %7543
    %7545:i64 = sfill 32 %7544
    %7546:i64 = imul %14, %7545
    %7547:i64 = iadd %17, %7546
    %7549:ptr = ptroff %7541, %11
    %7550:ctrl, %7551:i64 = load.4 %7542, %7549
    %7552:i64 = icmp slt %7545, %7551
    %7553:ctrl, %7554:ctrl = brcond %7550, %7552
    %7555:ctrl, %7556:phisel = region %7553
    %7559:ctrl, %7560:phisel = region %7554
    %7561:ctrl = call @throw_index_out_of_range_exception %7559
    unreachable %7561
    %7548:ptr = ptroff %7541, %7547
    %7557:ctrl, %7558:i32 = load.1 %7555, %7548
    %7562:ctrl, %7563:phisel = region %7537
    %7564:ctrl, %7565:ptr = load.8 %7562, %28
    %7566:ctrl, %7567:i32 = load.4 %7564, %13
    %7568:i64 = iext %7567
    %7569:i64 = sfill 32 %7568
    %7570:i64 = imul %14, %7569
    %7571:i64 = iadd %17, %7570
    %7573:ptr = ptroff %7565, %11
    %7574:ctrl, %7575:i64 = load.4 %7566, %7573
    %7576:i64 = icmp slt %7569, %7575
    %7577:ctrl, %7578:ctrl = brcond %7574, %7576
    %7579:ctrl, %7580:phisel = region %7577
    %8126:ctrl, %8127:phisel = region %7578
    %8128:ctrl = call @throw_index_out_of_range_exception %8126
    unreachable %8128
    %7572:ptr = ptroff %7565, %7571
    %7581:ctrl, %7582:i32 = load.1 %7579, %7572
    %7583:ctrl, %7584:phisel = region %7581, %7557
    %7585:i32 = phi %7584, %7535, %7535
    %7586:i32 = phi %7584, %7582, %7558
    %7587:ctrl, %7588:ctrl = brcond %7583, %7586
    %7589:ctrl, %7590:phisel = region %7587
    %7591:ctrl, %7592:i32 = load.4 %7589, %7
    %7593:i32 = iadd %7592, %8
    %7594:ctrl = store.4 %7591, %7593, %7
    %7595:ctrl, %7596:phisel = region %7588
    %7597:ctrl, %7598:i32 = load.4 %7595, %6
    %7599:i32 = iadd %7598, %8
    %7600:ctrl = store.4 %7597, %7599, %6
    %7601:ctrl, %7602:phisel = region %7594, %7600
    %7603:i32 = phi %7602, %7585, %7585
    %7604:ctrl, %7605:ctrl = brcond %7601, %7603
    %7606:ctrl, %7607:phisel = region %7604
    %7608:ctrl, %7609:ptr = load.8 %7606, %28
    %7610:ctrl, %7611:i32 = load.4 %7608, %13
    %7612:i64 = iext %7611
    %7613:i64 = sfill 32 %7612
    %7614:i64 = imul %14, %7613
    %7615:i64 = iadd %17, %7614
    %7617:ptr = ptroff %7609, %11
    %7618:ctrl, %7619:i64 = load.4 %7610, %7617
    %7620:i64 = icmp slt %7613, %7619
    %7621:ctrl, %7622:ctrl = brcond %7618, %7620
    %7623:ctrl, %7624:phisel = region %7621
    %7627:ctrl, %7628:phisel = region %7622
    %7629:ctrl = call @throw_index_out_of_range_exception %7627
    unreachable %7629
    %7616:ptr = ptroff %7609, %7615
    %7625:ctrl, %7626:i32 = load.1 %7623, %7616
    %7630:ctrl, %7631:phisel = region %7605
    %7632:ctrl, %7633:ptr = load.8 %7630, %12
    %7634:ctrl, %7635:i32 = load.4 %7632, %13
    %7636:i64 = iext %7635
    %7637:i64 = sfill 32 %7636
    %7638:i64 = imul %14, %7637
    %7639:i64 = iadd %17, %7638
    %7641:ptr = ptroff %7633, %11
    %7642:ctrl, %7643:i64 = load.4 %7634, %7641
    %7644:i64 = icmp slt %7637, %7643
    %7645:ctrl, %7646:ctrl = brcond %7642, %7644
    %7647:ctrl, %7648:phisel = region %7645
    %8123:ctrl, %8124:phisel = region %7646
    %8125:ctrl = call @throw_index_out_of_range_exception %8123
    unreachable %8125
    %7640:ptr = ptroff %7633, %7639
    %7649:ctrl, %7650:i32 = load.1 %7647, %7640
    %7651:ctrl, %7652:phisel = region %7649, %7625
    %7653:i32 = phi %7652, %7603, %7603
    %7654:i32 = phi %7652, %7650, %7626
    %7655:ctrl, %7656:ctrl = brcond %7651, %7654
    %7657:ctrl, %7658:phisel = region %7655
    %7659:ctrl, %7660:i32 = load.4 %7657, %7
    %7661:i32 = iadd %7660, %8
    %7662:ctrl = store.4 %7659, %7661, %7
    %7663:ctrl, %7664:phisel = region %7656
    %7665:ctrl, %7666:i32 = load.4 %7663, %6
    %7667:i32 = iadd %7666, %8
    %7668:ctrl = store.4 %7665, %7667, %6
    %7669:ctrl, %7670:phisel = region %7662, %7668
    %7671:i32 = phi %7670, %7653, %7653
    %7672:ctrl, %7673:ctrl = brcond %7669, %7671
    %7674:ctrl, %7675:phisel = region %7672
    %7676:ctrl, %7677:ptr = load.8 %7674, %12
    %7678:ctrl, %7679:i32 = load.4 %7676, %13
    %7680:i64 = iext %7679
    %7681:i64 = sfill 32 %7680
    %7682:i64 = imul %14, %7681
    %7683:i64 = iadd %17, %7682
    %7685:ptr = ptroff %7677, %11
    %7686:ctrl, %7687:i64 = load.4 %7678, %7685
    %7688:i64 = icmp slt %7681, %7687
    %7689:ctrl, %7690:ctrl = brcond %7686, %7688
    %7691:ctrl, %7692:phisel = region %7689
    %7695:ctrl, %7696:phisel = region %7690
    %7697:ctrl = call @throw_index_out_of_range_exception %7695
    unreachable %7697
    %7684:ptr = ptroff %7677, %7683
    %7693:ctrl, %7694:i32 = load.1 %7691, %7684
    %7698:ctrl, %7699:phisel = region %7673
    %7700:ctrl, %7701:phisel = region %7698, %7693
    %7719:i32 = phi %7701, %7671, %7671
    %7702:i32 = phi %7701, %8, %7694
    %7703:ctrl, %7704:ctrl = brcond %7700, %7702
    %7705:ctrl, %7706:phisel = region %7703
    %7707:ctrl, %7708:i32 = load.4 %7705, %7
    %7709:i32 = iadd %7708, %8
    %7710:ctrl = store.4 %7707, %7709, %7
    %7711:ctrl, %7712:phisel = region %7704
    %7713:ctrl, %7714:i32 = load.4 %7711, %6
    %7715:i32 = iadd %7714, %8
    %7716:ctrl = store.4 %7713, %7715, %6
    %7717:ctrl, %7718:phisel = region %7710, %7716
    %7720:i32 = phi %7718, %7719, %7719
    %7721:ctrl, %7722:ctrl = brcond %7717, %7720
    %7723:ctrl, %7724:phisel = region %7721
    %7725:ctrl, %7726:ptr = load.8 %7723, %12
    %7727:ctrl, %7728:i32 = load.4 %7725, %13
    %7729:i64 = iext %7728
    %7730:i64 = sfill 32 %7729
    %7731:i64 = imul %14, %7730
    %7732:i64 = iadd %17, %7731
    %7734:ptr = ptroff %7726, %11
    %7735:ctrl, %7736:i64 = load.4 %7727, %7734
    %7737:i64 = icmp slt %7730, %7736
    %7738:ctrl, %7739:ctrl = brcond %7735, %7737
    %7740:ctrl, %7741:phisel = region %7738
    %7744:ctrl, %7745:phisel = region %7739
    %7746:ctrl = call @throw_index_out_of_range_exception %7744
    unreachable %7746
    %7733:ptr = ptroff %7726, %7732
    %7742:ctrl, %7743:i32 = load.1 %7740, %7733
    %7747:ctrl, %7748:phisel = region %7722
    %7749:ctrl, %7750:phisel = region %7747, %7742
    %7768:i32 = phi %7750, %7720, %7720
    %7751:i32 = phi %7750, %20, %7743
    %7752:ctrl, %7753:ctrl = brcond %7749, %7751
    %7754:ctrl, %7755:phisel = region %7752
    %7756:ctrl, %7757:i32 = load.4 %7754, %7
    %7758:i32 = iadd %7757, %8
    %7759:ctrl = store.4 %7756, %7758, %7
    %7760:ctrl, %7761:phisel = region %7753
    %7762:ctrl, %7763:i32 = load.4 %7760, %6
    %7764:i32 = iadd %7763, %8
    %7765:ctrl = store.4 %7762, %7764, %6
    %7766:ctrl, %7767:phisel = region %7759, %7765
    %7769:i32 = phi %7767, %7768, %7768
    %7770:ctrl, %7771:ctrl = brcond %7766, %7769
    %7772:ctrl, %7773:phisel = region %7770
    %7774:ctrl, %7775:ptr = load.8 %7772, %12
    %7776:ctrl, %7777:i32 = load.4 %7774, %13
    %7778:i64 = iext %7777
    %7779:i64 = sfill 32 %7778
    %7780:i64 = imul %14, %7779
    %7781:i64 = iadd %17, %7780
    %7783:ptr = ptroff %7775, %11
    %7784:ctrl, %7785:i64 = load.4 %7776, %7783
    %7786:i64 = icmp slt %7779, %7785
    %7787:ctrl, %7788:ctrl = brcond %7784, %7786
    %7789:ctrl, %7790:phisel = region %7787
    %7793:ctrl, %7794:phisel = region %7788
    %7795:ctrl = call @throw_index_out_of_range_exception %7793
    unreachable %7795
    %7782:ptr = ptroff %7775, %7781
    %7791:ctrl, %7792:i32 = load.1 %7789, %7782
    %7796:ctrl, %7797:phisel = region %7771
    %7798:ctrl, %7799:i32 = load.1 %7796, %31
    %7800:ctrl, %7801:phisel = region %7798, %7791
    %7802:i32 = phi %7801, %7769, %7769
    %7803:i32 = phi %7801, %7799, %7792
    %7804:ctrl, %7805:ctrl = brcond %7800, %7803
    %7806:ctrl, %7807:phisel = region %7804
    %7808:ctrl, %7809:i32 = load.4 %7806, %7
    %7810:i32 = iadd %7809, %8
    %7811:ctrl = store.4 %7808, %7810, %7
    %7812:ctrl, %7813:phisel = region %7805
    %7814:ctrl, %7815:i32 = load.4 %7812, %6
    %7816:i32 = iadd %7815, %8
    %7817:ctrl = store.4 %7814, %7816, %6
    %7818:ctrl, %7819:phisel = region %7811, %7817
    %7820:i32 = phi %7819, %7802, %7802
    %7821:ctrl, %7822:ctrl = brcond %7818, %7820
    %7823:ctrl, %7824:phisel = region %7821
    %7825:ctrl, %7826:ptr = load.8 %7823, %12
    %7827:ctrl, %7828:i32 = load.4 %7825, %13
    %7829:i64 = iext %7828
    %7830:i64 = sfill 32 %7829
    %7831:i64 = imul %14, %7830
    %7832:i64 = iadd %17, %7831
    %7834:ptr = ptroff %7826, %11
    %7835:ctrl, %7836:i64 = load.4 %7827, %7834
    %7837:i64 = icmp slt %7830, %7836
    %7838:ctrl, %7839:ctrl = brcond %7835, %7837
    %7840:ctrl, %7841:phisel = region %7838
    %7844:ctrl, %7845:phisel = region %7839
    %7846:ctrl = call @throw_index_out_of_range_exception %7844
    unreachable %7846
    %7833:ptr = ptroff %7826, %7832
    %7842:ctrl, %7843:i32 = load.1 %7840, %7833
    %7847:ctrl, %7848:phisel = region %7822
    %7849:ctrl, %7850:i32 = load.1 %7847, %30
    %7851:ctrl, %7852:phisel = region %7849, %7842
    %7853:i32 = phi %7852, %7820, %7820
    %7854:i32 = phi %7852, %7850, %7843
    %7855:ctrl, %7856:ctrl = brcond %7851, %7854
    %7857:ctrl, %7858:phisel = region %7855
    %7859:ctrl, %7860:i32 = load.4 %7857, %7
    %7861:i32 = iadd %7860, %8
    %7862:ctrl = store.4 %7859, %7861, %7
    %7863:ctrl, %7864:phisel = region %7856
    %7865:ctrl, %7866:i32 = load.4 %7863, %6
    %7867:i32 = iadd %7866, %8
    %7868:ctrl = store.4 %7865, %7867, %6
    %7869:ctrl, %7870:phisel = region %7862, %7868
    %7871:i32 = phi %7870, %7853, %7853
    %7872:ctrl, %7873:ctrl = brcond %7869, %7871
    %7874:ctrl, %7875:phisel = region %7872
    %7876:ctrl, %7877:ptr = load.8 %7874, %12
    %7878:ctrl, %7879:i32 = load.4 %7876, %13
    %7880:i64 = iext %7879
    %7881:i64 = sfill 32 %7880
    %7882:i64 = imul %14, %7881
    %7883:i64 = iadd %17, %7882
    %7885:ptr = ptroff %7877, %11
    %7886:ctrl, %7887:i64 = load.4 %7878, %7885
    %7888:i64 = icmp slt %7881, %7887
    %7889:ctrl, %7890:ctrl = brcond %7886, %7888
    %7891:ctrl, %7892:phisel = region %7889
    %7895:ctrl, %7896:phisel = region %7890
    %7897:ctrl = call @throw_index_out_of_range_exception %7895
    unreachable %7897
    %7884:ptr = ptroff %7877, %7883
    %7893:ctrl, %7894:i32 = load.1 %7891, %7884
    %7898:ctrl, %7899:phisel = region %7873
    %7900:ctrl, %7901:ptr = load.8 %7898, %29
    %7902:ptr = ptroff %7901, %11
    %7903:ctrl, %7904:i32 = load.1 %7900, %7902
    %7905:ctrl, %7906:phisel = region %7903, %7893
    %7907:i32 = phi %7906, %7871, %7871
    %7908:i32 = phi %7906, %7904, %7894
    %7909:ctrl, %7910:ctrl = brcond %7905, %7908
    %7911:ctrl, %7912:phisel = region %7909
    %7913:ctrl, %7914:i32 = load.4 %7911, %7
    %7915:i32 = iadd %7914, %8
    %7916:ctrl = store.4 %7913, %7915, %7
    %7917:ctrl, %7918:phisel = region %7910
    %7919:ctrl, %7920:i32 = load.4 %7917, %6
    %7921:i32 = iadd %7920, %8
    %7922:ctrl = store.4 %7919, %7921, %6
    %7923:ctrl, %7924:phisel = region %7916, %7922
    %7925:i32 = phi %7924, %7907, %7907
    %7926:ctrl, %7927:ctrl = brcond %7923, %7925
    %7928:ctrl, %7929:phisel = region %7926
    %7930:ctrl, %7931:ptr = load.8 %7928, %12
    %7932:ctrl, %7933:i32 = load.4 %7930, %13
    %7934:i64 = iext %7933
    %7935:i64 = sfill 32 %7934
    %7936:i64 = imul %14, %7935
    %7937:i64 = iadd %17, %7936
    %7939:ptr = ptroff %7931, %11
    %7940:ctrl, %7941:i64 = load.4 %7932, %7939
    %7942:i64 = icmp slt %7935, %7941
    %7943:ctrl, %7944:ctrl = brcond %7940, %7942
    %7945:ctrl, %7946:phisel = region %7943
    %7949:ctrl, %7950:phisel = region %7944
    %7951:ctrl = call @throw_index_out_of_range_exception %7949
    unreachable %7951
    %7938:ptr = ptroff %7931, %7937
    %7947:ctrl, %7948:i32 = load.1 %7945, %7938
    %7952:ctrl, %7953:phisel = region %7927
    %7954:ctrl, %7955:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7952
    %7956:ctrl, %7957:phisel = region %7954, %7947
    %7958:i32 = phi %7957, %7925, %7925
    %7959:i32 = phi %7957, %7955, %7948
    %7960:ctrl, %7961:ctrl = brcond %7956, %7959
    %7962:ctrl, %7963:phisel = region %7960
    %7964:ctrl, %7965:i32 = load.4 %7962, %7
    %7966:i32 = iadd %7965, %8
    %7967:ctrl = store.4 %7964, %7966, %7
    %7968:ctrl, %7969:phisel = region %7961
    %7970:ctrl, %7971:i32 = load.4 %7968, %6
    %7972:i32 = iadd %7971, %8
    %7973:ctrl = store.4 %7970, %7972, %6
    %7974:ctrl, %7975:phisel = region %7967, %7973
    %7976:i32 = phi %7975, %7958, %7958
    %7977:ctrl, %7978:ctrl = brcond %7974, %7976
    %7979:ctrl, %7980:phisel = region %7977
    %7981:ctrl, %7982:ptr = load.8 %7979, %12
    %7983:ctrl, %7984:i32 = load.4 %7981, %13
    %7985:i64 = iext %7984
    %7986:i64 = sfill 32 %7985
    %7987:i64 = imul %14, %7986
    %7988:i64 = iadd %17, %7987
    %7990:ptr = ptroff %7982, %11
    %7991:ctrl, %7992:i64 = load.4 %7983, %7990
    %7993:i64 = icmp slt %7986, %7992
    %7994:ctrl, %7995:ctrl = brcond %7991, %7993
    %7996:ctrl, %7997:phisel = region %7994
    %8000:ctrl, %8001:phisel = region %7995
    %8002:ctrl = call @throw_index_out_of_range_exception %8000
    unreachable %8002
    %7989:ptr = ptroff %7982, %7988
    %7998:ctrl, %7999:i32 = load.1 %7996, %7989
    %8003:ctrl, %8004:phisel = region %7978
    %8005:ctrl, %8006:ptr = load.8 %8003, %28
    %8007:ctrl, %8008:i32 = load.4 %8005, %13
    %8009:i64 = iext %8008
    %8010:i64 = sfill 32 %8009
    %8011:i64 = imul %14, %8010
    %8012:i64 = iadd %17, %8011
    %8014:ptr = ptroff %8006, %11
    %8015:ctrl, %8016:i64 = load.4 %8007, %8014
    %8017:i64 = icmp slt %8010, %8016
    %8018:ctrl, %8019:ctrl = brcond %8015, %8017
    %8020:ctrl, %8021:phisel = region %8018
    %8120:ctrl, %8121:phisel = region %8019
    %8122:ctrl = call @throw_index_out_of_range_exception %8120
    unreachable %8122
    %8013:ptr = ptroff %8006, %8012
    %8022:ctrl, %8023:i32 = load.1 %8020, %8013
    %8024:ctrl, %8025:phisel = region %8022, %7998
    %8026:i32 = phi %8025, %7976, %7976
    %8027:i32 = phi %8025, %8023, %7999
    %8028:ctrl, %8029:ctrl = brcond %8024, %8027
    %8030:ctrl, %8031:phisel = region %8028
    %8032:ctrl, %8033:i32 = load.4 %8030, %7
    %8034:i32 = iadd %8033, %8
    %8035:ctrl = store.4 %8032, %8034, %7
    %8036:ctrl, %8037:phisel = region %8029
    %8038:ctrl, %8039:i32 = load.4 %8036, %6
    %8040:i32 = iadd %8039, %8
    %8041:ctrl = store.4 %8038, %8040, %6
    %8042:ctrl, %8043:phisel = region %8035, %8041
    %8044:i32 = phi %8043, %8026, %8026
    %8045:ctrl, %8046:ctrl = brcond %8042, %8044
    %8047:ctrl, %8048:phisel = region %8045
    %8049:ctrl, %8050:ptr = load.8 %8047, %12
    %8051:ctrl, %8052:i32 = load.4 %8049, %13
    %8053:i64 = iext %8052
    %8054:i64 = sfill 32 %8053
    %8055:i64 = imul %14, %8054
    %8056:i64 = iadd %17, %8055
    %8058:ptr = ptroff %8050, %11
    %8059:ctrl, %8060:i64 = load.4 %8051, %8058
    %8061:i64 = icmp slt %8054, %8060
    %8062:ctrl, %8063:ctrl = brcond %8059, %8061
    %8064:ctrl, %8065:phisel = region %8062
    %8068:ctrl, %8069:phisel = region %8063
    %8070:ctrl = call @throw_index_out_of_range_exception %8068
    unreachable %8070
    %8057:ptr = ptroff %8050, %8056
    %8066:ctrl, %8067:i32 = load.1 %8064, %8057
    %8071:ctrl, %8072:phisel = region %8046
    %8073:ctrl, %8074:ptr = load.8 %8071, %12
    %8075:ctrl, %8076:i32 = load.4 %8073, %13
    %8077:i64 = iext %8076
    %8078:i64 = sfill 32 %8077
    %8079:i64 = imul %14, %8078
    %8080:i64 = iadd %17, %8079
    %8082:ptr = ptroff %8074, %11
    %8083:ctrl, %8084:i64 = load.4 %8075, %8082
    %8085:i64 = icmp slt %8078, %8084
    %8086:ctrl, %8087:ctrl = brcond %8083, %8085
    %8088:ctrl, %8089:phisel = region %8086
    %8117:ctrl, %8118:phisel = region %8087
    %8119:ctrl = call @throw_index_out_of_range_exception %8117
    unreachable %8119
    %8081:ptr = ptroff %8074, %8080
    %8090:ctrl, %8091:i32 = load.1 %8088, %8081
    %8092:ctrl, %8093:phisel = region %8090, %8066
    %8094:i32 = phi %8093, %8091, %8067
    %8095:ctrl, %8096:ctrl = brcond %8092, %8094
    %8097:ctrl, %8098:phisel = region %8095
    %8099:ctrl, %8100:i32 = load.4 %8097, %7
    %8101:i32 = iadd %8100, %8
    %8102:ctrl = store.4 %8099, %8101, %7
    %8103:ctrl, %8104:phisel = region %8096
    %8105:ctrl, %8106:i32 = load.4 %8103, %6
    %8107:i32 = iadd %8106, %8
    %8108:ctrl = store.4 %8105, %8107, %6
    %8109:ctrl, %8110:phisel = region %8102, %8108
    %8111:ctrl, %8112:i32 = load.4 %8109, %7
    %8113:ctrl, %8114:i32 = load.4 %8111, %6
    %8115:i32 = imul %8112, %3
    %8116:i32 = isub %8115, %8114
    return %8113, %8116
}
