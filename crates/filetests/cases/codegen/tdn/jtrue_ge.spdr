# run: codegen

func @"System.Int32 Tests.CodeGenBringUpTests::JTrueGeInt1(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::JTrueGeInt1(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 33 c0                           xor eax, eax
    # nextln: 00000a: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 00000e: 88 44 24 08                     mov byte ptr [rsp + 8], al
    # nextln: 000012: 88 44 24 0d                     mov byte ptr [rsp + 0xd], al
    # nextln: 000016: 88 44 24 09                     mov byte ptr [rsp + 9], al
    # nextln: 00001a: 88 44 24 0e                     mov byte ptr [rsp + 0xe], al
    # nextln: 00001e: 88 44 24 0c                     mov byte ptr [rsp + 0xc], al
    # nextln: 000022: 88 44 24 0a                     mov byte ptr [rsp + 0xa], al
    # nextln: 000026: 88 44 24 0b                     mov byte ptr [rsp + 0xb], al
    # nextln: 00002a: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 00002d: 33 c9                           xor ecx, ecx
    # nextln: 00002f: 81 ff ff ff ff 7f               cmp edi, 0x7fffffff
    # nextln: 000035: 0f 9c c1                        setl cl
    # nextln: 000038: 33 c0                           xor eax, eax
    # nextln: 00003a: 85 c9                           test ecx, ecx
    # nextln: 00003c: 0f 94 c0                        sete al
    # nextln: 00003f: b9 ff ff ff ff                  mov ecx, 0xffffffff
    # nextln: 000044: 89 4c 24 04                     mov dword ptr [rsp + 4], ecx
    # nextln: 000048: 88 44 24 08                     mov byte ptr [rsp + 8], al
    # nextln: 00004c: 0f b6 44 24 08                  movzx eax, byte ptr [rsp + 8]
    # nextln: 000051: 85 c0                           test eax, eax
    # nextln: 000053: 0f 84 0e 00 00 00               je 0x67
    # nextln: 000059: b8 07 00 00 00                  mov eax, 7
    # nextln: 00005e: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000062: e9 13 01 00 00                  jmp 0x17a
    # nextln: 000067: 33 c0                           xor eax, eax
    # nextln: 000069: 83 ff 02                        cmp edi, 2
    # nextln: 00006c: 0f 9c c0                        setl al
    # nextln: 00006f: 33 c9                           xor ecx, ecx
    # nextln: 000071: 85 c0                           test eax, eax
    # nextln: 000073: 0f 94 c1                        sete cl
    # nextln: 000076: 88 4c 24 0d                     mov byte ptr [rsp + 0xd], cl
    # nextln: 00007a: 0f b6 44 24 0d                  movzx eax, byte ptr [rsp + 0xd]
    # nextln: 00007f: 85 c0                           test eax, eax
    # nextln: 000081: 0f 84 0e 00 00 00               je 0x95
    # nextln: 000087: b8 06 00 00 00                  mov eax, 6
    # nextln: 00008c: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000090: e9 e5 00 00 00                  jmp 0x17a
    # nextln: 000095: 33 c0                           xor eax, eax
    # nextln: 000097: 85 ff                           test edi, edi
    # nextln: 000099: 0f 9e c0                        setle al
    # nextln: 00009c: 33 c9                           xor ecx, ecx
    # nextln: 00009e: 85 c0                           test eax, eax
    # nextln: 0000a0: 0f 94 c1                        sete cl
    # nextln: 0000a3: 88 4c 24 09                     mov byte ptr [rsp + 9], cl
    # nextln: 0000a7: 0f b6 44 24 09                  movzx eax, byte ptr [rsp + 9]
    # nextln: 0000ac: 85 c0                           test eax, eax
    # nextln: 0000ae: 0f 84 0e 00 00 00               je 0xc2
    # nextln: 0000b4: b8 05 00 00 00                  mov eax, 5
    # nextln: 0000b9: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 0000bd: e9 b8 00 00 00                  jmp 0x17a
    # nextln: 0000c2: 33 c0                           xor eax, eax
    # nextln: 0000c4: 85 ff                           test edi, edi
    # nextln: 0000c6: 0f 98 c0                        sets al
    # nextln: 0000c9: 33 c9                           xor ecx, ecx
    # nextln: 0000cb: 85 c0                           test eax, eax
    # nextln: 0000cd: 0f 94 c1                        sete cl
    # nextln: 0000d0: 88 4c 24 0e                     mov byte ptr [rsp + 0xe], cl
    # nextln: 0000d4: 0f b6 44 24 0e                  movzx eax, byte ptr [rsp + 0xe]
    # nextln: 0000d9: 85 c0                           test eax, eax
    # nextln: 0000db: 0f 84 0e 00 00 00               je 0xef
    # nextln: 0000e1: b8 04 00 00 00                  mov eax, 4
    # nextln: 0000e6: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 0000ea: e9 8b 00 00 00                  jmp 0x17a
    # nextln: 0000ef: 33 c0                           xor eax, eax
    # nextln: 0000f1: 83 ff ff                        cmp edi, -1
    # nextln: 0000f4: 0f 9c c0                        setl al
    # nextln: 0000f7: 33 c9                           xor ecx, ecx
    # nextln: 0000f9: 85 c0                           test eax, eax
    # nextln: 0000fb: 0f 94 c1                        sete cl
    # nextln: 0000fe: 88 4c 24 0c                     mov byte ptr [rsp + 0xc], cl
    # nextln: 000102: 0f b6 44 24 0c                  movzx eax, byte ptr [rsp + 0xc]
    # nextln: 000107: 85 c0                           test eax, eax
    # nextln: 000109: 0f 84 0e 00 00 00               je 0x11d
    # nextln: 00010f: b8 03 00 00 00                  mov eax, 3
    # nextln: 000114: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000118: e9 5d 00 00 00                  jmp 0x17a
    # nextln: 00011d: 33 c0                           xor eax, eax
    # nextln: 00011f: 81 ff 01 00 00 80               cmp edi, 0x80000001
    # nextln: 000125: 0f 9c c0                        setl al
    # nextln: 000128: 33 c9                           xor ecx, ecx
    # nextln: 00012a: 85 c0                           test eax, eax
    # nextln: 00012c: 0f 94 c1                        sete cl
    # nextln: 00012f: 88 4c 24 0a                     mov byte ptr [rsp + 0xa], cl
    # nextln: 000133: 0f b6 44 24 0a                  movzx eax, byte ptr [rsp + 0xa]
    # nextln: 000138: 85 c0                           test eax, eax
    # nextln: 00013a: 0f 84 0e 00 00 00               je 0x14e
    # nextln: 000140: b8 02 00 00 00                  mov eax, 2
    # nextln: 000145: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000149: e9 2c 00 00 00                  jmp 0x17a
    # nextln: 00014e: 33 c0                           xor eax, eax
    # nextln: 000150: 81 ff 00 00 00 80               cmp edi, 0x80000000
    # nextln: 000156: 0f 9c c0                        setl al
    # nextln: 000159: 33 c9                           xor ecx, ecx
    # nextln: 00015b: 85 c0                           test eax, eax
    # nextln: 00015d: 0f 94 c1                        sete cl
    # nextln: 000160: 88 4c 24 0b                     mov byte ptr [rsp + 0xb], cl
    # nextln: 000164: 0f b6 44 24 0b                  movzx eax, byte ptr [rsp + 0xb]
    # nextln: 000169: 85 c0                           test eax, eax
    # nextln: 00016b: 0f 84 09 00 00 00               je 0x17a
    # nextln: 000171: b8 01 00 00 00                  mov eax, 1
    # nextln: 000176: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 00017a: 8b 44 24 04                     mov eax, dword ptr [rsp + 4]
    # nextln: 00017e: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 000181: 8b 04 24                        mov eax, dword ptr [rsp]
    # nextln: 000184: 48 83 c4 10                     add rsp, 0x10
    # nextln: 000188: 5d                              pop rbp
    # nextln: 000189: c3                              ret

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %4:ptr = stackslot 4:4
    %5:ptr = stackslot 4:4
    %6:i32 = iconst 1
    %7:i32 = icmp slt %1, %6
    %8:i32 = iconst 2
    %9:i32 = icmp slt %1, %8
    %10:i32 = iconst 3
    %11:i32 = iconst 4
    %12:i32 = iconst 5
    %13:i32 = iconst 6
    %14:i32 = iconst 7
    %15:ptr = stackslot 1:1
    %16:i32 = iconst 0
    %21:ctrl = store.4 %2, %16, %5
    %20:i32 = icmp eq %9, %16
    %19:i32 = icmp eq %7, %16
    %17:i32 = icmp slt %1, %16
    %18:i32 = icmp eq %17, %16
    %22:i32 = iconst 2147483648
    %23:i32 = icmp slt %1, %22
    %24:i32 = icmp eq %23, %16
    %25:ptr = stackslot 1:1
    %26:i32 = iconst 2147483649
    %27:i32 = icmp slt %1, %26
    %28:i32 = icmp eq %27, %16
    %29:ptr = stackslot 1:1
    %30:i32 = iconst 4294967295
    %31:i32 = icmp slt %1, %30
    %32:i32 = icmp eq %31, %16
    %33:ptr = stackslot 1:1
    %34:ptr = stackslot 1:1
    %35:ptr = stackslot 1:1
    %36:ptr = stackslot 1:1
    %37:ctrl = store.1 %21, %16, %36
    %38:ctrl = store.1 %37, %16, %35
    %39:ctrl = store.1 %38, %16, %34
    %40:ctrl = store.1 %39, %16, %33
    %41:ctrl = store.1 %40, %16, %29
    %42:ctrl = store.1 %41, %16, %25
    %43:ctrl = store.1 %42, %16, %15
    %44:ctrl = store.4 %43, %16, %4
    %45:ctrl, %46:phisel = region %44
    %47:ctrl = store.4 %45, %30, %5
    %48:i32 = iconst 2147483647
    %49:i32 = icmp slt %1, %48
    %50:i32 = icmp eq %49, %16
    %51:ctrl = store.1 %47, %50, %36
    %52:ctrl, %53:i32 = load.1 %51, %36
    %54:ctrl, %55:ctrl = brcond %52, %53
    %56:ctrl, %57:phisel = region %54
    %58:ctrl = store.4 %56, %14, %5
    %59:ctrl, %60:phisel = region %55
    %61:ctrl = store.1 %59, %20, %35
    %62:ctrl, %63:i32 = load.1 %61, %35
    %64:ctrl, %65:ctrl = brcond %62, %63
    %66:ctrl, %67:phisel = region %64
    %68:ctrl = store.4 %66, %13, %5
    %69:ctrl, %70:phisel = region %65
    %71:ctrl = store.1 %69, %19, %34
    %72:ctrl, %73:i32 = load.1 %71, %34
    %74:ctrl, %75:ctrl = brcond %72, %73
    %76:ctrl, %77:phisel = region %74
    %78:ctrl = store.4 %76, %12, %5
    %79:ctrl, %80:phisel = region %75
    %81:ctrl = store.1 %79, %18, %33
    %82:ctrl, %83:i32 = load.1 %81, %33
    %84:ctrl, %85:ctrl = brcond %82, %83
    %86:ctrl, %87:phisel = region %84
    %88:ctrl = store.4 %86, %11, %5
    %89:ctrl, %90:phisel = region %85
    %91:ctrl = store.1 %89, %32, %29
    %92:ctrl, %93:i32 = load.1 %91, %29
    %94:ctrl, %95:ctrl = brcond %92, %93
    %96:ctrl, %97:phisel = region %94
    %98:ctrl = store.4 %96, %10, %5
    %99:ctrl, %100:phisel = region %95
    %101:ctrl = store.1 %99, %28, %25
    %102:ctrl, %103:i32 = load.1 %101, %25
    %104:ctrl, %105:ctrl = brcond %102, %103
    %106:ctrl, %107:phisel = region %104
    %108:ctrl = store.4 %106, %8, %5
    %109:ctrl, %110:phisel = region %105
    %111:ctrl = store.1 %109, %24, %15
    %112:ctrl, %113:i32 = load.1 %111, %15
    %114:ctrl, %115:ctrl = brcond %112, %113
    %116:ctrl, %117:phisel = region %114
    %118:ctrl = store.4 %116, %6, %5
    %119:ctrl, %120:phisel = region %58, %68, %78, %88, %98, %108, %115, %118
    %121:ctrl, %122:i32 = load.4 %119, %5
    %123:ctrl = store.4 %121, %122, %4
    %124:ctrl, %125:phisel = region %123
    %126:ctrl, %127:i32 = load.4 %124, %4
    return %126, %127
}
