# run: canonicalize

func @ashr32:i32(i32, i32) {
    # check:   func @ashr32:i32(i32, i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32, $(entry2=$val):i32 = entry
    # dag:         $(ashr0=$val):i32 = ashr $entry1, $entry2
    # dag:         return $entry0, $ashr0
    # nextln:  }

    %c:ctrl, %a:i32, %b:i32 = entry
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @ashr_fold32:i32() {
    # check:   func @ashr_fold32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 7
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @ashr_fold_wrap32:i32() {
    # check:   func @ashr_fold_wrap32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 2
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 33
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @ashr_fold_neg32:i32() {
    # check:   func @ashr_fold_neg32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 4294967295
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 4294967290
    %b:i32 = iconst 6
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @ashrz32:i32(i32) {
    # check:   func @ashrz32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 0
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @zashr32:i32(i32) {
    # check:   func @zashr32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 0
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @ashrc32:i32(i32) {
    # check:   func @ashrc32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(ashr0=$val):i32 = ashr $entry1, $iconst0
    # dag:         return $entry0, $ashr0
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 5
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @cashr32:i32(i32) {
    # check:   func @cashr32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(ashr0=$val):i32 = ashr $iconst0, $entry1
    # dag:         return $entry0, $ashr0
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 5
    %r:i32 = ashr %a, %b
    return %c, %r
}

func @ashr64:i64(i64, i64) {
    # check:   func @ashr64:i64(i64, i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64, $(entry2=$val):i64 = entry
    # dag:         $(ashr0=$val):i64 = ashr $entry1, $entry2
    # dag:         return $entry0, $ashr0
    # nextln:  }

    %c:ctrl, %a:i64, %b:i64 = entry
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @ashr_fold64:i64() {
    # check:   func @ashr_fold64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 7
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @ashr_fold_wrap64:i64() {
    # check:   func @ashr_fold_wrap64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 2
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 65
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @ashr_fold_neg32_64:i64() {
    # check:   func @ashr_fold_neg32_64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 67108863
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 4294967290
    %b:i64 = iconst 6
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @ashr_fold_neg64:i64() {
    # check:   func @ashr_fold_neg64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 18446744073709551615
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 18446744073709551610
    %b:i64 = iconst 6
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @ashrz64:i64(i64) {
    # check:   func @ashrz64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 0
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @zashr64:i64(i64) {
    # check:   func @zashr64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 0
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @ashrc64:i64(i64) {
    # check:   func @ashrc64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(ashr0=$val):i64 = ashr $entry1, $iconst0
    # dag:         return $entry0, $ashr0
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 5
    %r:i64 = ashr %a, %b
    return %c, %r
}

func @cashr64:i64(i64) {
    # check:   func @cashr64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(ashr0=$val):i64 = ashr $iconst0, $entry1
    # dag:         return $entry0, $ashr0
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 5
    %r:i64 = ashr %a, %b
    return %c, %r
}
