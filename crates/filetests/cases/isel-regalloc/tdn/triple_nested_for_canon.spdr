# run: isel-regalloc

func @"System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)":i32(ptr, i32, i32, i32) {
    # check: function `System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)`:
    # nextln: clobbers: rax, rdi, r8
    # nextln: frame: size 16, align 4
    # nextln:     !0: 0
    # nextln:     !1: 4
    # nextln:     !2: 8
    # nextln:     !3: 12
    # nextln:       block0:
    # nextln: 0000:     $$rax = MovRmS32(0)
    # nextln: 0001:     MovMR(S32, [!1 + 0]) $$rax
    # nextln: 0002:     MovMR(S32, [!3 + 0]) $$rax
    # nextln: 0003:     MovMR(S32, [!0 + 0]) $$rax
    # nextln: 0004:     MovMR(S32, [!2 + 0]) $$rax
    # nextln: 0005:     MovMR(S32, [!1 + 0]) $$rax
    # nextln: 0006:     MovMR(S32, [!3 + 0]) $$rax
    # nextln: 0007:     Jump(block1)
    # nextln:       block1:
    # nextln: 0008:     $$rdi = MovRM(S32, [!3 + 0])
    # nextln: 0009:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0010:     Jumpcc(L, block2, block3)
    # nextln:       block2:
    # nextln: 0011:     MovMR(S32, [!0 + 0]) $$rax
    # nextln: 0012:     Jump(block4)
    # nextln:       block4:
    # nextln: 0013:     $$rdi = MovRM(S32, [!0 + 0])
    # nextln: 0014:     AluRRm(S32, Cmp) $$rdi, $$rdx
    # nextln: 0015:     Jumpcc(L, block5, block6)
    # nextln:       block5:
    # nextln: 0016:     MovMR(S32, [!2 + 0]) $$rax
    # nextln: 0017:     Jump(block7)
    # nextln:       block7:
    # nextln: 0018:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0019:     AluRRm(S32, Cmp) $$rdi, $$rcx
    # nextln: 0020:     Jumpcc(L, block8, block9)
    # nextln:       block8:
    # nextln: 0021:     $$rdi = MovRM(S32, [!1 + 0])
    # nextln: 0022:     $$r8 = MovRM(S32, [!2 + 0])
    # nextln: 0023:     $$rdi = AluRRm(S32, Add) $$rdi, $$r8
    # nextln: 0024:     MovMR(S32, [!1 + 0]) $$rdi
    # nextln: 0025:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0026:     $$rdi = AluRmI(S32, Add, 1) $$rdi
    # nextln: 0027:     MovMR(S32, [!2 + 0]) $$rdi
    # nextln: 0028:     Jump(block7)
    # nextln:       block9:
    # nextln: 0029:     $$rdi = MovRM(S32, [!1 + 0])
    # nextln: 0030:     $$r8 = MovRM(S32, [!0 + 0])
    # nextln: 0031:     $$rdi = AluRRm(S32, Add) $$rdi, $$r8
    # nextln: 0032:     MovMR(S32, [!1 + 0]) $$rdi
    # nextln: 0033:     $$rdi = MovRM(S32, [!0 + 0])
    # nextln: 0034:     $$rdi = AluRmI(S32, Add, 1) $$rdi
    # nextln: 0035:     MovMR(S32, [!0 + 0]) $$rdi
    # nextln: 0036:     Jump(block4)
    # nextln:       block6:
    # nextln: 0037:     $$rdi = MovRM(S32, [!1 + 0])
    # nextln: 0038:     $$r8 = MovRM(S32, [!3 + 0])
    # nextln: 0039:     $$rdi = AluRRm(S32, Add) $$rdi, $$r8
    # nextln: 0040:     MovMR(S32, [!1 + 0]) $$rdi
    # nextln: 0041:     $$rdi = MovRM(S32, [!3 + 0])
    # nextln: 0042:     $$rdi = AluRmI(S32, Add, 1) $$rdi
    # nextln: 0043:     MovMR(S32, [!3 + 0]) $$rdi
    # nextln: 0044:     Jump(block1)
    # nextln:       block3:
    # nextln: 0045:     $$rax = MovRM(S32, [!1 + 0])
    # nextln: 0046:     Ret $$rax

    %0:ctrl, %1:ptr, %2:i32, %3:i32, %4:i32 = entry
    %7:ptr = stackslot 4:4
    %8:ptr = stackslot 4:4
    %10:ptr = stackslot 4:4
    %11:ptr = stackslot 4:4
    %9:i32 = iconst 1
    %12:i32 = iconst 0
    %13:ctrl = store.4 %0, %12, %7
    %14:ctrl = store.4 %13, %12, %8
    %15:ctrl = store.4 %14, %12, %10
    %16:ctrl = store.4 %15, %12, %11
    %19:ctrl = store.4 %16, %12, %7
    %20:ctrl = store.4 %19, %12, %8
    %74:ctrl, %75:phisel = region %20, %73
    %76:ctrl, %77:i32 = load.4 %74, %8
    %78:i32 = icmp slt %77, %2
    %79:ctrl, %80:ctrl = brcond %76, %78
    %83:ctrl = store.4 %79, %12, %10
    %53:ctrl, %54:phisel = region %83, %52
    %55:ctrl, %56:i32 = load.4 %53, %10
    %57:i32 = icmp slt %56, %3
    %58:ctrl, %59:ctrl = brcond %55, %57
    %21:ctrl = store.4 %58, %12, %11
    %22:ctrl, %23:phisel = region %21, %40
    %24:ctrl, %25:i32 = load.4 %22, %11
    %26:i32 = icmp slt %25, %4
    %27:ctrl, %28:ctrl = brcond %24, %26
    %31:ctrl, %32:i32 = load.4 %27, %7
    %33:ctrl, %34:i32 = load.4 %31, %11
    %35:i32 = iadd %32, %34
    %36:ctrl = store.4 %33, %35, %7
    %37:ctrl, %38:i32 = load.4 %36, %11
    %39:i32 = iadd %38, %9
    %40:ctrl = store.4 %37, %39, %11
    %43:ctrl, %44:i32 = load.4 %28, %7
    %45:ctrl, %46:i32 = load.4 %43, %10
    %47:i32 = iadd %44, %46
    %48:ctrl = store.4 %45, %47, %7
    %49:ctrl, %50:i32 = load.4 %48, %10
    %51:i32 = iadd %50, %9
    %52:ctrl = store.4 %49, %51, %10
    %64:ctrl, %65:i32 = load.4 %59, %7
    %66:ctrl, %67:i32 = load.4 %64, %8
    %68:i32 = iadd %65, %67
    %69:ctrl = store.4 %66, %68, %7
    %70:ctrl, %71:i32 = load.4 %69, %8
    %72:i32 = iadd %71, %9
    %73:ctrl = store.4 %70, %72, %8
    %86:ctrl, %87:i32 = load.4 %80, %7
    return %86, %87
}
