# run: isel-regalloc[large-abs]

extfunc @sink_small(i32)
extfunc @sink_large(i32, i32, i32, i32, i32, i32)

func @call_permute_args_high_pressure(i32, i32, i32, i32, i32, i32, ptr) {
    # check: function `call_permute_args_high_pressure`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, r12, r13, r14, r15
    # nextln: frame: size 64, align 8
    # nextln:     spill0: 0
    # nextln:     spill1: 8
    # nextln:     spill2: 16
    # nextln:     spill3: 24
    # nextln:     spill4: 32
    # nextln:     spill5: 40
    # nextln:     spill6: 48
    # nextln:     spill7: 56
    # nextln:       block0:
    # nextln:           $$rax = $$r9
    # nextln: 0000:     $$r9 = MovRRbp { offset: 16 }
    # nextln:           $$r10 = $$rdi
    # nextln:           $$rdi = $$r8
    # nextln:           $$r8 = $$r10
    # nextln:           $$r10 = $$rcx
    # nextln:           $$rcx = $$rsi
    # nextln:           $$rsi = $$rdx
    # nextln:           $$rdx = $$r10
    # nextln: 0001:     $$r14 = MovRM(S32) $$r9
    # nextln:           $$r10 = $$rdi
    # nextln:           $$rdi = $$rdx
    # nextln:           $$rdx = $$r10
    # nextln:           $$r10 = $$rax
    # nextln:           $$rax = $$r8
    # nextln:           $$r8 = $$rsi
    # nextln:           $$rsi = $$rcx
    # nextln:           $$rcx = $$r10
    # nextln: 0002:     $$r13 = MovRM(S32) $$r9
    # nextln:           $$r10 = $$rdx
    # nextln:           $$rdx = $$rcx
    # nextln:           $$rcx = $$rsi
    # nextln:           $$rsi = $$rdi
    # nextln:           $$rdi = $$r8
    # nextln: 0003:     $$r8 = MovRM(S32) $$r9
    # nextln:           $$r11 = $$r10
    # nextln:           $$r10 = $$rdi
    # nextln:           $$rdi = $$rsi
    # nextln:           $$rsi = $$r11
    # nextln:           $$r11 = $$rdx
    # nextln:           $$rdx = $$rcx
    # nextln:           $$rcx = $$r11
    # nextln: 0004:     $$r11 = MovRM(S32) $$r9
    # nextln:           $$rbx = $$rcx
    # nextln:           $$spill7 = $$rsi
    # nextln:           $$rsi = $$rdi
    # nextln:           $$rdi = $$spill7
    # nextln:           $$r12 = $$r10
    # nextln:           $$spill5 = $$r11
    # nextln:           $$r15 = $$r8
    # nextln:           $$r8 = $$rdx
    # nextln:           $$rdx = $$rax
    # nextln: 0005:     $$rcx = MovRM(S32) $$r9
    # nextln: 0006:     $$r10 = MovRM(S32) $$r9
    # nextln: 0007:     $$r11 = MovRM(S32) $$r9
    # nextln: 0008:     $$rax = MovRM(S32) $$r9
    # nextln: 0009:     $$r9 = MovRM(S32) $$r9
    # nextln:           $$spill6 = $$r15
    # nextln: 0010:     $$r15 = FuncAddrAbs(External(extfunc1))
    # nextln:           $$spill3 = $$r10
    # nextln:           $$spill2 = $$r11
    # nextln:           $$spill1 = $$rax
    # nextln:           $$spill0 = $$r9
    # nextln:           $$spill4 = $$rcx
    # nextln:           $$r9 = $$rdx
    # nextln:           $$rcx = $$rdi
    # nextln:           $$rdx = $$rsi
    # nextln:           $$rsi = $$r12
    # nextln:           $$rdi = $$r8
    # nextln:           $$r8 = $$rbx
    # nextln: 0011:     CallRm $$r15, $$rdi, $$rsi, $$rdx, $$rcx, $$r8, $$r9
    # nextln:           $$r12 = $$spill6
    # nextln:           $$rbx = $$spill5
    # nextln:           $$r15 = $$spill4
    # nextln: 0012:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r14
    # nextln: 0013:     CallRm $$rax, $$rdi
    # nextln:           $$r14 = $$spill3
    # nextln: 0014:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r13
    # nextln: 0015:     CallRm $$rax, $$rdi
    # nextln:           $$r13 = $$spill2
    # nextln: 0016:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r12
    # nextln: 0017:     CallRm $$rax, $$rdi
    # nextln:           $$r12 = $$spill1
    # nextln: 0018:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$rbx
    # nextln: 0019:     CallRm $$rax, $$rdi
    # nextln:           $$rbx = $$spill0
    # nextln: 0020:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r15
    # nextln: 0021:     CallRm $$rax, $$rdi
    # nextln: 0022:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r14
    # nextln: 0023:     CallRm $$rax, $$rdi
    # nextln: 0024:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r13
    # nextln: 0025:     CallRm $$rax, $$rdi
    # nextln: 0026:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r12
    # nextln: 0027:     CallRm $$rax, $$rdi
    # nextln: 0028:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$rbx
    # nextln: 0029:     CallRm $$rax, $$rdi
    # nextln: 0030:     Ret

    %ent:ctrl, %a1:i32, %a2:i32, %a3:i32, %a4:i32, %a5:i32, %a6:i32, %p:ptr = entry

    # Fill a bunch of registers to increase pressure. We're using loads here because they have
    # control dependencies and won't be sunk by the scheduler.

    %c1:ctrl, %v1:i32 = load.4 %ent, %p
    %c2:ctrl, %v2:i32 = load.4 %c1, %p
    %c3:ctrl, %v3:i32 = load.4 %c2, %p
    %c4:ctrl, %v4:i32 = load.4 %c3, %p
    %c5:ctrl, %v5:i32 = load.4 %c4, %p
    %c6:ctrl, %v6:i32 = load.4 %c5, %p
    %c7:ctrl, %v7:i32 = load.4 %c6, %p
    %c8:ctrl, %v8:i32 = load.4 %c7, %p
    %c9:ctrl, %v9:i32 = load.4 %c8, %p

    # Shuffle %rdi, %rsi, %rdx, %rcx, %r8 and %r9
    %c10:ctrl = call @sink_large %c9, %a2, %a3, %a4, %a5, %a6, %a1

    # Keep our loaded values live across the call.

    %c11:ctrl = call @sink_small %c10, %v1
    %c12:ctrl = call @sink_small %c11, %v2
    %c13:ctrl = call @sink_small %c12, %v3
    %c14:ctrl = call @sink_small %c13, %v4
    %c15:ctrl = call @sink_small %c14, %v5
    %c16:ctrl = call @sink_small %c15, %v6
    %c17:ctrl = call @sink_small %c16, %v7
    %c18:ctrl = call @sink_small %c17, %v8
    %c19:ctrl = call @sink_small %c18, %v9

    return %c19
}
