# run: isel

func @sum_to_n:i32(i32) {
    # check: function `sum_to_n`:
    # nextln:       block0[%6:gpr32($$rdi)]:
    # nextln: 0000:      %5:gpr32(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S32, Test) %6(reg)[early], %6(any)[early]
    # nextln: 0002:      Jumpcc(E, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%5:gpr32]
    # nextln:       block3:
    # nextln: 0004:      Jump(block4)
    # nextln:       => block4[%5:gpr32, %6:gpr32]
    # nextln:       block4[%0:gpr32, %1:gpr32]:
    # nextln: 0005:      %4:gpr32(any)[late] = AluRmI(S32, Sub, 1) %1(tied:0)[early]
    # nextln: 0006:      %3:gpr32(reg)[late] = AddRR(S32) %0(soft-tied:0)[early], %1(soft-tied:0)[early]
    # nextln: 0007:      AluRRm(S32, Test) %4(reg)[early], %4(any)[early]
    # nextln: 0008:      Jumpcc(E, block5, block6)
    # nextln:       => block5, block6
    # nextln:       block6:
    # nextln: 0009:      Jump(block4)
    # nextln:       => block4[%3:gpr32, %4:gpr32]
    # nextln:       block5:
    # nextln: 0010:      Jump(block2)
    # nextln:       => block2[%3:gpr32]
    # nextln:       block2[%2:gpr32]:
    # nextln: 0011:      Ret %2($$rax)[early]

    %0:ctrl, %1:i32 = entry
    %10:i32 = iconst 1
    %2:i32 = iconst 0
    %3:i32 = icmp eq %1, %2
    %4:ctrl, %5:ctrl = brcond %0, %3
    %13:i32 = icmp eq %11, %2
    %14:ctrl, %15:ctrl = brcond %6, %13
    %16:ctrl, %17:phisel = region %4, %14
    %6:ctrl, %7:phisel = region %5, %15
    %8:i32 = phi %7, %1, %11
    %11:i32 = isub %8, %10
    %9:i32 = phi %7, %2, %12
    %12:i32 = iadd %9, %8
    %18:i32 = phi %17, %2, %12
    return %16, %18
}

func @sum_to_n_with_stack:i32(i32) {
    # check: function `sum_to_n_with_stack`:
    # nextln: !0 = stackslot 4:4
    # nextln: !1 = stackslot 4:4
    # nextln:       block0[%7:gpr32($$rdi)]:
    # nextln: 0000:      Jump(block1)
    # nextln:       => block1
    # nextln:       block1:
    # nextln: 0001:      %6:gpr32(any)[late] = MovRmS32(0)
    # nextln: 0002:      MovMR(S32, [!0 + 0]) %7(reg)[early]
    # nextln: 0003:      MovMR(S32, [!1 + 0]) %6(reg)[early]
    # nextln: 0004:      Jump(block2)
    # nextln:       => block2
    # nextln:       block2:
    # nextln: 0005:      %5:gpr32(reg)[late] = MovRM(S32, [!0 + 0])
    # nextln: 0006:      AluRRm(S32, Test) %5(reg)[early], %5(any)[early]
    # nextln: 0007:      Jumpcc(E, block3, block4)
    # nextln:       => block3, block4
    # nextln:       block4:
    # nextln: 0008:      %4:gpr32(reg)[late] = MovRM(S32, [!0 + 0])
    # nextln: 0009:      %2:gpr32(any)[late] = AluRmI(S32, Sub, 1) %4(tied:0)[early]
    # nextln: 0010:      %3:gpr32(reg)[late] = MovRM(S32, [!1 + 0])
    # nextln: 0011:      %1:gpr32(reg)[late] = AddRR(S32) %3(soft-tied:0)[early], %4(soft-tied:0)[early]
    # nextln: 0012:      MovMR(S32, [!0 + 0]) %2(reg)[early]
    # nextln: 0013:      MovMR(S32, [!1 + 0]) %1(reg)[early]
    # nextln: 0014:      Jump(block2)
    # nextln:       => block2
    # nextln:       block3:
    # nextln: 0015:      %0:gpr32(reg)[late] = MovRM(S32, [!1 + 0])
    # nextln: 0016:      Ret %0($$rax)[early]

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %5:ptr = stackslot 4:4
    %4:ptr = stackslot 4:4
    %6:ctrl = store.4 %2, %1, %4
    %24:i32 = iconst 1
    %7:i32 = iconst 0
    %8:ctrl = store.4 %6, %7, %5
    %13:i32 = icmp eq %12, %7
    %18:ctrl, %19:ctrl = brcond %11, %13
    %14:ctrl, %15:phisel = region %18
    %29:ctrl, %30:i32 = load.4 %14, %5
    return %29, %30
    %16:ctrl, %17:phisel = region %19
    %20:ctrl, %21:i32 = load.4 %16, %4
    %22:ctrl, %23:i32 = load.4 %20, %5
    %25:i32 = isub %21, %24
    %27:ctrl = store.4 %22, %25, %4
    %26:i32 = iadd %23, %21
    %28:ctrl = store.4 %27, %26, %5
    %9:ctrl, %10:phisel = region %8, %28
    %11:ctrl, %12:i32 = load.4 %9, %4
}
