# run: codegen

extfunc @gc_new:ptr(ptr, i64)
extfunc @"System.Void Tests.Int_No_Op::.ctor()"(ptr)
extfunc @throw_index_out_of_range_exception()
extfunc @"System.Int32 Tests.Int_No_Op::simple_func_int()":i32()

func @"System.Int32 Tests.Int_No_Op::Sub_Funclet_10()":i32() {
    # check: function `System.Int32 Tests.Int_No_Op::Sub_Funclet_10()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 83 ec 68                     sub rsp, 0x68
    # nextln: 000011: 48 bb c0 75 00 00 10 61 00 00   movabs rbx, 0x6110000075c0
    # nextln: 00001b: 48 bf 80 97 00 00 10 61 00 00   movabs rdi, 0x611000009780
    # nextln: 000025: be 28 00 00 00                  mov esi, 0x28
    # nextln: 00002a: 45 33 f6                        xor r14d, r14d
    # nextln: 00002d: 41 bd 01 00 00 00               mov r13d, 1
    # nextln: 000033: b8 fb ff ff ff                  mov eax, 0xfffffffb
    # nextln: 000038: 41 bf 03 00 00 00               mov r15d, 3
    # nextln: 00003e: 33 c9                           xor ecx, ecx
    # nextln: 000040: 44 89 74 24 54                  mov dword ptr [rsp + 0x54], r14d
    # nextln: 000045: 44 89 74 24 50                  mov dword ptr [rsp + 0x50], r14d
    # nextln: 00004a: 44 88 74 24 58                  mov byte ptr [rsp + 0x58], r14b
    # nextln: 00004f: 48 89 4c 24 08                  mov qword ptr [rsp + 8], rcx
    # nextln: 000054: 48 89 0c 24                     mov qword ptr [rsp], rcx
    # nextln: 000058: 44 89 6c 24 54                  mov dword ptr [rsp + 0x54], r13d
    # nextln: 00005d: 89 44 24 50                     mov dword ptr [rsp + 0x50], eax
    # nextln: 000061: 44 88 74 24 58                  mov byte ptr [rsp + 0x58], r14b
    # nextln: 000066: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 000070: ff d0                           call rax
    # nextln: 000072: 49 89 c4                        mov r12, rax
    # nextln: 000075: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Void Tests.Int_No_Op::.ctor()" + 0
    # nextln: 00007f: 4c 89 e7                        mov rdi, r12
    # nextln: 000082: ff d0                           call rax
    # nextln: 000084: 4c 89 64 24 08                  mov qword ptr [rsp + 8], r12
    # nextln: 000089: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 000093: be 33 00 00 00                  mov esi, 0x33
    # nextln: 000098: 48 89 df                        mov rdi, rbx
    # nextln: 00009b: ff d0                           call rax
    # nextln: 00009d: 48 83 c0 20                     add rax, 0x20
    # nextln: 0000a1: 44 89 38                        mov dword ptr [rax], r15d
    # nextln: 0000a4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 0000ae: be 33 00 00 00                  mov esi, 0x33
    # nextln: 0000b3: 48 89 df                        mov rdi, rbx
    # nextln: 0000b6: ff d0                           call rax
    # nextln: 0000b8: 48 89 c1                        mov rcx, rax
    # nextln: 0000bb: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0000bf: 44 89 39                        mov dword ptr [rcx], r15d
    # nextln: 0000c2: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0000c4: 48 85 d2                        test rdx, rdx
    # nextln: 0000c7: 0f 8e 19 05 00 00               jle 0x5e6
    # nextln: 0000cd: 48 89 c2                        mov rdx, rax
    # nextln: 0000d0: 48 83 c2 28                     add rdx, 0x28
    # nextln: 0000d4: 44 88 2a                        mov byte ptr [rdx], r13b
    # nextln: 0000d7: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0000d9: 41 bc 01 00 00 00               mov r12d, 1
    # nextln: 0000df: 4c 3b e2                        cmp r12, rdx
    # nextln: 0000e2: 0f 8d f0 04 00 00               jge 0x5d8
    # nextln: 0000e8: 48 89 c2                        mov rdx, rax
    # nextln: 0000eb: 48 83 c2 29                     add rdx, 0x29
    # nextln: 0000ef: 44 88 2a                        mov byte ptr [rdx], r13b
    # nextln: 0000f2: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 0000f4: bb 02 00 00 00                  mov ebx, 2
    # nextln: 0000f9: 48 3b d9                        cmp rbx, rcx
    # nextln: 0000fc: 0f 8d c8 04 00 00               jge 0x5ca
    # nextln: 000102: 48 bf 00 08 01 00 10 61 00 00   movabs rdi, 0x611000010800
    # nextln: 00010c: be 3c 00 00 00                  mov esi, 0x3c
    # nextln: 000111: 48 83 c0 2a                     add rax, 0x2a
    # nextln: 000115: 44 88 28                        mov byte ptr [rax], r13b
    # nextln: 000118: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 000122: ff d0                           call rax
    # nextln: 000124: 48 89 c1                        mov rcx, rax
    # nextln: 000127: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00012b: 44 89 39                        mov dword ptr [rcx], r15d
    # nextln: 00012e: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 000132: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000136: 48 89 c1                        mov rcx, rax
    # nextln: 000139: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00013d: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 00013f: 48 85 c9                        test rcx, rcx
    # nextln: 000142: 0f 8e 74 04 00 00               jle 0x5bc
    # nextln: 000148: 48 83 c0 28                     add rax, 0x28
    # nextln: 00014c: b9 15 00 00 00                  mov ecx, 0x15
    # nextln: 000151: 89 08                           mov dword ptr [rax], ecx
    # nextln: 000153: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000157: 48 89 c1                        mov rcx, rax
    # nextln: 00015a: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00015e: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000160: 4c 3b e1                        cmp r12, rcx
    # nextln: 000163: 0f 8d 45 04 00 00               jge 0x5ae
    # nextln: 000169: 48 83 c0 2c                     add rax, 0x2c
    # nextln: 00016d: b9 e5 ff ff ff                  mov ecx, 0xffffffe5
    # nextln: 000172: 89 08                           mov dword ptr [rax], ecx
    # nextln: 000174: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000178: 48 89 c1                        mov rcx, rax
    # nextln: 00017b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00017f: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000181: 48 3b d9                        cmp rbx, rcx
    # nextln: 000184: 0f 8d 16 04 00 00               jge 0x5a0
    # nextln: 00018a: 48 83 c0 30                     add rax, 0x30
    # nextln: 00018e: ba 07 00 00 00                  mov edx, 7
    # nextln: 000193: 48 bf 50 04 00 00 20 60 00 00   movabs rdi, 0x602000000450
    # nextln: 00019d: b9 f3 ff ff ff                  mov ecx, 0xfffffff3
    # nextln: 0001a2: 48 be 70 04 00 00 20 60 00 00   movabs rsi, 0x602000000470
    # nextln: 0001ac: 49 b8 90 04 00 00 20 60 00 00   movabs r8, 0x602000000490
    # nextln: 0001b6: 41 b9 e1 ff ff ff               mov r9d, 0xffffffe1
    # nextln: 0001bc: 44 89 08                        mov dword ptr [rax], r9d
    # nextln: 0001bf: 89 17                           mov dword ptr [rdi], edx
    # nextln: 0001c1: 48 89 f8                        mov rax, rdi
    # nextln: 0001c4: 44 88 36                        mov byte ptr [rsi], r14b
    # nextln: 0001c7: 45 88 28                        mov byte ptr [r8], r13b
    # nextln: 0001ca: 48 8b 54 24 08                  mov rdx, qword ptr [rsp + 8]
    # nextln: 0001cf: 48 83 c2 20                     add rdx, 0x20
    # nextln: 0001d3: 89 0a                           mov dword ptr [rdx], ecx
    # nextln: 0001d5: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 0001da: 48 83 c1 24                     add rcx, 0x24
    # nextln: 0001de: 44 88 31                        mov byte ptr [rcx], r14b
    # nextln: 0001e1: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 0001e6: 48 83 c1 25                     add rcx, 0x25
    # nextln: 0001ea: 44 88 29                        mov byte ptr [rcx], r13b
    # nextln: 0001ed: 0f b6 4c 24 58                  movzx ecx, byte ptr [rsp + 0x58]
    # nextln: 0001f2: 85 c9                           test ecx, ecx
    # nextln: 0001f4: 0f 84 10 00 00 00               je 0x20a
    # nextln: 0001fa: bb fb ff ff ff                  mov ebx, 0xfffffffb
    # nextln: 0001ff: 48 89 c1                        mov rcx, rax
    # nextln: 000202: 48 89 d8                        mov rax, rbx
    # nextln: 000205: e9 0d 00 00 00                  jmp 0x217
    # nextln: 00020a: bb 03 00 00 00                  mov ebx, 3
    # nextln: 00020f: 48 89 c1                        mov rcx, rax
    # nextln: 000212: b8 fb ff ff ff                  mov eax, 0xfffffffb
    # nextln: 000217: 0f b6 54 24 58                  movzx edx, byte ptr [rsp + 0x58]
    # nextln: 00021c: 85 d2                           test edx, edx
    # nextln: 00021e: 0f b6 54 24 58                  movzx edx, byte ptr [rsp + 0x58]
    # nextln: 000223: 85 d2                           test edx, edx
    # nextln: 000225: 0f 84 0a 00 00 00               je 0x235
    # nextln: 00022b: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 000230: e9 09 00 00 00                  jmp 0x23e
    # nextln: 000235: 8b 54 24 50                     mov edx, dword ptr [rsp + 0x50]
    # nextln: 000239: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 00023e: 0f b6 54 24 58                  movzx edx, byte ptr [rsp + 0x58]
    # nextln: 000243: 85 d2                           test edx, edx
    # nextln: 000245: 0f 84 0a 00 00 00               je 0x255
    # nextln: 00024b: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 000250: e9 07 00 00 00                  jmp 0x25c
    # nextln: 000255: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000257: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 00025c: 0f b6 54 24 58                  movzx edx, byte ptr [rsp + 0x58]
    # nextln: 000261: 85 d2                           test edx, edx
    # nextln: 000263: 0f 84 0a 00 00 00               je 0x273
    # nextln: 000269: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 00026e: e9 10 00 00 00                  jmp 0x283
    # nextln: 000273: 48 8b 54 24 08                  mov rdx, qword ptr [rsp + 8]
    # nextln: 000278: 48 83 c2 20                     add rdx, 0x20
    # nextln: 00027c: 8b 12                           mov edx, dword ptr [rdx]
    # nextln: 00027e: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 000283: 0f b6 54 24 58                  movzx edx, byte ptr [rsp + 0x58]
    # nextln: 000288: 85 d2                           test edx, edx
    # nextln: 00028a: 0f 84 10 00 00 00               je 0x2a0
    # nextln: 000290: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 000295: 49 89 cd                        mov r13, rcx
    # nextln: 000298: 49 89 c4                        mov r12, rax
    # nextln: 00029b: e9 1a 00 00 00                  jmp 0x2ba
    # nextln: 0002a0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.Int_No_Op::simple_func_int()" + 0
    # nextln: 0002aa: 41 bc fb ff ff ff               mov r12d, 0xfffffffb
    # nextln: 0002b0: 49 89 cd                        mov r13, rcx
    # nextln: 0002b3: ff d0                           call rax
    # nextln: 0002b5: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 0002ba: 0f b6 44 24 58                  movzx eax, byte ptr [rsp + 0x58]
    # nextln: 0002bf: 85 c0                           test eax, eax
    # nextln: 0002c1: 0f 84 0d 00 00 00               je 0x2d4
    # nextln: 0002c7: 4c 89 64 24 30                  mov qword ptr [rsp + 0x30], r12
    # nextln: 0002cc: 4c 89 e8                        mov rax, r13
    # nextln: 0002cf: e9 32 00 00 00                  jmp 0x306
    # nextln: 0002d4: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 0002d8: 48 89 c8                        mov rax, rcx
    # nextln: 0002db: 48 83 c0 20                     add rax, 0x20
    # nextln: 0002df: 8b 7c 24 54                     mov edi, dword ptr [rsp + 0x54]
    # nextln: 0002e3: 8b 10                           mov edx, dword ptr [rax]
    # nextln: 0002e5: 48 63 c7                        movsxd rax, edi
    # nextln: 0002e8: 48 3b c2                        cmp rax, rdx
    # nextln: 0002eb: 0f 8d a1 02 00 00               jge 0x592
    # nextln: 0002f1: 48 c1 e0 02                     shl rax, 2
    # nextln: 0002f5: 48 83 c0 28                     add rax, 0x28
    # nextln: 0002f9: 48 03 c8                        add rcx, rax
    # nextln: 0002fc: 4c 89 e8                        mov rax, r13
    # nextln: 0002ff: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000301: 48 89 4c 24 30                  mov qword ptr [rsp + 0x30], rcx
    # nextln: 000306: 0f b6 4c 24 58                  movzx ecx, byte ptr [rsp + 0x58]
    # nextln: 00030b: 85 c9                           test ecx, ecx
    # nextln: 00030d: 0f 84 0f 00 00 00               je 0x322
    # nextln: 000313: 4c 89 64 24 38                  mov qword ptr [rsp + 0x38], r12
    # nextln: 000318: ba 03 00 00 00                  mov edx, 3
    # nextln: 00031d: e9 37 00 00 00                  jmp 0x359
    # nextln: 000322: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 000326: 48 89 ca                        mov rdx, rcx
    # nextln: 000329: 48 83 c2 20                     add rdx, 0x20
    # nextln: 00032d: 8b 7c 24 54                     mov edi, dword ptr [rsp + 0x54]
    # nextln: 000331: 83 ef 01                        sub edi, 1
    # nextln: 000334: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 000336: 48 63 d7                        movsxd rdx, edi
    # nextln: 000339: 48 3b d6                        cmp rdx, rsi
    # nextln: 00033c: 0f 8d 42 02 00 00               jge 0x584
    # nextln: 000342: 48 c1 e2 02                     shl rdx, 2
    # nextln: 000346: 48 83 c2 28                     add rdx, 0x28
    # nextln: 00034a: 48 03 ca                        add rcx, rdx
    # nextln: 00034d: ba 03 00 00 00                  mov edx, 3
    # nextln: 000352: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000354: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 000359: 0f b6 4c 24 58                  movzx ecx, byte ptr [rsp + 0x58]
    # nextln: 00035e: 85 c9                           test ecx, ecx
    # nextln: 000360: 0f 84 0e 00 00 00               je 0x374
    # nextln: 000366: 8b 4c 24 50                     mov ecx, dword ptr [rsp + 0x50]
    # nextln: 00036a: 48 89 4c 24 40                  mov qword ptr [rsp + 0x40], rcx
    # nextln: 00036f: e9 05 00 00 00                  jmp 0x379
    # nextln: 000374: 48 89 54 24 40                  mov qword ptr [rsp + 0x40], rdx
    # nextln: 000379: 0f b6 4c 24 58                  movzx ecx, byte ptr [rsp + 0x58]
    # nextln: 00037e: 85 c9                           test ecx, ecx
    # nextln: 000380: 0f 84 0e 00 00 00               je 0x394
    # nextln: 000386: 8b 4c 24 50                     mov ecx, dword ptr [rsp + 0x50]
    # nextln: 00038a: 48 89 4c 24 48                  mov qword ptr [rsp + 0x48], rcx
    # nextln: 00038f: e9 05 00 00 00                  jmp 0x399
    # nextln: 000394: 4c 89 64 24 48                  mov qword ptr [rsp + 0x48], r12
    # nextln: 000399: 0f b6 4c 24 58                  movzx ecx, byte ptr [rsp + 0x58]
    # nextln: 00039e: 85 c9                           test ecx, ecx
    # nextln: 0003a0: 0f 84 0a 00 00 00               je 0x3b0
    # nextln: 0003a6: 44 8b 6c 24 50                  mov r13d, dword ptr [rsp + 0x50]
    # nextln: 0003ab: e9 05 00 00 00                  jmp 0x3b5
    # nextln: 0003b0: 44 8b 6c 24 50                  mov r13d, dword ptr [rsp + 0x50]
    # nextln: 0003b5: 0f b6 4c 24 58                  movzx ecx, byte ptr [rsp + 0x58]
    # nextln: 0003ba: 85 c9                           test ecx, ecx
    # nextln: 0003bc: 0f 84 0a 00 00 00               je 0x3cc
    # nextln: 0003c2: 44 8b 7c 24 50                  mov r15d, dword ptr [rsp + 0x50]
    # nextln: 0003c7: e9 03 00 00 00                  jmp 0x3cf
    # nextln: 0003cc: 44 8b 38                        mov r15d, dword ptr [rax]
    # nextln: 0003cf: 0f b6 44 24 58                  movzx eax, byte ptr [rsp + 0x58]
    # nextln: 0003d4: 85 c0                           test eax, eax
    # nextln: 0003d6: 0f 84 0a 00 00 00               je 0x3e6
    # nextln: 0003dc: 44 8b 74 24 50                  mov r14d, dword ptr [rsp + 0x50]
    # nextln: 0003e1: e9 0c 00 00 00                  jmp 0x3f2
    # nextln: 0003e6: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0003eb: 48 83 c0 20                     add rax, 0x20
    # nextln: 0003ef: 44 8b 30                        mov r14d, dword ptr [rax]
    # nextln: 0003f2: 0f b6 44 24 58                  movzx eax, byte ptr [rsp + 0x58]
    # nextln: 0003f7: 85 c0                           test eax, eax
    # nextln: 0003f9: 0f 84 0f 00 00 00               je 0x40e
    # nextln: 0003ff: 8b 44 24 50                     mov eax, dword ptr [rsp + 0x50]
    # nextln: 000403: 41 bc 03 00 00 00               mov r12d, 3
    # nextln: 000409: e9 12 00 00 00                  jmp 0x420
    # nextln: 00040e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.Int_No_Op::simple_func_int()" + 0
    # nextln: 000418: 41 bc 03 00 00 00               mov r12d, 3
    # nextln: 00041e: ff d0                           call rax
    # nextln: 000420: 0f b6 4c 24 58                  movzx ecx, byte ptr [rsp + 0x58]
    # nextln: 000425: 85 c9                           test ecx, ecx
    # nextln: 000427: 0f 84 09 00 00 00               je 0x436
    # nextln: 00042d: 8b 4c 24 50                     mov ecx, dword ptr [rsp + 0x50]
    # nextln: 000431: e9 2a 00 00 00                  jmp 0x460
    # nextln: 000436: 48 8b 0c 24                     mov rcx, qword ptr [rsp]
    # nextln: 00043a: 48 89 ca                        mov rdx, rcx
    # nextln: 00043d: 48 83 c2 20                     add rdx, 0x20
    # nextln: 000441: 8b 7c 24 54                     mov edi, dword ptr [rsp + 0x54]
    # nextln: 000445: 8b 32                           mov esi, dword ptr [rdx]
    # nextln: 000447: 48 63 d7                        movsxd rdx, edi
    # nextln: 00044a: 48 3b d6                        cmp rdx, rsi
    # nextln: 00044d: 0f 8d 23 01 00 00               jge 0x576
    # nextln: 000453: 48 c1 e2 02                     shl rdx, 2
    # nextln: 000457: 48 83 c2 28                     add rdx, 0x28
    # nextln: 00045b: 48 03 ca                        add rcx, rdx
    # nextln: 00045e: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000460: 0f b6 54 24 58                  movzx edx, byte ptr [rsp + 0x58]
    # nextln: 000465: 85 d2                           test edx, edx
    # nextln: 000467: 0f 84 09 00 00 00               je 0x476
    # nextln: 00046d: 8b 54 24 50                     mov edx, dword ptr [rsp + 0x50]
    # nextln: 000471: e9 2e 00 00 00                  jmp 0x4a4
    # nextln: 000476: 48 8b 14 24                     mov rdx, qword ptr [rsp]
    # nextln: 00047a: 48 89 d7                        mov rdi, rdx
    # nextln: 00047d: 48 83 c7 20                     add rdi, 0x20
    # nextln: 000481: 8b 74 24 54                     mov esi, dword ptr [rsp + 0x54]
    # nextln: 000485: 83 ee 01                        sub esi, 1
    # nextln: 000488: 44 8b 07                        mov r8d, dword ptr [rdi]
    # nextln: 00048b: 48 63 fe                        movsxd rdi, esi
    # nextln: 00048e: 49 3b f8                        cmp rdi, r8
    # nextln: 000491: 0f 8d d1 00 00 00               jge 0x568
    # nextln: 000497: 48 c1 e7 02                     shl rdi, 2
    # nextln: 00049b: 48 83 c7 28                     add rdi, 0x28
    # nextln: 00049f: 48 03 d7                        add rdx, rdi
    # nextln: 0004a2: 8b 12                           mov edx, dword ptr [rdx]
    # nextln: 0004a4: 0f b6 7c 24 58                  movzx edi, byte ptr [rsp + 0x58]
    # nextln: 0004a9: 85 ff                           test edi, edi
    # nextln: 0004ab: 0f 84 12 00 00 00               je 0x4c3
    # nextln: 0004b1: 49 b8 50 04 00 00 20 60 00 00   movabs r8, 0x602000000450
    # nextln: 0004bb: 45 8b 20                        mov r12d, dword ptr [r8]
    # nextln: 0004be: e9 0a 00 00 00                  jmp 0x4cd
    # nextln: 0004c3: 49 b8 50 04 00 00 20 60 00 00   movabs r8, 0x602000000450
    # nextln: 0004cd: 0f b6 7c 24 58                  movzx edi, byte ptr [rsp + 0x58]
    # nextln: 0004d2: 85 ff                           test edi, edi
    # nextln: 0004d4: 0f 84 08 00 00 00               je 0x4e2
    # nextln: 0004da: 41 8b 38                        mov edi, dword ptr [r8]
    # nextln: 0004dd: e9 05 00 00 00                  jmp 0x4e7
    # nextln: 0004e2: bf fb ff ff ff                  mov edi, 0xfffffffb
    # nextln: 0004e7: 0f b6 74 24 58                  movzx esi, byte ptr [rsp + 0x58]
    # nextln: 0004ec: 85 f6                           test esi, esi
    # nextln: 0004ee: 0f 84 08 00 00 00               je 0x4fc
    # nextln: 0004f4: 41 8b 30                        mov esi, dword ptr [r8]
    # nextln: 0004f7: e9 04 00 00 00                  jmp 0x500
    # nextln: 0004fc: 8b 74 24 50                     mov esi, dword ptr [rsp + 0x50]
    # nextln: 000500: 44 0f b6 4c 24 58               movzx r9d, byte ptr [rsp + 0x58]
    # nextln: 000506: 45 85 c9                        test r9d, r9d
    # nextln: 000509: 0f 84 08 00 00 00               je 0x517
    # nextln: 00050f: 45 8b 00                        mov r8d, dword ptr [r8]
    # nextln: 000512: e9 03 00 00 00                  jmp 0x51a
    # nextln: 000517: 45 8b 00                        mov r8d, dword ptr [r8]
    # nextln: 00051a: 83 c3 fb                        add ebx, -5
    # nextln: 00051d: 03 5c 24 10                     add ebx, dword ptr [rsp + 0x10]
    # nextln: 000521: 03 5c 24 18                     add ebx, dword ptr [rsp + 0x18]
    # nextln: 000525: 03 5c 24 20                     add ebx, dword ptr [rsp + 0x20]
    # nextln: 000529: 03 5c 24 28                     add ebx, dword ptr [rsp + 0x28]
    # nextln: 00052d: 03 5c 24 30                     add ebx, dword ptr [rsp + 0x30]
    # nextln: 000531: 03 5c 24 38                     add ebx, dword ptr [rsp + 0x38]
    # nextln: 000535: 03 5c 24 40                     add ebx, dword ptr [rsp + 0x40]
    # nextln: 000539: 03 5c 24 48                     add ebx, dword ptr [rsp + 0x48]
    # nextln: 00053d: 41 03 dd                        add ebx, r13d
    # nextln: 000540: 41 03 df                        add ebx, r15d
    # nextln: 000543: 41 03 de                        add ebx, r14d
    # nextln: 000546: 03 d8                           add ebx, eax
    # nextln: 000548: 03 d9                           add ebx, ecx
    # nextln: 00054a: 03 da                           add ebx, edx
    # nextln: 00054c: 41 03 dc                        add ebx, r12d
    # nextln: 00054f: 03 df                           add ebx, edi
    # nextln: 000551: 03 de                           add ebx, esi
    # nextln: 000553: 41 03 d8                        add ebx, r8d
    # nextln: 000556: 48 89 d8                        mov rax, rbx
    # nextln: 000559: 48 83 c4 68                     add rsp, 0x68
    # nextln: 00055d: 5b                              pop rbx
    # nextln: 00055e: 41 5c                           pop r12
    # nextln: 000560: 41 5d                           pop r13
    # nextln: 000562: 41 5e                           pop r14
    # nextln: 000564: 41 5f                           pop r15
    # nextln: 000566: 5d                              pop rbp
    # nextln: 000567: c3                              ret
    # nextln: 000568: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 000572: ff d0                           call rax
    # nextln: 000574: 0f 0b                           ud2
    # nextln: 000576: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 000580: ff d0                           call rax
    # nextln: 000582: 0f 0b                           ud2
    # nextln: 000584: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00058e: ff d0                           call rax
    # nextln: 000590: 0f 0b                           ud2
    # nextln: 000592: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00059c: ff d0                           call rax
    # nextln: 00059e: 0f 0b                           ud2
    # nextln: 0005a0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0005aa: ff d0                           call rax
    # nextln: 0005ac: 0f 0b                           ud2
    # nextln: 0005ae: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0005b8: ff d0                           call rax
    # nextln: 0005ba: 0f 0b                           ud2
    # nextln: 0005bc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0005c6: ff d0                           call rax
    # nextln: 0005c8: 0f 0b                           ud2
    # nextln: 0005ca: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0005d4: ff d0                           call rax
    # nextln: 0005d6: 0f 0b                           ud2
    # nextln: 0005d8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0005e2: ff d0                           call rax
    # nextln: 0005e4: 0f 0b                           ud2
    # nextln: 0005e6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0005f0: ff d0                           call rax
    # nextln: 0005f2: 0f 0b                           ud2

    %0:ctrl = entry
    %8:ptr = stackslot 4:4
    %12:ptr = stackslot 1:1
    %24:ptr = stackslot 4:4
    %28:ptr = stackslot 8:8
    %29:ptr = stackslot 8:8
    %3:ptr = iconst 105690555221072
    %4:i32 = iconst 4294967291
    %5:i32 = iconst 3
    %20:i64 = iconst 40
    %36:i32 = iconst 2
    %13:i32 = iconst 1
    %23:i64 = iconst 32
    %30:i64 = iconst 37
    %31:i64 = iconst 36
    %9:i32 = iconst 0
    %25:ctrl = store.4 %0, %9, %24
    %26:ctrl = store.4 %25, %9, %8
    %27:ctrl = store.1 %26, %9, %12
    %32:i32 = iconst 4294967283
    %33:ptr = iconst 105690555221136
    %34:ptr = iconst 105690555221104
    %35:i32 = iconst 7
    %586:i64 = iconst 48
    %41:i32 = iconst 4294967265
    %584:i64 = iconst 2
    %583:i64 = iconst 44
    %42:i32 = iconst 4294967269
    %581:i64 = iconst 1
    %43:i32 = iconst 21
    %580:i64 = iconst 0
    %579:i64 = iconst 3
    %587:i64 = iconst 60
    %46:ptr = iconst 106721347438592
    %588:i64 = iconst 42
    %589:i64 = iconst 41
    %590:i64 = iconst 51
    %56:ptr = iconst 106721347401152
    %57:ptr = iconst 106721347409792
    %58:ptr = iconst 0
    %59:ctrl = store.8 %27, %58, %29
    %60:ctrl = store.8 %59, %58, %28
    %63:ctrl = store.4 %60, %13, %24
    %64:ctrl = store.4 %63, %4, %8
    %65:ctrl = store.1 %64, %9, %12
    %66:ctrl, %67:ptr = call @gc_new %65, %57, %20
    %68:ctrl = call @"System.Void Tests.Int_No_Op::.ctor()" %66, %67
    %69:ctrl = store.8 %68, %67, %29
    %70:ctrl, %71:ptr = call @gc_new %69, %56, %590
    %72:ptr = ptroff %71, %23
    %73:ctrl = store.4 %70, %579, %72
    %74:ctrl, %75:ptr = call @gc_new %73, %56, %590
    %112:ptr = ptroff %75, %588
    %100:ptr = ptroff %75, %589
    %88:ptr = ptroff %75, %20
    %76:ptr = ptroff %75, %23
    %77:ctrl = store.4 %74, %579, %76
    %78:ctrl, %79:i64 = load.4 %77, %76
    %80:i64 = icmp slt %580, %79
    %81:ctrl, %82:ctrl = brcond %78, %80
    %89:ctrl = store.1 %81, %13, %88
    %90:ctrl, %91:i64 = load.4 %89, %76
    %92:i64 = icmp slt %581, %91
    %93:ctrl, %94:ctrl = brcond %90, %92
    %101:ctrl = store.1 %93, %13, %100
    %102:ctrl, %103:i64 = load.4 %101, %76
    %104:i64 = icmp slt %584, %103
    %105:ctrl, %106:ctrl = brcond %102, %104
    %113:ctrl = store.1 %105, %13, %112
    %114:ctrl, %115:ptr = call @gc_new %113, %46, %587
    %116:ptr = ptroff %115, %23
    %117:ctrl = store.4 %114, %579, %116
    %118:ctrl = store.8 %117, %115, %28
    %119:ctrl, %120:ptr = load.8 %118, %28
    %132:ptr = ptroff %120, %20
    %121:ptr = ptroff %120, %23
    %122:ctrl, %123:i64 = load.4 %119, %121
    %124:i64 = icmp slt %580, %123
    %125:ctrl, %126:ctrl = brcond %122, %124
    %133:ctrl = store.4 %125, %43, %132
    %134:ctrl, %135:ptr = load.8 %133, %28
    %147:ptr = ptroff %135, %583
    %136:ptr = ptroff %135, %23
    %137:ctrl, %138:i64 = load.4 %134, %136
    %139:i64 = icmp slt %581, %138
    %140:ctrl, %141:ctrl = brcond %137, %139
    %148:ctrl = store.4 %140, %42, %147
    %149:ctrl, %150:ptr = load.8 %148, %28
    %162:ptr = ptroff %150, %586
    %151:ptr = ptroff %150, %23
    %152:ctrl, %153:i64 = load.4 %149, %151
    %154:i64 = icmp slt %584, %153
    %155:ctrl, %156:ctrl = brcond %152, %154
    %163:ctrl = store.4 %155, %41, %162
    %164:ctrl = store.4 %163, %35, %3
    %165:ctrl = store.1 %164, %9, %34
    %166:ctrl = store.1 %165, %13, %33
    %167:ctrl, %168:ptr = load.8 %166, %29
    %169:ptr = ptroff %168, %23
    %170:ctrl = store.4 %167, %32, %169
    %171:ctrl, %172:ptr = load.8 %170, %29
    %173:ptr = ptroff %172, %31
    %174:ctrl = store.1 %171, %9, %173
    %175:ctrl, %176:ptr = load.8 %174, %29
    %177:ptr = ptroff %176, %30
    %178:ctrl = store.1 %175, %13, %177
    %179:ctrl, %180:i32 = load.1 %178, %12
    %181:ctrl, %182:ctrl = brcond %179, %180
    %187:ctrl, %188:phisel = region %182, %181
    %189:ctrl, %190:i32 = load.1 %187, %12
    %191:ctrl, %192:ctrl = brcond %189, %190
    %197:ctrl, %198:phisel = region %192, %191
    %199:ctrl, %200:i32 = load.1 %197, %12
    %201:ctrl, %202:ctrl = brcond %199, %200
    %207:ctrl, %208:i32 = load.4 %202, %8
    %209:ctrl, %210:phisel = region %207, %201
    %211:ctrl, %212:i32 = load.1 %209, %12
    %213:ctrl, %214:ctrl = brcond %211, %212
    %219:ctrl, %220:i32 = load.4 %214, %3
    %221:ctrl, %222:phisel = region %219, %213
    %223:ctrl, %224:i32 = load.1 %221, %12
    %225:ctrl, %226:ctrl = brcond %223, %224
    %231:ctrl, %232:ptr = load.8 %226, %29
    %233:ptr = ptroff %232, %23
    %234:ctrl, %235:i32 = load.4 %231, %233
    %236:ctrl, %237:phisel = region %234, %225
    %238:ctrl, %239:i32 = load.1 %236, %12
    %240:ctrl, %241:ctrl = brcond %238, %239
    %246:ctrl, %247:i32 = call @"System.Int32 Tests.Int_No_Op::simple_func_int()" %241
    %248:ctrl, %249:phisel = region %246, %240
    %250:ctrl, %251:i32 = load.1 %248, %12
    %252:ctrl, %253:ctrl = brcond %250, %251
    %258:ctrl, %259:ptr = load.8 %253, %28
    %260:ctrl, %261:i32 = load.4 %258, %24
    %262:i64 = iext %261
    %263:i64 = sfill 32 %262
    %591:i64 = shl %263, %36
    %265:i64 = iadd %591, %20
    %277:ptr = ptroff %259, %265
    %266:ptr = ptroff %259, %23
    %267:ctrl, %268:i64 = load.4 %260, %266
    %269:i64 = icmp slt %263, %268
    %270:ctrl, %271:ctrl = brcond %267, %269
    %278:ctrl, %279:i32 = load.4 %270, %277
    %280:ctrl, %281:phisel = region %278, %252
    %282:ctrl, %283:i32 = load.1 %280, %12
    %284:ctrl, %285:ctrl = brcond %282, %283
    %290:ctrl, %291:ptr = load.8 %285, %28
    %292:ctrl, %293:i32 = load.4 %290, %24
    %294:i32 = isub %293, %13
    %295:i64 = iext %294
    %296:i64 = sfill 32 %295
    %592:i64 = shl %296, %36
    %298:i64 = iadd %592, %20
    %310:ptr = ptroff %291, %298
    %299:ptr = ptroff %291, %23
    %300:ctrl, %301:i64 = load.4 %292, %299
    %302:i64 = icmp slt %296, %301
    %303:ctrl, %304:ctrl = brcond %300, %302
    %311:ctrl, %312:i32 = load.4 %303, %310
    %313:ctrl, %314:phisel = region %311, %284
    %315:ctrl, %316:i32 = load.1 %313, %12
    %317:ctrl, %318:ctrl = brcond %315, %316
    %321:ctrl, %322:i32 = load.4 %317, %8
    %325:ctrl, %326:phisel = region %318, %321
    %327:ctrl, %328:i32 = load.1 %325, %12
    %329:ctrl, %330:ctrl = brcond %327, %328
    %333:ctrl, %334:i32 = load.4 %329, %8
    %337:ctrl, %338:phisel = region %330, %333
    %339:ctrl, %340:i32 = load.1 %337, %12
    %341:ctrl, %342:ctrl = brcond %339, %340
    %345:ctrl, %346:i32 = load.4 %341, %8
    %349:ctrl, %350:i32 = load.4 %342, %8
    %351:ctrl, %352:phisel = region %349, %345
    %353:ctrl, %354:i32 = load.1 %351, %12
    %355:ctrl, %356:ctrl = brcond %353, %354
    %359:ctrl, %360:i32 = load.4 %355, %8
    %363:ctrl, %364:i32 = load.4 %356, %3
    %365:ctrl, %366:phisel = region %363, %359
    %367:ctrl, %368:i32 = load.1 %365, %12
    %369:ctrl, %370:ctrl = brcond %367, %368
    %373:ctrl, %374:i32 = load.4 %369, %8
    %377:ctrl, %378:ptr = load.8 %370, %29
    %379:ptr = ptroff %378, %23
    %380:ctrl, %381:i32 = load.4 %377, %379
    %382:ctrl, %383:phisel = region %380, %373
    %384:ctrl, %385:i32 = load.1 %382, %12
    %386:ctrl, %387:ctrl = brcond %384, %385
    %390:ctrl, %391:i32 = load.4 %386, %8
    %394:ctrl, %395:i32 = call @"System.Int32 Tests.Int_No_Op::simple_func_int()" %387
    %396:ctrl, %397:phisel = region %394, %390
    %398:ctrl, %399:i32 = load.1 %396, %12
    %400:ctrl, %401:ctrl = brcond %398, %399
    %404:ctrl, %405:i32 = load.4 %400, %8
    %408:ctrl, %409:ptr = load.8 %401, %28
    %410:ctrl, %411:i32 = load.4 %408, %24
    %412:i64 = iext %411
    %413:i64 = sfill 32 %412
    %593:i64 = shl %413, %36
    %415:i64 = iadd %593, %20
    %427:ptr = ptroff %409, %415
    %416:ptr = ptroff %409, %23
    %417:ctrl, %418:i64 = load.4 %410, %416
    %419:i64 = icmp slt %413, %418
    %420:ctrl, %421:ctrl = brcond %417, %419
    %428:ctrl, %429:i32 = load.4 %420, %427
    %430:ctrl, %431:phisel = region %428, %404
    %432:ctrl, %433:i32 = load.1 %430, %12
    %434:ctrl, %435:ctrl = brcond %432, %433
    %438:ctrl, %439:i32 = load.4 %434, %8
    %442:ctrl, %443:ptr = load.8 %435, %28
    %444:ctrl, %445:i32 = load.4 %442, %24
    %446:i32 = isub %445, %13
    %447:i64 = iext %446
    %448:i64 = sfill 32 %447
    %594:i64 = shl %448, %36
    %450:i64 = iadd %594, %20
    %462:ptr = ptroff %443, %450
    %451:ptr = ptroff %443, %23
    %452:ctrl, %453:i64 = load.4 %444, %451
    %454:i64 = icmp slt %448, %453
    %455:ctrl, %456:ctrl = brcond %452, %454
    %463:ctrl, %464:i32 = load.4 %455, %462
    %465:ctrl, %466:phisel = region %463, %438
    %467:ctrl, %468:i32 = load.1 %465, %12
    %469:ctrl, %470:ctrl = brcond %467, %468
    %473:ctrl, %474:i32 = load.4 %469, %3
    %477:ctrl, %478:phisel = region %470, %473
    %479:ctrl, %480:i32 = load.1 %477, %12
    %481:ctrl, %482:ctrl = brcond %479, %480
    %485:ctrl, %486:i32 = load.4 %481, %3
    %489:ctrl, %490:phisel = region %482, %485
    %491:ctrl, %492:i32 = load.1 %489, %12
    %493:ctrl, %494:ctrl = brcond %491, %492
    %497:ctrl, %498:i32 = load.4 %493, %3
    %501:ctrl, %502:i32 = load.4 %494, %8
    %503:ctrl, %504:phisel = region %501, %497
    %505:ctrl, %506:i32 = load.1 %503, %12
    %507:ctrl, %508:ctrl = brcond %505, %506
    %511:ctrl, %512:i32 = load.4 %507, %3
    %515:ctrl, %516:i32 = load.4 %508, %3
    %517:ctrl, %518:phisel = region %515, %511
    %519:i32 = phi %518, %516, %512
    %520:i32 = phi %504, %502, %498
    %521:i32 = phi %490, %4, %486
    %522:i32 = phi %478, %5, %474
    %523:i32 = phi %466, %464, %439
    %461:ctrl = call @throw_index_out_of_range_exception %456
    unreachable %461
    %524:i32 = phi %431, %429, %405
    %426:ctrl = call @throw_index_out_of_range_exception %421
    unreachable %426
    %525:i32 = phi %397, %395, %391
    %526:i32 = phi %383, %381, %374
    %527:i32 = phi %366, %364, %360
    %528:i32 = phi %352, %350, %346
    %529:i32 = phi %338, %4, %334
    %530:i32 = phi %326, %5, %322
    %531:i32 = phi %314, %312, %4
    %309:ctrl = call @throw_index_out_of_range_exception %304
    unreachable %309
    %532:i32 = phi %281, %279, %4
    %276:ctrl = call @throw_index_out_of_range_exception %271
    unreachable %276
    %533:i32 = phi %249, %247, %4
    %534:i32 = phi %237, %235, %4
    %535:i32 = phi %222, %220, %4
    %536:i32 = phi %210, %208, %4
    %539:i32 = phi %188, %5, %4
    %542:i32 = iadd %539, %4
    %544:i32 = iadd %542, %536
    %546:i32 = iadd %544, %535
    %548:i32 = iadd %546, %534
    %550:i32 = iadd %548, %533
    %552:i32 = iadd %550, %532
    %554:i32 = iadd %552, %531
    %556:i32 = iadd %554, %530
    %558:i32 = iadd %556, %529
    %560:i32 = iadd %558, %528
    %562:i32 = iadd %560, %527
    %564:i32 = iadd %562, %526
    %566:i32 = iadd %564, %525
    %568:i32 = iadd %566, %524
    %570:i32 = iadd %568, %523
    %572:i32 = iadd %570, %522
    %574:i32 = iadd %572, %521
    %576:i32 = iadd %574, %520
    %578:i32 = iadd %576, %519
    return %517, %578
    %161:ctrl = call @throw_index_out_of_range_exception %156
    unreachable %161
    %146:ctrl = call @throw_index_out_of_range_exception %141
    unreachable %146
    %131:ctrl = call @throw_index_out_of_range_exception %126
    unreachable %131
    %111:ctrl = call @throw_index_out_of_range_exception %106
    unreachable %111
    %99:ctrl = call @throw_index_out_of_range_exception %94
    unreachable %99
    %87:ctrl = call @throw_index_out_of_range_exception %82
    unreachable %87
}
