# run: isel

func @many_params:i64(i64, i64, i64, i64, i64, i64, i64, i64) {
    # check: function `many_params`:
    # nextln:       block0[%13:gpr($$rdi), %14:gpr($$rsi), %12:gpr($$rdx), %10:gpr($$rcx), %8:gpr($$r8), %6:gpr($$r9)]:
    # nextln: 0000:      %2:gpr(reg)[late] = MovRRbp { op_size: S64, offset: 24 }
    # nextln: 0001:      %4:gpr(reg)[late] = MovRRbp { op_size: S64, offset: 16 }
    # nextln: 0002:      %11:gpr(reg)[late] = AddRR(S64) %13(soft-tied:0)[early], %14(soft-tied:0)[early]
    # nextln: 0003:      %9:gpr(reg)[late] = AddRR(S64) %11(soft-tied:0)[early], %12(soft-tied:0)[early]
    # nextln: 0004:      %7:gpr(reg)[late] = AddRR(S64) %9(soft-tied:0)[early], %10(soft-tied:0)[early]
    # nextln: 0005:      %5:gpr(reg)[late] = AddRR(S64) %7(soft-tied:0)[early], %8(soft-tied:0)[early]
    # nextln: 0006:      %3:gpr(reg)[late] = AddRR(S64) %5(soft-tied:0)[early], %6(soft-tied:0)[early]
    # nextln: 0007:      %1:gpr(reg)[late] = AddRR(S64) %3(soft-tied:0)[early], %4(soft-tied:0)[early]
    # nextln: 0008:      %0:gpr(reg)[late] = AddRR(S64) %1(soft-tied:0)[early], %2(soft-tied:0)[early]
    # nextln: 0009:      Ret %0($$rax)[early]

    %c:ctrl, %1:i64, %2:i64, %3:i64, %4:i64, %5:i64, %6:i64, %7:i64, %8:i64 = entry
    %val:i64 = iadd %1, %2
    %val2:i64 = iadd %val, %3
    %val3:i64 = iadd %val2, %4
    %val4:i64 = iadd %val3, %5
    %val5:i64 = iadd %val4, %6
    %val6:i64 = iadd %val5, %7
    %val7:i64 = iadd %val6, %8
    return %c, %val7
}

func @stack_param32:i64(i64, i64, i64, i64, i64, i64, i32, i64) {
    # check: function `stack_param32`:
    # nextln:       block0[%14:gpr($$rdi), %15:gpr($$rsi), %13:gpr($$rdx), %11:gpr($$rcx), %9:gpr($$r8), %7:gpr($$r9)]:
    # nextln: 0000:      %2:gpr(reg)[late] = MovRRbp { op_size: S64, offset: 24 }
    # nextln: 0001:      %5:gpr(reg)[late] = MovRRbp { op_size: S32, offset: 16 }
    # nextln: 0002:      %12:gpr(reg)[late] = AddRR(S64) %14(soft-tied:0)[early], %15(soft-tied:0)[early]
    # nextln: 0003:      %10:gpr(reg)[late] = AddRR(S64) %12(soft-tied:0)[early], %13(soft-tied:0)[early]
    # nextln: 0004:      %8:gpr(reg)[late] = AddRR(S64) %10(soft-tied:0)[early], %11(soft-tied:0)[early]
    # nextln: 0005:      %6:gpr(reg)[late] = AddRR(S64) %8(soft-tied:0)[early], %9(soft-tied:0)[early]
    # nextln: 0006:      %3:gpr(reg)[late] = AddRR(S64) %6(soft-tied:0)[early], %7(soft-tied:0)[early]
    # nextln: 0007:      %1:gpr(reg)[late] = AddRR(S64) %3(soft-tied:0)[early], %5(soft-tied:0)[early]
    # nextln: 0008:      %0:gpr(reg)[late] = AddRR(S64) %1(soft-tied:0)[early], %2(soft-tied:0)[early]
    # nextln: 0009:      Ret %0($$rax)[early]

    %c:ctrl, %1:i64, %2:i64, %3:i64, %4:i64, %5:i64, %6:i64, %7:i32, %8:i64 = entry
    %9:i64 = iext %7
    %val:i64 = iadd %1, %2
    %val2:i64 = iadd %val, %3
    %val3:i64 = iadd %val2, %4
    %val4:i64 = iadd %val3, %5
    %val5:i64 = iadd %val4, %6
    %val6:i64 = iadd %val5, %9
    %val7:i64 = iadd %val6, %8
    return %c, %val7
}

func @unused_param:i64(ptr, i64, i64) {
    # check: function `unused_param`:
    # nextln:       block0[%1:gpr($$rsi), %2:gpr($$rdx)]:
    # nextln: 0000:      %0:gpr(reg)[late] = AddRR(S64) %1(soft-tied:0)[early], %2(soft-tied:0)[early]
    # nextln: 0001:      Ret %0($$rax)[early]

    %c:ctrl, %p:ptr, %a:i64, %b:i64 = entry
    %val:i64 = iadd %a, %b
    return %c, %val
}
