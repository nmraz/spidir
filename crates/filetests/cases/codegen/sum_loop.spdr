# run: codegen

func @sum_to_n:i32(i32) {
    # check: function `sum_to_n`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov eax, 0
    # nextln: 0x0009: cmp edi, eax
    # nextln: 0x000b: je 0x16
    # nextln: 0x0011: jmp 0x1b
    # nextln: 0x0016: jmp 0x4c
    # nextln: 0x001b: mov ecx, 1
    # nextln: 0x0020: mov rdx, rax
    # nextln: 0x0023: jmp 0x28
    # nextln: 0x0028: mov rsi, rdi
    # nextln: 0x002b: sub esi, ecx
    # nextln: 0x002d: add edx, edi
    # nextln: 0x002f: cmp esi, eax
    # nextln: 0x0031: je 0x44
    # nextln: 0x0037: jmp 0x3c
    # nextln: 0x003c: mov rdi, rsi
    # nextln: 0x003f: jmp 0x28
    # nextln: 0x0044: mov rax, rdx
    # nextln: 0x0047: jmp 0x4c
    # nextln: 0x004c: pop rbp
    # nextln: 0x004d: ret

    %0:ctrl, %1:i32 = entry
    %10:i32 = iconst 1
    %2:i32 = iconst 0
    %3:i32 = icmp eq %1, %2
    %4:ctrl, %5:ctrl = brcond %0, %3
    %13:i32 = icmp eq %11, %2
    %14:ctrl, %15:ctrl = brcond %6, %13
    %16:ctrl, %17:phisel = region %4, %14
    %6:ctrl, %7:phisel = region %5, %15
    %8:i32 = phi %7, %1, %11
    %11:i32 = isub %8, %10
    %9:i32 = phi %7, %2, %12
    %12:i32 = iadd %9, %8
    %18:i32 = phi %17, %2, %12
    return %16, %18
}


func @sum_to_n_with_stack:i32(i32) {
    # check: function `sum_to_n_with_stack`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: sub rsp, 0x10
    # nextln: 0x0008: jmp 0xd
    # nextln: 0x000d: mov eax, 0
    # nextln: 0x0012: mov dword ptr [rsp], edi
    # nextln: 0x0015: mov dword ptr [rsp + 4], eax
    # nextln: 0x0019: mov ecx, 1
    # nextln: 0x001e: jmp 0x23
    # nextln: 0x0023: mov edx, dword ptr [rsp]
    # nextln: 0x0026: cmp edx, eax
    # nextln: 0x0028: je 0x4d
    # nextln: 0x002e: jmp 0x33
    # nextln: 0x0033: mov esi, dword ptr [rsp]
    # nextln: 0x0036: mov rdx, rsi
    # nextln: 0x0039: sub edx, ecx
    # nextln: 0x003b: mov edi, dword ptr [rsp + 4]
    # nextln: 0x003f: add edi, esi
    # nextln: 0x0041: mov dword ptr [rsp], edx
    # nextln: 0x0044: mov dword ptr [rsp + 4], edi
    # nextln: 0x0048: jmp 0x23
    # nextln: 0x004d: mov eax, dword ptr [rsp + 4]
    # nextln: 0x0051: add rsp, 0x10
    # nextln: 0x0055: pop rbp
    # nextln: 0x0056: ret

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %5:ptr = stackslot 4:4
    %4:ptr = stackslot 4:4
    %6:ctrl = store.4 %2, %1, %4
    %24:i32 = iconst 1
    %7:i32 = iconst 0
    %8:ctrl = store.4 %6, %7, %5
    %13:i32 = icmp eq %12, %7
    %18:ctrl, %19:ctrl = brcond %11, %13
    %14:ctrl, %15:phisel = region %18
    %29:ctrl, %30:i32 = load.4 %14, %5
    return %29, %30
    %16:ctrl, %17:phisel = region %19
    %20:ctrl, %21:i32 = load.4 %16, %4
    %22:ctrl, %23:i32 = load.4 %20, %5
    %25:i32 = isub %21, %24
    %27:ctrl = store.4 %22, %25, %4
    %26:i32 = iadd %23, %21
    %28:ctrl = store.4 %27, %26, %5
    %9:ctrl, %10:phisel = region %8, %28
    %11:ctrl, %12:i32 = load.4 %9, %4
}
