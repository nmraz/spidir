# run: codegen

extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)":i32(ptr, i32)
extfunc @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)":i32(i64, i32)

func @"System.Boolean Tests.BitTest::Run()":i32() {
    # check: function `System.Boolean Tests.BitTest::Run()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 81 ec c8 00 00 00            sub rsp, 0xc8
    # nextln: 000014: 33 c9                           xor ecx, ecx
    # nextln: 000016: 48 8d 94 24 ae 00 00 00         lea rdx, [rsp + 0xae]
    # nextln: 00001e: 4c 8d 8c 24 a8 00 00 00         lea r9, [rsp + 0xa8]
    # nextln: 000026: 33 c0                           xor eax, eax
    # nextln: 000028: 48 89 e7                        mov rdi, rsp
    # nextln: 00002b: 4c 8d 5c 24 08                  lea r11, [rsp + 8]
    # nextln: 000030: 48 8d b4 24 a0 00 00 00         lea rsi, [rsp + 0xa0]
    # nextln: 000038: 4c 8d 84 24 aa 00 00 00         lea r8, [rsp + 0xaa]
    # nextln: 000040: 4c 8d 94 24 a4 00 00 00         lea r10, [rsp + 0xa4]
    # nextln: 000048: 4c 8d a4 24 ac 00 00 00         lea r12, [rsp + 0xac]
    # nextln: 000050: 48 8d 9c 24 af 00 00 00         lea rbx, [rsp + 0xaf]
    # nextln: 000058: 88 84 24 af 00 00 00            mov byte ptr [rsp + 0xaf], al
    # nextln: 00005f: 88 84 24 ae 00 00 00            mov byte ptr [rsp + 0xae], al
    # nextln: 000066: 4c 8d ac 24 b0 00 00 00         lea r13, [rsp + 0xb0]
    # nextln: 00006e: 88 84 24 b0 00 00 00            mov byte ptr [rsp + 0xb0], al
    # nextln: 000075: 66 89 84 24 ac 00 00 00         mov word ptr [rsp + 0xac], ax
    # nextln: 00007d: 66 89 84 24 aa 00 00 00         mov word ptr [rsp + 0xaa], ax
    # nextln: 000085: 66 89 84 24 a8 00 00 00         mov word ptr [rsp + 0xa8], ax
    # nextln: 00008d: 89 84 24 a4 00 00 00            mov dword ptr [rsp + 0xa4], eax
    # nextln: 000094: 89 84 24 a0 00 00 00            mov dword ptr [rsp + 0xa0], eax
    # nextln: 00009b: 48 89 4c 24 08                  mov qword ptr [rsp + 8], rcx
    # nextln: 0000a0: 48 89 0c 24                     mov qword ptr [rsp], rcx
    # nextln: 0000a4: b9 07 00 00 00                  mov ecx, 7
    # nextln: 0000a9: 48 89 8c 24 98 00 00 00         mov qword ptr [rsp + 0x98], rcx
    # nextln: 0000b1: b9 08 00 00 00                  mov ecx, 8
    # nextln: 0000b6: 4d 89 e6                        mov r14, r12
    # nextln: 0000b9: 49 89 fc                        mov r12, rdi
    # nextln: 0000bc: 48 89 f7                        mov rdi, rsi
    # nextln: 0000bf: 4c 89 f6                        mov rsi, r14
    # nextln: 0000c2: 41 be 01 00 00 00               mov r14d, 1
    # nextln: 0000c8: 48 89 94 24 88 00 00 00         mov qword ptr [rsp + 0x88], rdx
    # nextln: 0000d0: 4c 89 c2                        mov rdx, r8
    # nextln: 0000d3: 4c 89 4c 24 58                  mov qword ptr [rsp + 0x58], r9
    # nextln: 0000d8: 4c 89 54 24 48                  mov qword ptr [rsp + 0x48], r10
    # nextln: 0000dd: 48 89 7c 24 40                  mov qword ptr [rsp + 0x40], rdi
    # nextln: 0000e2: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 0000e7: 4c 89 e7                        mov rdi, r12
    # nextln: 0000ea: 49 89 dc                        mov r12, rbx
    # nextln: 0000ed: 41 bb 20 00 00 00               mov r11d, 0x20
    # nextln: 0000f3: 41 bf 0f 00 00 00               mov r15d, 0xf
    # nextln: 0000f9: 48 89 74 24 70                  mov qword ptr [rsp + 0x70], rsi
    # nextln: 0000fe: 48 89 54 24 60                  mov qword ptr [rsp + 0x60], rdx
    # nextln: 000103: ba 10 00 00 00                  mov edx, 0x10
    # nextln: 000108: be 03 00 00 00                  mov esi, 3
    # nextln: 00010d: 48 89 7c 24 20                  mov qword ptr [rsp + 0x20], rdi
    # nextln: 000112: 41 b8 40 00 00 00               mov r8d, 0x40
    # nextln: 000118: bf 02 00 00 00                  mov edi, 2
    # nextln: 00011d: 4d 63 ce                        movsxd r9, r14d
    # nextln: 000120: 4c 63 d7                        movsxd r10, edi
    # nextln: 000123: bb 80 ff ff ff                  mov ebx, 0xffffff80
    # nextln: 000128: 88 9c 24 af 00 00 00            mov byte ptr [rsp + 0xaf], bl
    # nextln: 00012f: bb 00 80 ff ff                  mov ebx, 0xffff8000
    # nextln: 000134: 44 88 b4 24 ae 00 00 00         mov byte ptr [rsp + 0xae], r14b
    # nextln: 00013c: 40 88 bc 24 b0 00 00 00         mov byte ptr [rsp + 0xb0], dil
    # nextln: 000144: 66 89 9c 24 ac 00 00 00         mov word ptr [rsp + 0xac], bx
    # nextln: 00014c: 66 44 89 b4 24 aa 00 00 00      mov word ptr [rsp + 0xaa], r14w
    # nextln: 000155: 66 89 bc 24 a8 00 00 00         mov word ptr [rsp + 0xa8], di
    # nextln: 00015d: 44 89 b4 24 a4 00 00 00         mov dword ptr [rsp + 0xa4], r14d
    # nextln: 000165: 89 bc 24 a0 00 00 00            mov dword ptr [rsp + 0xa0], edi
    # nextln: 00016c: 4c 89 4c 24 08                  mov qword ptr [rsp + 8], r9
    # nextln: 000171: 4c 89 14 24                     mov qword ptr [rsp], r10
    # nextln: 000175: 0f b6 bc 24 af 00 00 00         movzx edi, byte ptr [rsp + 0xaf]
    # nextln: 00017d: 40 0f be ff                     movsx edi, dil
    # nextln: 000181: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00018b: 48 8b 9c 24 98 00 00 00         mov rbx, qword ptr [rsp + 0x98]
    # nextln: 000193: 48 89 8c 24 90 00 00 00         mov qword ptr [rsp + 0x90], rcx
    # nextln: 00019b: 4c 89 ac 24 80 00 00 00         mov qword ptr [rsp + 0x80], r13
    # nextln: 0001a3: 4c 89 7c 24 78                  mov qword ptr [rsp + 0x78], r15
    # nextln: 0001a8: 4d 89 e7                        mov r15, r12
    # nextln: 0001ab: 4c 8b a4 24 88 00 00 00         mov r12, qword ptr [rsp + 0x88]
    # nextln: 0001b3: 48 89 54 24 68                  mov qword ptr [rsp + 0x68], rdx
    # nextln: 0001b8: 48 89 74 24 50                  mov qword ptr [rsp + 0x50], rsi
    # nextln: 0001bd: 4c 89 5c 24 38                  mov qword ptr [rsp + 0x38], r11
    # nextln: 0001c2: 4c 89 44 24 30                  mov qword ptr [rsp + 0x30], r8
    # nextln: 0001c7: 49 89 c5                        mov r13, rax
    # nextln: 0001ca: 48 89 de                        mov rsi, rbx
    # nextln: 0001cd: 41 ff d1                        call r9
    # nextln: 0001d0: 4c 89 f6                        mov rsi, r14
    # nextln: 0001d3: 4c 89 e1                        mov rcx, r12
    # nextln: 0001d6: 4c 89 fa                        mov rdx, r15
    # nextln: 0001d9: 4d 89 e9                        mov r9, r13
    # nextln: 0001dc: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 0001e1: 4c 8b 94 24 90 00 00 00         mov r10, qword ptr [rsp + 0x90]
    # nextln: 0001e9: 49 89 f5                        mov r13, rsi
    # nextln: 0001ec: 44 23 e8                        and r13d, eax
    # nextln: 0001ef: 0f b6 84 24 af 00 00 00         movzx eax, byte ptr [rsp + 0xaf]
    # nextln: 0001f7: 0f be f8                        movsx edi, al
    # nextln: 0001fa: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000204: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 000209: 49 89 de                        mov r14, rbx
    # nextln: 00020c: 4c 89 4c 24 10                  mov qword ptr [rsp + 0x10], r9
    # nextln: 000211: 4c 89 d3                        mov rbx, r10
    # nextln: 000214: 48 89 de                        mov rsi, rbx
    # nextln: 000217: ff d0                           call rax
    # nextln: 000219: 44 23 e8                        and r13d, eax
    # nextln: 00021c: 4c 89 f1                        mov rcx, r14
    # nextln: 00021f: 49 89 d8                        mov r8, rbx
    # nextln: 000222: 48 8b 5c 24 10                  mov rbx, qword ptr [rsp + 0x10]
    # nextln: 000227: 4c 89 e0                        mov rax, r12
    # nextln: 00022a: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 00022f: 4c 89 fa                        mov rdx, r15
    # nextln: 000232: 0f b6 bc 24 ae 00 00 00         movzx edi, byte ptr [rsp + 0xae]
    # nextln: 00023a: 40 0f be ff                     movsx edi, dil
    # nextln: 00023e: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000248: 49 89 d6                        mov r14, rdx
    # nextln: 00024b: 49 89 f7                        mov r15, rsi
    # nextln: 00024e: 49 89 cc                        mov r12, rcx
    # nextln: 000251: 48 89 de                        mov rsi, rbx
    # nextln: 000254: 41 ff d1                        call r9
    # nextln: 000257: 44 23 e8                        and r13d, eax
    # nextln: 00025a: 48 8b 84 24 90 00 00 00         mov rax, qword ptr [rsp + 0x90]
    # nextln: 000262: 48 8b 8c 24 88 00 00 00         mov rcx, qword ptr [rsp + 0x88]
    # nextln: 00026a: 0f b6 94 24 ae 00 00 00         movzx edx, byte ptr [rsp + 0xae]
    # nextln: 000272: 0f be fa                        movsx edi, dl
    # nextln: 000275: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00027f: 48 89 c3                        mov rbx, rax
    # nextln: 000282: 48 89 de                        mov rsi, rbx
    # nextln: 000285: ff d2                           call rdx
    # nextln: 000287: 33 c9                           xor ecx, ecx
    # nextln: 000289: 85 c0                           test eax, eax
    # nextln: 00028b: 0f 94 c1                        sete cl
    # nextln: 00028e: 44 23 e9                        and r13d, ecx
    # nextln: 000291: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000296: 48 8b 8c 24 88 00 00 00         mov rcx, qword ptr [rsp + 0x88]
    # nextln: 00029e: 0f b6 94 24 ae 00 00 00         movzx edx, byte ptr [rsp + 0xae]
    # nextln: 0002a6: 0f be fa                        movsx edi, dl
    # nextln: 0002a9: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0002b3: 49 89 c4                        mov r12, rax
    # nextln: 0002b6: 48 89 cb                        mov rbx, rcx
    # nextln: 0002b9: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0002be: ff d2                           call rdx
    # nextln: 0002c0: 44 23 e8                        and r13d, eax
    # nextln: 0002c3: 48 8b 84 24 90 00 00 00         mov rax, qword ptr [rsp + 0x90]
    # nextln: 0002cb: 4c 89 f9                        mov rcx, r15
    # nextln: 0002ce: 4d 89 f7                        mov r15, r14
    # nextln: 0002d1: 4c 8b b4 24 98 00 00 00         mov r14, qword ptr [rsp + 0x98]
    # nextln: 0002d9: 0f b6 94 24 b0 00 00 00         movzx edx, byte ptr [rsp + 0xb0]
    # nextln: 0002e1: 0f be fa                        movsx edi, dl
    # nextln: 0002e4: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0002ee: 4c 89 e6                        mov rsi, r12
    # nextln: 0002f1: ff d2                           call rdx
    # nextln: 0002f3: 33 c9                           xor ecx, ecx
    # nextln: 0002f5: 85 c0                           test eax, eax
    # nextln: 0002f7: 0f 94 c1                        sete cl
    # nextln: 0002fa: 44 23 e9                        and r13d, ecx
    # nextln: 0002fd: 4c 89 e1                        mov rcx, r12
    # nextln: 000300: 4c 8b a4 24 90 00 00 00         mov r12, qword ptr [rsp + 0x90]
    # nextln: 000308: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 00030d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000317: 4c 89 f6                        mov rsi, r14
    # nextln: 00031a: 4c 89 ff                        mov rdi, r15
    # nextln: 00031d: ff d0                           call rax
    # nextln: 00031f: 4c 89 ff                        mov rdi, r15
    # nextln: 000322: 4c 8b 7c 24 50                  mov r15, qword ptr [rsp + 0x50]
    # nextln: 000327: 48 8b b4 24 80 00 00 00         mov rsi, qword ptr [rsp + 0x80]
    # nextln: 00032f: 4c 8b 74 24 68                  mov r14, qword ptr [rsp + 0x68]
    # nextln: 000334: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 000339: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 00033e: 44 23 e8                        and r13d, eax
    # nextln: 000341: 48 89 f0                        mov rax, rsi
    # nextln: 000344: 48 89 d6                        mov rsi, rdx
    # nextln: 000347: 48 89 c2                        mov rdx, rax
    # nextln: 00034a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000354: 4c 89 e6                        mov rsi, r12
    # nextln: 000357: ff d0                           call rax
    # nextln: 000359: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 00035e: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000363: 44 23 e8                        and r13d, eax
    # nextln: 000366: 4c 89 fe                        mov rsi, r15
    # nextln: 000369: 4c 89 f7                        mov rdi, r14
    # nextln: 00036c: 4c 8b b4 24 80 00 00 00         mov r14, qword ptr [rsp + 0x80]
    # nextln: 000374: 4c 8b 7c 24 10                  mov r15, qword ptr [rsp + 0x10]
    # nextln: 000379: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000383: 4c 89 fe                        mov rsi, r15
    # nextln: 000386: 48 89 df                        mov rdi, rbx
    # nextln: 000389: ff d0                           call rax
    # nextln: 00038b: 44 23 e8                        and r13d, eax
    # nextln: 00038e: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 000393: 48 8b 44 24 50                  mov rax, qword ptr [rsp + 0x50]
    # nextln: 000398: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0003a2: 4c 89 e6                        mov rsi, r12
    # nextln: 0003a5: 48 89 df                        mov rdi, rbx
    # nextln: 0003a8: ff d1                           call rcx
    # nextln: 0003aa: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 0003af: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0003b4: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 0003b9: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 0003be: 4d 89 f8                        mov r8, r15
    # nextln: 0003c1: 45 33 c9                        xor r9d, r9d
    # nextln: 0003c4: 85 c0                           test eax, eax
    # nextln: 0003c6: 41 0f 94 c1                     sete r9b
    # nextln: 0003ca: 45 23 e9                        and r13d, r9d
    # nextln: 0003cd: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0003d7: 49 89 fc                        mov r12, rdi
    # nextln: 0003da: 48 89 df                        mov rdi, rbx
    # nextln: 0003dd: 4c 89 e6                        mov rsi, r12
    # nextln: 0003e0: ff d0                           call rax
    # nextln: 0003e2: 4c 8b 44 24 60                  mov r8, qword ptr [rsp + 0x60]
    # nextln: 0003e7: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 0003ec: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0003f1: 48 8b 4c 24 78                  mov rcx, qword ptr [rsp + 0x78]
    # nextln: 0003f6: 48 8b 7c 24 68                  mov rdi, qword ptr [rsp + 0x68]
    # nextln: 0003fb: 4c 89 fb                        mov rbx, r15
    # nextln: 0003fe: 44 23 e8                        and r13d, eax
    # nextln: 000401: 4d 89 e7                        mov r15, r12
    # nextln: 000404: 4d 89 c4                        mov r12, r8
    # nextln: 000407: 48 89 f8                        mov rax, rdi
    # nextln: 00040a: 48 89 f7                        mov rdi, rsi
    # nextln: 00040d: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000417: 48 89 de                        mov rsi, rbx
    # nextln: 00041a: 4c 89 f7                        mov rdi, r14
    # nextln: 00041d: 41 ff d0                        call r8
    # nextln: 000420: 48 8b 4c 24 78                  mov rcx, qword ptr [rsp + 0x78]
    # nextln: 000425: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 00042a: 33 ff                           xor edi, edi
    # nextln: 00042c: 85 c0                           test eax, eax
    # nextln: 00042e: 40 0f 94 c7                     sete dil
    # nextln: 000432: 44 23 ef                        and r13d, edi
    # nextln: 000435: 48 89 d8                        mov rax, rbx
    # nextln: 000438: 48 89 cb                        mov rbx, rcx
    # nextln: 00043b: 48 8b 4c 24 68                  mov rcx, qword ptr [rsp + 0x68]
    # nextln: 000440: 0f b7 bc 24 ac 00 00 00         movzx edi, word ptr [rsp + 0xac]
    # nextln: 000448: 0f bf ff                        movsx edi, di
    # nextln: 00044b: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000455: 49 89 d7                        mov r15, rdx
    # nextln: 000458: 4d 89 e6                        mov r14, r12
    # nextln: 00045b: 49 89 cc                        mov r12, rcx
    # nextln: 00045e: 48 89 de                        mov rsi, rbx
    # nextln: 000461: 41 ff d0                        call r8
    # nextln: 000464: 44 23 e8                        and r13d, eax
    # nextln: 000467: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 00046c: 4c 89 f0                        mov rax, r14
    # nextln: 00046f: 4c 89 fe                        mov rsi, r15
    # nextln: 000472: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 000477: 0f b7 bc 24 ac 00 00 00         movzx edi, word ptr [rsp + 0xac]
    # nextln: 00047f: 0f bf ff                        movsx edi, di
    # nextln: 000482: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 00048c: 49 89 de                        mov r14, rbx
    # nextln: 00048f: 48 89 c3                        mov rbx, rax
    # nextln: 000492: 4c 89 e6                        mov rsi, r12
    # nextln: 000495: 41 ff d0                        call r8
    # nextln: 000498: 44 23 e8                        and r13d, eax
    # nextln: 00049b: 4c 89 f0                        mov rax, r14
    # nextln: 00049e: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0004a3: 4c 89 fa                        mov rdx, r15
    # nextln: 0004a6: 48 89 de                        mov rsi, rbx
    # nextln: 0004a9: 48 8b 5c 24 10                  mov rbx, qword ptr [rsp + 0x10]
    # nextln: 0004ae: 0f b7 bc 24 aa 00 00 00         movzx edi, word ptr [rsp + 0xaa]
    # nextln: 0004b6: 0f bf ff                        movsx edi, di
    # nextln: 0004b9: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0004c3: 48 89 de                        mov rsi, rbx
    # nextln: 0004c6: 41 ff d0                        call r8
    # nextln: 0004c9: 44 23 e8                        and r13d, eax
    # nextln: 0004cc: 48 8b 4c 24 60                  mov rcx, qword ptr [rsp + 0x60]
    # nextln: 0004d1: 48 89 d8                        mov rax, rbx
    # nextln: 0004d4: 48 8b 5c 24 38                  mov rbx, qword ptr [rsp + 0x38]
    # nextln: 0004d9: 0f b7 94 24 aa 00 00 00         movzx edx, word ptr [rsp + 0xaa]
    # nextln: 0004e1: 0f bf fa                        movsx edi, dx
    # nextln: 0004e4: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0004ee: 4c 89 e6                        mov rsi, r12
    # nextln: 0004f1: ff d2                           call rdx
    # nextln: 0004f3: 33 c9                           xor ecx, ecx
    # nextln: 0004f5: 85 c0                           test eax, eax
    # nextln: 0004f7: 0f 94 c1                        sete cl
    # nextln: 0004fa: 44 23 e9                        and r13d, ecx
    # nextln: 0004fd: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000502: 48 8b 4c 24 60                  mov rcx, qword ptr [rsp + 0x60]
    # nextln: 000507: 0f b7 94 24 aa 00 00 00         movzx edx, word ptr [rsp + 0xaa]
    # nextln: 00050f: 0f bf fa                        movsx edi, dx
    # nextln: 000512: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 00051c: 4d 89 fe                        mov r14, r15
    # nextln: 00051f: 49 89 cf                        mov r15, rcx
    # nextln: 000522: 48 89 de                        mov rsi, rbx
    # nextln: 000525: ff d2                           call rdx
    # nextln: 000527: 44 23 e8                        and r13d, eax
    # nextln: 00052a: 4c 89 f1                        mov rcx, r14
    # nextln: 00052d: 4c 8b 74 24 78                  mov r14, qword ptr [rsp + 0x78]
    # nextln: 000532: 48 89 d8                        mov rax, rbx
    # nextln: 000535: 48 8b 5c 24 10                  mov rbx, qword ptr [rsp + 0x10]
    # nextln: 00053a: 0f b7 94 24 a8 00 00 00         movzx edx, word ptr [rsp + 0xa8]
    # nextln: 000542: 0f bf fa                        movsx edi, dx
    # nextln: 000545: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 00054f: 48 89 de                        mov rsi, rbx
    # nextln: 000552: ff d2                           call rdx
    # nextln: 000554: 33 c9                           xor ecx, ecx
    # nextln: 000556: 85 c0                           test eax, eax
    # nextln: 000558: 0f 94 c1                        sete cl
    # nextln: 00055b: 44 23 e9                        and r13d, ecx
    # nextln: 00055e: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 000563: 48 8b 44 24 38                  mov rax, qword ptr [rsp + 0x38]
    # nextln: 000568: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000572: 4c 89 f6                        mov rsi, r14
    # nextln: 000575: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 00057a: ff d2                           call rdx
    # nextln: 00057c: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 000581: 4c 8b 74 24 18                  mov r14, qword ptr [rsp + 0x18]
    # nextln: 000586: 44 23 e8                        and r13d, eax
    # nextln: 000589: 48 89 c8                        mov rax, rcx
    # nextln: 00058c: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 000591: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 00059b: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 0005a0: 4c 89 e6                        mov rsi, r12
    # nextln: 0005a3: ff d1                           call rcx
    # nextln: 0005a5: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0005aa: 44 23 e8                        and r13d, eax
    # nextln: 0005ad: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0005b2: 48 8b 44 24 50                  mov rax, qword ptr [rsp + 0x50]
    # nextln: 0005b7: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0005c1: 4c 89 ff                        mov rdi, r15
    # nextln: 0005c4: 48 89 de                        mov rsi, rbx
    # nextln: 0005c7: 41 ff d0                        call r8
    # nextln: 0005ca: 44 23 e8                        and r13d, eax
    # nextln: 0005cd: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 0005d2: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0005d7: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0005e1: 4c 89 e6                        mov rsi, r12
    # nextln: 0005e4: 4c 89 ff                        mov rdi, r15
    # nextln: 0005e7: ff d0                           call rax
    # nextln: 0005e9: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0005ee: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0005f3: 4c 8b 64 24 58                  mov r12, qword ptr [rsp + 0x58]
    # nextln: 0005f8: 48 8b 7c 24 50                  mov rdi, qword ptr [rsp + 0x50]
    # nextln: 0005fd: 33 f6                           xor esi, esi
    # nextln: 0005ff: 85 c0                           test eax, eax
    # nextln: 000601: 40 0f 94 c6                     sete sil
    # nextln: 000605: 44 23 ee                        and r13d, esi
    # nextln: 000608: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000612: 49 89 d6                        mov r14, rdx
    # nextln: 000615: 4c 89 ff                        mov rdi, r15
    # nextln: 000618: 4c 89 f6                        mov rsi, r14
    # nextln: 00061b: ff d0                           call rax
    # nextln: 00061d: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000622: 48 8b 7c 24 50                  mov rdi, qword ptr [rsp + 0x50]
    # nextln: 000627: 4c 8b 7c 24 48                  mov r15, qword ptr [rsp + 0x48]
    # nextln: 00062c: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000631: 44 23 e8                        and r13d, eax
    # nextln: 000634: 48 89 f8                        mov rax, rdi
    # nextln: 000637: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000641: 4c 89 e7                        mov rdi, r12
    # nextln: 000644: 48 89 de                        mov rsi, rbx
    # nextln: 000647: 41 ff d0                        call r8
    # nextln: 00064a: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 00064f: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000654: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 000659: 33 ff                           xor edi, edi
    # nextln: 00065b: 85 c0                           test eax, eax
    # nextln: 00065d: 40 0f 94 c7                     sete dil
    # nextln: 000661: 44 23 ef                        and r13d, edi
    # nextln: 000664: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 00066b: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000675: 48 89 de                        mov rsi, rbx
    # nextln: 000678: ff d0                           call rax
    # nextln: 00067a: 44 23 e8                        and r13d, eax
    # nextln: 00067d: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 000684: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 00068e: 4c 89 f6                        mov rsi, r14
    # nextln: 000691: ff d0                           call rax
    # nextln: 000693: 44 23 e8                        and r13d, eax
    # nextln: 000696: 8b bc 24 a0 00 00 00            mov edi, dword ptr [rsp + 0xa0]
    # nextln: 00069d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 0006a7: 48 89 de                        mov rsi, rbx
    # nextln: 0006aa: ff d0                           call rax
    # nextln: 0006ac: 33 c9                           xor ecx, ecx
    # nextln: 0006ae: 85 c0                           test eax, eax
    # nextln: 0006b0: 0f 94 c1                        sete cl
    # nextln: 0006b3: 44 23 e9                        and r13d, ecx
    # nextln: 0006b6: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0006bd: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 0006c7: 48 89 de                        mov rsi, rbx
    # nextln: 0006ca: ff d0                           call rax
    # nextln: 0006cc: 33 c9                           xor ecx, ecx
    # nextln: 0006ce: 85 c0                           test eax, eax
    # nextln: 0006d0: 0f 94 c1                        sete cl
    # nextln: 0006d3: 44 23 e9                        and r13d, ecx
    # nextln: 0006d6: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0006dd: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 0006e7: 4c 89 f6                        mov rsi, r14
    # nextln: 0006ea: ff d0                           call rax
    # nextln: 0006ec: 33 c9                           xor ecx, ecx
    # nextln: 0006ee: 85 c0                           test eax, eax
    # nextln: 0006f0: 0f 94 c1                        sete cl
    # nextln: 0006f3: 44 23 e9                        and r13d, ecx
    # nextln: 0006f6: 8b bc 24 a0 00 00 00            mov edi, dword ptr [rsp + 0xa0]
    # nextln: 0006fd: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000707: 48 89 de                        mov rsi, rbx
    # nextln: 00070a: ff d0                           call rax
    # nextln: 00070c: 44 23 e8                        and r13d, eax
    # nextln: 00070f: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 000716: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 000720: 48 89 de                        mov rsi, rbx
    # nextln: 000723: ff d0                           call rax
    # nextln: 000725: 33 c9                           xor ecx, ecx
    # nextln: 000727: 85 c0                           test eax, eax
    # nextln: 000729: 0f 94 c1                        sete cl
    # nextln: 00072c: 44 23 e9                        and r13d, ecx
    # nextln: 00072f: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 000736: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 000740: 4c 89 f6                        mov rsi, r14
    # nextln: 000743: ff d0                           call rax
    # nextln: 000745: 33 c9                           xor ecx, ecx
    # nextln: 000747: 85 c0                           test eax, eax
    # nextln: 000749: 0f 94 c1                        sete cl
    # nextln: 00074c: 44 23 e9                        and r13d, ecx
    # nextln: 00074f: 8b bc 24 a0 00 00 00            mov edi, dword ptr [rsp + 0xa0]
    # nextln: 000756: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 000760: 48 89 de                        mov rsi, rbx
    # nextln: 000763: ff d0                           call rax
    # nextln: 000765: 33 c9                           xor ecx, ecx
    # nextln: 000767: 41 3b c4                        cmp eax, r12d
    # nextln: 00076a: 0f 94 c1                        sete cl
    # nextln: 00076d: 44 23 e9                        and r13d, ecx
    # nextln: 000770: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 00077a: 48 89 de                        mov rsi, rbx
    # nextln: 00077d: 4c 89 ff                        mov rdi, r15
    # nextln: 000780: ff d0                           call rax
    # nextln: 000782: 44 23 e8                        and r13d, eax
    # nextln: 000785: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 00078f: 4c 89 ff                        mov rdi, r15
    # nextln: 000792: 4c 89 f6                        mov rsi, r14
    # nextln: 000795: ff d0                           call rax
    # nextln: 000797: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 00079c: 4c 8b 64 24 30                  mov r12, qword ptr [rsp + 0x30]
    # nextln: 0007a1: 4c 8b 7c 24 28                  mov r15, qword ptr [rsp + 0x28]
    # nextln: 0007a6: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 0007ab: 44 23 e8                        and r13d, eax
    # nextln: 0007ae: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 0007b8: 48 89 de                        mov rsi, rbx
    # nextln: 0007bb: ff d0                           call rax
    # nextln: 0007bd: 33 c9                           xor ecx, ecx
    # nextln: 0007bf: 85 c0                           test eax, eax
    # nextln: 0007c1: 0f 94 c1                        sete cl
    # nextln: 0007c4: 44 23 e9                        and r13d, ecx
    # nextln: 0007c7: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 0007cc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0007d6: 48 89 de                        mov rsi, rbx
    # nextln: 0007d9: ff d0                           call rax
    # nextln: 0007db: 44 23 e8                        and r13d, eax
    # nextln: 0007de: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 0007e3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0007ed: 4c 89 f6                        mov rsi, r14
    # nextln: 0007f0: ff d0                           call rax
    # nextln: 0007f2: 33 c9                           xor ecx, ecx
    # nextln: 0007f4: 85 c0                           test eax, eax
    # nextln: 0007f6: 0f 94 c1                        sete cl
    # nextln: 0007f9: 44 23 e9                        and r13d, ecx
    # nextln: 0007fc: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000801: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 00080b: 4c 89 e6                        mov rsi, r12
    # nextln: 00080e: ff d0                           call rax
    # nextln: 000810: 44 23 e8                        and r13d, eax
    # nextln: 000813: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 000817: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 000821: 48 89 de                        mov rsi, rbx
    # nextln: 000824: ff d0                           call rax
    # nextln: 000826: 33 c9                           xor ecx, ecx
    # nextln: 000828: 85 c0                           test eax, eax
    # nextln: 00082a: 0f 94 c1                        sete cl
    # nextln: 00082d: 44 23 e9                        and r13d, ecx
    # nextln: 000830: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 00083a: 4c 89 ff                        mov rdi, r15
    # nextln: 00083d: 48 89 de                        mov rsi, rbx
    # nextln: 000840: ff d0                           call rax
    # nextln: 000842: 44 23 e8                        and r13d, eax
    # nextln: 000845: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 00084f: 4c 89 ff                        mov rdi, r15
    # nextln: 000852: 4c 89 f6                        mov rsi, r14
    # nextln: 000855: ff d0                           call rax
    # nextln: 000857: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 00085c: 4c 8b 74 24 20                  mov r14, qword ptr [rsp + 0x20]
    # nextln: 000861: 4c 89 e6                        mov rsi, r12
    # nextln: 000864: 49 89 c4                        mov r12, rax
    # nextln: 000867: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000871: 4c 89 ff                        mov rdi, r15
    # nextln: 000874: ff d0                           call rax
    # nextln: 000876: 4c 8b 7c 24 18                  mov r15, qword ptr [rsp + 0x18]
    # nextln: 00087b: 33 c9                           xor ecx, ecx
    # nextln: 00087d: 45 85 e4                        test r12d, r12d
    # nextln: 000880: 0f 94 c1                        sete cl
    # nextln: 000883: 44 23 e9                        and r13d, ecx
    # nextln: 000886: 44 23 e8                        and r13d, eax
    # nextln: 000889: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000893: 48 89 de                        mov rsi, rbx
    # nextln: 000896: 4c 89 f7                        mov rdi, r14
    # nextln: 000899: ff d0                           call rax
    # nextln: 00089b: 33 c9                           xor ecx, ecx
    # nextln: 00089d: 85 c0                           test eax, eax
    # nextln: 00089f: 0f 94 c1                        sete cl
    # nextln: 0008a2: 44 23 e9                        and r13d, ecx
    # nextln: 0008a5: 45 85 ed                        test r13d, r13d
    # nextln: 0008a8: 0f 84 15 00 00 00               je 0x8c3
    # nextln: 0008ae: 4c 89 f8                        mov rax, r15
    # nextln: 0008b1: 48 81 c4 c8 00 00 00            add rsp, 0xc8
    # nextln: 0008b8: 5b                              pop rbx
    # nextln: 0008b9: 41 5c                           pop r12
    # nextln: 0008bb: 41 5d                           pop r13
    # nextln: 0008bd: 41 5e                           pop r14
    # nextln: 0008bf: 41 5f                           pop r15
    # nextln: 0008c1: 5d                              pop rbp
    # nextln: 0008c2: c3                              ret
    # nextln: 0008c3: 48 89 d8                        mov rax, rbx
    # nextln: 0008c6: 48 81 c4 c8 00 00 00            add rsp, 0xc8
    # nextln: 0008cd: 5b                              pop rbx
    # nextln: 0008ce: 41 5c                           pop r12
    # nextln: 0008d0: 41 5d                           pop r13
    # nextln: 0008d2: 41 5e                           pop r14
    # nextln: 0008d4: 41 5f                           pop r15
    # nextln: 0008d6: 5d                              pop rbp
    # nextln: 0008d7: c3                              ret

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i32 = iconst 1
    %5:i64 = iext %4
    %6:i64 = sfill 32 %5
    %7:i32 = iconst 3
    %8:ptr = stackslot 8:8
    %9:i32 = iconst 64
    %10:ptr = stackslot 8:8
    %11:i32 = iconst 32
    %12:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %14:ptr = stackslot 2:2
    %15:ptr = stackslot 2:2
    %16:i32 = iconst 16
    %17:ptr = stackslot 2:2
    %18:i32 = iconst 15
    %19:ptr = stackslot 1:1
    %20:ptr = stackslot 1:1
    %21:i32 = iconst 8
    %22:ptr = stackslot 1:1
    %23:ctrl = store.1 %1, %3, %22
    %24:ctrl = store.1 %23, %3, %20
    %25:ctrl = store.1 %24, %3, %19
    %26:ctrl = store.2 %25, %3, %17
    %27:ctrl = store.2 %26, %3, %15
    %28:ctrl = store.2 %27, %3, %14
    %29:ctrl = store.4 %28, %3, %13
    %30:ctrl = store.4 %29, %3, %12
    %31:i32 = iconst 7
    %32:i32 = iconst 2
    %33:i64 = iext %32
    %34:i64 = sfill 32 %33
    %35:i32 = iconst 4294934528
    %36:i32 = iconst 4294967168
    %37:i64 = iconst 0
    %38:ctrl = store.8 %30, %37, %10
    %39:ctrl = store.8 %38, %37, %8
    %40:ctrl, %41:phisel = region %39
    %42:ctrl = store.1 %40, %36, %22
    %43:ctrl = store.1 %42, %4, %20
    %44:ctrl = store.1 %43, %32, %19
    %45:ctrl = store.2 %44, %35, %17
    %46:ctrl = store.2 %45, %4, %15
    %47:ctrl = store.2 %46, %32, %14
    %48:ctrl = store.4 %47, %4, %13
    %49:ctrl = store.4 %48, %32, %12
    %50:ctrl = store.8 %49, %6, %10
    %51:ctrl = store.8 %50, %34, %8
    %52:ctrl, %53:i32 = load.1 %51, %22
    %54:i32 = sfill 8 %53
    %55:ctrl, %56:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %52, %54, %31
    %57:ctrl, %58:i32 = load.1 %55, %22
    %59:i32 = sfill 8 %58
    %60:ctrl, %61:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %57, %59, %21
    %62:ctrl, %63:i32 = load.1 %60, %20
    %64:i32 = sfill 8 %63
    %65:ctrl, %66:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %62, %64, %3
    %67:ctrl, %68:i32 = load.1 %65, %20
    %69:i32 = sfill 8 %68
    %70:ctrl, %71:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %67, %69, %21
    %72:ctrl, %73:i32 = load.1 %70, %20
    %74:i32 = sfill 8 %73
    %75:ctrl, %76:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %72, %74, %11
    %77:ctrl, %78:i32 = load.1 %75, %19
    %79:i32 = sfill 8 %78
    %80:ctrl, %81:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %77, %79, %3
    %82:ctrl, %83:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %80, %22, %31
    %84:ctrl, %85:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %82, %22, %21
    %86:ctrl, %87:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %84, %20, %3
    %88:ctrl, %89:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %86, %20, %21
    %90:ctrl, %91:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %88, %20, %11
    %92:ctrl, %93:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %90, %19, %3
    %94:ctrl, %95:i32 = load.2 %92, %17
    %96:i32 = sfill 16 %95
    %97:ctrl, %98:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %94, %96, %18
    %99:ctrl, %100:i32 = load.2 %97, %17
    %101:i32 = sfill 16 %100
    %102:ctrl, %103:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %99, %101, %16
    %104:ctrl, %105:i32 = load.2 %102, %15
    %106:i32 = sfill 16 %105
    %107:ctrl, %108:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %104, %106, %3
    %109:ctrl, %110:i32 = load.2 %107, %15
    %111:i32 = sfill 16 %110
    %112:ctrl, %113:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %109, %111, %16
    %114:ctrl, %115:i32 = load.2 %112, %15
    %116:i32 = sfill 16 %115
    %117:ctrl, %118:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %114, %116, %11
    %119:ctrl, %120:i32 = load.2 %117, %14
    %121:i32 = sfill 16 %120
    %122:ctrl, %123:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %119, %121, %3
    %124:ctrl, %125:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %122, %17, %18
    %126:ctrl, %127:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %124, %17, %16
    %128:ctrl, %129:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %126, %15, %3
    %130:ctrl, %131:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %128, %15, %16
    %132:ctrl, %133:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %130, %15, %11
    %134:ctrl, %135:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %132, %14, %3
    %136:ctrl, %137:i32 = load.4 %134, %13
    %138:ctrl, %139:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %136, %137, %3
    %140:ctrl, %141:i32 = load.4 %138, %13
    %142:ctrl, %143:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %140, %141, %11
    %144:ctrl, %145:i32 = load.4 %142, %12
    %146:ctrl, %147:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %144, %145, %3
    %148:ctrl, %149:i32 = load.4 %146, %13
    %150:ctrl, %151:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %148, %149, %3
    %152:ctrl, %153:i32 = load.4 %150, %13
    %154:ctrl, %155:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %152, %153, %11
    %156:ctrl, %157:i32 = load.4 %154, %12
    %158:ctrl, %159:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %156, %157, %3
    %160:ctrl, %161:i32 = load.4 %158, %13
    %162:ctrl, %163:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %160, %161, %3
    %164:ctrl, %165:i32 = load.4 %162, %13
    %166:ctrl, %167:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %164, %165, %11
    %168:ctrl, %169:i32 = load.4 %166, %12
    %170:ctrl, %171:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %168, %169, %3
    %172:ctrl, %173:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %170, %13, %3
    %174:ctrl, %175:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %172, %13, %11
    %176:ctrl, %177:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %174, %12, %3
    %178:ctrl, %179:i64 = load.8 %176, %10
    %180:ctrl, %181:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %178, %179, %3
    %182:ctrl, %183:i64 = load.8 %180, %10
    %184:ctrl, %185:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %182, %183, %11
    %186:ctrl, %187:i64 = load.8 %184, %10
    %188:ctrl, %189:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %186, %187, %9
    %190:ctrl, %191:i64 = load.8 %188, %8
    %192:ctrl, %193:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %190, %191, %3
    %194:ctrl, %195:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %192, %10, %3
    %196:ctrl, %197:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %194, %10, %11
    %198:ctrl, %199:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %196, %10, %9
    %200:ctrl, %201:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %198, %8, %3
    %202:i32 = icmp eq %201, %3
    %203:i32 = icmp eq %197, %3
    %204:i32 = icmp eq %193, %3
    %205:i32 = icmp eq %185, %3
    %206:i32 = icmp eq %177, %3
    %207:i32 = icmp eq %171, %7
    %208:i32 = icmp eq %167, %3
    %209:i32 = icmp eq %163, %3
    %210:i32 = icmp eq %155, %3
    %211:i32 = icmp eq %151, %3
    %212:i32 = icmp eq %147, %3
    %213:i32 = icmp eq %135, %3
    %214:i32 = icmp eq %131, %3
    %215:i32 = icmp eq %123, %3
    %216:i32 = icmp eq %113, %3
    %217:i32 = icmp eq %93, %3
    %218:i32 = icmp eq %89, %3
    %219:i32 = icmp eq %81, %3
    %220:i32 = icmp eq %71, %3
    %221:i32 = and %4, %56
    %222:i32 = and %221, %61
    %223:i32 = and %222, %66
    %224:i32 = and %223, %220
    %225:i32 = and %224, %76
    %226:i32 = and %225, %219
    %227:i32 = and %226, %83
    %228:i32 = and %227, %85
    %229:i32 = and %228, %87
    %230:i32 = and %229, %218
    %231:i32 = and %230, %91
    %232:i32 = and %231, %217
    %233:i32 = and %232, %98
    %234:i32 = and %233, %103
    %235:i32 = and %234, %108
    %236:i32 = and %235, %216
    %237:i32 = and %236, %118
    %238:i32 = and %237, %215
    %239:i32 = and %238, %125
    %240:i32 = and %239, %127
    %241:i32 = and %240, %129
    %242:i32 = and %241, %214
    %243:i32 = and %242, %133
    %244:i32 = and %243, %213
    %245:i32 = and %244, %139
    %246:i32 = and %245, %143
    %247:i32 = and %246, %212
    %248:i32 = and %247, %211
    %249:i32 = and %248, %210
    %250:i32 = and %249, %159
    %251:i32 = and %250, %209
    %252:i32 = and %251, %208
    %253:i32 = and %252, %207
    %254:i32 = and %253, %173
    %255:i32 = and %254, %175
    %256:i32 = and %255, %206
    %257:i32 = and %256, %181
    %258:i32 = and %257, %205
    %259:i32 = and %258, %189
    %260:i32 = and %259, %204
    %261:i32 = and %260, %195
    %262:i32 = and %261, %203
    %263:i32 = and %262, %199
    %264:i32 = and %263, %202
    %265:ctrl, %266:ctrl = brcond %200, %264
    %267:ctrl, %268:phisel = region %265
    return %267, %4
    %269:ctrl, %270:phisel = region %266
    return %269, %3
}
