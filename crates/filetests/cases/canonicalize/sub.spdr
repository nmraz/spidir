# run: canonicalize

func @sub32:i32(i32, i32) {
    # check:   func @sub32:i32(i32, i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32, $(entry2=$val):i32 = entry
    # dag:         $(isub0=$val):i32 = isub $entry1, $entry2
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %a:i32, %b:i32 = entry
    %r:i32 = isub %a, %b
    return %c, %r
}

func @sub_fold32:i32() {
    # check:   func @sub_fold32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 4294967294
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 7
    %r:i32 = isub %a, %b
    return %c, %r
}

func @sub_fold_wrap32:i32() {
    # check:   func @sub_fold_wrap32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 12
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 4294967289
    %r:i32 = isub %a, %b
    return %c, %r
}

func @subz32:i32(i32) {
    # check:   func @subz32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 0
    %r:i32 = isub %a, %b
    return %c, %r
}

func @zsub32:i32(i32) {
    # check:   func @zsub32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 0
    # dag:         $(isub0=$val):i32 = isub $iconst0, $entry1
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 0
    %r:i32 = isub %a, %b
    return %c, %r
}

func @subc32:i32(i32) {
    # check:   func @subc32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(isub0=$val):i32 = isub $entry1, $iconst0
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 5
    %r:i32 = isub %a, %b
    return %c, %r
}

func @csub32:i32(i32) {
    # check:   func @csub32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(isub0=$val):i32 = isub $iconst0, $entry1
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 5
    %r:i32 = isub %a, %b
    return %c, %r
}

func @sub_self32:i32(i32) {
    # check:   func @sub_self32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %r:i32 = isub %a, %a
    return %c, %r
}

func @sub64:i64(i64, i64) {
    # check:   func @sub64:i64(i64, i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64, $(entry2=$val):i64 = entry
    # dag:         $(isub0=$val):i64 = isub $entry1, $entry2
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %a:i64, %b:i64 = entry
    %r:i64 = isub %a, %b
    return %c, %r
}

func @sub_fold64:i64() {
    # check:   func @sub_fold64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 18446744073709551614
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 7
    %r:i64 = isub %a, %b
    return %c, %r
}

func @sub_fold_wrap64:i64() {
    # check:   func @sub_fold_wrap64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 12
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 18446744073709551609
    %r:i64 = isub %a, %b
    return %c, %r
}

func @subz64:i64(i64) {
    # check:   func @subz64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 0
    %r:i64 = isub %a, %b
    return %c, %r
}

func @zsub64:i64(i64) {
    # check:   func @zsub64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 0
    # dag:         $(isub0=$val):i64 = isub $iconst0, $entry1
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 0
    %r:i64 = isub %a, %b
    return %c, %r
}

func @subc64:i64(i64) {
    # check:   func @subc64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(isub0=$val):i64 = isub $entry1, $iconst0
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 5
    %r:i64 = isub %a, %b
    return %c, %r
}

func @csub64:i64(i64) {
    # check:   func @csub64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(isub0=$val):i64 = isub $iconst0, $entry1
    # dag:         return $entry0, $isub0
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 5
    %r:i64 = isub %a, %b
    return %c, %r
}

func @sub_self64:i64(i64) {
    # check:   func @sub_self64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %r:i64 = isub %a, %a
    return %c, %r
}
