# run: codegen

extfunc @malloc:ptr(i64)

func @gc_new:ptr(i32, i64) {
    # check: function `gc_new`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f7                        mov rdi, rsi
    # nextln: 000007: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @malloc + 0
    # nextln: 000011: ff d0                           call rax
    # nextln: 000013: 5d                              pop rbp
    # nextln: 000014: c3                              ret

    %c:ctrl, %type_id:i32, %size:i64 = entry
    %c1:ctrl, %p:ptr = call @malloc %c, %size
    return %c1, %p
}

func @throw_index_out_of_range_exception() {
    # check: function `throw_index_out_of_range_exception`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl = entry
    return %0
}

func @"System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 83 ec 68                     sub rsp, 0x68
    # nextln: 000011: b8 00 00 00 00                  mov eax, 0
    # nextln: 000016: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 00001a: b9 02 00 00 00                  mov ecx, 2
    # nextln: 00001f: 4c 63 f9                        movsxd r15, ecx
    # nextln: 000022: ba 04 00 00 00                  mov edx, 4
    # nextln: 000027: 4c 89 f8                        mov rax, r15
    # nextln: 00002a: 48 0f af c2                     imul rax, rdx
    # nextln: 00002e: 48 89 ce                        mov rsi, rcx
    # nextln: 000031: 49 89 d0                        mov r8, rdx
    # nextln: 000034: ba 08 00 00 00                  mov edx, 8
    # nextln: 000039: 4c 89 f9                        mov rcx, r15
    # nextln: 00003c: 48 0f af ca                     imul rcx, rdx
    # nextln: 000040: 49 89 f9                        mov r9, rdi
    # nextln: 000043: 48 89 f7                        mov rdi, rsi
    # nextln: 000046: be 14 00 00 00                  mov esi, 0x14
    # nextln: 00004b: 49 89 f2                        mov r10, rsi
    # nextln: 00004e: 4c 03 d0                        add r10, rax
    # nextln: 000051: 4c 89 c0                        mov rax, r8
    # nextln: 000054: 4d 89 d0                        mov r8, r10
    # nextln: 000057: 41 ba aa 00 00 00               mov r10d, 0xaa
    # nextln: 00005d: 4c 89 d3                        mov rbx, r10
    # nextln: 000060: 49 89 d2                        mov r10, rdx
    # nextln: 000063: 48 89 da                        mov rdx, rbx
    # nextln: 000066: 48 89 fb                        mov rbx, rdi
    # nextln: 000069: 48 89 c7                        mov rdi, rax
    # nextln: 00006c: 4c 89 c8                        mov rax, r9
    # nextln: 00006f: 4d 89 c1                        mov r9, r8
    # nextln: 000072: 49 89 d8                        mov r8, rbx
    # nextln: 000075: 49 89 f3                        mov r11, rsi
    # nextln: 000078: bb 18 00 00 00                  mov ebx, 0x18
    # nextln: 00007d: 48 89 de                        mov rsi, rbx
    # nextln: 000080: 48 03 f1                        add rsi, rcx
    # nextln: 000083: 48 89 f9                        mov rcx, rdi
    # nextln: 000086: 48 89 d7                        mov rdi, rdx
    # nextln: 000089: 4c 89 ca                        mov rdx, r9
    # nextln: 00008c: 4d 89 d9                        mov r9, r11
    # nextln: 00008f: 4d 89 d3                        mov r11, r10
    # nextln: 000092: 49 89 da                        mov r10, rbx
    # nextln: 000095: 4c 89 c3                        mov rbx, r8
    # nextln: 000098: 41 b8 10 00 00 00               mov r8d, 0x10
    # nextln: 00009e: 41 be 01 00 00 00               mov r14d, 1
    # nextln: 0000a4: 49 89 dd                        mov r13, rbx
    # nextln: 0000a7: 4c 89 db                        mov rbx, r11
    # nextln: 0000aa: 4d 89 eb                        mov r11, r13
    # nextln: 0000ad: 4d 89 cc                        mov r12, r9
    # nextln: 0000b0: 49 89 f9                        mov r9, rdi
    # nextln: 0000b3: 4d 63 ee                        movsxd r13, r14d
    # nextln: 0000b6: bf ab 00 00 00                  mov edi, 0xab
    # nextln: 0000bb: 4c 89 6c 24 28                  mov qword ptr [rsp + 0x28], r13
    # nextln: 0000c0: 4c 89 4c 24 48                  mov qword ptr [rsp + 0x48], r9
    # nextln: 0000c5: 49 89 dd                        mov r13, rbx
    # nextln: 0000c8: 48 89 cb                        mov rbx, rcx
    # nextln: 0000cb: 48 89 54 24 50                  mov qword ptr [rsp + 0x50], rdx
    # nextln: 0000d0: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 0000d5: 4c 89 64 24 08                  mov qword ptr [rsp + 8], r12
    # nextln: 0000da: 4d 89 c4                        mov r12, r8
    # nextln: 0000dd: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 0000e2: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 0000e7: e8 00 00 00 00                  call 0xec  # RELOC_PC32 -> @gc_new + -4
    # nextln: 0000ec: 48 89 c1                        mov rcx, rax
    # nextln: 0000ef: 49 03 cc                        add rcx, r12
    # nextln: 0000f2: 44 89 39                        mov dword ptr [rcx], r15d
    # nextln: 0000f5: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 0000f9: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 0000fe: 4c 89 e8                        mov rax, r13
    # nextln: 000101: 48 89 de                        mov rsi, rbx
    # nextln: 000104: 48 8b 4c 24 20                  mov rcx, qword ptr [rsp + 0x20]
    # nextln: 000109: 48 8b 7c 24 28                  mov rdi, qword ptr [rsp + 0x28]
    # nextln: 00010e: 4c 89 e2                        mov rdx, r12
    # nextln: 000111: 4c 8b 2c 24                     mov r13, qword ptr [rsp]
    # nextln: 000115: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 00011a: 48 89 44 24 30                  mov qword ptr [rsp + 0x30], rax
    # nextln: 00011f: 48 89 74 24 10                  mov qword ptr [rsp + 0x10], rsi
    # nextln: 000124: 48 89 4c 24 20                  mov qword ptr [rsp + 0x20], rcx
    # nextln: 000129: 48 89 fb                        mov rbx, rdi
    # nextln: 00012c: 49 89 d4                        mov r12, rdx
    # nextln: 00012f: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 000134: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 000139: e8 00 00 00 00                  call 0x13e  # RELOC_PC32 -> @gc_new + -4
    # nextln: 00013e: 48 89 c1                        mov rcx, rax
    # nextln: 000141: 49 03 cc                        add rcx, r12
    # nextln: 000144: 44 89 39                        mov dword ptr [rcx], r15d
    # nextln: 000147: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000149: 48 3b d9                        cmp rbx, rcx
    # nextln: 00014c: 0f 8d 8b 01 00 00               jge 0x2dd
    # nextln: 000152: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000157: 48 89 ce                        mov rsi, rcx
    # nextln: 00015a: 48 0f af f3                     imul rsi, rbx
    # nextln: 00015e: 4d 89 e9                        mov r9, r13
    # nextln: 000161: 4d 03 cc                        add r9, r12
    # nextln: 000164: 4c 8b 54 24 18                  mov r10, qword ptr [rsp + 0x18]
    # nextln: 000169: 4d 89 e0                        mov r8, r12
    # nextln: 00016c: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000171: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 000176: 4c 8b 5c 24 10                  mov r11, qword ptr [rsp + 0x10]
    # nextln: 00017b: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 000180: 48 03 ce                        add rcx, rsi
    # nextln: 000183: 48 89 c6                        mov rsi, rax
    # nextln: 000186: 48 03 f1                        add rsi, rcx
    # nextln: 000189: 44 89 36                        mov dword ptr [rsi], r14d
    # nextln: 00018c: 4c 89 de                        mov rsi, r11
    # nextln: 00018f: 45 8b 19                        mov r11d, dword ptr [r9]
    # nextln: 000192: 41 bc 00 00 00 00               mov r12d, 0
    # nextln: 000198: 4d 89 d1                        mov r9, r10
    # nextln: 00019b: 49 89 f2                        mov r10, rsi
    # nextln: 00019e: 4d 63 f4                        movsxd r14, r12d
    # nextln: 0001a1: 4d 3b f3                        cmp r14, r11
    # nextln: 0001a4: 0f 8d 33 01 00 00               jge 0x2dd
    # nextln: 0001aa: 49 89 d3                        mov r11, rdx
    # nextln: 0001ad: 4d 0f af de                     imul r11, r14
    # nextln: 0001b1: 48 89 fe                        mov rsi, rdi
    # nextln: 0001b4: 49 03 f3                        add rsi, r11
    # nextln: 0001b7: 4c 03 ee                        add r13, rsi
    # nextln: 0001ba: 4c 89 d6                        mov rsi, r10
    # nextln: 0001bd: 49 89 45 00                     mov qword ptr [r13], rax
    # nextln: 0001c1: 48 89 d0                        mov rax, rdx
    # nextln: 0001c4: 48 89 fa                        mov rdx, rdi
    # nextln: 0001c7: 48 89 f7                        mov rdi, rsi
    # nextln: 0001ca: 4c 89 ce                        mov rsi, r9
    # nextln: 0001cd: 49 89 dd                        mov r13, rbx
    # nextln: 0001d0: 48 8b 1c 24                     mov rbx, qword ptr [rsp]
    # nextln: 0001d4: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 0001d9: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 0001de: 48 89 44 24 30                  mov qword ptr [rsp + 0x30], rax
    # nextln: 0001e3: 4d 89 c4                        mov r12, r8
    # nextln: 0001e6: 48 89 7c 24 10                  mov qword ptr [rsp + 0x10], rdi
    # nextln: 0001eb: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 0001f0: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 0001f5: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 0001fa: e8 00 00 00 00                  call 0x1ff  # RELOC_PC32 -> @gc_new + -4
    # nextln: 0001ff: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000204: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000209: 49 89 c2                        mov r10, rax
    # nextln: 00020c: 4d 03 d4                        add r10, r12
    # nextln: 00020f: 45 89 3a                        mov dword ptr [r10], r15d
    # nextln: 000212: 48 89 d7                        mov rdi, rdx
    # nextln: 000215: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 00021a: 48 8b 54 24 08                  mov rdx, qword ptr [rsp + 8]
    # nextln: 00021f: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 000224: 4c 89 e6                        mov rsi, r12
    # nextln: 000227: 4c 8b 4c 24 38                  mov r9, qword ptr [rsp + 0x38]
    # nextln: 00022c: 4c 8b 64 24 30                  mov r12, qword ptr [rsp + 0x30]
    # nextln: 000231: 45 8b 3a                        mov r15d, dword ptr [r10]
    # nextln: 000234: 4d 3b f7                        cmp r14, r15
    # nextln: 000237: 0f 8d a0 00 00 00               jge 0x2dd
    # nextln: 00023d: 49 89 cf                        mov r15, rcx
    # nextln: 000240: 4d 0f af fe                     imul r15, r14
    # nextln: 000244: 49 89 fe                        mov r14, rdi
    # nextln: 000247: 48 89 d7                        mov rdi, rdx
    # nextln: 00024a: 49 03 ff                        add rdi, r15
    # nextln: 00024d: 4d 89 f7                        mov r15, r14
    # nextln: 000250: 49 89 c6                        mov r14, rax
    # nextln: 000253: 4c 03 f7                        add r14, rdi
    # nextln: 000256: 45 89 1e                        mov dword ptr [r14], r11d
    # nextln: 000259: 41 8b 3a                        mov edi, dword ptr [r10]
    # nextln: 00025c: 4c 3b ef                        cmp r13, rdi
    # nextln: 00025f: 0f 8d 78 00 00 00               jge 0x2dd
    # nextln: 000265: 49 89 da                        mov r10, rbx
    # nextln: 000268: 4c 03 d6                        add r10, rsi
    # nextln: 00026b: 49 89 c3                        mov r11, rax
    # nextln: 00026e: 4d 03 d9                        add r11, r9
    # nextln: 000271: bf 03 00 00 00                  mov edi, 3
    # nextln: 000276: 41 89 3b                        mov dword ptr [r11], edi
    # nextln: 000279: 41 8b 3a                        mov edi, dword ptr [r10]
    # nextln: 00027c: 4c 3b ef                        cmp r13, rdi
    # nextln: 00027f: 0f 8d 58 00 00 00               jge 0x2dd
    # nextln: 000285: 4d 0f af e5                     imul r12, r13
    # nextln: 000289: 4d 03 c4                        add r8, r12
    # nextln: 00028c: 49 03 d8                        add rbx, r8
    # nextln: 00028f: 48 89 03                        mov qword ptr [rbx], rax
    # nextln: 000292: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000296: 48 89 c7                        mov rdi, rax
    # nextln: 000299: 48 03 fe                        add rdi, rsi
    # nextln: 00029c: 8b 3f                           mov edi, dword ptr [rdi]
    # nextln: 00029e: 4c 3b ef                        cmp r13, rdi
    # nextln: 0002a1: 0f 8d 36 00 00 00               jge 0x2dd
    # nextln: 0002a7: 49 03 c0                        add rax, r8
    # nextln: 0002aa: 48 8b 00                        mov rax, qword ptr [rax]
    # nextln: 0002ad: 49 89 c0                        mov r8, rax
    # nextln: 0002b0: 4c 03 c6                        add r8, rsi
    # nextln: 0002b3: 41 8b 30                        mov esi, dword ptr [r8]
    # nextln: 0002b6: 49 63 ff                        movsxd rdi, r15d
    # nextln: 0002b9: 48 3b fe                        cmp rdi, rsi
    # nextln: 0002bc: 0f 8d 1b 00 00 00               jge 0x2dd
    # nextln: 0002c2: 48 0f af cf                     imul rcx, rdi
    # nextln: 0002c6: 48 03 d1                        add rdx, rcx
    # nextln: 0002c9: 48 03 c2                        add rax, rdx
    # nextln: 0002cc: 8b 00                           mov eax, dword ptr [rax]
    # nextln: 0002ce: 48 83 c4 68                     add rsp, 0x68
    # nextln: 0002d2: 5b                              pop rbx
    # nextln: 0002d3: 41 5c                           pop r12
    # nextln: 0002d5: 41 5d                           pop r13
    # nextln: 0002d7: 41 5e                           pop r14
    # nextln: 0002d9: 41 5f                           pop r15
    # nextln: 0002db: 5d                              pop rbp
    # nextln: 0002dc: c3                              ret
    # nextln: 0002dd: e8 00 00 00 00                  call 0x2e2  # RELOC_PC32 -> @throw_index_out_of_range_exception + -4
    # nextln: 0002e2: 0f 0b                           ud2

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %4:i64 = iext %1
    %5:i64 = sfill 32 %4
    %6:i64 = iconst 4
    %7:i64 = imul %6, %5
    %8:i64 = iconst 20
    %9:i64 = iadd %8, %7
    %10:i64 = iconst 16
    %11:i32 = iconst 1
    %12:i64 = iext %11
    %13:i64 = sfill 32 %12
    %14:i64 = imul %6, %13
    %15:i64 = iadd %8, %14
    %16:i64 = iconst 8
    %17:i64 = imul %16, %13
    %18:i64 = iconst 24
    %19:i64 = iadd %18, %17
    %20:ptr = stackslot 8:8
    %21:i32 = iconst 3
    %22:i32 = iconst 0
    %23:i64 = iext %22
    %24:i64 = sfill 32 %23
    %27:i64 = imul %16, %24
    %28:i64 = iadd %18, %27
    %25:i64 = imul %6, %24
    %26:i64 = iadd %8, %25
    %29:i32 = iconst 2
    %30:i64 = iext %29
    %31:i64 = sfill 32 %30
    %34:i64 = imul %31, %16
    %35:i64 = iadd %18, %34
    %32:i64 = imul %31, %6
    %33:i64 = iadd %8, %32
    %36:i32 = iconst 170
    %37:i32 = iconst 171
    %38:ptr = iconst 0
    %39:ctrl = store.8 %2, %38, %20
    %40:ctrl, %41:phisel = region %39
    %42:ctrl, %43:ptr = call @gc_new %40, %37, %35
    %44:ptr = ptroff %43, %10
    %45:ctrl = store.4 %42, %31, %44
    %46:ctrl = store.8 %45, %43, %20
    %47:ctrl, %48:ptr = load.8 %46, %20
    %49:ctrl, %50:ptr = call @gc_new %47, %36, %33
    %52:ptr = ptroff %50, %10
    %53:ctrl = store.4 %49, %31, %52
    %54:ctrl, %55:i64 = load.4 %53, %52
    %56:i64 = icmp slt %13, %55
    %57:ctrl, %58:ctrl = brcond %54, %56
    %59:ctrl, %60:phisel = region %57
    %51:ptr = ptroff %50, %15
    %61:ctrl = store.4 %59, %11, %51
    %63:ptr = ptroff %48, %10
    %64:ctrl, %65:i64 = load.4 %61, %63
    %66:i64 = icmp slt %24, %65
    %67:ctrl, %68:ctrl = brcond %64, %66
    %69:ctrl, %70:phisel = region %67
    %62:ptr = ptroff %48, %28
    %71:ctrl = store.8 %69, %50, %62
    %72:ctrl, %73:ptr = load.8 %71, %20
    %74:ctrl, %75:ptr = call @gc_new %72, %36, %33
    %78:ptr = ptroff %75, %10
    %79:ctrl = store.4 %74, %31, %78
    %80:ctrl, %81:i64 = load.4 %79, %78
    %82:i64 = icmp slt %24, %81
    %83:ctrl, %84:ctrl = brcond %80, %82
    %85:ctrl, %86:phisel = region %83
    %77:ptr = ptroff %75, %26
    %87:ctrl = store.4 %85, %29, %77
    %88:ctrl, %89:i64 = load.4 %87, %78
    %90:i64 = icmp slt %13, %89
    %91:ctrl, %92:ctrl = brcond %88, %90
    %93:ctrl, %94:phisel = region %91
    %76:ptr = ptroff %75, %15
    %95:ctrl = store.4 %93, %21, %76
    %97:ptr = ptroff %73, %10
    %98:ctrl, %99:i64 = load.4 %95, %97
    %100:i64 = icmp slt %13, %99
    %101:ctrl, %102:ctrl = brcond %98, %100
    %103:ctrl, %104:phisel = region %101
    %96:ptr = ptroff %73, %19
    %105:ctrl = store.8 %103, %75, %96
    %106:ctrl, %107:ptr = load.8 %105, %20
    %109:ptr = ptroff %107, %10
    %110:ctrl, %111:i64 = load.4 %106, %109
    %112:i64 = icmp slt %13, %111
    %113:ctrl, %114:ctrl = brcond %110, %112
    %115:ctrl, %116:phisel = region %113
    %108:ptr = ptroff %107, %19
    %117:ctrl, %118:ptr = load.8 %115, %108
    %120:ptr = ptroff %118, %10
    %121:ctrl, %122:i64 = load.4 %117, %120
    %123:i64 = icmp slt %5, %122
    %124:ctrl, %125:ctrl = brcond %121, %123
    %126:ctrl, %127:phisel = region %124
    %130:ctrl, %131:phisel = region %58, %68, %84, %92, %102, %114, %125
    %132:ctrl = call @throw_index_out_of_range_exception %130
    unreachable %132
    %119:ptr = ptroff %118, %9
    %128:ctrl, %129:i32 = load.4 %126, %119
    return %128, %129
}
