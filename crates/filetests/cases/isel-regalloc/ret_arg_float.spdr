# run: isel-regalloc

func @ret_first32:f32(f32, f32) {
    # check: function `ret_first32`:
    # nextln: clobbers: 
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     Ret $$xmm0

    %0:ctrl, %1:f32, %2:f32 = entry
    return %0, %1
}

func @ret_second32:f32(f32, f32) {
    # check: function `ret_second32`:
    # nextln: clobbers: xmm0
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$xmm0:xmm32 = $$xmm1
    # nextln: 0000:     Ret $$xmm0

    %0:ctrl, %1:f32, %2:f32 = entry
    return %0, %2
}

func @ret_ninth32:f32(f32, f32, f32, f32, f32, f32, f32, f32, f32) {
    # check: function `ret_ninth32`:
    # nextln: clobbers: xmm0
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     $$xmm0 = MovsRRbp { prec: Single, offset: 16 }
    # nextln: 0001:     Ret $$xmm0

    %0:ctrl, %1:f32, %2:f32, %3:f32, %4:f32, %5:f32, %6:f32, %7:f32, %8:f32, %9:f32 = entry
    return %0, %9
}

func @ret_first64:f64(f64, f64) {
    # check: function `ret_first64`:
    # nextln: clobbers: 
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     Ret $$xmm0

    %0:ctrl, %1:f64, %2:f64 = entry
    return %0, %1
}

func @ret_second64:f64(f64, f64) {
    # check: function `ret_second64`:
    # nextln: clobbers: xmm0
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$xmm0:xmm64 = $$xmm1
    # nextln: 0000:     Ret $$xmm0

    %0:ctrl, %1:f64, %2:f64 = entry
    return %0, %2
}

func @ret_ninth64:f64(f64, f64, f64, f64, f64, f64, f64, f64, f64) {
    # check: function `ret_ninth64`:
    # nextln: clobbers: xmm0
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     $$xmm0 = MovsRRbp { prec: Double, offset: 16 }
    # nextln: 0001:     Ret $$xmm0

    %0:ctrl, %1:f64, %2:f64, %3:f64, %4:f64, %5:f64, %6:f64, %7:f64, %8:f64, %9:f64 = entry
    return %0, %9
}
