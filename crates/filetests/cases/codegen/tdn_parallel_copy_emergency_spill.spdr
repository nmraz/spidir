# run: codegen[small-pic, large-abs]

extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)":i32(ptr, i32)
extfunc @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)":i32(i64, i32)

func @"System.Boolean Tests.BitTest::Run()":i32() {
    # check: function `System.Boolean Tests.BitTest::Run()`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: push r15
    # nextln: 0x0006: push r14
    # nextln: 0x0008: push r13
    # nextln: 0x000a: push r12
    # nextln: 0x000c: push rbx
    # nextln: 0x000d: sub rsp, 0xc8
    # nextln: 0x0014: jmp 0x19
    # nextln: 0x0019: mov eax, 0
    # nextln: 0x001e: lea rcx, [rsp + 0xae]
    # nextln: 0x0026: lea rdx, [rsp + 0xa8]
    # nextln: 0x002e: mov ebx, 0
    # nextln: 0x0033: lea rdi, [rsp]
    # nextln: 0x0037: mov r8, rdx
    # nextln: 0x003a: mov rdx, rdi
    # nextln: 0x003d: lea rsi, [rsp + 8]
    # nextln: 0x0042: lea rdi, [rsp + 0xa0]
    # nextln: 0x004a: mov r10, rsi
    # nextln: 0x004d: lea rsi, [rsp + 0xaa]
    # nextln: 0x0055: lea r9, [rsp + 0xa4]
    # nextln: 0x005d: lea r11, [rsp + 0xac]
    # nextln: 0x0065: lea r12, [rsp + 0xaf]
    # nextln: 0x006d: mov byte ptr [rsp + 0xaf], bl
    # nextln: 0x0074: mov byte ptr [rsp + 0xae], bl
    # nextln: 0x007b: lea r13, [rsp + 0xb0]
    # nextln: 0x0083: mov byte ptr [rsp + 0xb0], bl
    # nextln: 0x008a: mov word ptr [rsp + 0xac], bx
    # nextln: 0x0092: mov word ptr [rsp + 0xaa], bx
    # nextln: 0x009a: mov word ptr [rsp + 0xa8], bx
    # nextln: 0x00a2: mov dword ptr [rsp + 0xa4], ebx
    # nextln: 0x00a9: mov dword ptr [rsp + 0xa0], ebx
    # nextln: 0x00b0: mov qword ptr [rsp + 8], rax
    # nextln: 0x00b5: mov qword ptr [rsp], rax
    # nextln: 0x00b9: jmp 0xbe
    # nextln: 0x00be: mov rax, rcx
    # nextln: 0x00c1: mov ecx, 7
    # nextln: 0x00c6: mov r15, r12
    # nextln: 0x00c9: mov r12, rax
    # nextln: 0x00cc: mov rax, r15
    # nextln: 0x00cf: mov r14, rcx
    # nextln: 0x00d2: mov ecx, 8
    # nextln: 0x00d7: mov r15, rsi
    # nextln: 0x00da: mov rsi, rdx
    # nextln: 0x00dd: mov rdx, rdi
    # nextln: 0x00e0: mov rdi, r13
    # nextln: 0x00e3: mov r13, r11
    # nextln: 0x00e6: mov r11, r10
    # nextln: 0x00e9: mov r10, r8
    # nextln: 0x00ec: mov r8, r15
    # nextln: 0x00ef: mov r15d, 1
    # nextln: 0x00f5: mov qword ptr [rsp + 0x58], r8
    # nextln: 0x00fa: mov r8, rax
    # nextln: 0x00fd: mov rax, r10
    # nextln: 0x0100: mov r10, r9
    # nextln: 0x0103: mov r9, rdx
    # nextln: 0x0106: mov rdx, r15
    # nextln: 0x0109: mov r15, r13
    # nextln: 0x010c: mov r13, rdi
    # nextln: 0x010f: mov rdi, rsi
    # nextln: 0x0112: mov rsi, r12
    # nextln: 0x0115: mov r12, r11
    # nextln: 0x0118: mov r11d, 0x20
    # nextln: 0x011e: mov qword ptr [rsp + 0x50], rax
    # nextln: 0x0123: mov eax, 0xf
    # nextln: 0x0128: mov qword ptr [rsp + 0x80], rsi
    # nextln: 0x0130: mov qword ptr [rsp + 0x20], r12
    # nextln: 0x0135: mov r12, r8
    # nextln: 0x0138: mov rsi, r15
    # nextln: 0x013b: mov r8, qword ptr [rsp + 0x58]
    # nextln: 0x0140: mov r15, rdx
    # nextln: 0x0143: mov rdx, r10
    # nextln: 0x0146: mov qword ptr [rsp + 0x38], r9
    # nextln: 0x014b: mov r9, r14
    # nextln: 0x014e: mov r14, rax
    # nextln: 0x0151: mov r10, qword ptr [rsp + 0x50]
    # nextln: 0x0156: mov eax, 0x10
    # nextln: 0x015b: mov qword ptr [rsp + 0x98], r9
    # nextln: 0x0163: mov r9, qword ptr [rsp + 0x20]
    # nextln: 0x0168: mov qword ptr [rsp + 0x40], rdx
    # nextln: 0x016d: mov qword ptr [rsp + 0x50], r10
    # nextln: 0x0172: mov r10, rsi
    # nextln: 0x0175: mov rsi, r8
    # nextln: 0x0178: mov r8, qword ptr [rsp + 0x38]
    # nextln: 0x017d: mov edx, 3
    # nextln: 0x0182: mov qword ptr [rsp + 0x68], r10
    # nextln: 0x0187: mov r10, r9
    # nextln: 0x018a: mov qword ptr [rsp + 0x58], rsi
    # nextln: 0x018f: mov qword ptr [rsp + 0x18], rdi
    # nextln: 0x0194: mov rdi, qword ptr [rsp + 0x40]
    # nextln: 0x0199: mov r9, r8
    # nextln: 0x019c: mov r8, qword ptr [rsp + 0x98]
    # nextln: 0x01a4: mov esi, 0x40
    # nextln: 0x01a9: mov qword ptr [rsp + 0x38], r9
    # nextln: 0x01ae: mov r9d, 2
    # nextln: 0x01b4: mov qword ptr [rsp + 0x98], r8
    # nextln: 0x01bc: mov r8, rdi
    # nextln: 0x01bf: movsxd rdi, r15d
    # nextln: 0x01c2: mov qword ptr [rsp + 0x40], r8
    # nextln: 0x01c7: movsxd r8, r9d
    # nextln: 0x01ca: mov qword ptr [rsp + 0x20], r10
    # nextln: 0x01cf: mov r10d, 0xffffff80
    # nextln: 0x01d5: mov byte ptr [rsp + 0xaf], r10b
    # nextln: 0x01dd: mov r10d, 0xffff8000
    # nextln: 0x01e3: mov byte ptr [rsp + 0xae], r15b
    # nextln: 0x01eb: mov byte ptr [rsp + 0xb0], r9b
    # nextln: 0x01f3: mov word ptr [rsp + 0xac], r10w
    # nextln: 0x01fc: mov word ptr [rsp + 0xaa], r15w
    # nextln: 0x0205: mov word ptr [rsp + 0xa8], r9w
    # nextln: 0x020e: mov dword ptr [rsp + 0xa4], r15d
    # nextln: 0x0216: mov dword ptr [rsp + 0xa0], r9d
    # nextln: 0x021e: mov r10, qword ptr [rsp + 0x20]
    # nextln: 0x0223: mov r9, qword ptr [rsp + 0x38]
    # nextln: 0x0228: mov qword ptr [rsp + 8], rdi
    # nextln: 0x022d: mov rdi, qword ptr [rsp + 0x40]
    # nextln: 0x0232: mov qword ptr [rsp], r8
    # nextln: 0x0236: mov r8, rdi
    # nextln: 0x0239: movzx edi, byte ptr [rsp + 0xaf]
    # nextln: 0x0241: movsx edi, dil
    # nextln: 0x0245: mov qword ptr [rsp + 0x40], r8
    # nextln: 0x024a: movabs r8, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0x0254: mov qword ptr [rsp + 0x30], r11
    # nextln: 0x0259: mov qword ptr [rsp + 0x70], r14
    # nextln: 0x025e: mov qword ptr [rsp + 0x48], rdx
    # nextln: 0x0263: mov qword ptr [rsp + 0x90], r12
    # nextln: 0x026b: mov qword ptr [rsp + 0x10], r15
    # nextln: 0x0270: mov r12, qword ptr [rsp + 0x98]
    # nextln: 0x0278: mov qword ptr [rsp + 0x88], rcx
    # nextln: 0x0280: mov r14, qword ptr [rsp + 0x50]
    # nextln: 0x0285: mov qword ptr [rsp + 0x38], r9
    # nextln: 0x028a: mov qword ptr [rsp + 0x60], rax
    # nextln: 0x028f: mov qword ptr [rsp + 0x78], r13
    # nextln: 0x0294: mov r13, qword ptr [rsp + 0x58]
    # nextln: 0x0299: mov r15, rsi
    # nextln: 0x029c: mov qword ptr [rsp + 0x20], r10
    # nextln: 0x02a1: mov rsi, r12
    # nextln: 0x02a4: call r8
    # nextln: 0x02a7: mov rcx, r12
    # nextln: 0x02aa: mov r9, qword ptr [rsp + 0x40]
    # nextln: 0x02af: mov rdi, r15
    # nextln: 0x02b2: mov r15, r13
    # nextln: 0x02b5: mov r10, qword ptr [rsp + 0x90]
    # nextln: 0x02bd: mov rsi, qword ptr [rsp + 0x20]
    # nextln: 0x02c2: mov rdx, qword ptr [rsp + 0x80]
    # nextln: 0x02ca: mov r8, r14
    # nextln: 0x02cd: mov r12, qword ptr [rsp + 0x78]
    # nextln: 0x02d2: mov r14, qword ptr [rsp + 0x10]
    # nextln: 0x02d7: mov r11, qword ptr [rsp + 0x60]
    # nextln: 0x02dc: mov r13, r14
    # nextln: 0x02df: and r13d, eax
    # nextln: 0x02e2: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x02e7: mov qword ptr [rsp + 0x28], rdi
    # nextln: 0x02ec: movzx edi, byte ptr [rsp + 0xaf]
    # nextln: 0x02f4: movsx edi, dil
    # nextln: 0x02f8: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x02fd: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0x0307: mov qword ptr [rsp + 0x98], rcx
    # nextln: 0x030f: mov qword ptr [rsp + 0x40], r9
    # nextln: 0x0314: mov qword ptr [rsp + 0x20], rsi
    # nextln: 0x0319: mov qword ptr [rsp + 0x90], r10
    # nextln: 0x0321: mov qword ptr [rsp + 0x50], r8
    # nextln: 0x0326: mov qword ptr [rsp + 0x78], r12
    # nextln: 0x032b: mov r12, qword ptr [rsp + 0x88]
    # nextln: 0x0333: mov qword ptr [rsp + 0x60], r11
    # nextln: 0x0338: mov qword ptr [rsp + 0x58], r15
    # nextln: 0x033d: mov r15, r14
    # nextln: 0x0340: mov r14, rdx
    # nextln: 0x0343: mov rsi, r12
    # nextln: 0x0346: call rax
    # nextln: 0x0348: and r13d, eax
    # nextln: 0x034b: mov rcx, qword ptr [rsp + 0x98]
    # nextln: 0x0353: mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0x0358: mov rsi, qword ptr [rsp + 0x40]
    # nextln: 0x035d: mov r11, qword ptr [rsp + 0x78]
    # nextln: 0x0362: mov r9, qword ptr [rsp + 0x90]
    # nextln: 0x036a: mov qword ptr [rsp + 0x88], r12
    # nextln: 0x0372: mov rdi, qword ptr [rsp + 0x28]
    # nextln: 0x0377: mov r8, qword ptr [rsp + 0x50]
    # nextln: 0x037c: mov r10, qword ptr [rsp + 0x60]
    # nextln: 0x0381: mov qword ptr [rsp + 0x80], r14
    # nextln: 0x0389: mov r14, qword ptr [rsp + 0x48]
    # nextln: 0x038e: mov r12, r15
    # nextln: 0x0391: mov r15, qword ptr [rsp + 0x58]
    # nextln: 0x0396: movzx eax, byte ptr [rsp + 0xae]
    # nextln: 0x039e: mov qword ptr [rsp + 0x28], rdi
    # nextln: 0x03a3: movsx edi, al
    # nextln: 0x03a6: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0x03b0: mov qword ptr [rsp + 0x58], r15
    # nextln: 0x03b5: mov qword ptr [rsp + 0x20], rdx
    # nextln: 0x03ba: mov qword ptr [rsp + 0x78], r11
    # nextln: 0x03bf: mov qword ptr [rsp + 0x40], rsi
    # nextln: 0x03c4: mov r15, rcx
    # nextln: 0x03c7: mov qword ptr [rsp + 0x10], r12
    # nextln: 0x03cc: mov qword ptr [rsp + 0x60], r10
    # nextln: 0x03d1: mov qword ptr [rsp + 0x50], r8
    # nextln: 0x03d6: mov r12, qword ptr [rsp + 0x80]
    # nextln: 0x03de: mov qword ptr [rsp + 0x48], r14
    # nextln: 0x03e3: mov r14, r9
    # nextln: 0x03e6: mov rsi, rbx
    # nextln: 0x03e9: call rax
    # nextln: 0x03eb: and r13d, eax
    # nextln: 0x03ee: mov qword ptr [rsp + 0x98], r15
    # nextln: 0x03f6: mov rdi, qword ptr [rsp + 0x28]
    # nextln: 0x03fb: mov r11, r14
    # nextln: 0x03fe: mov rcx, r12
    # nextln: 0x0401: mov r15, qword ptr [rsp + 0x78]
    # nextln: 0x0406: mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0x040b: mov rsi, qword ptr [rsp + 0x10]
    # nextln: 0x0410: mov r14, qword ptr [rsp + 0x70]
    # nextln: 0x0415: mov r10, qword ptr [rsp + 0x60]
    # nextln: 0x041a: mov r12, qword ptr [rsp + 0x58]
    # nextln: 0x041f: mov r8, qword ptr [rsp + 0x50]
    # nextln: 0x0424: mov r9, qword ptr [rsp + 0x40]
    # nextln: 0x0429: movzx eax, byte ptr [rsp + 0xae]
    # nextln: 0x0431: mov qword ptr [rsp + 0x28], rdi
    # nextln: 0x0436: movsx edi, al
    # nextln: 0x0439: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0x0443: mov qword ptr [rsp + 0x90], r11
    # nextln: 0x044b: mov qword ptr [rsp + 0x80], rcx
    # nextln: 0x0453: mov qword ptr [rsp + 0x78], r15
    # nextln: 0x0458: mov r15, rdx
    # nextln: 0x045b: mov qword ptr [rsp + 0x10], rsi
    # nextln: 0x0460: mov qword ptr [rsp + 0x70], r14
    # nextln: 0x0465: mov r14, qword ptr [rsp + 0x98]
    # nextln: 0x046d: mov qword ptr [rsp + 0x60], r10
    # nextln: 0x0472: mov qword ptr [rsp + 0x58], r12
    # nextln: 0x0477: mov r12, qword ptr [rsp + 0x88]
    # nextln: 0x047f: mov qword ptr [rsp + 0x50], r8
    # nextln: 0x0484: mov qword ptr [rsp + 0x40], r9
    # nextln: 0x0489: mov rsi, r12
    # nextln: 0x048c: call rax
    # nextln: 0x048e: xor ecx, ecx
    # nextln: 0x0490: cmp eax, ebx
    # nextln: 0x0492: sete cl
    # nextln: 0x0495: and r13d, ecx
    # nextln: 0x0498: mov rdx, r14
    # nextln: 0x049b: mov rcx, qword ptr [rsp + 0x90]
    # nextln: 0x04a3: mov r14, qword ptr [rsp + 0x70]
    # nextln: 0x04a8: mov qword ptr [rsp + 0x88], r12
    # nextln: 0x04b0: mov r12, qword ptr [rsp + 0x58]
    # nextln: 0x04b5: mov r10, qword ptr [rsp + 0x78]
    # nextln: 0x04ba: mov r11, qword ptr [rsp + 0x60]
    # nextln: 0x04bf: mov r8, qword ptr [rsp + 0x50]
    # nextln: 0x04c4: mov rdi, r15
    # nextln: 0x04c7: mov r15, qword ptr [rsp + 0x48]
    # nextln: 0x04cc: mov rsi, qword ptr [rsp + 0x40]
    # nextln: 0x04d1: mov r9, qword ptr [rsp + 0x10]
    # nextln: 0x04d6: movzx eax, byte ptr [rsp + 0xae]
    # nextln: 0x04de: mov qword ptr [rsp + 0x20], rdi
    # nextln: 0x04e3: movsx edi, al
    # nextln: 0x04e6: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0x04f0: mov qword ptr [rsp + 0x58], r12
    # nextln: 0x04f5: mov qword ptr [rsp + 0x70], r14
    # nextln: 0x04fa: mov r14, rsi
    # nextln: 0x04fd: mov qword ptr [rsp + 0x10], r9
    # nextln: 0x0502: mov qword ptr [rsp + 0x98], rdx
    # nextln: 0x050a: mov qword ptr [rsp + 0x90], rcx
    # nextln: 0x0512: mov r12, r8
    # nextln: 0x0515: mov qword ptr [rsp + 0x60], r11
    # nextln: 0x051a: mov qword ptr [rsp + 0x78], r10
    # nextln: 0x051f: mov rsi, qword ptr [rsp + 0x30]
    # nextln: 0x0524: call rax
    # nextln: 0x0526: and r13d, eax
    # nextln: 0x0529: mov rdi, qword ptr [rsp + 0x98]
    # nextln: 0x0531: mov r11, qword ptr [rsp + 0x58]
    # nextln: 0x0536: mov rcx, r14
    # nextln: 0x0539: mov r14, qword ptr [rsp + 0x28]
    # nextln: 0x053e: mov rdx, qword ptr [rsp + 0x78]
    # nextln: 0x0543: mov qword ptr [rsp + 0x50], r12
    # nextln: 0x0548: mov r9, qword ptr [rsp + 0x38]
    # nextln: 0x054d: mov r10, qword ptr [rsp + 0x70]
    # nextln: 0x0552: mov r12, r15
    # nextln: 0x0555: mov r15, qword ptr [rsp + 0x18]
    # nextln: 0x055a: mov rsi, qword ptr [rsp + 0x60]
    # nextln: 0x055f: mov r8, qword ptr [rsp + 0x10]
    # nextln: 0x0564: movzx eax, byte ptr [rsp + 0xb0]
    # nextln: 0x056c: mov qword ptr [rsp + 0x98], rdi
    # nextln: 0x0574: movsx edi, al
    # nextln: 0x0577: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0x0581: mov qword ptr [rsp + 0x28], r14
    # nextln: 0x0586: mov qword ptr [rsp + 0x58], r11
    # nextln: 0x058b: mov qword ptr [rsp + 0x48], r12
    # nextln: 0x0590: mov r14, rcx
    # nextln: 0x0593: mov qword ptr [rsp + 0x60], rsi
    # nextln: 0x0598: mov qword ptr [rsp + 0x38], r9
    # nextln: 0x059d: mov qword ptr [rsp + 0x78], rdx
    # nextln: 0x05a2: mov r12, qword ptr [rsp + 0x50]
    # nextln: 0x05a7: mov qword ptr [rsp + 0x18], r15
    # nextln: 0x05ac: mov r15, r10
    # nextln: 0x05af: mov qword ptr [rsp + 0x10], r8
    # nextln: 0x05b4: mov rsi, rbx
    # nextln: 0x05b7: call rax
    # nextln: 0x05b9: xor ecx, ecx
    # nextln: 0x05bb: cmp eax, ebx
    # nextln: 0x05bd: sete cl
    # nextln: 0x05c0: and r13d, ecx
    # nextln: 0x05c3: mov r10, qword ptr [rsp + 0x60]
    # nextln: 0x05c8: mov rdi, qword ptr [rsp + 0x48]
    # nextln: 0x05cd: mov rax, qword ptr [rsp + 0x10]
    # nextln: 0x05d2: mov rsi, qword ptr [rsp + 0x98]
    # nextln: 0x05da: mov r8, qword ptr [rsp + 0x58]
    # nextln: 0x05df: mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0x05e4: mov r11, r14
    # nextln: 0x05e7: mov r14, qword ptr [rsp + 0x90]
    # nextln: 0x05ef: mov qword ptr [rsp + 0x50], r12
    # nextln: 0x05f4: mov r12, qword ptr [rsp + 0x88]
    # nextln: 0x05fc: mov r9, r15
    # nextln: 0x05ff: mov r15, qword ptr [rsp + 0x80]
    # nextln: 0x0607: movabs rdx, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0x0611: mov qword ptr [rsp + 0x40], r11
    # nextln: 0x0616: mov qword ptr [rsp + 0x38], rcx
    # nextln: 0x061b: mov qword ptr [rsp + 0x58], r8
    # nextln: 0x0620: mov qword ptr [rsp + 0x10], rax
    # nextln: 0x0625: mov qword ptr [rsp + 0x48], rdi
    # nextln: 0x062a: mov qword ptr [rsp + 0x60], r10
    # nextln: 0x062f: mov qword ptr [rsp + 0x70], r9
    # nextln: 0x0634: mov rdi, r14
    # nextln: 0x0637: call rdx
    # nextln: 0x0639: mov r9, qword ptr [rsp + 0x18]
    # nextln: 0x063e: mov r8, qword ptr [rsp + 0x40]
    # nextln: 0x0643: mov rsi, qword ptr [rsp + 0x58]
    # nextln: 0x0648: mov rdi, r14
    # nextln: 0x064b: mov r14, qword ptr [rsp + 0x10]
    # nextln: 0x0650: mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0x0655: mov r10, qword ptr [rsp + 0x50]
    # nextln: 0x065a: mov rcx, qword ptr [rsp + 0x30]
    # nextln: 0x065f: mov r11, qword ptr [rsp + 0x78]
    # nextln: 0x0664: and r13d, eax
    # nextln: 0x0667: mov qword ptr [rsp + 0x40], r8
    # nextln: 0x066c: mov r8, r9
    # nextln: 0x066f: mov qword ptr [rsp + 0x78], r11
    # nextln: 0x0674: mov r11, qword ptr [rsp + 0x70]
    # nextln: 0x0679: mov r9, r10
    # nextln: 0x067c: mov r10, rsi
    # nextln: 0x067f: mov rsi, rdx
    # nextln: 0x0682: mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0x0687: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0x0691: mov qword ptr [rsp + 0x70], r11
    # nextln: 0x0696: mov qword ptr [rsp + 0x38], rdx
    # nextln: 0x069b: mov qword ptr [rsp + 0x58], r10
    # nextln: 0x06a0: mov qword ptr [rsp + 0x50], r9
    # nextln: 0x06a5: mov qword ptr [rsp + 0x18], r8
    # nextln: 0x06aa: mov qword ptr [rsp + 0x30], rcx
    # nextln: 0x06af: mov qword ptr [rsp + 0x20], rsi
    # nextln: 0x06b4: mov rsi, r12
    # nextln: 0x06b7: call rax
    # nextln: 0x06b9: mov r11, qword ptr [rsp + 0x40]
    # nextln: 0x06be: mov r10, qword ptr [rsp + 0x20]
    # nextln: 0x06c3: mov rsi, qword ptr [rsp + 0x70]
    # nextln: 0x06c8: mov rdx, qword ptr [rsp + 0x30]
    # nextln: 0x06cd: mov r8, qword ptr [rsp + 0x38]
    # nextln: 0x06d2: mov r9, qword ptr [rsp + 0x58]
    # nextln: 0x06d7: mov rdi, qword ptr [rsp + 0x48]
    # nextln: 0x06dc: mov rcx, r14
    # nextln: 0x06df: mov r14, qword ptr [rsp + 0x28]
    # nextln: 0x06e4: and r13d, eax
    # nextln: 0x06e7: mov qword ptr [rsp + 0x20], r10
    # nextln: 0x06ec: mov qword ptr [rsp + 0x70], rsi
    # nextln: 0x06f1: mov rsi, r14
    # nextln: 0x06f4: mov r14, qword ptr [rsp + 0x78]
    # nextln: 0x06f9: mov r10, rdi
    # nextln: 0x06fc: mov rdi, r11
    # nextln: 0x06ff: mov r11, r8
    # nextln: 0x0702: mov qword ptr [rsp + 0x58], r9
    # nextln: 0x0707: mov r9, qword ptr [rsp + 0x60]
    # nextln: 0x070c: mov rax, qword ptr [rsp + 0x50]
    # nextln: 0x0711: movabs r8, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0x071b: mov qword ptr [rsp + 0x40], rdi
    # nextln: 0x0720: mov qword ptr [rsp + 0x28], rsi
    # nextln: 0x0725: mov qword ptr [rsp + 0x38], r11
    # nextln: 0x072a: mov qword ptr [rsp + 0x60], r9
    # nextln: 0x072f: mov qword ptr [rsp + 0x48], r10
    # nextln: 0x0734: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x0739: mov qword ptr [rsp + 0x50], rax
    # nextln: 0x073e: mov qword ptr [rsp + 0x30], rdx
    # nextln: 0x0743: mov rdi, r15
    # nextln: 0x0746: mov rsi, rbx
    # nextln: 0x0749: call r8
    # nextln: 0x074c: and r13d, eax
    # nextln: 0x074f: mov rax, qword ptr [rsp + 0x40]
    # nextln: 0x0754: mov r10, qword ptr [rsp + 0x18]
    # nextln: 0x0759: mov r11, qword ptr [rsp + 0x58]
    # nextln: 0x075e: mov rsi, qword ptr [rsp + 0x30]
    # nextln: 0x0763: mov rdx, qword ptr [rsp + 0x48]
    # nextln: 0x0768: mov rdi, qword ptr [rsp + 0x60]
    # nextln: 0x076d: mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0x0772: mov r8, qword ptr [rsp + 0x70]
    # nextln: 0x0777: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0x0781: mov qword ptr [rsp + 0x18], r10
    # nextln: 0x0786: mov qword ptr [rsp + 0x70], r8
    # nextln: 0x078b: mov qword ptr [rsp + 0x38], rcx
    # nextln: 0x0790: mov qword ptr [rsp + 0x30], rsi
    # nextln: 0x0795: mov qword ptr [rsp + 0x58], r11
    # nextln: 0x079a: mov qword ptr [rsp + 0x48], rdx
    # nextln: 0x079f: mov qword ptr [rsp + 0x40], rax
    # nextln: 0x07a4: mov qword ptr [rsp + 0x60], rdi
    # nextln: 0x07a9: mov rdi, r15
    # nextln: 0x07ac: mov rsi, r12
    # nextln: 0x07af: call r9
    # nextln: 0x07b2: mov r12, qword ptr [rsp + 0x18]
    # nextln: 0x07b7: mov r8, qword ptr [rsp + 0x48]
    # nextln: 0x07bc: mov rdi, qword ptr [rsp + 0x70]
    # nextln: 0x07c1: mov r10, qword ptr [rsp + 0x30]
    # nextln: 0x07c6: mov r9, qword ptr [rsp + 0x38]
    # nextln: 0x07cb: mov rsi, qword ptr [rsp + 0x58]
    # nextln: 0x07d0: mov r11, qword ptr [rsp + 0x28]
    # nextln: 0x07d5: mov rdx, qword ptr [rsp + 0x60]
    # nextln: 0x07da: xor ecx, ecx
    # nextln: 0x07dc: cmp eax, ebx
    # nextln: 0x07de: mov rax, qword ptr [rsp + 0x10]
    # nextln: 0x07e3: sete cl
    # nextln: 0x07e6: and r13d, ecx
    # nextln: 0x07e9: mov qword ptr [rsp + 0x38], r9
    # nextln: 0x07ee: mov r9, r12
    # nextln: 0x07f1: mov r12, r8
    # nextln: 0x07f4: mov r8, qword ptr [rsp + 0x50]
    # nextln: 0x07f9: mov qword ptr [rsp + 0x10], rax
    # nextln: 0x07fe: mov rcx, rdx
    # nextln: 0x0801: mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0x0806: mov qword ptr [rsp + 0x58], rsi
    # nextln: 0x080b: mov rsi, rdi
    # nextln: 0x080e: mov rdi, r11
    # nextln: 0x0811: mov r11, r10
    # nextln: 0x0814: mov r10, qword ptr [rsp + 0x40]
    # nextln: 0x0819: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0x0823: mov qword ptr [rsp + 0x40], r10
    # nextln: 0x0828: mov qword ptr [rsp + 0x48], r12
    # nextln: 0x082d: mov qword ptr [rsp + 0x18], r9
    # nextln: 0x0832: mov qword ptr [rsp + 0x20], rdx
    # nextln: 0x0837: mov r12, r11
    # nextln: 0x083a: mov qword ptr [rsp + 0x70], rsi
    # nextln: 0x083f: mov qword ptr [rsp + 0x60], rcx
    # nextln: 0x0844: mov qword ptr [rsp + 0x28], rdi
    # nextln: 0x0849: mov qword ptr [rsp + 0x50], r8
    # nextln: 0x084e: mov rdi, r15
    # nextln: 0x0851: mov rsi, r12
    # nextln: 0x0854: call rax
    # nextln: 0x0856: mov rsi, qword ptr [rsp + 0x40]
    # nextln: 0x085b: mov r10, qword ptr [rsp + 0x20]
    # nextln: 0x0860: mov r8, qword ptr [rsp + 0x28]
    # nextln: 0x0865: mov r9, r12
    # nextln: 0x0868: mov r12, qword ptr [rsp + 0x18]
    # nextln: 0x086d: mov r11, qword ptr [rsp + 0x50]
    # nextln: 0x0872: mov rdi, qword ptr [rsp + 0x38]
    # nextln: 0x0877: mov rdx, qword ptr [rsp + 0x70]
    # nextln: 0x087c: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x0881: mov r15, qword ptr [rsp + 0x48]
    # nextln: 0x0886: and r13d, eax
    # nextln: 0x0889: mov qword ptr [rsp + 0x48], r15
    # nextln: 0x088e: mov rax, r8
    # nextln: 0x0891: mov qword ptr [rsp + 0x38], rdi
    # nextln: 0x0896: mov rdi, r10
    # nextln: 0x0899: mov r10, r11
    # nextln: 0x089c: mov r11, rsi
    # nextln: 0x089f: mov rsi, r9
    # nextln: 0x08a2: mov r9, r12
    # nextln: 0x08a5: mov r12, qword ptr [rsp + 0x58]
    # nextln: 0x08aa: mov r15, qword ptr [rsp + 0x60]
    # nextln: 0x08af: movabs r8, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0x08b9: mov qword ptr [rsp + 0x40], r11
    # nextln: 0x08be: mov qword ptr [rsp + 0x20], rdi
    # nextln: 0x08c3: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x08c8: mov qword ptr [rsp + 0x18], r9
    # nextln: 0x08cd: mov qword ptr [rsp + 0x70], rdx
    # nextln: 0x08d2: mov qword ptr [rsp + 0x60], r15
    # nextln: 0x08d7: mov r15, r12
    # nextln: 0x08da: mov r12, rsi
    # nextln: 0x08dd: mov qword ptr [rsp + 0x50], r10
    # nextln: 0x08e2: mov qword ptr [rsp + 0x28], rax
    # nextln: 0x08e7: mov rsi, rbx
    # nextln: 0x08ea: mov rdi, r14
    # nextln: 0x08ed: call r8
    # nextln: 0x08f0: mov r8, qword ptr [rsp + 0x38]
    # nextln: 0x08f5: mov r11, qword ptr [rsp + 0x20]
    # nextln: 0x08fa: mov r14, qword ptr [rsp + 0x50]
    # nextln: 0x08ff: mov r10, qword ptr [rsp + 0x10]
    # nextln: 0x0904: mov rdi, qword ptr [rsp + 0x60]
    # nextln: 0x0909: mov r9, qword ptr [rsp + 0x18]
    # nextln: 0x090e: mov rsi, qword ptr [rsp + 0x70]
    # nextln: 0x0913: mov rdx, qword ptr [rsp + 0x48]
    # nextln: 0x0918: xor ecx, ecx
    # nextln: 0x091a: cmp eax, ebx
    # nextln: 0x091c: mov rax, qword ptr [rsp + 0x28]
    # nextln: 0x0921: sete cl
    # nextln: 0x0924: and r13d, ecx
    # nextln: 0x0927: mov rcx, rdx
    # nextln: 0x092a: mov qword ptr [rsp + 0x18], r9
    # nextln: 0x092f: mov rdx, rax
    # nextln: 0x0932: mov r9, rsi
    # nextln: 0x0935: mov rsi, r8
    # nextln: 0x0938: mov r8, r12
    # nextln: 0x093b: mov r12, r14
    # nextln: 0x093e: mov r14, r15
    # nextln: 0x0941: mov r15, qword ptr [rsp + 0x40]
    # nextln: 0x0946: movzx eax, word ptr [rsp + 0xac]
    # nextln: 0x094e: mov qword ptr [rsp + 0x60], rdi
    # nextln: 0x0953: movsx edi, ax
    # nextln: 0x0956: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0x0960: mov qword ptr [rsp + 0x40], r15
    # nextln: 0x0965: mov qword ptr [rsp + 0x48], rcx
    # nextln: 0x096a: mov qword ptr [rsp + 0x30], r8
    # nextln: 0x096f: mov qword ptr [rsp + 0x28], rdx
    # nextln: 0x0974: mov qword ptr [rsp + 0x20], r11
    # nextln: 0x0979: mov qword ptr [rsp + 0x50], r12
    # nextln: 0x097e: mov r12, qword ptr [rsp + 0x60]
    # nextln: 0x0983: mov r15, r14
    # nextln: 0x0986: mov qword ptr [rsp + 0x10], r10
    # nextln: 0x098b: mov qword ptr [rsp + 0x38], rsi
    # nextln: 0x0990: mov r14, r9
    # nextln: 0x0993: mov rsi, r14
    # nextln: 0x0996: call rax
    # nextln: 0x0998: and r13d, eax
    # nextln: 0x099b: mov r9, qword ptr [rsp + 0x10]
    # nextln: 0x09a0: mov rsi, qword ptr [rsp + 0x30]
    # nextln: 0x09a5: mov r8, qword ptr [rsp + 0x18]
    # nextln: 0x09aa: mov r11, qword ptr [rsp + 0x20]
    # nextln: 0x09af: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x09b4: mov rax, r15
    # nextln: 0x09b7: mov r15, qword ptr [rsp + 0x50]
    # nextln: 0x09bc: mov rcx, qword ptr [rsp + 0x48]
    # nextln: 0x09c1: mov r10, r14
    # nextln: 0x09c4: mov r14, qword ptr [rsp + 0x40]
    # nextln: 0x09c9: movzx edi, word ptr [rsp + 0xac]
    # nextln: 0x09d1: movsx edi, di
    # nextln: 0x09d4: mov qword ptr [rsp + 0x58], rax
    # nextln: 0x09d9: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0x09e3: mov qword ptr [rsp + 0x40], r14
    # nextln: 0x09e8: mov qword ptr [rsp + 0x28], rdx
    # nextln: 0x09ed: mov qword ptr [rsp + 0x20], r11
    # nextln: 0x09f2: mov r14, qword ptr [rsp + 0x58]
    # nextln: 0x09f7: mov qword ptr [rsp + 0x18], r8
    # nextln: 0x09fc: mov qword ptr [rsp + 0x10], r9
    # nextln: 0x0a01: mov qword ptr [rsp + 0x48], rcx
    # nextln: 0x0a06: mov qword ptr [rsp + 0x70], r10
    # nextln: 0x0a0b: mov qword ptr [rsp + 0x30], rsi
    # nextln: 0x0a10: mov rsi, r12
    # nextln: 0x0a13: call rax
    # nextln: 0x0a15: and r13d, eax
    # nextln: 0x0a18: mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0x0a1d: mov r10, qword ptr [rsp + 0x20]
    # nextln: 0x0a22: mov qword ptr [rsp + 0x58], r14
    # nextln: 0x0a27: mov r14, r15
    # nextln: 0x0a2a: mov rax, qword ptr [rsp + 0x48]
    # nextln: 0x0a2f: mov r9, qword ptr [rsp + 0x18]
    # nextln: 0x0a34: mov r11, qword ptr [rsp + 0x10]
    # nextln: 0x0a39: mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0x0a3e: mov r8, qword ptr [rsp + 0x30]
    # nextln: 0x0a43: mov rsi, qword ptr [rsp + 0x70]
    # nextln: 0x0a48: mov r15, qword ptr [rsp + 0x40]
    # nextln: 0x0a4d: movzx edi, word ptr [rsp + 0xaa]
    # nextln: 0x0a55: movsx edi, di
    # nextln: 0x0a58: mov qword ptr [rsp + 0x48], rax
    # nextln: 0x0a5d: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0x0a67: mov qword ptr [rsp + 0x50], r14
    # nextln: 0x0a6c: mov qword ptr [rsp + 0x28], rcx
    # nextln: 0x0a71: mov qword ptr [rsp + 0x20], r10
    # nextln: 0x0a76: mov r14, r9
    # nextln: 0x0a79: mov qword ptr [rsp + 0x10], r11
    # nextln: 0x0a7e: mov qword ptr [rsp + 0x30], r8
    # nextln: 0x0a83: mov qword ptr [rsp + 0x38], rdx
    # nextln: 0x0a88: mov qword ptr [rsp + 0x70], rsi
    # nextln: 0x0a8d: mov qword ptr [rsp + 0x40], r15
    # nextln: 0x0a92: mov r15, qword ptr [rsp + 0x48]
    # nextln: 0x0a97: mov rsi, rbx
    # nextln: 0x0a9a: call rax
    # nextln: 0x0a9c: and r13d, eax
    # nextln: 0x0a9f: mov r9, r14
    # nextln: 0x0aa2: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x0aa7: mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0x0aac: mov r8, qword ptr [rsp + 0x20]
    # nextln: 0x0ab1: mov r11, qword ptr [rsp + 0x10]
    # nextln: 0x0ab6: mov rdi, qword ptr [rsp + 0x58]
    # nextln: 0x0abb: mov r10, qword ptr [rsp + 0x50]
    # nextln: 0x0ac0: mov rsi, qword ptr [rsp + 0x70]
    # nextln: 0x0ac5: mov r14, qword ptr [rsp + 0x30]
    # nextln: 0x0aca: mov qword ptr [rsp + 0x48], r15
    # nextln: 0x0acf: mov r15, qword ptr [rsp + 0x40]
    # nextln: 0x0ad4: movzx eax, word ptr [rsp + 0xaa]
    # nextln: 0x0adc: mov qword ptr [rsp + 0x58], rdi
    # nextln: 0x0ae1: movsx edi, ax
    # nextln: 0x0ae4: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0x0aee: mov qword ptr [rsp + 0x18], r9
    # nextln: 0x0af3: mov qword ptr [rsp + 0x40], r15
    # nextln: 0x0af8: mov qword ptr [rsp + 0x50], r10
    # nextln: 0x0afd: mov qword ptr [rsp + 0x30], r14
    # nextln: 0x0b02: mov r14, qword ptr [rsp + 0x48]
    # nextln: 0x0b07: mov qword ptr [rsp + 0x28], rdx
    # nextln: 0x0b0c: mov r15, rcx
    # nextln: 0x0b0f: mov qword ptr [rsp + 0x20], r8
    # nextln: 0x0b14: mov qword ptr [rsp + 0x10], r11
    # nextln: 0x0b19: mov qword ptr [rsp + 0x70], rsi
    # nextln: 0x0b1e: mov rsi, r12
    # nextln: 0x0b21: call rax
    # nextln: 0x0b23: xor ecx, ecx
    # nextln: 0x0b25: cmp eax, ebx
    # nextln: 0x0b27: sete cl
    # nextln: 0x0b2a: and r13d, ecx
    # nextln: 0x0b2d: mov r10, qword ptr [rsp + 0x18]
    # nextln: 0x0b32: mov r8, qword ptr [rsp + 0x10]
    # nextln: 0x0b37: mov r11, qword ptr [rsp + 0x50]
    # nextln: 0x0b3c: mov rax, r14
    # nextln: 0x0b3f: mov r14, qword ptr [rsp + 0x40]
    # nextln: 0x0b44: mov rsi, qword ptr [rsp + 0x30]
    # nextln: 0x0b49: mov r9, qword ptr [rsp + 0x20]
    # nextln: 0x0b4e: mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0x0b53: mov rdx, r15
    # nextln: 0x0b56: mov r15, qword ptr [rsp + 0x58]
    # nextln: 0x0b5b: movzx edi, word ptr [rsp + 0xaa]
    # nextln: 0x0b63: movsx edi, di
    # nextln: 0x0b66: mov qword ptr [rsp + 0x48], rax
    # nextln: 0x0b6b: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0x0b75: mov qword ptr [rsp + 0x10], r8
    # nextln: 0x0b7a: mov qword ptr [rsp + 0x40], r14
    # nextln: 0x0b7f: mov qword ptr [rsp + 0x20], r9
    # nextln: 0x0b84: mov r14, rsi
    # nextln: 0x0b87: mov qword ptr [rsp + 0x18], r10
    # nextln: 0x0b8c: mov qword ptr [rsp + 0x38], rdx
    # nextln: 0x0b91: mov qword ptr [rsp + 0x28], rcx
    # nextln: 0x0b96: mov qword ptr [rsp + 0x50], r11
    # nextln: 0x0b9b: mov rsi, r14
    # nextln: 0x0b9e: call rax
    # nextln: 0x0ba0: and r13d, eax
    # nextln: 0x0ba3: mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0x0ba8: mov r10, qword ptr [rsp + 0x18]
    # nextln: 0x0bad: mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0x0bb2: mov rax, qword ptr [rsp + 0x48]
    # nextln: 0x0bb7: mov r9, qword ptr [rsp + 0x20]
    # nextln: 0x0bbc: mov r11, qword ptr [rsp + 0x40]
    # nextln: 0x0bc1: mov r8, qword ptr [rsp + 0x10]
    # nextln: 0x0bc6: mov rsi, r14
    # nextln: 0x0bc9: mov r14, qword ptr [rsp + 0x70]
    # nextln: 0x0bce: movzx edi, word ptr [rsp + 0xa8]
    # nextln: 0x0bd6: movsx edi, di
    # nextln: 0x0bd9: mov qword ptr [rsp + 0x48], rax
    # nextln: 0x0bde: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0x0be8: mov qword ptr [rsp + 0x18], r10
    # nextln: 0x0bed: mov qword ptr [rsp + 0x30], rsi
    # nextln: 0x0bf2: mov qword ptr [rsp + 0x28], rcx
    # nextln: 0x0bf7: mov qword ptr [rsp + 0x20], r9
    # nextln: 0x0bfc: mov qword ptr [rsp + 0x40], r11
    # nextln: 0x0c01: mov qword ptr [rsp + 0x10], r8
    # nextln: 0x0c06: mov qword ptr [rsp + 0x38], rdx
    # nextln: 0x0c0b: mov rsi, rbx
    # nextln: 0x0c0e: call rax
    # nextln: 0x0c10: xor ecx, ecx
    # nextln: 0x0c12: cmp eax, ebx
    # nextln: 0x0c14: sete cl
    # nextln: 0x0c17: and r13d, ecx
    # nextln: 0x0c1a: mov rdi, qword ptr [rsp + 0x38]
    # nextln: 0x0c1f: mov rsi, qword ptr [rsp + 0x50]
    # nextln: 0x0c24: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x0c29: mov r10, qword ptr [rsp + 0x20]
    # nextln: 0x0c2e: mov r9, qword ptr [rsp + 0x28]
    # nextln: 0x0c33: mov rdx, qword ptr [rsp + 0x40]
    # nextln: 0x0c38: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x0c3d: mov r11, qword ptr [rsp + 0x48]
    # nextln: 0x0c42: movabs r8, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0x0c4c: mov qword ptr [rsp + 0x38], rdi
    # nextln: 0x0c51: mov qword ptr [rsp + 0x48], r11
    # nextln: 0x0c56: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x0c5b: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x0c60: mov qword ptr [rsp + 0x40], rdx
    # nextln: 0x0c65: mov qword ptr [rsp + 0x20], r10
    # nextln: 0x0c6a: mov qword ptr [rsp + 0x28], r9
    # nextln: 0x0c6f: mov qword ptr [rsp + 0x50], rsi
    # nextln: 0x0c74: mov rdi, qword ptr [rsp + 0x68]
    # nextln: 0x0c79: mov rsi, r14
    # nextln: 0x0c7c: call r8
    # nextln: 0x0c7f: mov r8, qword ptr [rsp + 0x38]
    # nextln: 0x0c84: mov r9, qword ptr [rsp + 0x28]
    # nextln: 0x0c89: mov rsi, qword ptr [rsp + 0x18]
    # nextln: 0x0c8e: mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0x0c93: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x0c98: mov r14, qword ptr [rsp + 0x50]
    # nextln: 0x0c9d: mov r10, qword ptr [rsp + 0x40]
    # nextln: 0x0ca2: mov r11, qword ptr [rsp + 0x30]
    # nextln: 0x0ca7: mov rdi, qword ptr [rsp + 0x48]
    # nextln: 0x0cac: and r13d, eax
    # nextln: 0x0caf: mov rax, rsi
    # nextln: 0x0cb2: mov rsi, r10
    # nextln: 0x0cb5: mov r10, rdx
    # nextln: 0x0cb8: mov rdx, r11
    # nextln: 0x0cbb: mov r11, rdi
    # nextln: 0x0cbe: mov rdi, r8
    # nextln: 0x0cc1: mov r8, r9
    # nextln: 0x0cc4: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0x0cce: mov qword ptr [rsp + 0x38], rdi
    # nextln: 0x0cd3: mov qword ptr [rsp + 0x48], r11
    # nextln: 0x0cd8: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x0cdd: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x0ce2: mov qword ptr [rsp + 0x20], r10
    # nextln: 0x0ce7: mov qword ptr [rsp + 0x30], rdx
    # nextln: 0x0cec: mov qword ptr [rsp + 0x40], rsi
    # nextln: 0x0cf1: mov qword ptr [rsp + 0x28], r8
    # nextln: 0x0cf6: mov rdi, qword ptr [rsp + 0x68]
    # nextln: 0x0cfb: mov rsi, r12
    # nextln: 0x0cfe: call r9
    # nextln: 0x0d01: mov rcx, qword ptr [rsp + 0x20]
    # nextln: 0x0d06: and r13d, eax
    # nextln: 0x0d09: mov rsi, qword ptr [rsp + 0x48]
    # nextln: 0x0d0e: mov rdi, qword ptr [rsp + 0x18]
    # nextln: 0x0d13: mov r11, qword ptr [rsp + 0x30]
    # nextln: 0x0d18: mov rax, qword ptr [rsp + 0x40]
    # nextln: 0x0d1d: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x0d22: mov r9, qword ptr [rsp + 0x10]
    # nextln: 0x0d27: mov r10, qword ptr [rsp + 0x38]
    # nextln: 0x0d2c: movabs r8, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0x0d36: mov qword ptr [rsp + 0x38], r10
    # nextln: 0x0d3b: mov qword ptr [rsp + 0x48], rsi
    # nextln: 0x0d40: mov qword ptr [rsp + 0x18], rdi
    # nextln: 0x0d45: mov qword ptr [rsp + 0x20], rcx
    # nextln: 0x0d4a: mov qword ptr [rsp + 0x40], rax
    # nextln: 0x0d4f: mov qword ptr [rsp + 0x28], rdx
    # nextln: 0x0d54: mov qword ptr [rsp + 0x10], r9
    # nextln: 0x0d59: mov qword ptr [rsp + 0x30], r11
    # nextln: 0x0d5e: mov rdi, r15
    # nextln: 0x0d61: mov rsi, rbx
    # nextln: 0x0d64: call r8
    # nextln: 0x0d67: and r13d, eax
    # nextln: 0x0d6a: mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0x0d6f: mov rcx, qword ptr [rsp + 0x48]
    # nextln: 0x0d74: mov r11, qword ptr [rsp + 0x18]
    # nextln: 0x0d79: mov r10, qword ptr [rsp + 0x20]
    # nextln: 0x0d7e: mov rsi, qword ptr [rsp + 0x40]
    # nextln: 0x0d83: mov rdi, qword ptr [rsp + 0x30]
    # nextln: 0x0d88: mov r8, qword ptr [rsp + 0x28]
    # nextln: 0x0d8d: mov rax, qword ptr [rsp + 0x10]
    # nextln: 0x0d92: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0x0d9c: mov qword ptr [rsp + 0x38], rdx
    # nextln: 0x0da1: mov qword ptr [rsp + 0x28], r8
    # nextln: 0x0da6: mov qword ptr [rsp + 0x18], r11
    # nextln: 0x0dab: mov qword ptr [rsp + 0x10], rax
    # nextln: 0x0db0: mov qword ptr [rsp + 0x20], r10
    # nextln: 0x0db5: mov qword ptr [rsp + 0x48], rcx
    # nextln: 0x0dba: mov qword ptr [rsp + 0x30], rdi
    # nextln: 0x0dbf: mov qword ptr [rsp + 0x40], rsi
    # nextln: 0x0dc4: mov rdi, r15
    # nextln: 0x0dc7: mov rsi, r12
    # nextln: 0x0dca: call r9
    # nextln: 0x0dcd: mov r10, qword ptr [rsp + 0x38]
    # nextln: 0x0dd2: mov r11, qword ptr [rsp + 0x28]
    # nextln: 0x0dd7: mov rcx, qword ptr [rsp + 0x20]
    # nextln: 0x0ddc: mov r8, qword ptr [rsp + 0x18]
    # nextln: 0x0de1: mov r12, r14
    # nextln: 0x0de4: mov rdi, qword ptr [rsp + 0x40]
    # nextln: 0x0de9: mov r9, qword ptr [rsp + 0x48]
    # nextln: 0x0dee: mov rsi, qword ptr [rsp + 0x30]
    # nextln: 0x0df3: mov rdx, qword ptr [rsp + 0x10]
    # nextln: 0x0df8: xor r14d, r14d
    # nextln: 0x0dfb: cmp eax, ebx
    # nextln: 0x0dfd: sete r14b
    # nextln: 0x0e01: and r13d, r14d
    # nextln: 0x0e04: mov rax, r9
    # nextln: 0x0e07: mov r14, r8
    # nextln: 0x0e0a: mov r8, rsi
    # nextln: 0x0e0d: mov rsi, r14
    # nextln: 0x0e10: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0x0e1a: mov qword ptr [rsp + 0x28], r11
    # nextln: 0x0e1f: mov qword ptr [rsp + 0x20], rcx
    # nextln: 0x0e24: mov qword ptr [rsp + 0x18], rsi
    # nextln: 0x0e29: mov qword ptr [rsp + 0x48], rax
    # nextln: 0x0e2e: mov qword ptr [rsp + 0x40], rdi
    # nextln: 0x0e33: mov r14, r8
    # nextln: 0x0e36: mov qword ptr [rsp + 0x10], rdx
    # nextln: 0x0e3b: mov qword ptr [rsp + 0x38], r10
    # nextln: 0x0e40: mov rdi, r15
    # nextln: 0x0e43: mov rsi, r14
    # nextln: 0x0e46: call r9
    # nextln: 0x0e49: mov rdi, qword ptr [rsp + 0x38]
    # nextln: 0x0e4e: mov r15, qword ptr [rsp + 0x40]
    # nextln: 0x0e53: mov rcx, qword ptr [rsp + 0x20]
    # nextln: 0x0e58: mov rsi, qword ptr [rsp + 0x48]
    # nextln: 0x0e5d: mov r9, qword ptr [rsp + 0x18]
    # nextln: 0x0e62: mov rdx, qword ptr [rsp + 0x10]
    # nextln: 0x0e67: mov r8, qword ptr [rsp + 0x28]
    # nextln: 0x0e6c: and r13d, eax
    # nextln: 0x0e6f: mov rax, rdi
    # nextln: 0x0e72: mov r10, r8
    # nextln: 0x0e75: mov r8, rsi
    # nextln: 0x0e78: mov rsi, r10
    # nextln: 0x0e7b: mov rdi, r9
    # nextln: 0x0e7e: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0x0e88: mov qword ptr [rsp + 0x38], rax
    # nextln: 0x0e8d: mov qword ptr [rsp + 0x10], rdx
    # nextln: 0x0e92: mov qword ptr [rsp + 0x48], r8
    # nextln: 0x0e97: mov qword ptr [rsp + 0x20], rcx
    # nextln: 0x0e9c: mov qword ptr [rsp + 0x18], rdi
    # nextln: 0x0ea1: mov qword ptr [rsp + 0x28], rsi
    # nextln: 0x0ea6: mov rdi, r12
    # nextln: 0x0ea9: mov rsi, rbx
    # nextln: 0x0eac: call r9
    # nextln: 0x0eaf: mov rdx, qword ptr [rsp + 0x10]
    # nextln: 0x0eb4: mov rcx, qword ptr [rsp + 0x20]
    # nextln: 0x0eb9: mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0x0ebe: mov rdi, qword ptr [rsp + 0x18]
    # nextln: 0x0ec3: mov r8, qword ptr [rsp + 0x28]
    # nextln: 0x0ec8: mov r12, qword ptr [rsp + 0x48]
    # nextln: 0x0ecd: xor r9d, r9d
    # nextln: 0x0ed0: cmp eax, ebx
    # nextln: 0x0ed2: sete r9b
    # nextln: 0x0ed6: and r13d, r9d
    # nextln: 0x0ed9: mov rax, rdi
    # nextln: 0x0edc: mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0x0ee3: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 0x0eed: mov qword ptr [rsp + 0x38], rsi
    # nextln: 0x0ef2: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x0ef7: mov qword ptr [rsp + 0x20], rcx
    # nextln: 0x0efc: mov qword ptr [rsp + 0x28], r8
    # nextln: 0x0f01: mov qword ptr [rsp + 0x10], rdx
    # nextln: 0x0f06: mov rsi, rbx
    # nextln: 0x0f09: call r9
    # nextln: 0x0f0c: and r13d, eax
    # nextln: 0x0f0f: mov r8, qword ptr [rsp + 0x38]
    # nextln: 0x0f14: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x0f19: mov rcx, qword ptr [rsp + 0x20]
    # nextln: 0x0f1e: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x0f23: mov rsi, qword ptr [rsp + 0x10]
    # nextln: 0x0f28: mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0x0f2f: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 0x0f39: mov qword ptr [rsp + 0x38], r8
    # nextln: 0x0f3e: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x0f43: mov qword ptr [rsp + 0x20], rcx
    # nextln: 0x0f48: mov qword ptr [rsp + 0x28], rdx
    # nextln: 0x0f4d: mov qword ptr [rsp + 0x10], rsi
    # nextln: 0x0f52: mov rsi, r14
    # nextln: 0x0f55: call r9
    # nextln: 0x0f58: and r13d, eax
    # nextln: 0x0f5b: mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0x0f60: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x0f65: mov r8, qword ptr [rsp + 0x20]
    # nextln: 0x0f6a: mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0x0f6f: mov rdx, qword ptr [rsp + 0x10]
    # nextln: 0x0f74: mov edi, dword ptr [rsp + 0xa0]
    # nextln: 0x0f7b: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 0x0f85: mov qword ptr [rsp + 0x38], rsi
    # nextln: 0x0f8a: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x0f8f: mov qword ptr [rsp + 0x20], r8
    # nextln: 0x0f94: mov qword ptr [rsp + 0x28], rcx
    # nextln: 0x0f99: mov qword ptr [rsp + 0x10], rdx
    # nextln: 0x0f9e: mov rsi, rbx
    # nextln: 0x0fa1: call r9
    # nextln: 0x0fa4: xor ecx, ecx
    # nextln: 0x0fa6: cmp eax, ebx
    # nextln: 0x0fa8: sete cl
    # nextln: 0x0fab: and r13d, ecx
    # nextln: 0x0fae: mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0x0fb3: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x0fb8: mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0x0fbd: mov r8, qword ptr [rsp + 0x20]
    # nextln: 0x0fc2: mov rdx, qword ptr [rsp + 0x10]
    # nextln: 0x0fc7: mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0x0fce: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 0x0fd8: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x0fdd: mov qword ptr [rsp + 0x28], rcx
    # nextln: 0x0fe2: mov qword ptr [rsp + 0x20], r8
    # nextln: 0x0fe7: mov qword ptr [rsp + 0x10], rdx
    # nextln: 0x0fec: mov qword ptr [rsp + 0x38], rsi
    # nextln: 0x0ff1: mov rsi, rbx
    # nextln: 0x0ff4: call r9
    # nextln: 0x0ff7: xor ecx, ecx
    # nextln: 0x0ff9: cmp eax, ebx
    # nextln: 0x0ffb: sete cl
    # nextln: 0x0ffe: and r13d, ecx
    # nextln: 0x1001: mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0x1006: mov r8, qword ptr [rsp + 0x18]
    # nextln: 0x100b: mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0x1010: mov rax, qword ptr [rsp + 0x10]
    # nextln: 0x1015: mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0x101a: mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0x1021: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 0x102b: mov qword ptr [rsp + 0x38], rsi
    # nextln: 0x1030: mov qword ptr [rsp + 0x28], rcx
    # nextln: 0x1035: mov qword ptr [rsp + 0x10], rax
    # nextln: 0x103a: mov qword ptr [rsp + 0x20], rdx
    # nextln: 0x103f: mov qword ptr [rsp + 0x18], r8
    # nextln: 0x1044: mov rsi, r14
    # nextln: 0x1047: call r9
    # nextln: 0x104a: xor ecx, ecx
    # nextln: 0x104c: cmp eax, ebx
    # nextln: 0x104e: sete cl
    # nextln: 0x1051: and r13d, ecx
    # nextln: 0x1054: mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0x1059: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x105e: mov rax, qword ptr [rsp + 0x20]
    # nextln: 0x1063: mov rsi, qword ptr [rsp + 0x10]
    # nextln: 0x1068: mov r8, qword ptr [rsp + 0x18]
    # nextln: 0x106d: mov edi, dword ptr [rsp + 0xa0]
    # nextln: 0x1074: movabs r9, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 0x107e: mov qword ptr [rsp + 0x38], rcx
    # nextln: 0x1083: mov qword ptr [rsp + 0x28], rdx
    # nextln: 0x1088: mov qword ptr [rsp + 0x20], rax
    # nextln: 0x108d: mov qword ptr [rsp + 0x18], r8
    # nextln: 0x1092: mov qword ptr [rsp + 0x10], rsi
    # nextln: 0x1097: mov rsi, rbx
    # nextln: 0x109a: call r9
    # nextln: 0x109d: and r13d, eax
    # nextln: 0x10a0: mov r8, qword ptr [rsp + 0x18]
    # nextln: 0x10a5: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x10aa: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x10af: mov rsi, qword ptr [rsp + 0x20]
    # nextln: 0x10b4: mov rax, qword ptr [rsp + 0x38]
    # nextln: 0x10b9: mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0x10c0: movabs r9, 0  # reloc <1> -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0x10ca: mov qword ptr [rsp + 0x38], rax
    # nextln: 0x10cf: mov qword ptr [rsp + 0x18], r8
    # nextln: 0x10d4: mov qword ptr [rsp + 0x28], rdx
    # nextln: 0x10d9: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x10de: mov qword ptr [rsp + 0x20], rsi
    # nextln: 0x10e3: mov rsi, rbx
    # nextln: 0x10e6: call r9
    # nextln: 0x10e9: xor ecx, ecx
    # nextln: 0x10eb: cmp eax, ebx
    # nextln: 0x10ed: sete cl
    # nextln: 0x10f0: and r13d, ecx
    # nextln: 0x10f3: mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0x10f8: mov rcx, qword ptr [rsp + 0x20]
    # nextln: 0x10fd: mov rsi, qword ptr [rsp + 0x10]
    # nextln: 0x1102: mov rax, qword ptr [rsp + 0x28]
    # nextln: 0x1107: mov r8, qword ptr [rsp + 0x18]
    # nextln: 0x110c: mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0x1113: movabs r9, 0  # reloc <1> -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0x111d: mov qword ptr [rsp + 0x38], rdx
    # nextln: 0x1122: mov qword ptr [rsp + 0x20], rcx
    # nextln: 0x1127: mov qword ptr [rsp + 0x28], rax
    # nextln: 0x112c: mov qword ptr [rsp + 0x18], r8
    # nextln: 0x1131: mov qword ptr [rsp + 0x10], rsi
    # nextln: 0x1136: mov rsi, r14
    # nextln: 0x1139: call r9
    # nextln: 0x113c: xor ecx, ecx
    # nextln: 0x113e: cmp eax, ebx
    # nextln: 0x1140: sete cl
    # nextln: 0x1143: and r13d, ecx
    # nextln: 0x1146: mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0x114b: mov rax, qword ptr [rsp + 0x28]
    # nextln: 0x1150: mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0x1155: mov r8, qword ptr [rsp + 0x18]
    # nextln: 0x115a: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x115f: mov edi, dword ptr [rsp + 0xa0]
    # nextln: 0x1166: movabs r9, 0  # reloc <1> -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0x1170: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x1175: mov qword ptr [rsp + 0x20], rdx
    # nextln: 0x117a: mov qword ptr [rsp + 0x28], rax
    # nextln: 0x117f: mov qword ptr [rsp + 0x38], rsi
    # nextln: 0x1184: mov qword ptr [rsp + 0x18], r8
    # nextln: 0x1189: mov rsi, rbx
    # nextln: 0x118c: call r9
    # nextln: 0x118f: xor ecx, ecx
    # nextln: 0x1191: cmp eax, r12d
    # nextln: 0x1194: mov rdi, qword ptr [rsp + 0x10]
    # nextln: 0x1199: mov r12, qword ptr [rsp + 0x20]
    # nextln: 0x119e: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x11a3: mov rax, qword ptr [rsp + 0x38]
    # nextln: 0x11a8: mov rsi, qword ptr [rsp + 0x18]
    # nextln: 0x11ad: sete cl
    # nextln: 0x11b0: and r13d, ecx
    # nextln: 0x11b3: mov rcx, rdx
    # nextln: 0x11b6: mov rdx, rsi
    # nextln: 0x11b9: mov rsi, rcx
    # nextln: 0x11bc: mov rcx, rax
    # nextln: 0x11bf: mov rax, rdi
    # nextln: 0x11c2: mov rdi, rcx
    # nextln: 0x11c5: movabs rcx, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 0x11cf: mov qword ptr [rsp + 0x28], rsi
    # nextln: 0x11d4: mov qword ptr [rsp + 0x10], rax
    # nextln: 0x11d9: mov qword ptr [rsp + 0x38], rdi
    # nextln: 0x11de: mov qword ptr [rsp + 0x18], rdx
    # nextln: 0x11e3: mov rsi, rbx
    # nextln: 0x11e6: mov rdi, r15
    # nextln: 0x11e9: call rcx
    # nextln: 0x11eb: and r13d, eax
    # nextln: 0x11ee: mov rax, qword ptr [rsp + 0x38]
    # nextln: 0x11f3: mov rdi, qword ptr [rsp + 0x28]
    # nextln: 0x11f8: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x11fd: mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0x1202: movabs r8, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 0x120c: mov qword ptr [rsp + 0x28], rdi
    # nextln: 0x1211: mov qword ptr [rsp + 0x18], rdx
    # nextln: 0x1216: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x121b: mov qword ptr [rsp + 0x38], rax
    # nextln: 0x1220: mov rdi, r15
    # nextln: 0x1223: mov rsi, r14
    # nextln: 0x1226: call r8
    # nextln: 0x1229: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x122e: mov r15, r12
    # nextln: 0x1231: mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0x1236: mov rsi, qword ptr [rsp + 0x18]
    # nextln: 0x123b: mov rdi, qword ptr [rsp + 0x38]
    # nextln: 0x1240: and r13d, eax
    # nextln: 0x1243: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 0x124d: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x1252: mov r12, rdx
    # nextln: 0x1255: mov qword ptr [rsp + 0x18], rsi
    # nextln: 0x125a: mov rsi, rbx
    # nextln: 0x125d: call rax
    # nextln: 0x125f: xor ecx, ecx
    # nextln: 0x1261: cmp eax, ebx
    # nextln: 0x1263: sete cl
    # nextln: 0x1266: and r13d, ecx
    # nextln: 0x1269: mov rax, qword ptr [rsp + 0x10]
    # nextln: 0x126e: mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0x1273: mov rdi, qword ptr [rsp + 8]
    # nextln: 0x1278: movabs rdx, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0x1282: mov qword ptr [rsp + 0x10], rax
    # nextln: 0x1287: mov qword ptr [rsp + 0x18], rcx
    # nextln: 0x128c: mov rsi, rbx
    # nextln: 0x128f: call rdx
    # nextln: 0x1291: and r13d, eax
    # nextln: 0x1294: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x1299: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x129e: mov rdi, qword ptr [rsp + 8]
    # nextln: 0x12a3: movabs rdx, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0x12ad: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x12b2: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x12b7: mov rsi, r14
    # nextln: 0x12ba: call rdx
    # nextln: 0x12bc: xor ecx, ecx
    # nextln: 0x12be: cmp eax, ebx
    # nextln: 0x12c0: sete cl
    # nextln: 0x12c3: and r13d, ecx
    # nextln: 0x12c6: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x12cb: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x12d0: mov rdi, qword ptr [rsp + 8]
    # nextln: 0x12d5: movabs rdx, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0x12df: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x12e4: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x12e9: mov rsi, r12
    # nextln: 0x12ec: call rdx
    # nextln: 0x12ee: and r13d, eax
    # nextln: 0x12f1: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x12f6: mov rax, qword ptr [rsp + 0x18]
    # nextln: 0x12fb: mov rdi, qword ptr [rsp]
    # nextln: 0x12ff: movabs rdx, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0x1309: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x130e: mov qword ptr [rsp + 0x18], rax
    # nextln: 0x1313: mov rsi, rbx
    # nextln: 0x1316: call rdx
    # nextln: 0x1318: xor ecx, ecx
    # nextln: 0x131a: cmp eax, ebx
    # nextln: 0x131c: sete cl
    # nextln: 0x131f: and r13d, ecx
    # nextln: 0x1322: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x1327: mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0x132c: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0x1336: mov qword ptr [rsp + 0x18], rdx
    # nextln: 0x133b: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x1340: mov rdi, r15
    # nextln: 0x1343: mov rsi, rbx
    # nextln: 0x1346: call rax
    # nextln: 0x1348: and r13d, eax
    # nextln: 0x134b: mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0x1350: mov rax, qword ptr [rsp + 0x10]
    # nextln: 0x1355: movabs rdx, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0x135f: mov qword ptr [rsp + 0x10], rax
    # nextln: 0x1364: mov qword ptr [rsp + 0x18], rcx
    # nextln: 0x1369: mov rdi, r15
    # nextln: 0x136c: mov rsi, r14
    # nextln: 0x136f: call rdx
    # nextln: 0x1371: mov rsi, r12
    # nextln: 0x1374: mov r12, rax
    # nextln: 0x1377: mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0x137c: mov r14, qword ptr [rsp + 0x18]
    # nextln: 0x1381: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0x138b: mov qword ptr [rsp + 0x10], rcx
    # nextln: 0x1390: mov rdi, r15
    # nextln: 0x1393: call rax
    # nextln: 0x1395: mov r15, qword ptr [rsp + 0x10]
    # nextln: 0x139a: xor ecx, ecx
    # nextln: 0x139c: cmp r12d, ebx
    # nextln: 0x139f: sete cl
    # nextln: 0x13a2: and r13d, ecx
    # nextln: 0x13a5: and r13d, eax
    # nextln: 0x13a8: movabs rax, 0  # reloc <1> -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0x13b2: mov rdi, r14
    # nextln: 0x13b5: mov rsi, rbx
    # nextln: 0x13b8: call rax
    # nextln: 0x13ba: xor ecx, ecx
    # nextln: 0x13bc: cmp eax, ebx
    # nextln: 0x13be: sete cl
    # nextln: 0x13c1: and r13d, ecx
    # nextln: 0x13c4: test r13d, r13d
    # nextln: 0x13c7: jne 0x13d2
    # nextln: 0x13cd: jmp 0x13e7
    # nextln: 0x13d2: mov rax, r15
    # nextln: 0x13d5: add rsp, 0xc8
    # nextln: 0x13dc: pop rbx
    # nextln: 0x13dd: pop r12
    # nextln: 0x13df: pop r13
    # nextln: 0x13e1: pop r14
    # nextln: 0x13e3: pop r15
    # nextln: 0x13e5: pop rbp
    # nextln: 0x13e6: ret
    # nextln: 0x13e7: mov rax, rbx
    # nextln: 0x13ea: add rsp, 0xc8
    # nextln: 0x13f1: pop rbx
    # nextln: 0x13f2: pop r12
    # nextln: 0x13f4: pop r13
    # nextln: 0x13f6: pop r14
    # nextln: 0x13f8: pop r15
    # nextln: 0x13fa: pop rbp
    # nextln: 0x13fb: ret

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i32 = iconst 1
    %5:i64 = iext %4
    %6:i64 = sfill 32 %5
    %7:i32 = iconst 3
    %8:ptr = stackslot 8:8
    %9:i32 = iconst 64
    %10:ptr = stackslot 8:8
    %11:i32 = iconst 32
    %12:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %14:ptr = stackslot 2:2
    %15:ptr = stackslot 2:2
    %16:i32 = iconst 16
    %17:ptr = stackslot 2:2
    %18:i32 = iconst 15
    %19:ptr = stackslot 1:1
    %20:ptr = stackslot 1:1
    %21:i32 = iconst 8
    %22:ptr = stackslot 1:1
    %23:ctrl = store.1 %1, %3, %22
    %24:ctrl = store.1 %23, %3, %20
    %25:ctrl = store.1 %24, %3, %19
    %26:ctrl = store.2 %25, %3, %17
    %27:ctrl = store.2 %26, %3, %15
    %28:ctrl = store.2 %27, %3, %14
    %29:ctrl = store.4 %28, %3, %13
    %30:ctrl = store.4 %29, %3, %12
    %31:i32 = iconst 7
    %32:i32 = iconst 2
    %33:i64 = iext %32
    %34:i64 = sfill 32 %33
    %35:i32 = iconst 4294934528
    %36:i32 = iconst 4294967168
    %37:i64 = iconst 0
    %38:ctrl = store.8 %30, %37, %10
    %39:ctrl = store.8 %38, %37, %8
    %40:ctrl, %41:phisel = region %39
    %42:ctrl = store.1 %40, %36, %22
    %43:ctrl = store.1 %42, %4, %20
    %44:ctrl = store.1 %43, %32, %19
    %45:ctrl = store.2 %44, %35, %17
    %46:ctrl = store.2 %45, %4, %15
    %47:ctrl = store.2 %46, %32, %14
    %48:ctrl = store.4 %47, %4, %13
    %49:ctrl = store.4 %48, %32, %12
    %50:ctrl = store.8 %49, %6, %10
    %51:ctrl = store.8 %50, %34, %8
    %52:ctrl, %53:i32 = load.1 %51, %22
    %54:i32 = sfill 8 %53
    %55:ctrl, %56:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %52, %54, %31
    %57:ctrl, %58:i32 = load.1 %55, %22
    %59:i32 = sfill 8 %58
    %60:ctrl, %61:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %57, %59, %21
    %62:ctrl, %63:i32 = load.1 %60, %20
    %64:i32 = sfill 8 %63
    %65:ctrl, %66:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %62, %64, %3
    %67:ctrl, %68:i32 = load.1 %65, %20
    %69:i32 = sfill 8 %68
    %70:ctrl, %71:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %67, %69, %21
    %72:ctrl, %73:i32 = load.1 %70, %20
    %74:i32 = sfill 8 %73
    %75:ctrl, %76:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %72, %74, %11
    %77:ctrl, %78:i32 = load.1 %75, %19
    %79:i32 = sfill 8 %78
    %80:ctrl, %81:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %77, %79, %3
    %82:ctrl, %83:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %80, %22, %31
    %84:ctrl, %85:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %82, %22, %21
    %86:ctrl, %87:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %84, %20, %3
    %88:ctrl, %89:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %86, %20, %21
    %90:ctrl, %91:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %88, %20, %11
    %92:ctrl, %93:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %90, %19, %3
    %94:ctrl, %95:i32 = load.2 %92, %17
    %96:i32 = sfill 16 %95
    %97:ctrl, %98:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %94, %96, %18
    %99:ctrl, %100:i32 = load.2 %97, %17
    %101:i32 = sfill 16 %100
    %102:ctrl, %103:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %99, %101, %16
    %104:ctrl, %105:i32 = load.2 %102, %15
    %106:i32 = sfill 16 %105
    %107:ctrl, %108:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %104, %106, %3
    %109:ctrl, %110:i32 = load.2 %107, %15
    %111:i32 = sfill 16 %110
    %112:ctrl, %113:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %109, %111, %16
    %114:ctrl, %115:i32 = load.2 %112, %15
    %116:i32 = sfill 16 %115
    %117:ctrl, %118:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %114, %116, %11
    %119:ctrl, %120:i32 = load.2 %117, %14
    %121:i32 = sfill 16 %120
    %122:ctrl, %123:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %119, %121, %3
    %124:ctrl, %125:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %122, %17, %18
    %126:ctrl, %127:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %124, %17, %16
    %128:ctrl, %129:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %126, %15, %3
    %130:ctrl, %131:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %128, %15, %16
    %132:ctrl, %133:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %130, %15, %11
    %134:ctrl, %135:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %132, %14, %3
    %136:ctrl, %137:i32 = load.4 %134, %13
    %138:ctrl, %139:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %136, %137, %3
    %140:ctrl, %141:i32 = load.4 %138, %13
    %142:ctrl, %143:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %140, %141, %11
    %144:ctrl, %145:i32 = load.4 %142, %12
    %146:ctrl, %147:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %144, %145, %3
    %148:ctrl, %149:i32 = load.4 %146, %13
    %150:ctrl, %151:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %148, %149, %3
    %152:ctrl, %153:i32 = load.4 %150, %13
    %154:ctrl, %155:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %152, %153, %11
    %156:ctrl, %157:i32 = load.4 %154, %12
    %158:ctrl, %159:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %156, %157, %3
    %160:ctrl, %161:i32 = load.4 %158, %13
    %162:ctrl, %163:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %160, %161, %3
    %164:ctrl, %165:i32 = load.4 %162, %13
    %166:ctrl, %167:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %164, %165, %11
    %168:ctrl, %169:i32 = load.4 %166, %12
    %170:ctrl, %171:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %168, %169, %3
    %172:ctrl, %173:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %170, %13, %3
    %174:ctrl, %175:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %172, %13, %11
    %176:ctrl, %177:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %174, %12, %3
    %178:ctrl, %179:i64 = load.8 %176, %10
    %180:ctrl, %181:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %178, %179, %3
    %182:ctrl, %183:i64 = load.8 %180, %10
    %184:ctrl, %185:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %182, %183, %11
    %186:ctrl, %187:i64 = load.8 %184, %10
    %188:ctrl, %189:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %186, %187, %9
    %190:ctrl, %191:i64 = load.8 %188, %8
    %192:ctrl, %193:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %190, %191, %3
    %194:ctrl, %195:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %192, %10, %3
    %196:ctrl, %197:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %194, %10, %11
    %198:ctrl, %199:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %196, %10, %9
    %200:ctrl, %201:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %198, %8, %3
    %202:i32 = icmp eq %201, %3
    %203:i32 = icmp eq %197, %3
    %204:i32 = icmp eq %193, %3
    %205:i32 = icmp eq %185, %3
    %206:i32 = icmp eq %177, %3
    %207:i32 = icmp eq %171, %7
    %208:i32 = icmp eq %167, %3
    %209:i32 = icmp eq %163, %3
    %210:i32 = icmp eq %155, %3
    %211:i32 = icmp eq %151, %3
    %212:i32 = icmp eq %147, %3
    %213:i32 = icmp eq %135, %3
    %214:i32 = icmp eq %131, %3
    %215:i32 = icmp eq %123, %3
    %216:i32 = icmp eq %113, %3
    %217:i32 = icmp eq %93, %3
    %218:i32 = icmp eq %89, %3
    %219:i32 = icmp eq %81, %3
    %220:i32 = icmp eq %71, %3
    %221:i32 = and %4, %56
    %222:i32 = and %221, %61
    %223:i32 = and %222, %66
    %224:i32 = and %223, %220
    %225:i32 = and %224, %76
    %226:i32 = and %225, %219
    %227:i32 = and %226, %83
    %228:i32 = and %227, %85
    %229:i32 = and %228, %87
    %230:i32 = and %229, %218
    %231:i32 = and %230, %91
    %232:i32 = and %231, %217
    %233:i32 = and %232, %98
    %234:i32 = and %233, %103
    %235:i32 = and %234, %108
    %236:i32 = and %235, %216
    %237:i32 = and %236, %118
    %238:i32 = and %237, %215
    %239:i32 = and %238, %125
    %240:i32 = and %239, %127
    %241:i32 = and %240, %129
    %242:i32 = and %241, %214
    %243:i32 = and %242, %133
    %244:i32 = and %243, %213
    %245:i32 = and %244, %139
    %246:i32 = and %245, %143
    %247:i32 = and %246, %212
    %248:i32 = and %247, %211
    %249:i32 = and %248, %210
    %250:i32 = and %249, %159
    %251:i32 = and %250, %209
    %252:i32 = and %251, %208
    %253:i32 = and %252, %207
    %254:i32 = and %253, %173
    %255:i32 = and %254, %175
    %256:i32 = and %255, %206
    %257:i32 = and %256, %181
    %258:i32 = and %257, %205
    %259:i32 = and %258, %189
    %260:i32 = and %259, %204
    %261:i32 = and %260, %195
    %262:i32 = and %261, %203
    %263:i32 = and %262, %199
    %264:i32 = and %263, %202
    %265:ctrl, %266:ctrl = brcond %200, %264
    %267:ctrl, %268:phisel = region %265
    return %267, %4
    %269:ctrl, %270:phisel = region %266
    return %269, %3
}
