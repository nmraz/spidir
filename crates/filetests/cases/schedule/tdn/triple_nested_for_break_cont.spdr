# run: schedule

func @"System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)":i32(ptr, i32, i32, i32) {
    # check: function `System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)`:
    # nextln: block0:
    # nextln:     $(entry0=$val):ctrl, $(entry1=$val):ptr, $(entry2=$val):i32, $(entry3=$val):i32, $(entry4=$val):i32 = entry
    # nextln: => block1
    # nextln: block1:
    # nextln:     $(iconst0=$val):i32 = iconst 0
    # nextln:     $(stackslot0=$val):ptr = stackslot 4:4
    # nextln:     $(stackslot1=$val):ptr = stackslot 4:4
    # nextln:     $(store0=$val):ctrl = store.4 $(region0=$val), $iconst0, $stackslot1
    # nextln:     $(store1=$val):ctrl = store.4 $store0, $iconst0, $stackslot0
    # nextln:     $(stackslot2=$val):ptr = stackslot 4:4
    # nextln:     $(store2=$val):ctrl = store.4 $store1, $iconst0, $stackslot2
    # nextln:     $(stackslot3=$val):ptr = stackslot 4:4
    # nextln:     $(store3=$val):ctrl = store.4 $store2, $iconst0, $stackslot3
    # nextln: => block2
    # nextln: block2:
    # nextln:     $(store4=$val):ctrl = store.4 $(region1=$val), $iconst0, $stackslot1
    # nextln:     $(store5=$val):ctrl = store.4 $store4, $iconst0, $stackslot0
    # nextln:     $(iconst1=$val):i32 = iconst 3
    # nextln:     $(iconst2=$val):i32 = iconst 2
    # nextln:     $(iconst3=$val):i32 = iconst 4
    # nextln:     $(iconst4=$val):i32 = iconst 1
    # nextln: => block3
    # nextln: block3:
    # nextln:     $(load0=$val):ctrl, $(load1=$val):i32 = load.4 $(region2=$val), $stackslot0
    # nextln:     $(icmp0=$val):i32 = icmp slt $load1, $entry2
    # nextln:     $(brcond0=$val):ctrl, $(brcond1=$val):ctrl = brcond $load0, $icmp0
    # nextln: => block4, block5
    # nextln: block4:
    # nextln:     $(load2=$val):ctrl, $(load3=$val):i32 = load.4 $(region3=$val), $stackslot0
    # nextln:     $(and0=$val):i32 = and $load3, $iconst2
    # nextln:     $(brcond2=$val):ctrl, $(brcond3=$val):ctrl = brcond $load2, $and0
    # nextln: => block6, block7
    # nextln: block6:
    # nextln:     $(store6=$val):ctrl = store.4 $(region4=$val), $iconst0, $stackslot2
    # nextln: => block9
    # nextln: block9:
    # nextln:     $(load4=$val):ctrl, $(load5=$val):i32 = load.4 $(region5=$val), $stackslot2
    # nextln:     $(icmp1=$val):i32 = icmp slt $load5, $entry3
    # nextln:     $(brcond4=$val):ctrl, $(brcond5=$val):ctrl = brcond $load4, $icmp1
    # nextln: => block10, block11
    # nextln: block10:
    # nextln:     $(load6=$val):ctrl, $(load7=$val):i32 = load.4 $(region6=$val), $stackslot0
    # nextln:     $(and1=$val):i32 = and $load7, $iconst1
    # nextln:     $(brcond6=$val):ctrl, $(brcond7=$val):ctrl = brcond $load6, $and1
    # nextln: => block13, block14
    # nextln: block13:
    # nextln:     $(store7=$val):ctrl = store.4 $(region7=$val), $iconst0, $stackslot3
    # nextln: => block15
    # nextln: block15:
    # nextln:     $(load8=$val):ctrl, $(load9=$val):i32 = load.4 $(region8=$val), $stackslot3
    # nextln:     $(icmp2=$val):i32 = icmp slt $load9, $entry4
    # nextln:     $(brcond8=$val):ctrl, $(brcond9=$val):ctrl = brcond $load8, $icmp2
    # nextln: => block16, block17
    # nextln: block16:
    # nextln:     $(load10=$val):ctrl, $(load11=$val):i32 = load.4 $(region9=$val), $stackslot0
    # nextln:     $(and2=$val):i32 = and $load11, $iconst3
    # nextln:     $(brcond10=$val):ctrl, $(brcond11=$val):ctrl = brcond $load10, $and2
    # nextln: => block18, block19
    # nextln: block18:
    # nextln:     $(load12=$val):ctrl, $(load13=$val):i32 = load.4 $(region10=$val), $stackslot1
    # nextln:     $(load14=$val):ctrl, $(load15=$val):i32 = load.4 $load12, $stackslot3
    # nextln:     $(iadd0=$val):i32 = iadd $load13, $load15
    # nextln:     $(store8=$val):ctrl = store.4 $load14, $iadd0, $stackslot1
    # nextln: => block20
    # nextln: block19:
    # nextln: => block20
    # nextln: block20:
    # nextln:     $(load16=$val):ctrl, $(load17=$val):i32 = load.4 $(region11=$val), $stackslot3
    # nextln:     $(iadd1=$val):i32 = iadd $load17, $iconst4
    # nextln:     $(store9=$val):ctrl = store.4 $load16, $iadd1, $stackslot3
    # nextln: => block15
    # nextln: block17:
    # nextln:     $(load18=$val):ctrl, $(load19=$val):i32 = load.4 $(region12=$val), $stackslot1
    # nextln:     $(load20=$val):ctrl, $(load21=$val):i32 = load.4 $load18, $stackslot2
    # nextln:     $(iadd2=$val):i32 = iadd $load19, $load21
    # nextln:     $(store10=$val):ctrl = store.4 $load20, $iadd2, $stackslot1
    # nextln:     $(load22=$val):ctrl, $(load23=$val):i32 = load.4 $store10, $stackslot2
    # nextln:     $(iadd3=$val):i32 = iadd $load23, $iconst4
    # nextln:     $(store11=$val):ctrl = store.4 $load22, $iadd3, $stackslot2
    # nextln: => block9
    # nextln: block14:
    # nextln: => block12
    # nextln: block11:
    # nextln: => block12
    # nextln: block12:
    # nextln:     $(load24=$val):ctrl, $(load25=$val):i32 = load.4 $(region13=$val), $stackslot1
    # nextln:     $(load26=$val):ctrl, $(load27=$val):i32 = load.4 $load24, $stackslot0
    # nextln:     $(iadd4=$val):i32 = iadd $load25, $load27
    # nextln:     $(store12=$val):ctrl = store.4 $load26, $iadd4, $stackslot1
    # nextln: => block8
    # nextln: block7:
    # nextln: => block8
    # nextln: block8:
    # nextln:     $(load28=$val):ctrl, $(load29=$val):i32 = load.4 $(region14=$val), $stackslot0
    # nextln:     $(iadd5=$val):i32 = iadd $load29, $iconst4
    # nextln:     $(store13=$val):ctrl = store.4 $load28, $iadd5, $stackslot0
    # nextln: => block3
    # nextln: block5:
    # nextln:     $(load30=$val):ctrl, $(load31=$val):i32 = load.4 $(region15=$val), $stackslot1
    # nextln:     return $load30, $load31

    %0:ctrl, %1:ptr, %2:i32, %3:i32, %4:i32 = entry
    %5:ctrl, %6:phisel = region %0
    %7:ptr = stackslot 4:4
    %10:ptr = stackslot 4:4
    %76:i32 = iconst 1
    %12:ptr = stackslot 4:4
    %8:i32 = iconst 0
    %9:ctrl = store.4 %5, %8, %7
    %11:ctrl = store.4 %9, %8, %10
    %13:ctrl = store.4 %11, %8, %12
    %14:ptr = stackslot 4:4
    %15:ctrl = store.4 %13, %8, %14
    %44:ctrl, %45:phisel = region %15
    %46:ctrl = store.4 %44, %8, %7
    %47:ctrl = store.4 %46, %8, %10
    %64:i32 = iconst 4
    %57:i32 = iconst 3
    %50:i32 = iconst 2
    %51:i32 = and %49, %50
    %52:ctrl, %53:ctrl = brcond %48, %51
    %18:ctrl, %19:phisel = region %52
    %54:ctrl = store.4 %18, %8, %12
    %34:ctrl, %35:phisel = region %54, %93
    %94:ctrl, %95:i32 = load.4 %34, %12
    %96:i32 = icmp slt %95, %3
    %97:ctrl, %98:ctrl = brcond %94, %96
    %20:ctrl, %21:phisel = region %97
    %55:ctrl, %56:i32 = load.4 %20, %10
    %58:i32 = and %56, %57
    %59:ctrl, %60:ctrl = brcond %55, %58
    %22:ctrl, %23:phisel = region %59
    %61:ctrl = store.4 %22, %8, %14
    %30:ctrl, %31:phisel = region %61, %78
    %79:ctrl, %80:i32 = load.4 %30, %14
    %81:i32 = icmp slt %80, %4
    %82:ctrl, %83:ctrl = brcond %79, %81
    %24:ctrl, %25:phisel = region %82
    %62:ctrl, %63:i32 = load.4 %24, %10
    %65:i32 = and %63, %64
    %66:ctrl, %67:ctrl = brcond %62, %65
    %26:ctrl, %27:phisel = region %66
    %68:ctrl, %69:i32 = load.4 %26, %7
    %70:ctrl, %71:i32 = load.4 %68, %14
    %72:i32 = iadd %69, %71
    %73:ctrl = store.4 %70, %72, %7
    %28:ctrl, %29:phisel = region %67, %73
    %74:ctrl, %75:i32 = load.4 %28, %14
    %77:i32 = iadd %75, %76
    %78:ctrl = store.4 %74, %77, %14
    %32:ctrl, %33:phisel = region %83
    %84:ctrl, %85:i32 = load.4 %32, %7
    %86:ctrl, %87:i32 = load.4 %84, %12
    %88:i32 = iadd %85, %87
    %89:ctrl = store.4 %86, %88, %7
    %90:ctrl, %91:i32 = load.4 %89, %12
    %92:i32 = iadd %91, %76
    %93:ctrl = store.4 %90, %92, %12
    %36:ctrl, %37:phisel = region %60, %98
    %99:ctrl, %100:i32 = load.4 %36, %7
    %101:ctrl, %102:i32 = load.4 %99, %10
    %103:i32 = iadd %100, %102
    %104:ctrl = store.4 %101, %103, %7
    %38:ctrl, %39:phisel = region %53, %104
    %105:ctrl, %106:i32 = load.4 %38, %10
    %107:i32 = iadd %106, %76
    %108:ctrl = store.4 %105, %107, %10
    %40:ctrl, %41:phisel = region %47, %108
    %109:ctrl, %110:i32 = load.4 %40, %10
    %111:i32 = icmp slt %110, %2
    %112:ctrl, %113:ctrl = brcond %109, %111
    %16:ctrl, %17:phisel = region %112
    %48:ctrl, %49:i32 = load.4 %16, %10
    %42:ctrl, %43:phisel = region %113
    %114:ctrl, %115:i32 = load.4 %42, %7
    return %114, %115
}
