# run: verify-err

extfunc @extfunc(ptr, i32)
extfunc @extfunc2:i32(ptr, i32)

func @infunc(ptr, i32) {
    %0:ctrl, %1:ptr, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    return %3
}

func @infunc2:i32(ptr, i32) {
    %0:ctrl, %1:ptr, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    return %3, %2
}

func @const:i32() {
    %0:ctrl = entry
    %1:i32 = iconst 5
    return %0, %1
}

func @no_params() {
    %0:ctrl = entry
    return %0
}

func @mixed_params(i32, i64, f64, ptr, i64) {
    %0:ctrl, %1:i32, %2:i64, %3:f64, %4:ptr, %5:i64 = entry
    return %0
}

func @caller:i32(ptr, i32) {
    # check: function `caller`:
    # unordered: `$val:ctrl = call @extfunc $val, $val`: bad input count, expected 3
    # unordered: `$val:ctrl, $val:i32 = call @extfunc2 $val, $val, $val, $val`: bad input count, expected 3
    # unordered: `$val:ctrl, $val:i64 = call @no_params $val`: bad output count, expected 1
    # unordered: `$val:i32 = call @infunc2 $val, $val`: bad input count, expected 3
    # unordered: `call @infunc $val, $val, $val`: bad output count, expected 1

    %0:ctrl, %1:ptr, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    %5:ctrl = call @extfunc %3, %2
    %6:ctrl, %7:i32 = call @extfunc2 %5, %1, %2, %1
    %t:ctrl, %f:ctrl = brcond %6, %2
    call @infunc %t, %1, %2
    %10:i32 = call @infunc2 %1, %2
    %11:i32 = iadd %7, %10
    %12:ctrl, %13:i64 = call @no_params %f
    return %12, %11
}

func @call_mixed_params(ptr) {
    # check: function `call_mixed_params`:
    # unordered: `$val:ctrl = call @mixed_params $val, $val, $val, $val, $val, $val`: bad value kind for input 2, expected one of `i64`, got `f64`
    # unordered: `$val:ctrl = call @mixed_params $val, $val, $val, $val, $val, $val`: bad value kind for input 3, expected one of `f64`, got `i64`

    %0:ctrl, %p:ptr = entry
    %zero32:i32 = iconst 0
    %zero64:i64 = iconst 0
    %fivef:f64 = fconst64 0x5
    %1:ctrl = call @mixed_params %0, %zero32, %fivef, %zero64, %p, %zero64
    return %1
}

func @call_swapped_outputs:i32() {
    # check: function `call_swapped_outputs`:
    # unordered: `$val:i32, $val:ctrl = call @const $val`: bad value kind for output 0, expected one of `ctrl`, got `i32`
    # unordered: `$val:i32, $val:ctrl = call @const $val`: bad value kind for output 1, expected one of `i32`, got `ctrl`

    %0:ctrl = entry
    %1:i32, %2:ctrl = call @const %0
    return %2, %1
}
