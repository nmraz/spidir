# run: codegen

extfunc @malloc:ptr(i64)

func @gc_new:ptr(i32, i64) {
    # check: function `gc_new`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f7                        mov rdi, rsi
    # nextln: 000007: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @malloc + 0
    # nextln: 000011: ff d0                           call rax
    # nextln: 000013: 5d                              pop rbp
    # nextln: 000014: c3                              ret

    %c:ctrl, %type_id:i32, %size:i64 = entry
    %c1:ctrl, %p:ptr = call @malloc %c, %size
    return %c1, %p
}

func @throw_index_out_of_range_exception() {
    # check: function `throw_index_out_of_range_exception`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl = entry
    return %0
}

func @"System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 83 ec 18                     sub rsp, 0x18
    # nextln: 000011: 48 89 7c 24 08                  mov qword ptr [rsp + 8], rdi
    # nextln: 000016: 33 c0                           xor eax, eax
    # nextln: 000018: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 00001c: b8 02 00 00 00                  mov eax, 2
    # nextln: 000021: 4c 63 e8                        movsxd r13, eax
    # nextln: 000024: 49 6b c5 04                     imul rax, r13, 4
    # nextln: 000028: 49 6b f5 08                     imul rsi, r13, 8
    # nextln: 00002c: b9 14 00 00 00                  mov ecx, 0x14
    # nextln: 000031: 48 03 c1                        add rax, rcx
    # nextln: 000034: b9 18 00 00 00                  mov ecx, 0x18
    # nextln: 000039: 48 03 f1                        add rsi, rcx
    # nextln: 00003c: 48 89 c3                        mov rbx, rax
    # nextln: 00003f: bf ab 00 00 00                  mov edi, 0xab
    # nextln: 000044: e8 00 00 00 00                  call 0x49  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000049: 48 89 d9                        mov rcx, rbx
    # nextln: 00004c: ba 01 00 00 00                  mov edx, 1
    # nextln: 000051: 48 63 da                        movsxd rbx, edx
    # nextln: 000054: 44 89 68 10                     mov dword ptr [rax + 0x10], r13d
    # nextln: 000058: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 00005c: 4c 8b 3c 24                     mov r15, qword ptr [rsp]
    # nextln: 000060: 49 89 cc                        mov r12, rcx
    # nextln: 000063: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 000068: 4c 89 e6                        mov rsi, r12
    # nextln: 00006b: e8 00 00 00 00                  call 0x70  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000070: 4c 89 e6                        mov rsi, r12
    # nextln: 000073: 44 89 68 10                     mov dword ptr [rax + 0x10], r13d
    # nextln: 000077: 8b 48 10                        mov ecx, dword ptr [rax + 0x10]
    # nextln: 00007a: 48 3b d9                        cmp rbx, rcx
    # nextln: 00007d: 0f 8d fe 00 00 00               jge 0x181
    # nextln: 000083: 41 be 04 00 00 00               mov r14d, 4
    # nextln: 000089: 4c 0f af f3                     imul r14, rbx
    # nextln: 00008d: b9 14 00 00 00                  mov ecx, 0x14
    # nextln: 000092: 4c 03 f1                        add r14, rcx
    # nextln: 000095: 4a 8d 0c 30                     lea rcx, [rax + r14]
    # nextln: 000099: ba 01 00 00 00                  mov edx, 1
    # nextln: 00009e: 89 11                           mov dword ptr [rcx], edx
    # nextln: 0000a0: 41 8b 4f 10                     mov ecx, dword ptr [r15 + 0x10]
    # nextln: 0000a4: 33 d2                           xor edx, edx
    # nextln: 0000a6: 4c 63 e2                        movsxd r12, edx
    # nextln: 0000a9: 4c 3b e1                        cmp r12, rcx
    # nextln: 0000ac: 0f 8d cf 00 00 00               jge 0x181
    # nextln: 0000b2: b9 08 00 00 00                  mov ecx, 8
    # nextln: 0000b7: 49 0f af cc                     imul rcx, r12
    # nextln: 0000bb: ba 18 00 00 00                  mov edx, 0x18
    # nextln: 0000c0: 48 03 ca                        add rcx, rdx
    # nextln: 0000c3: 49 03 cf                        add rcx, r15
    # nextln: 0000c6: 48 89 01                        mov qword ptr [rcx], rax
    # nextln: 0000c9: 4c 8b 3c 24                     mov r15, qword ptr [rsp]
    # nextln: 0000cd: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 0000d2: e8 00 00 00 00                  call 0xd7  # RELOC_PC32 -> @gc_new + -4
    # nextln: 0000d7: 44 89 68 10                     mov dword ptr [rax + 0x10], r13d
    # nextln: 0000db: 8b 48 10                        mov ecx, dword ptr [rax + 0x10]
    # nextln: 0000de: 4c 3b e1                        cmp r12, rcx
    # nextln: 0000e1: 0f 8d 9a 00 00 00               jge 0x181
    # nextln: 0000e7: b9 04 00 00 00                  mov ecx, 4
    # nextln: 0000ec: 4c 0f af e1                     imul r12, rcx
    # nextln: 0000f0: ba 14 00 00 00                  mov edx, 0x14
    # nextln: 0000f5: 4c 03 e2                        add r12, rdx
    # nextln: 0000f8: 4c 03 e0                        add r12, rax
    # nextln: 0000fb: bf 02 00 00 00                  mov edi, 2
    # nextln: 000100: 41 89 3c 24                     mov dword ptr [r12], edi
    # nextln: 000104: 8b 78 10                        mov edi, dword ptr [rax + 0x10]
    # nextln: 000107: 48 3b df                        cmp rbx, rdi
    # nextln: 00010a: 0f 8d 71 00 00 00               jge 0x181
    # nextln: 000110: 4c 03 f0                        add r14, rax
    # nextln: 000113: bf 03 00 00 00                  mov edi, 3
    # nextln: 000118: 41 89 3e                        mov dword ptr [r14], edi
    # nextln: 00011b: 41 8b 7f 10                     mov edi, dword ptr [r15 + 0x10]
    # nextln: 00011f: 48 3b df                        cmp rbx, rdi
    # nextln: 000122: 0f 8d 59 00 00 00               jge 0x181
    # nextln: 000128: bf 08 00 00 00                  mov edi, 8
    # nextln: 00012d: 48 0f af fb                     imul rdi, rbx
    # nextln: 000131: be 18 00 00 00                  mov esi, 0x18
    # nextln: 000136: 48 03 fe                        add rdi, rsi
    # nextln: 000139: 4c 03 ff                        add r15, rdi
    # nextln: 00013c: 49 89 07                        mov qword ptr [r15], rax
    # nextln: 00013f: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000143: 8b 70 10                        mov esi, dword ptr [rax + 0x10]
    # nextln: 000146: 48 3b de                        cmp rbx, rsi
    # nextln: 000149: 0f 8d 32 00 00 00               jge 0x181
    # nextln: 00014f: 48 03 c7                        add rax, rdi
    # nextln: 000152: 48 8b 00                        mov rax, qword ptr [rax]
    # nextln: 000155: 8b 70 10                        mov esi, dword ptr [rax + 0x10]
    # nextln: 000158: 48 63 7c 24 08                  movsxd rdi, dword ptr [rsp + 8]
    # nextln: 00015d: 48 3b fe                        cmp rdi, rsi
    # nextln: 000160: 0f 8d 1b 00 00 00               jge 0x181
    # nextln: 000166: 48 0f af cf                     imul rcx, rdi
    # nextln: 00016a: 48 03 ca                        add rcx, rdx
    # nextln: 00016d: 48 03 c1                        add rax, rcx
    # nextln: 000170: 8b 00                           mov eax, dword ptr [rax]
    # nextln: 000172: 48 83 c4 18                     add rsp, 0x18
    # nextln: 000176: 5b                              pop rbx
    # nextln: 000177: 41 5c                           pop r12
    # nextln: 000179: 41 5d                           pop r13
    # nextln: 00017b: 41 5e                           pop r14
    # nextln: 00017d: 41 5f                           pop r15
    # nextln: 00017f: 5d                              pop rbp
    # nextln: 000180: c3                              ret
    # nextln: 000181: e8 00 00 00 00                  call 0x186  # RELOC_PC32 -> @throw_index_out_of_range_exception + -4
    # nextln: 000186: 0f 0b                           ud2

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %4:i64 = iext %1
    %5:i64 = sfill 32 %4
    %6:i64 = iconst 4
    %7:i64 = imul %6, %5
    %8:i64 = iconst 20
    %9:i64 = iadd %8, %7
    %10:i64 = iconst 16
    %11:i32 = iconst 1
    %12:i64 = iext %11
    %13:i64 = sfill 32 %12
    %14:i64 = imul %6, %13
    %15:i64 = iadd %8, %14
    %16:i64 = iconst 8
    %17:i64 = imul %16, %13
    %18:i64 = iconst 24
    %19:i64 = iadd %18, %17
    %20:ptr = stackslot 8:8
    %21:i32 = iconst 3
    %22:i32 = iconst 0
    %23:i64 = iext %22
    %24:i64 = sfill 32 %23
    %27:i64 = imul %16, %24
    %28:i64 = iadd %18, %27
    %25:i64 = imul %6, %24
    %26:i64 = iadd %8, %25
    %29:i32 = iconst 2
    %30:i64 = iext %29
    %31:i64 = sfill 32 %30
    %34:i64 = imul %31, %16
    %35:i64 = iadd %18, %34
    %32:i64 = imul %31, %6
    %33:i64 = iadd %8, %32
    %36:i32 = iconst 170
    %37:i32 = iconst 171
    %38:ptr = iconst 0
    %39:ctrl = store.8 %2, %38, %20
    %40:ctrl, %41:phisel = region %39
    %42:ctrl, %43:ptr = call @gc_new %40, %37, %35
    %44:ptr = ptroff %43, %10
    %45:ctrl = store.4 %42, %31, %44
    %46:ctrl = store.8 %45, %43, %20
    %47:ctrl, %48:ptr = load.8 %46, %20
    %49:ctrl, %50:ptr = call @gc_new %47, %36, %33
    %52:ptr = ptroff %50, %10
    %53:ctrl = store.4 %49, %31, %52
    %54:ctrl, %55:i64 = load.4 %53, %52
    %56:i64 = icmp slt %13, %55
    %57:ctrl, %58:ctrl = brcond %54, %56
    %59:ctrl, %60:phisel = region %57
    %51:ptr = ptroff %50, %15
    %61:ctrl = store.4 %59, %11, %51
    %63:ptr = ptroff %48, %10
    %64:ctrl, %65:i64 = load.4 %61, %63
    %66:i64 = icmp slt %24, %65
    %67:ctrl, %68:ctrl = brcond %64, %66
    %69:ctrl, %70:phisel = region %67
    %62:ptr = ptroff %48, %28
    %71:ctrl = store.8 %69, %50, %62
    %72:ctrl, %73:ptr = load.8 %71, %20
    %74:ctrl, %75:ptr = call @gc_new %72, %36, %33
    %78:ptr = ptroff %75, %10
    %79:ctrl = store.4 %74, %31, %78
    %80:ctrl, %81:i64 = load.4 %79, %78
    %82:i64 = icmp slt %24, %81
    %83:ctrl, %84:ctrl = brcond %80, %82
    %85:ctrl, %86:phisel = region %83
    %77:ptr = ptroff %75, %26
    %87:ctrl = store.4 %85, %29, %77
    %88:ctrl, %89:i64 = load.4 %87, %78
    %90:i64 = icmp slt %13, %89
    %91:ctrl, %92:ctrl = brcond %88, %90
    %93:ctrl, %94:phisel = region %91
    %76:ptr = ptroff %75, %15
    %95:ctrl = store.4 %93, %21, %76
    %97:ptr = ptroff %73, %10
    %98:ctrl, %99:i64 = load.4 %95, %97
    %100:i64 = icmp slt %13, %99
    %101:ctrl, %102:ctrl = brcond %98, %100
    %103:ctrl, %104:phisel = region %101
    %96:ptr = ptroff %73, %19
    %105:ctrl = store.8 %103, %75, %96
    %106:ctrl, %107:ptr = load.8 %105, %20
    %109:ptr = ptroff %107, %10
    %110:ctrl, %111:i64 = load.4 %106, %109
    %112:i64 = icmp slt %13, %111
    %113:ctrl, %114:ctrl = brcond %110, %112
    %115:ctrl, %116:phisel = region %113
    %108:ptr = ptroff %107, %19
    %117:ctrl, %118:ptr = load.8 %115, %108
    %120:ptr = ptroff %118, %10
    %121:ctrl, %122:i64 = load.4 %117, %120
    %123:i64 = icmp slt %5, %122
    %124:ctrl, %125:ctrl = brcond %121, %123
    %126:ctrl, %127:phisel = region %124
    %130:ctrl, %131:phisel = region %58, %68, %84, %92, %102, %114, %125
    %132:ctrl = call @throw_index_out_of_range_exception %130
    unreachable %132
    %119:ptr = ptroff %118, %9
    %128:ctrl, %129:i32 = load.4 %126, %119
    return %128, %129
}
