# run: codegen

func @sum_to_n:i32(i32) {
    # check: function `sum_to_n`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 85 ff                           test edi, edi
    # nextln: 000008: 0f 84 16 00 00 00               je 0x24
    # nextln: 00000e: 89 f9                           mov ecx, edi
    # nextln: 000010: 83 e9 01                        sub ecx, 1
    # nextln: 000013: 03 c7                           add eax, edi
    # nextln: 000015: 85 c9                           test ecx, ecx
    # nextln: 000017: 0f 84 07 00 00 00               je 0x24
    # nextln: 00001d: 89 cf                           mov edi, ecx
    # nextln: 00001f: e9 ea ff ff ff                  jmp 0xe
    # nextln: 000024: 5d                              pop rbp
    # nextln: 000025: c3                              ret

    %0:ctrl, %1:i32 = entry
    %10:i32 = iconst 1
    %2:i32 = iconst 0
    %3:i32 = icmp eq %1, %2
    %4:ctrl, %5:ctrl = brcond %0, %3
    %13:i32 = icmp eq %11, %2
    %14:ctrl, %15:ctrl = brcond %6, %13
    %16:ctrl, %17:phisel = region %4, %14
    %6:ctrl, %7:phisel = region %5, %15
    %8:i32 = phi %7, %1, %11
    %11:i32 = isub %8, %10
    %9:i32 = phi %7, %2, %12
    %12:i32 = iadd %9, %8
    %18:i32 = phi %17, %2, %12
    return %16, %18
}


func @sum_to_n_with_stack:i32(i32) {
    # check: function `sum_to_n_with_stack`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 89 3c 24                        mov dword ptr [rsp], edi
    # nextln: 00000b: 33 c0                           xor eax, eax
    # nextln: 00000d: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000011: 8b 04 24                        mov eax, dword ptr [rsp]
    # nextln: 000014: 85 c0                           test eax, eax
    # nextln: 000016: 0f 84 1a 00 00 00               je 0x36
    # nextln: 00001c: 8b 0c 24                        mov ecx, dword ptr [rsp]
    # nextln: 00001f: 89 c8                           mov eax, ecx
    # nextln: 000021: 83 e8 01                        sub eax, 1
    # nextln: 000024: 8b 54 24 04                     mov edx, dword ptr [rsp + 4]
    # nextln: 000028: 03 ca                           add ecx, edx
    # nextln: 00002a: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 00002d: 89 4c 24 04                     mov dword ptr [rsp + 4], ecx
    # nextln: 000031: e9 db ff ff ff                  jmp 0x11
    # nextln: 000036: 8b 44 24 04                     mov eax, dword ptr [rsp + 4]
    # nextln: 00003a: 48 83 c4 10                     add rsp, 0x10
    # nextln: 00003e: 5d                              pop rbp
    # nextln: 00003f: c3                              ret

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %5:ptr = stackslot 4:4
    %4:ptr = stackslot 4:4
    %6:ctrl = store.4 %2, %1, %4
    %24:i32 = iconst 1
    %7:i32 = iconst 0
    %8:ctrl = store.4 %6, %7, %5
    %13:i32 = icmp eq %12, %7
    %18:ctrl, %19:ctrl = brcond %11, %13
    %14:ctrl, %15:phisel = region %18
    %29:ctrl, %30:i32 = load.4 %14, %5
    return %29, %30
    %16:ctrl, %17:phisel = region %19
    %20:ctrl, %21:i32 = load.4 %16, %4
    %22:ctrl, %23:i32 = load.4 %20, %5
    %25:i32 = isub %21, %24
    %27:ctrl = store.4 %22, %25, %4
    %26:i32 = iadd %23, %21
    %28:ctrl = store.4 %27, %26, %5
    %9:ctrl, %10:phisel = region %8, %28
    %11:ctrl, %12:i32 = load.4 %9, %4
}
