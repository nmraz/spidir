# run: isel[large-abs]

extfunc @extfunc(ptr, i32)
extfunc @extfunc2:i32(ptr, i32)

func @infunc(ptr, i32) {
    # check: function `infunc`:
    # nextln:       block0[]:
    # nextln: 0000:      Jump(block1)
    # nextln:       => block1
    # nextln:       block1:
    # nextln: 0001:      Ret

    %0:ctrl, %1:ptr, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    return %3
}

func @infunc2:i32(ptr, i32) {
    # check: function `infunc2`:
    # nextln:       block0[%0:gpr($$rsi)]:
    # nextln: 0000:      Jump(block1)
    # nextln:       => block1
    # nextln:       block1:
    # nextln: 0001:      Ret %0($$rax)[early]

    %0:ctrl, %1:ptr, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    return %3, %2
}

func @no_params() {
    # check: function `no_params`:
    # nextln:       block0[]:
    # nextln: 0000:      Ret

    %0:ctrl = entry
    return %0
}

func @single_stack_arg(i64, i64, i64, i64, i64, i64, i64) {
    # check: function `single_stack_arg`:
    # nextln:       block0[]:
    # nextln: 0000:      Ret

    %0:ctrl, %1:i64, %2:i64, %3:i64, %4:i64, %5:i64, %6:i64, %7:i64 = entry
    return %0
}

func @many_params(i32, i64, ptr, i64, i32, i32, i64, ptr, i32, i64) {
    # check: function `many_params`:
    # nextln:       block0[]:
    # nextln: 0000:      Ret

    %0:ctrl, %1:i32, %2:i64, %3:ptr, %4:i64, %5:i32, %6:i32, %7:i64, %8:ptr, %9:i32, %10:i64 = entry
    return %0
}

func @caller:i32(ptr, i32) {
    # check: function `caller`:
    # nextln:       block0[%4:gpr($$rdi), %5:gpr($$rsi)]:
    # nextln: 0000:      Jump(block1)
    # nextln:       => block1
    # nextln:       block1:
    # nextln: 0001:      %9:gpr(reg)[late] = FuncAddrAbs(External(extfunc0))
    # nextln: 0002:      CallRm %9(any)[early], %4($$rdi)[early], %5($$rsi)[early] ^($$rax, $$rcx, $$rdx, $$rdi, $$rsi, $$r8, $$r9, $$r10, $$r11)
    # nextln: 0003:      %8:gpr(reg)[late] = FuncAddrAbs(External(extfunc1))
    # nextln: 0004:      %2:gpr($$rax)[late] = CallRm %8(any)[early], %4($$rdi)[early], %5($$rsi)[early] ^($$rax, $$rcx, $$rdx, $$rdi, $$rsi, $$r8, $$r9, $$r10, $$r11)
    # nextln: 0005:      %7:gpr(reg)[late] = FuncAddrAbs(Internal(func0))
    # nextln: 0006:      CallRm %7(any)[early], %4($$rdi)[early], %5($$rsi)[early] ^($$rax, $$rcx, $$rdx, $$rdi, $$rsi, $$r8, $$r9, $$r10, $$r11)
    # nextln: 0007:      %6:gpr(reg)[late] = FuncAddrAbs(Internal(func1))
    # nextln: 0008:      %3:gpr($$rax)[late] = CallRm %6(any)[early], %4($$rdi)[early], %5($$rsi)[early] ^($$rax, $$rcx, $$rdx, $$rdi, $$rsi, $$r8, $$r9, $$r10, $$r11)
    # nextln: 0009:      %0:gpr(reg)[late] = AluRRm(S32, Add) %2(tied:0)[early], %3(any)[early]
    # nextln: 0010:      %1:gpr(reg)[late] = FuncAddrAbs(Internal(func2))
    # nextln: 0011:      CallRm %1(any)[early] ^($$rax, $$rcx, $$rdx, $$rdi, $$rsi, $$r8, $$r9, $$r10, $$r11)
    # nextln: 0012:      Ret %0($$rax)[early]

    %0:ctrl, %1:ptr, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    %5:ctrl = call @extfunc %3, %1, %2
    %6:ctrl, %7:i32 = call @extfunc2 %5, %1, %2
    %8:ctrl = call @infunc %6, %1, %2
    %9:ctrl, %10:i32 = call @infunc2 %8, %1, %2
    %11:i32 = iadd %7, %10
    %12:ctrl = call @no_params %9
    return %12, %11
}

# When calling functions with an odd number of stack arguments, the stack should
# stay aligned to 16 bytes.

func @call_single_stack_arg() {
    # check: function `call_single_stack_arg`:
    # nextln:       block0[]:
    # nextln: 0000:      %0:gpr(any)[late] = MovRmS32(7)
    # nextln: 0001:      AddSp(-8)
    # nextln: 0002:      Push %0(reg)[early]
    # nextln: 0003:      %1:gpr(reg)[late] = FuncAddrAbs(Internal(func3))
    # nextln: 0004:      CallRm %1(any)[early], %0($$rdi)[early], %0($$rsi)[early], %0($$rdx)[early], %0($$rcx)[early], %0($$r8)[early], %0($$r9)[early] ^($$rax, $$rcx, $$rdx, $$rdi, $$rsi, $$r8, $$r9, $$r10, $$r11)
    # nextln: 0005:      AddSp(16)
    # nextln: 0006:      Ret

    %0:ctrl = entry
    %x:i64 = iconst 7
    %1:ctrl = call @single_stack_arg %0, %x, %x, %x, %x, %x, %x, %x
    return %1
}

func @call_many_params(ptr) {
    # check: function `call_many_params`:
    # nextln:       block0[%2:gpr($$rdi)]:
    # nextln: 0000:      %0:gpr(reg)[late] = MovRZ
    # nextln: 0001:      %1:gpr(reg)[late] = MovRZ
    # nextln: 0002:      Push %1(reg)[early]
    # nextln: 0003:      Push %0(reg)[early]
    # nextln: 0004:      Push %2(reg)[early]
    # nextln: 0005:      Push %1(reg)[early]
    # nextln: 0006:      %3:gpr(reg)[late] = FuncAddrAbs(Internal(func4))
    # nextln: 0007:      CallRm %3(any)[early], %0($$rdi)[early], %1($$rsi)[early], %2($$rdx)[early], %1($$rcx)[early], %0($$r8)[early], %0($$r9)[early] ^($$rax, $$rcx, $$rdx, $$rdi, $$rsi, $$r8, $$r9, $$r10, $$r11)
    # nextln: 0008:      AddSp(32)
    # nextln: 0009:      Ret

    %0:ctrl, %p:ptr = entry
    %zero32:i32 = iconst 0
    %zero64:i64 = iconst 0
    %1:ctrl = call @many_params %0, %zero32, %zero64, %p, %zero64, %zero32, %zero32, %zero64, %p, %zero32, %zero64
    return %1
}
