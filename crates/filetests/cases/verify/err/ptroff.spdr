# run: verify-err

func @ptroff_bad_input_count:ptr(i64) {
    # check: function `ptroff_bad_input_count`:
    # unordered: `$val:ptr = ptroff $val, $val, $val`: bad input count, expected 2
    # unordered: `$val:ptr = ptroff`: bad input count, expected 2

    %0:ctrl, %1:i64 = entry
    %2:ptr = ptroff
    %3:ptr = ptroff %2, %1, %1
    return %0, %3
}

func @ptroff_bad_output_count:i64(ptr, i64) {
    # check: function `ptroff_bad_output_count`:
    # unordered: `return $val, $val`: bad value kind for input 1, expected one of `i64`, got `ptr`
    # unordered: `$val:ptr, $val:i32 = ptroff $val, $val`: bad output count, expected 1

    %0:ctrl, %1:ptr, %2:i64 = entry
    %3:ptr, %4:i32 = ptroff %1, %2
    return %0, %3
}

func @ptroff_bad_output_kind(ptr, i64) {
    # check: function `ptroff_bad_output_kind`:
    # unordered: `$val:ctrl = ptroff $val, $val`: bad value kind for output 0, expected one of `ptr`, got `ctrl`

    %0:ctrl, %1:ptr, %2:i64 = entry
    %3:ctrl = ptroff %1, %2
    %4:ctrl, %5:phisel = region %0, %3
    return %4
}

func @ptroff_bad_input_kind_0:ptr(i64) {
    # check: function `ptroff_bad_input_kind_0`:
    # unordered: `$val:ptr = ptroff $val, $val`: bad value kind for input 0, expected one of `ptr`, got `i64`

    %0:ctrl, %1:i64 = entry
    %2:ptr = ptroff %1, %1
    return %0, %2
}

func @ptroff_bad_input_kind_1:ptr(ptr) {
    # check: function `ptroff_bad_input_kind_1`:
    # unordered: `$val:ptr = ptroff $val, $val`: bad value kind for input 1, expected one of `i64`, got `ptr`

    %0:ctrl, %1:ptr = entry
    %2:ptr = ptroff %1, %1
    return %0, %2
}

func @ptroff_i32:ptr(ptr, i32) {
    # check: function `ptroff_i32`:
    # unordered: `$val:ptr = ptroff $val, $val`: bad value kind for input 1, expected one of `i64`, got `i32`

    %0:ctrl, %1:ptr, %2:i32 = entry
    %3:ptr = ptroff %1, %2
    return %0, %3
}
