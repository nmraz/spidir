# run: schedule

func @sum_to_n:i32(i32) {
    # check: function `sum_to_n`:
    # nextln: block0:
    # nextln:     $(iconst0=$val):i32 = iconst 0
    # nextln:     $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # nextln:     $(icmp0=$val):i32 = icmp eq $entry1, $iconst0
    # nextln:     $(brcond0=$val):ctrl, $(brcond1=$val):ctrl = brcond $entry0, $icmp0
    # nextln: => block1, block3
    # nextln: block1:
    # nextln: => block2
    # nextln: block3:
    # nextln:     $(iconst1=$val):i32 = iconst 1
    # nextln: => block4
    # nextln: block4:
    # nextln:     $(phi0=$val):i32 = phi $(region0=$val), $iconst0, $(iadd0=$val)
    # nextln:     $(phi1=$val):i32 = phi $region0, $entry1, $(isub0=$val)
    # nextln:     $isub0:i32 = isub $phi1, $iconst1
    # nextln:     $iadd0:i32 = iadd $phi0, $phi1
    # nextln:     $(icmp1=$val):i32 = icmp eq $isub0, $iconst0
    # nextln:     $(brcond2=$val):ctrl, $(brcond3=$val):ctrl = brcond $(region1=$val), $icmp1
    # nextln: => block5, block6
    # nextln: block6:
    # nextln: => block4
    # nextln: block5:
    # nextln: => block2
    # nextln: block2:
    # nextln:     $(phi2=$val):i32 = phi $(region2=$val), $iconst0, $iadd0
    # nextln:     return $(region3=$val), $phi2

    %0:ctrl, %1:i32 = entry
    %10:i32 = iconst 1
    %2:i32 = iconst 0
    %3:i32 = icmp eq %1, %2
    %4:ctrl, %5:ctrl = brcond %0, %3
    %13:i32 = icmp eq %11, %2
    %14:ctrl, %15:ctrl = brcond %6, %13
    %16:ctrl, %17:phisel = region %4, %14
    %6:ctrl, %7:phisel = region %5, %15
    %8:i32 = phi %7, %1, %11
    %11:i32 = isub %8, %10
    %9:i32 = phi %7, %2, %12
    %12:i32 = iadd %9, %8
    %18:i32 = phi %17, %2, %12
    return %16, %18
}

func @sum_to_n_with_stack:i32(i32) {
    # check: function `sum_to_n_with_stack`:
    # nextln: block0:
    # nextln:     $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # nextln: => block1
    # nextln: block1:
    # nextln:     $(iconst0=$val):i32 = iconst 0
    # nextln:     $(stackslot0=$val):ptr = stackslot 4:4
    # nextln:     $(stackslot1=$val):ptr = stackslot 4:4
    # nextln:     $(iconst1=$val):i32 = iconst 1
    # nextln:     $(store0=$val):ctrl = store.4 $(region0=$val), $entry1, $stackslot0
    # nextln:     $(store1=$val):ctrl = store.4 $store0, $iconst0, $stackslot1
    # nextln: => block2
    # nextln: block2:
    # nextln:     $(load0=$val):ctrl, $(load1=$val):i32 = load.4 $(region1=$val), $stackslot0
    # nextln:     $(icmp0=$val):i32 = icmp eq $load1, $iconst0
    # nextln:     $(brcond0=$val):ctrl, $(brcond1=$val):ctrl = brcond $load0, $icmp0
    # nextln: => block3, block4
    # nextln: block4:
    # nextln:     $(load2=$val):ctrl, $(load3=$val):i32 = load.4 $(region2=$val), $stackslot0
    # nextln:     $(load4=$val):ctrl, $(load5=$val):i32 = load.4 $load2, $stackslot1
    # nextln:     $(isub0=$val):i32 = isub $load3, $iconst1
    # nextln:     $(iadd0=$val):i32 = iadd $load5, $load3
    # nextln:     $(store2=$val):ctrl = store.4 $load4, $isub0, $stackslot0
    # nextln:     $(store3=$val):ctrl = store.4 $store2, $iadd0, $stackslot1
    # nextln: => block2
    # nextln: block3:
    # nextln:     $(load6=$val):ctrl, $(load7=$val):i32 = load.4 $(region3=$val), $stackslot1
    # nextln:     return $load6, $load7

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %5:ptr = stackslot 4:4
    %4:ptr = stackslot 4:4
    %6:ctrl = store.4 %2, %1, %4
    %24:i32 = iconst 1
    %7:i32 = iconst 0
    %8:ctrl = store.4 %6, %7, %5
    %13:i32 = icmp eq %12, %7
    %18:ctrl, %19:ctrl = brcond %11, %13
    %14:ctrl, %15:phisel = region %18
    %29:ctrl, %30:i32 = load.4 %14, %5
    return %29, %30
    %16:ctrl, %17:phisel = region %19
    %20:ctrl, %21:i32 = load.4 %16, %4
    %22:ctrl, %23:i32 = load.4 %20, %5
    %25:i32 = isub %21, %24
    %27:ctrl = store.4 %22, %25, %4
    %26:i32 = iadd %23, %21
    %28:ctrl = store.4 %27, %26, %5
    %9:ctrl, %10:phisel = region %8, %28
    %11:ctrl, %12:i32 = load.4 %9, %4
}
