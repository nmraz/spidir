# run: graphviz[plain]

extfunc @memset:ptr(ptr, i32, i64)
extfunc @memcpy:ptr(ptr, ptr, i64)
extfunc @gc_new:ptr(i64, i64)
extfunc @throw(ptr)

func @"System.Boolean System.ValueType::Equals(System.Object)":i32(ptr, ptr) {
    # check: function `System.Boolean System.ValueType::Equals(System.Object)`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr | <o2> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{iconst 0 | {<o0> i32}}"]
    # nextln:     node3 [shape=Mrecord, label="{iconst 8 | {<o0> i64}}"]
    # nextln:     node4 [shape=Mrecord, label="{iconst 106721347376192 | {<o0> i64}}"]
    # nextln:     node5 [shape=Mrecord, label="{iconst 0 | {<o0> ptr}}"]
    # nextln:     node6 [shape=Mrecord, label="{{<i0> | <i1>} | icmp ne | {<o0> i32}}"]
    # nextln:     node7 [shape=Mrecord, label="{{<i0> | <i1>} | brcond | {<o0> ctrl | <o1> ctrl}}"]
    # nextln:     node8 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node9 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node10 [shape=Mrecord, label="{{<i0> | <i1>} | return}"]
    # nextln:     node11 [shape=Mrecord, label="{stackslot 0:1 | {<o0> ptr}}"]
    # nextln:     node12 [shape=Mrecord, label="{iconst 0 | {<o0> i64}}"]
    # nextln:     node13 [shape=Mrecord, label="{{<i0> | <i1> | <i2> | <i3>} | call @memcpy | {<o0> ctrl}}"]
    # nextln:     node14 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.Type System.Object::GetType()\" | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node15 [shape=Mrecord, label="{{<i0> | <i1>} | brcond | {<o0> ctrl | <o1> ctrl}}"]
    # nextln:     node16 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node17 [shape=Mrecord, label="{{<i0> | <i1> | <i2>} | call @gc_new | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node18 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.Void System.NullReferenceException::.ctor()\" | {<o0> ctrl}}"]
    # nextln:     node19 [shape=Mrecord, label="{{<i0> | <i1>} | call @throw | {<o0> ctrl}}"]
    # nextln:     node20 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node21 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.Type System.Object::GetType()\" | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node22 [shape=Mrecord, label="{{<i0> | <i1>} | return}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node0:o2 -> node6:i0
    # nextln:     node5:o0 -> node6:i1
    # nextln:     node1:o0 -> node7:i0
    # nextln:     node6:o0 -> node7:i1
    # nextln:     node7:o0 -> node8:i0
    # nextln:     node7:o1 -> node9:i0
    # nextln:     node9:o0 -> node10:i0
    # nextln:     node2:o0 -> node10:i1
    # nextln:     node8:o0 -> node13:i0
    # nextln:     node11:o0 -> node13:i1
    # nextln:     node0:o1 -> node13:i2
    # nextln:     node12:o0 -> node13:i3
    # nextln:     node13:o0 -> node14:i0
    # nextln:     node11:o0 -> node14:i1
    # nextln:     node14:o0 -> node15:i0
    # nextln:     node6:o0 -> node15:i1
    # nextln:     node15:o0 -> node16:i0
    # nextln:     node16:o0 -> node17:i0
    # nextln:     node4:o0 -> node17:i1
    # nextln:     node3:o0 -> node17:i2
    # nextln:     node17:o0 -> node18:i0
    # nextln:     node17:o1 -> node18:i1
    # nextln:     node18:o0 -> node19:i0
    # nextln:     node17:o1 -> node19:i1
    # nextln:     node15:o1 -> node20:i0
    # nextln:     node20:o0 -> node21:i0
    # nextln:     node0:o2 -> node21:i1
    # nextln:     node21:o0 -> node22:i0
    # nextln:     node2:o0 -> node22:i1
    # nextln: }

    %0:ctrl, %1:ptr, %2:ptr = entry
    %3:ctrl, %4:phisel = region %0
    %13:i32 = iconst 0
    %26:i64 = iconst 8
    %25:i64 = iconst 106721347376192
    %9:ptr = iconst 0
    %10:i32 = icmp ne %2, %9
    %11:ctrl, %12:ctrl = brcond %3, %10
    %5:ctrl, %6:phisel = region %11
    %7:ctrl, %8:phisel = region %12
    return %7, %13
    %14:ptr = stackslot 0:1
    %15:i64 = iconst 0
    %16:ctrl = call @memcpy %5, %14, %1, %15
    %17:ctrl, %18:ptr = call @"System.Type System.Object::GetType()" %16, %14
    %23:ctrl, %24:ctrl = brcond %17, %10
    %19:ctrl, %20:phisel = region %23
    %27:ctrl, %28:ptr = call @gc_new %19, %25, %26
    %29:ctrl = call @"System.Void System.NullReferenceException::.ctor()" %27, %28
    %30:ctrl = call @throw %29, %28
    %21:ctrl, %22:phisel = region %24
    %31:ctrl, %32:ptr = call @"System.Type System.Object::GetType()" %21, %2
    return %31, %13
}


func @"System.Void System.Object::Finalize()"(ptr) {
    # check: function `System.Void System.Object::Finalize()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{{<i0>} | return}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node1:o0 -> node2:i0
    # nextln: }

    %0:ctrl, %1:ptr = entry
    %2:ctrl, %3:phisel = region %0
    return %2
}

func @"System.String System.Object::ToString()":ptr(ptr) {
    # check: function `System.String System.Object::ToString()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.Type System.Object::GetType()\" | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node3 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.String System.Object::ToString()\" | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node4 [shape=Mrecord, label="{{<i0> | <i1>} | return}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node1:o0 -> node2:i0
    # nextln:     node0:o1 -> node2:i1
    # nextln:     node2:o0 -> node3:i0
    # nextln:     node2:o1 -> node3:i1
    # nextln:     node3:o0 -> node4:i0
    # nextln:     node3:o1 -> node4:i1
    # nextln: }

    %0:ctrl, %1:ptr = entry
    %2:ctrl, %3:phisel = region %0
    %4:ctrl, %5:ptr = call @"System.Type System.Object::GetType()" %2, %1
    %6:ctrl, %7:ptr = call @"System.String System.Object::ToString()" %4, %5
    return %6, %7
}

func @"System.Type System.Object::GetType()":ptr(ptr) {
    # check: function `System.Type System.Object::GetType()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln: }

    %0:ctrl, %1:ptr = entry
}

func @"System.Void System.NullReferenceException::.ctor()"(ptr) {
    # check: function `System.Void System.NullReferenceException::.ctor()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln: }

    %0:ctrl, %1:ptr = entry
}

func @"System.Boolean System.Object::Equals(System.Object)":i32(ptr, ptr) {
    # check: function `System.Boolean System.Object::Equals(System.Object)`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr | <o2> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{{<i0> | <i1>} | icmp eq | {<o0> i32}}"]
    # nextln:     node3 [shape=Mrecord, label="{{<i0> | <i1>} | return}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node0:o1 -> node2:i0
    # nextln:     node0:o2 -> node2:i1
    # nextln:     node1:o0 -> node3:i0
    # nextln:     node2:o0 -> node3:i1
    # nextln: }

    %0:ctrl, %1:ptr, %2:ptr = entry
    %3:ctrl, %4:phisel = region %0
    %5:i32 = icmp eq %1, %2
    return %3, %5
}

func @"System.Int32 System.Object::GetHashCode()":i32(ptr) {
    # check: function `System.Int32 System.Object::GetHashCode()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{iconst 4294967295 | {<o0> i32}}"]
    # nextln:     node3 [shape=Mrecord, label="{{<i0> | <i1>} | return}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node1:o0 -> node3:i0
    # nextln:     node2:o0 -> node3:i1
    # nextln: }

    %0:ctrl, %1:ptr = entry
    %2:ctrl, %3:phisel = region %0
    %4:i32 = iconst 4294967295
    return %2, %4
}

func @"System.Int32 System.ValueType::GetHashCode()":i32(ptr) {
    # check: function `System.Int32 System.ValueType::GetHashCode()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{iconst 4294967295 | {<o0> i32}}"]
    # nextln:     node3 [shape=Mrecord, label="{{<i0> | <i1>} | return}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node1:o0 -> node3:i0
    # nextln:     node2:o0 -> node3:i1
    # nextln: }

    %0:ctrl, %1:ptr = entry
    %2:ctrl, %3:phisel = region %0
    %4:i32 = iconst 4294967295
    return %2, %4
}

func @"System.String System.ValueType::ToString()":ptr(ptr) {
    # check: function `System.String System.ValueType::ToString()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{stackslot 0:1 | {<o0> ptr}}"]
    # nextln:     node3 [shape=Mrecord, label="{iconst 0 | {<o0> i64}}"]
    # nextln:     node4 [shape=Mrecord, label="{{<i0> | <i1> | <i2> | <i3>} | call @memcpy | {<o0> ctrl}}"]
    # nextln:     node5 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.Type System.Object::GetType()\" | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node6 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.String System.Object::ToString()\" | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node7 [shape=Mrecord, label="{{<i0> | <i1>} | return}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node1:o0 -> node4:i0
    # nextln:     node2:o0 -> node4:i1
    # nextln:     node0:o1 -> node4:i2
    # nextln:     node3:o0 -> node4:i3
    # nextln:     node4:o0 -> node5:i0
    # nextln:     node2:o0 -> node5:i1
    # nextln:     node5:o0 -> node6:i0
    # nextln:     node5:o1 -> node6:i1
    # nextln:     node6:o0 -> node7:i0
    # nextln:     node6:o1 -> node7:i1
    # nextln: }

    %0:ctrl, %1:ptr = entry
    %2:ctrl, %3:phisel = region %0
    %4:ptr = stackslot 0:1
    %5:i64 = iconst 0
    %6:ctrl = call @memcpy %2, %4, %1, %5
    %7:ctrl, %8:ptr = call @"System.Type System.Object::GetType()" %6, %4
    %9:ctrl, %10:ptr = call @"System.String System.Object::ToString()" %7, %8
    return %9, %10
}

func @"System.Test+Lol System.Test::Do(Lol[])"(ptr, ptr, ptr) {
    # check: function `System.Test+Lol System.Test::Do(Lol[])`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr | <o2> ptr | <o3> ptr}}"]
    # nextln:     node1 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node2 [shape=Mrecord, label="{iconst 8 | {<o0> i64}}"]
    # nextln:     node3 [shape=Mrecord, label="{iconst 106721347374592 | {<o0> i64}}"]
    # nextln:     node4 [shape=Mrecord, label="{stackslot 8:4 | {<o0> ptr}}"]
    # nextln:     node5 [shape=Mrecord, label="{iconst 5 | {<o0> i32}}"]
    # nextln:     node6 [shape=Mrecord, label="{{<i0> | <i1>} | imul | {<o0> i64}}"]
    # nextln:     node7 [shape=Mrecord, label="{iconst 40 | {<o0> i64}}"]
    # nextln:     node8 [shape=Mrecord, label="{{<i0> | <i1>} | iadd | {<o0> i64}}"]
    # nextln:     node9 [shape=Mrecord, label="{{<i0> | <i1>} | ptroff | {<o0> ptr}}"]
    # nextln:     node10 [shape=Mrecord, label="{iconst 32 | {<o0> i64}}"]
    # nextln:     node11 [shape=Mrecord, label="{{<i0> | <i1>} | ptroff | {<o0> ptr}}"]
    # nextln:     node12 [shape=Mrecord, label="{{<i0> | <i1>} | load.4 | {<o0> ctrl | <o1> i32}}"]
    # nextln:     node13 [shape=Mrecord, label="{{<i0> | <i1>} | icmp slt | {<o0> i32}}"]
    # nextln:     node14 [shape=Mrecord, label="{{<i0> | <i1>} | brcond | {<o0> ctrl | <o1> ctrl}}"]
    # nextln:     node15 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node16 [shape=Mrecord, label="{{<i0> | <i1> | <i2> | <i3>} | call @memcpy | {<o0> ctrl}}"]
    # nextln:     node17 [shape=Mrecord, label="{{<i0> | <i1> | <i2> | <i3>} | call @memcpy | {<o0> ctrl}}"]
    # nextln:     node18 [shape=Mrecord, label="{{<i0>} | return}"]
    # nextln:     node19 [shape=Mrecord, label="{{<i0>} | region | {<o0> ctrl | <o1> phisel}}"]
    # nextln:     node20 [shape=Mrecord, label="{{<i0> | <i1> | <i2>} | call @gc_new | {<o0> ctrl | <o1> ptr}}"]
    # nextln:     node21 [shape=Mrecord, label="{{<i0> | <i1>} | call @\"System.Void System.IndexOutOfRangeException::.ctor()\" | {<o0> ctrl}}"]
    # nextln:     node22 [shape=Mrecord, label="{{<i0> | <i1>} | call @throw | {<o0> ctrl}}"]
    # nextln:     node0:o0 -> node1:i0
    # nextln:     node2:o0 -> node6:i0
    # nextln:     node5:o0 -> node6:i1
    # nextln:     node7:o0 -> node8:i0
    # nextln:     node6:o0 -> node8:i1
    # nextln:     node0:o2 -> node9:i0
    # nextln:     node8:o0 -> node9:i1
    # nextln:     node0:o2 -> node11:i0
    # nextln:     node10:o0 -> node11:i1
    # nextln:     node1:o0 -> node12:i0
    # nextln:     node11:o0 -> node12:i1
    # nextln:     node5:o0 -> node13:i0
    # nextln:     node12:o1 -> node13:i1
    # nextln:     node12:o0 -> node14:i0
    # nextln:     node13:o0 -> node14:i1
    # nextln:     node14:o0 -> node15:i0
    # nextln:     node15:o0 -> node16:i0
    # nextln:     node4:o0 -> node16:i1
    # nextln:     node9:o0 -> node16:i2
    # nextln:     node2:o0 -> node16:i3
    # nextln:     node16:o0 -> node17:i0
    # nextln:     node0:o1 -> node17:i1
    # nextln:     node4:o0 -> node17:i2
    # nextln:     node2:o0 -> node17:i3
    # nextln:     node17:o0 -> node18:i0
    # nextln:     node14:o1 -> node19:i0
    # nextln:     node19:o0 -> node20:i0
    # nextln:     node3:o0 -> node20:i1
    # nextln:     node2:o0 -> node20:i2
    # nextln:     node20:o0 -> node21:i0
    # nextln:     node20:o1 -> node21:i1
    # nextln:     node21:o0 -> node22:i0
    # nextln:     node20:o1 -> node22:i1
    # nextln: }

    %0:ctrl, %1:ptr, %2:ptr, %3:ptr = entry
    %4:ctrl, %5:phisel = region %0
    %19:i64 = iconst 8
    %18:i64 = iconst 106721347374592
    %28:ptr = stackslot 8:4
    %6:i32 = iconst 5
    %25:i64 = imul %19, %6
    %24:i64 = iconst 40
    %26:i64 = iadd %24, %25
    %27:ptr = ptroff %2, %26
    %11:i64 = iconst 32
    %12:ptr = ptroff %2, %11
    %13:ctrl, %14:i32 = load.4 %4, %12
    %15:i32 = icmp slt %6, %14
    %16:ctrl, %17:ctrl = brcond %13, %15
    %7:ctrl, %8:phisel = region %16
    %29:ctrl = call @memcpy %7, %28, %27, %19
    %30:ctrl = call @memcpy %29, %1, %28, %19
    return %30
    %9:ctrl, %10:phisel = region %17
    %20:ctrl, %21:ptr = call @gc_new %9, %18, %19
    %22:ctrl = call @"System.Void System.IndexOutOfRangeException::.ctor()" %20, %21
    %23:ctrl = call @throw %22, %21
}

func @"System.Void System.IndexOutOfRangeException::.ctor()"(ptr) {
    # check: function `System.Void System.IndexOutOfRangeException::.ctor()`:
    # nextln: digraph {
    # nextln:     node0 [shape=Mrecord, label="{entry | {<o0> ctrl | <o1> ptr}}"]
    # nextln: }

    %0:ctrl, %1:ptr = entry
}
