# run: isel

# We shouldn't emit the 5 at all, as it is only used in the dead phi input.

func @has_dead_phi_input:i32() {
    # check: function `has_dead_phi_input`:
    # nextln:       block0[]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(1)
    # nextln: 0001:      Jump(block1)
    # nextln:       => block1
    # nextln:       block1:
    # nextln: 0002:      Ret %1($$rax)[early]

    %entry:ctrl = entry
    %1:i32 = iconst 1
    %5:i32 = iconst 5
    %dead:ctrl, %deadsel:phisel = region
    %exit:ctrl, %exitsel:phisel = region %entry, %dead
    %retval:i32 = phi %exitsel, %1, %5
    return %exit, %retval
}

# This function uses an `icmp` in both a dead phi input and a conditional branch. We expect isel not
# to count the dead phi input as a use at all, resulting in a folded single-use-compare + branch.

func @icmp_dead_phi_input:i32(i32) {
    # check: function `icmp_dead_phi_input`:
    # nextln:       block0[%2:gpr64($$rdi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(5)
    # nextln: 0001:      Jump(block1)
    # nextln:       => block1
    # nextln:       block1:
    # nextln: 0002:      AluRRm(S32, Test) %2(reg)[early], %2(any)[early]
    # nextln: 0003:      Jumpcc(E, block2, block3)
    # nextln:       => block2, block3
    # nextln:       block2:
    # nextln: 0004:      Ret %1($$rax)[early]
    # nextln:       block3:
    # nextln: 0005:      Ret %1($$rax)[early]

    %entry:ctrl, %p:i32 = entry
    %0:i32 = iconst 0
    %5:i32 = iconst 5
    %cmp:i32 = icmp eq %p, %0
    %dead:ctrl, %deadsel:phisel = region
    %mid:ctrl, %midsel:phisel = region %entry, %dead
    %val:i32 = phi %midsel, %5, %cmp
    %exit1:ctrl, %exit2:ctrl = brcond %mid, %cmp
    return %exit1, %val
    return %exit2, %val
}
