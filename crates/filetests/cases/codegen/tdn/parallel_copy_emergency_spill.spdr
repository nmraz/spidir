# run: codegen

extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)":i32(ptr, i32)
extfunc @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)":i32(i64, i32)

func @"System.Boolean Tests.BitTest::Run()":i32() {
    # check: function `System.Boolean Tests.BitTest::Run()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 81 ec d8 00 00 00            sub rsp, 0xd8
    # nextln: 000014: 33 c9                           xor ecx, ecx
    # nextln: 000016: 48 8d 84 24 be 00 00 00         lea rax, [rsp + 0xbe]
    # nextln: 00001e: 48 8d 94 24 b8 00 00 00         lea rdx, [rsp + 0xb8]
    # nextln: 000026: 48 89 d7                        mov rdi, rdx
    # nextln: 000029: 48 89 c2                        mov rdx, rax
    # nextln: 00002c: 33 c0                           xor eax, eax
    # nextln: 00002e: 48 89 e6                        mov rsi, rsp
    # nextln: 000031: 49 89 f9                        mov r9, rdi
    # nextln: 000034: 48 89 f7                        mov rdi, rsi
    # nextln: 000037: 4c 8d 44 24 08                  lea r8, [rsp + 8]
    # nextln: 00003c: 48 8d b4 24 b0 00 00 00         lea rsi, [rsp + 0xb0]
    # nextln: 000044: 4d 89 c3                        mov r11, r8
    # nextln: 000047: 4c 8d 84 24 ba 00 00 00         lea r8, [rsp + 0xba]
    # nextln: 00004f: 4c 8d 94 24 b4 00 00 00         lea r10, [rsp + 0xb4]
    # nextln: 000057: 48 8d 9c 24 bc 00 00 00         lea rbx, [rsp + 0xbc]
    # nextln: 00005f: 4c 8d a4 24 bf 00 00 00         lea r12, [rsp + 0xbf]
    # nextln: 000067: 88 84 24 bf 00 00 00            mov byte ptr [rsp + 0xbf], al
    # nextln: 00006e: 88 84 24 be 00 00 00            mov byte ptr [rsp + 0xbe], al
    # nextln: 000075: 4c 8d ac 24 c0 00 00 00         lea r13, [rsp + 0xc0]
    # nextln: 00007d: 88 84 24 c0 00 00 00            mov byte ptr [rsp + 0xc0], al
    # nextln: 000084: 66 89 84 24 bc 00 00 00         mov word ptr [rsp + 0xbc], ax
    # nextln: 00008c: 66 89 84 24 ba 00 00 00         mov word ptr [rsp + 0xba], ax
    # nextln: 000094: 66 89 84 24 b8 00 00 00         mov word ptr [rsp + 0xb8], ax
    # nextln: 00009c: 89 84 24 b4 00 00 00            mov dword ptr [rsp + 0xb4], eax
    # nextln: 0000a3: 89 84 24 b0 00 00 00            mov dword ptr [rsp + 0xb0], eax
    # nextln: 0000aa: 48 89 4c 24 08                  mov qword ptr [rsp + 8], rcx
    # nextln: 0000af: 48 89 0c 24                     mov qword ptr [rsp], rcx
    # nextln: 0000b3: 48 89 d1                        mov rcx, rdx
    # nextln: 0000b6: ba 07 00 00 00                  mov edx, 7
    # nextln: 0000bb: 49 89 d6                        mov r14, rdx
    # nextln: 0000be: ba 08 00 00 00                  mov edx, 8
    # nextln: 0000c3: 4d 89 cf                        mov r15, r9
    # nextln: 0000c6: 4d 89 d9                        mov r9, r11
    # nextln: 0000c9: 4d 89 eb                        mov r11, r13
    # nextln: 0000cc: 4d 89 c5                        mov r13, r8
    # nextln: 0000cf: 4d 89 f8                        mov r8, r15
    # nextln: 0000d2: 49 89 df                        mov r15, rbx
    # nextln: 0000d5: 48 89 fb                        mov rbx, rdi
    # nextln: 0000d8: 4c 89 d7                        mov rdi, r10
    # nextln: 0000db: 49 89 f2                        mov r10, rsi
    # nextln: 0000de: 4c 89 fe                        mov rsi, r15
    # nextln: 0000e1: 41 bf 01 00 00 00               mov r15d, 1
    # nextln: 0000e7: 48 89 74 24 70                  mov qword ptr [rsp + 0x70], rsi
    # nextln: 0000ec: 4c 89 9c 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r11
    # nextln: 0000f4: 4d 89 cb                        mov r11, r9
    # nextln: 0000f7: 4c 8b 8c 24 a8 00 00 00         mov r9, qword ptr [rsp + 0xa8]
    # nextln: 0000ff: 4c 89 fe                        mov rsi, r15
    # nextln: 000102: 4d 89 d7                        mov r15, r10
    # nextln: 000105: 4d 89 ea                        mov r10, r13
    # nextln: 000108: 49 89 cd                        mov r13, rcx
    # nextln: 00010b: 4c 89 e1                        mov rcx, r12
    # nextln: 00010e: 4d 89 c4                        mov r12, r8
    # nextln: 000111: 49 89 f8                        mov r8, rdi
    # nextln: 000114: 48 89 df                        mov rdi, rbx
    # nextln: 000117: bb 20 00 00 00                  mov ebx, 0x20
    # nextln: 00011c: 48 89 8c 24 98 00 00 00         mov qword ptr [rsp + 0x98], rcx
    # nextln: 000124: b9 0f 00 00 00                  mov ecx, 0xf
    # nextln: 000129: 4c 89 54 24 60                  mov qword ptr [rsp + 0x60], r10
    # nextln: 00012e: 4c 8b 54 24 70                  mov r10, qword ptr [rsp + 0x70]
    # nextln: 000133: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 000138: 4d 89 f3                        mov r11, r14
    # nextln: 00013b: 49 89 f6                        mov r14, rsi
    # nextln: 00013e: 4c 89 ee                        mov rsi, r13
    # nextln: 000141: 4d 89 cd                        mov r13, r9
    # nextln: 000144: 4d 89 e1                        mov r9, r12
    # nextln: 000147: 4c 8b a4 24 98 00 00 00         mov r12, qword ptr [rsp + 0x98]
    # nextln: 00014f: 4c 89 44 24 48                  mov qword ptr [rsp + 0x48], r8
    # nextln: 000154: 4d 89 f8                        mov r8, r15
    # nextln: 000157: 49 89 cf                        mov r15, rcx
    # nextln: 00015a: b9 10 00 00 00                  mov ecx, 0x10
    # nextln: 00015f: 48 89 b4 24 88 00 00 00         mov qword ptr [rsp + 0x88], rsi
    # nextln: 000167: 4c 89 54 24 70                  mov qword ptr [rsp + 0x70], r10
    # nextln: 00016c: 4d 89 ca                        mov r10, r9
    # nextln: 00016f: 4d 89 d9                        mov r9, r11
    # nextln: 000172: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 000177: be 03 00 00 00                  mov esi, 3
    # nextln: 00017c: 48 89 7c 24 20                  mov qword ptr [rsp + 0x20], rdi
    # nextln: 000181: 4c 89 cf                        mov rdi, r9
    # nextln: 000184: 4d 89 d9                        mov r9, r11
    # nextln: 000187: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 00018c: 4c 89 54 24 58                  mov qword ptr [rsp + 0x58], r10
    # nextln: 000191: 4d 89 c2                        mov r10, r8
    # nextln: 000194: 41 b8 40 00 00 00               mov r8d, 0x40
    # nextln: 00019a: 48 89 bc 24 a0 00 00 00         mov qword ptr [rsp + 0xa0], rdi
    # nextln: 0001a2: 4c 89 8c 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r9
    # nextln: 0001aa: 4d 89 d9                        mov r9, r11
    # nextln: 0001ad: 4c 8b 9c 24 a8 00 00 00         mov r11, qword ptr [rsp + 0xa8]
    # nextln: 0001b5: bf 02 00 00 00                  mov edi, 2
    # nextln: 0001ba: 4c 89 54 24 40                  mov qword ptr [rsp + 0x40], r10
    # nextln: 0001bf: 4d 63 d6                        movsxd r10, r14d
    # nextln: 0001c2: 4c 89 5c 24 48                  mov qword ptr [rsp + 0x48], r11
    # nextln: 0001c7: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 0001cc: 4c 89 4c 24 28                  mov qword ptr [rsp + 0x28], r9
    # nextln: 0001d1: 4c 63 cf                        movsxd r9, edi
    # nextln: 0001d4: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 0001d9: 41 bb 80 ff ff ff               mov r11d, 0xffffff80
    # nextln: 0001df: 44 88 9c 24 bf 00 00 00         mov byte ptr [rsp + 0xbf], r11b
    # nextln: 0001e7: 41 bb 00 80 ff ff               mov r11d, 0xffff8000
    # nextln: 0001ed: 44 88 b4 24 be 00 00 00         mov byte ptr [rsp + 0xbe], r14b
    # nextln: 0001f5: 40 88 bc 24 c0 00 00 00         mov byte ptr [rsp + 0xc0], dil
    # nextln: 0001fd: 66 44 89 9c 24 bc 00 00 00      mov word ptr [rsp + 0xbc], r11w
    # nextln: 000206: 66 44 89 b4 24 ba 00 00 00      mov word ptr [rsp + 0xba], r14w
    # nextln: 00020f: 66 89 bc 24 b8 00 00 00         mov word ptr [rsp + 0xb8], di
    # nextln: 000217: 44 89 b4 24 b4 00 00 00         mov dword ptr [rsp + 0xb4], r14d
    # nextln: 00021f: 89 bc 24 b0 00 00 00            mov dword ptr [rsp + 0xb0], edi
    # nextln: 000226: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 00022b: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 000230: 4c 89 54 24 08                  mov qword ptr [rsp + 8], r10
    # nextln: 000235: 49 89 fa                        mov r10, rdi
    # nextln: 000238: 48 8b 7c 24 28                  mov rdi, qword ptr [rsp + 0x28]
    # nextln: 00023d: 4c 89 0c 24                     mov qword ptr [rsp], r9
    # nextln: 000241: 49 89 f9                        mov r9, rdi
    # nextln: 000244: 0f b6 bc 24 bf 00 00 00         movzx edi, byte ptr [rsp + 0xbf]
    # nextln: 00024c: 40 0f be ff                     movsx edi, dil
    # nextln: 000250: 4c 89 4c 24 28                  mov qword ptr [rsp + 0x28], r9
    # nextln: 000255: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00025f: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 000264: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 000269: 4c 89 a4 24 98 00 00 00         mov qword ptr [rsp + 0x98], r12
    # nextln: 000271: 4c 8b 64 24 20                  mov r12, qword ptr [rsp + 0x20]
    # nextln: 000276: 48 89 94 24 90 00 00 00         mov qword ptr [rsp + 0x90], rdx
    # nextln: 00027e: 48 89 5c 24 38                  mov qword ptr [rsp + 0x38], rbx
    # nextln: 000283: 48 8b 9c 24 a0 00 00 00         mov rbx, qword ptr [rsp + 0xa0]
    # nextln: 00028b: 4c 89 44 24 30                  mov qword ptr [rsp + 0x30], r8
    # nextln: 000290: 48 89 74 24 50                  mov qword ptr [rsp + 0x50], rsi
    # nextln: 000295: 4c 89 54 24 48                  mov qword ptr [rsp + 0x48], r10
    # nextln: 00029a: 4c 89 7c 24 78                  mov qword ptr [rsp + 0x78], r15
    # nextln: 00029f: 4d 89 f7                        mov r15, r14
    # nextln: 0002a2: 49 89 ce                        mov r14, rcx
    # nextln: 0002a5: 48 89 de                        mov rsi, rbx
    # nextln: 0002a8: 41 ff d1                        call r9
    # nextln: 0002ab: 4c 89 64 24 20                  mov qword ptr [rsp + 0x20], r12
    # nextln: 0002b0: 4d 89 f3                        mov r11, r14
    # nextln: 0002b3: 4c 8b 94 24 98 00 00 00         mov r10, qword ptr [rsp + 0x98]
    # nextln: 0002bb: 48 89 d9                        mov rcx, rbx
    # nextln: 0002be: 48 8b bc 24 90 00 00 00         mov rdi, qword ptr [rsp + 0x90]
    # nextln: 0002c6: 48 8b 94 24 88 00 00 00         mov rdx, qword ptr [rsp + 0x88]
    # nextln: 0002ce: 4d 89 fc                        mov r12, r15
    # nextln: 0002d1: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 0002d6: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 0002db: 4c 89 eb                        mov rbx, r13
    # nextln: 0002de: 4c 8b 44 24 58                  mov r8, qword ptr [rsp + 0x58]
    # nextln: 0002e3: 4c 8b 4c 24 48                  mov r9, qword ptr [rsp + 0x48]
    # nextln: 0002e8: 4c 8b 7c 24 78                  mov r15, qword ptr [rsp + 0x78]
    # nextln: 0002ed: 4d 89 e5                        mov r13, r12
    # nextln: 0002f0: 44 23 e8                        and r13d, eax
    # nextln: 0002f3: 0f b6 84 24 bf 00 00 00         movzx eax, byte ptr [rsp + 0xbf]
    # nextln: 0002fb: 48 89 bc 24 90 00 00 00         mov qword ptr [rsp + 0x90], rdi
    # nextln: 000303: 0f be f8                        movsx edi, al
    # nextln: 000306: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000310: 4c 89 5c 24 68                  mov qword ptr [rsp + 0x68], r11
    # nextln: 000315: 4c 89 4c 24 48                  mov qword ptr [rsp + 0x48], r9
    # nextln: 00031a: 4c 89 94 24 98 00 00 00         mov qword ptr [rsp + 0x98], r10
    # nextln: 000322: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 000327: 4c 89 44 24 58                  mov qword ptr [rsp + 0x58], r8
    # nextln: 00032c: 48 89 9c 24 80 00 00 00         mov qword ptr [rsp + 0x80], rbx
    # nextln: 000334: 48 8b 9c 24 90 00 00 00         mov rbx, qword ptr [rsp + 0x90]
    # nextln: 00033c: 4c 89 7c 24 78                  mov qword ptr [rsp + 0x78], r15
    # nextln: 000341: 4c 89 74 24 50                  mov qword ptr [rsp + 0x50], r14
    # nextln: 000346: 4d 89 e6                        mov r14, r12
    # nextln: 000349: 49 89 d4                        mov r12, rdx
    # nextln: 00034c: 49 89 cf                        mov r15, rcx
    # nextln: 00034f: 48 89 de                        mov rsi, rbx
    # nextln: 000352: ff d0                           call rax
    # nextln: 000354: 44 23 e8                        and r13d, eax
    # nextln: 000357: 4d 89 f9                        mov r9, r15
    # nextln: 00035a: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 00035f: 4c 8b 84 24 98 00 00 00         mov r8, qword ptr [rsp + 0x98]
    # nextln: 000367: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 00036c: 4c 8b 7c 24 78                  mov r15, qword ptr [rsp + 0x78]
    # nextln: 000371: 48 89 9c 24 90 00 00 00         mov qword ptr [rsp + 0x90], rbx
    # nextln: 000379: 48 8b 5c 24 68                  mov rbx, qword ptr [rsp + 0x68]
    # nextln: 00037e: 48 8b 54 24 58                  mov rdx, qword ptr [rsp + 0x58]
    # nextln: 000383: 4c 89 a4 24 88 00 00 00         mov qword ptr [rsp + 0x88], r12
    # nextln: 00038b: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 000390: 4d 89 f3                        mov r11, r14
    # nextln: 000393: 4c 8b 74 24 60                  mov r14, qword ptr [rsp + 0x60]
    # nextln: 000398: 4c 8b 94 24 80 00 00 00         mov r10, qword ptr [rsp + 0x80]
    # nextln: 0003a0: 48 8b 7c 24 30                  mov rdi, qword ptr [rsp + 0x30]
    # nextln: 0003a5: 0f b6 84 24 be 00 00 00         movzx eax, byte ptr [rsp + 0xbe]
    # nextln: 0003ad: 48 89 7c 24 30                  mov qword ptr [rsp + 0x30], rdi
    # nextln: 0003b2: 0f be f8                        movsx edi, al
    # nextln: 0003b5: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0003bf: 48 89 5c 24 68                  mov qword ptr [rsp + 0x68], rbx
    # nextln: 0003c4: 4c 89 74 24 60                  mov qword ptr [rsp + 0x60], r14
    # nextln: 0003c9: 4d 89 ce                        mov r14, r9
    # nextln: 0003cc: 4c 89 84 24 98 00 00 00         mov qword ptr [rsp + 0x98], r8
    # nextln: 0003d4: 4c 89 7c 24 78                  mov qword ptr [rsp + 0x78], r15
    # nextln: 0003d9: 49 89 cf                        mov r15, rcx
    # nextln: 0003dc: 48 8b 5c 24 10                  mov rbx, qword ptr [rsp + 0x10]
    # nextln: 0003e1: 4c 89 64 24 50                  mov qword ptr [rsp + 0x50], r12
    # nextln: 0003e6: 48 89 54 24 58                  mov qword ptr [rsp + 0x58], rdx
    # nextln: 0003eb: 4c 8b a4 24 88 00 00 00         mov r12, qword ptr [rsp + 0x88]
    # nextln: 0003f3: 48 89 74 24 48                  mov qword ptr [rsp + 0x48], rsi
    # nextln: 0003f8: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 0003fd: 4c 89 94 24 80 00 00 00         mov qword ptr [rsp + 0x80], r10
    # nextln: 000405: 48 89 de                        mov rsi, rbx
    # nextln: 000408: ff d0                           call rax
    # nextln: 00040a: 44 23 e8                        and r13d, eax
    # nextln: 00040d: 4c 89 f1                        mov rcx, r14
    # nextln: 000410: 4c 8b 5c 24 68                  mov r11, qword ptr [rsp + 0x68]
    # nextln: 000415: 48 89 5c 24 10                  mov qword ptr [rsp + 0x10], rbx
    # nextln: 00041a: 48 8b 5c 24 18                  mov rbx, qword ptr [rsp + 0x18]
    # nextln: 00041f: 4c 8b 8c 24 80 00 00 00         mov r9, qword ptr [rsp + 0x80]
    # nextln: 000427: 4c 89 fa                        mov rdx, r15
    # nextln: 00042a: 48 8b 74 24 58                  mov rsi, qword ptr [rsp + 0x58]
    # nextln: 00042f: 4c 8b 74 24 78                  mov r14, qword ptr [rsp + 0x78]
    # nextln: 000434: 4c 8b 7c 24 60                  mov r15, qword ptr [rsp + 0x60]
    # nextln: 000439: 4c 8b 94 24 98 00 00 00         mov r10, qword ptr [rsp + 0x98]
    # nextln: 000441: 48 8b bc 24 90 00 00 00         mov rdi, qword ptr [rsp + 0x90]
    # nextln: 000449: 4c 89 a4 24 88 00 00 00         mov qword ptr [rsp + 0x88], r12
    # nextln: 000451: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 000456: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 00045b: 0f b6 84 24 be 00 00 00         movzx eax, byte ptr [rsp + 0xbe]
    # nextln: 000463: 48 89 bc 24 90 00 00 00         mov qword ptr [rsp + 0x90], rdi
    # nextln: 00046b: 0f be f8                        movsx edi, al
    # nextln: 00046e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000478: 48 89 5c 24 18                  mov qword ptr [rsp + 0x18], rbx
    # nextln: 00047d: 4c 89 5c 24 68                  mov qword ptr [rsp + 0x68], r11
    # nextln: 000482: 48 8b 9c 24 90 00 00 00         mov rbx, qword ptr [rsp + 0x90]
    # nextln: 00048a: 4c 89 7c 24 60                  mov qword ptr [rsp + 0x60], r15
    # nextln: 00048f: 4d 89 c7                        mov r15, r8
    # nextln: 000492: 48 89 74 24 58                  mov qword ptr [rsp + 0x58], rsi
    # nextln: 000497: 4c 89 8c 24 80 00 00 00         mov qword ptr [rsp + 0x80], r9
    # nextln: 00049f: 4c 89 74 24 78                  mov qword ptr [rsp + 0x78], r14
    # nextln: 0004a4: 49 89 ce                        mov r14, rcx
    # nextln: 0004a7: 4c 89 64 24 50                  mov qword ptr [rsp + 0x50], r12
    # nextln: 0004ac: 49 89 d4                        mov r12, rdx
    # nextln: 0004af: 4c 89 94 24 98 00 00 00         mov qword ptr [rsp + 0x98], r10
    # nextln: 0004b7: 48 89 de                        mov rsi, rbx
    # nextln: 0004ba: ff d0                           call rax
    # nextln: 0004bc: 33 c9                           xor ecx, ecx
    # nextln: 0004be: 85 c0                           test eax, eax
    # nextln: 0004c0: 0f 94 c1                        sete cl
    # nextln: 0004c3: 44 23 e9                        and r13d, ecx
    # nextln: 0004c6: 4c 89 f2                        mov rdx, r14
    # nextln: 0004c9: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 0004ce: 4c 8b 4c 24 68                  mov r9, qword ptr [rsp + 0x68]
    # nextln: 0004d3: 48 8b 8c 24 98 00 00 00         mov rcx, qword ptr [rsp + 0x98]
    # nextln: 0004db: 4d 89 f8                        mov r8, r15
    # nextln: 0004de: 48 89 9c 24 90 00 00 00         mov qword ptr [rsp + 0x90], rbx
    # nextln: 0004e6: 48 8b 5c 24 60                  mov rbx, qword ptr [rsp + 0x60]
    # nextln: 0004eb: 48 8b 74 24 58                  mov rsi, qword ptr [rsp + 0x58]
    # nextln: 0004f0: 4c 8b 7c 24 30                  mov r15, qword ptr [rsp + 0x30]
    # nextln: 0004f5: 4c 8b 94 24 80 00 00 00         mov r10, qword ptr [rsp + 0x80]
    # nextln: 0004fd: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 000502: 4c 89 64 24 28                  mov qword ptr [rsp + 0x28], r12
    # nextln: 000507: 4c 8b 64 24 78                  mov r12, qword ptr [rsp + 0x78]
    # nextln: 00050c: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 000511: 0f b6 84 24 be 00 00 00         movzx eax, byte ptr [rsp + 0xbe]
    # nextln: 000519: 48 89 7c 24 20                  mov qword ptr [rsp + 0x20], rdi
    # nextln: 00051e: 0f be f8                        movsx edi, al
    # nextln: 000521: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00052b: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 000530: 4c 89 4c 24 68                  mov qword ptr [rsp + 0x68], r9
    # nextln: 000535: 48 89 8c 24 98 00 00 00         mov qword ptr [rsp + 0x98], rcx
    # nextln: 00053d: 4c 89 64 24 78                  mov qword ptr [rsp + 0x78], r12
    # nextln: 000542: 4d 89 c4                        mov r12, r8
    # nextln: 000545: 48 89 5c 24 60                  mov qword ptr [rsp + 0x60], rbx
    # nextln: 00054a: 4c 89 7c 24 30                  mov qword ptr [rsp + 0x30], r15
    # nextln: 00054f: 4d 89 d7                        mov r15, r10
    # nextln: 000552: 48 89 f3                        mov rbx, rsi
    # nextln: 000555: 48 89 94 24 a0 00 00 00         mov qword ptr [rsp + 0xa0], rdx
    # nextln: 00055d: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 000562: ff d0                           call rax
    # nextln: 000564: 44 23 e8                        and r13d, eax
    # nextln: 000567: 48 89 5c 24 58                  mov qword ptr [rsp + 0x58], rbx
    # nextln: 00056c: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 000571: 4c 89 fe                        mov rsi, r15
    # nextln: 000574: 4c 8b 7c 24 10                  mov r15, qword ptr [rsp + 0x10]
    # nextln: 000579: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 00057e: 4c 8b 54 24 78                  mov r10, qword ptr [rsp + 0x78]
    # nextln: 000583: 4c 89 e1                        mov rcx, r12
    # nextln: 000586: 4c 8b 64 24 30                  mov r12, qword ptr [rsp + 0x30]
    # nextln: 00058b: 48 8b bc 24 88 00 00 00         mov rdi, qword ptr [rsp + 0x88]
    # nextln: 000593: 4c 89 f3                        mov rbx, r14
    # nextln: 000596: 4c 8b 74 24 20                  mov r14, qword ptr [rsp + 0x20]
    # nextln: 00059b: 4c 8b 5c 24 60                  mov r11, qword ptr [rsp + 0x60]
    # nextln: 0005a0: 4c 8b 4c 24 40                  mov r9, qword ptr [rsp + 0x40]
    # nextln: 0005a5: 0f b6 84 24 c0 00 00 00         movzx eax, byte ptr [rsp + 0xc0]
    # nextln: 0005ad: 48 89 bc 24 88 00 00 00         mov qword ptr [rsp + 0x88], rdi
    # nextln: 0005b5: 0f be f8                        movsx edi, al
    # nextln: 0005b8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0005c2: 48 89 b4 24 80 00 00 00         mov qword ptr [rsp + 0x80], rsi
    # nextln: 0005ca: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 0005cf: 48 89 54 24 68                  mov qword ptr [rsp + 0x68], rdx
    # nextln: 0005d4: 4c 89 64 24 30                  mov qword ptr [rsp + 0x30], r12
    # nextln: 0005d9: 4d 89 fc                        mov r12, r15
    # nextln: 0005dc: 4c 89 54 24 78                  mov qword ptr [rsp + 0x78], r10
    # nextln: 0005e1: 4c 8b bc 24 98 00 00 00         mov r15, qword ptr [rsp + 0x98]
    # nextln: 0005e9: 48 89 4c 24 48                  mov qword ptr [rsp + 0x48], rcx
    # nextln: 0005ee: 4c 89 5c 24 60                  mov qword ptr [rsp + 0x60], r11
    # nextln: 0005f3: 48 89 5c 24 50                  mov qword ptr [rsp + 0x50], rbx
    # nextln: 0005f8: 48 8b 9c 24 88 00 00 00         mov rbx, qword ptr [rsp + 0x88]
    # nextln: 000600: 4c 89 74 24 20                  mov qword ptr [rsp + 0x20], r14
    # nextln: 000605: 4c 8b b4 24 a0 00 00 00         mov r14, qword ptr [rsp + 0xa0]
    # nextln: 00060d: 4c 89 4c 24 40                  mov qword ptr [rsp + 0x40], r9
    # nextln: 000612: 4c 89 e6                        mov rsi, r12
    # nextln: 000615: ff d0                           call rax
    # nextln: 000617: 33 c9                           xor ecx, ecx
    # nextln: 000619: 85 c0                           test eax, eax
    # nextln: 00061b: 0f 94 c1                        sete cl
    # nextln: 00061e: 44 23 e9                        and r13d, ecx
    # nextln: 000621: 48 8b 44 24 40                  mov rax, qword ptr [rsp + 0x40]
    # nextln: 000626: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 00062b: 4c 8b 54 24 78                  mov r10, qword ptr [rsp + 0x78]
    # nextln: 000630: 4c 8b 4c 24 60                  mov r9, qword ptr [rsp + 0x60]
    # nextln: 000635: 48 8b b4 24 80 00 00 00         mov rsi, qword ptr [rsp + 0x80]
    # nextln: 00063d: 48 8b 7c 24 58                  mov rdi, qword ptr [rsp + 0x58]
    # nextln: 000642: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 000647: 4c 89 e2                        mov rdx, r12
    # nextln: 00064a: 4c 8b a4 24 90 00 00 00         mov r12, qword ptr [rsp + 0x90]
    # nextln: 000652: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 00065c: 48 89 44 24 40                  mov qword ptr [rsp + 0x40], rax
    # nextln: 000661: 48 89 b4 24 80 00 00 00         mov qword ptr [rsp + 0x80], rsi
    # nextln: 000669: 4c 89 54 24 78                  mov qword ptr [rsp + 0x78], r10
    # nextln: 00066e: 48 89 4c 24 30                  mov qword ptr [rsp + 0x30], rcx
    # nextln: 000673: 4c 89 4c 24 60                  mov qword ptr [rsp + 0x60], r9
    # nextln: 000678: 48 89 7c 24 58                  mov qword ptr [rsp + 0x58], rdi
    # nextln: 00067d: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 000682: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 000687: 4c 89 f6                        mov rsi, r14
    # nextln: 00068a: 4c 89 ff                        mov rdi, r15
    # nextln: 00068d: 41 ff d0                        call r8
    # nextln: 000690: 4c 89 ff                        mov rdi, r15
    # nextln: 000693: 4c 8b 54 24 40                  mov r10, qword ptr [rsp + 0x40]
    # nextln: 000698: 4c 8b 44 24 60                  mov r8, qword ptr [rsp + 0x60]
    # nextln: 00069d: 4c 8b 4c 24 28                  mov r9, qword ptr [rsp + 0x28]
    # nextln: 0006a2: 4c 8b 7c 24 10                  mov r15, qword ptr [rsp + 0x10]
    # nextln: 0006a7: 48 8b 54 24 58                  mov rdx, qword ptr [rsp + 0x58]
    # nextln: 0006ac: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0006b1: 4c 8b 74 24 18                  mov r14, qword ptr [rsp + 0x18]
    # nextln: 0006b6: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 0006bb: 4c 8b 5c 24 68                  mov r11, qword ptr [rsp + 0x68]
    # nextln: 0006c0: 44 23 e8                        and r13d, eax
    # nextln: 0006c3: 4c 89 54 24 40                  mov qword ptr [rsp + 0x40], r10
    # nextln: 0006c8: 48 89 54 24 58                  mov qword ptr [rsp + 0x58], rdx
    # nextln: 0006cd: 4d 89 da                        mov r10, r11
    # nextln: 0006d0: 48 8b 54 24 48                  mov rdx, qword ptr [rsp + 0x48]
    # nextln: 0006d5: 49 89 f3                        mov r11, rsi
    # nextln: 0006d8: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 0006dd: 4c 89 4c 24 28                  mov qword ptr [rsp + 0x28], r9
    # nextln: 0006e2: 4c 8b 8c 24 80 00 00 00         mov r9, qword ptr [rsp + 0x80]
    # nextln: 0006ea: 4c 89 c0                        mov rax, r8
    # nextln: 0006ed: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0006f7: 48 89 54 24 48                  mov qword ptr [rsp + 0x48], rdx
    # nextln: 0006fc: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 000701: 4c 89 8c 24 80 00 00 00         mov qword ptr [rsp + 0x80], r9
    # nextln: 000709: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 00070e: 4c 89 54 24 68                  mov qword ptr [rsp + 0x68], r10
    # nextln: 000713: 4c 89 5c 24 30                  mov qword ptr [rsp + 0x30], r11
    # nextln: 000718: 48 89 44 24 60                  mov qword ptr [rsp + 0x60], rax
    # nextln: 00071d: 4c 89 e6                        mov rsi, r12
    # nextln: 000720: 41 ff d0                        call r8
    # nextln: 000723: 4c 8b 84 24 80 00 00 00         mov r8, qword ptr [rsp + 0x80]
    # nextln: 00072b: 4c 89 f1                        mov rcx, r14
    # nextln: 00072e: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 000733: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 000738: 48 8b 7c 24 78                  mov rdi, qword ptr [rsp + 0x78]
    # nextln: 00073d: 4c 8b 54 24 68                  mov r10, qword ptr [rsp + 0x68]
    # nextln: 000742: 4c 8b 4c 24 28                  mov r9, qword ptr [rsp + 0x28]
    # nextln: 000747: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 00074c: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 000751: 44 23 e8                        and r13d, eax
    # nextln: 000754: 48 8b 44 24 60                  mov rax, qword ptr [rsp + 0x60]
    # nextln: 000759: 4c 89 4c 24 28                  mov qword ptr [rsp + 0x28], r9
    # nextln: 00075e: 49 89 f9                        mov r9, rdi
    # nextln: 000761: 4c 89 f7                        mov rdi, r14
    # nextln: 000764: 4d 89 c6                        mov r14, r8
    # nextln: 000767: 4c 89 94 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r10
    # nextln: 00076f: 49 89 f2                        mov r10, rsi
    # nextln: 000772: 4c 89 de                        mov rsi, r11
    # nextln: 000775: 4c 8b 9c 24 a8 00 00 00         mov r11, qword ptr [rsp + 0xa8]
    # nextln: 00077d: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000787: 48 89 7c 24 50                  mov qword ptr [rsp + 0x50], rdi
    # nextln: 00078c: 48 89 44 24 60                  mov qword ptr [rsp + 0x60], rax
    # nextln: 000791: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 000796: 48 89 74 24 48                  mov qword ptr [rsp + 0x48], rsi
    # nextln: 00079b: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 0007a0: 4c 89 4c 24 78                  mov qword ptr [rsp + 0x78], r9
    # nextln: 0007a5: 4c 89 5c 24 68                  mov qword ptr [rsp + 0x68], r11
    # nextln: 0007aa: 4c 89 54 24 30                  mov qword ptr [rsp + 0x30], r10
    # nextln: 0007af: 4c 89 fe                        mov rsi, r15
    # nextln: 0007b2: 48 89 df                        mov rdi, rbx
    # nextln: 0007b5: 41 ff d0                        call r8
    # nextln: 0007b8: 44 23 e8                        and r13d, eax
    # nextln: 0007bb: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 0007c0: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 0007c5: 4c 8b 54 24 30                  mov r10, qword ptr [rsp + 0x30]
    # nextln: 0007ca: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0007cf: 48 8b 7c 24 58                  mov rdi, qword ptr [rsp + 0x58]
    # nextln: 0007d4: 4c 8b 5c 24 78                  mov r11, qword ptr [rsp + 0x78]
    # nextln: 0007d9: 4c 8b 4c 24 68                  mov r9, qword ptr [rsp + 0x68]
    # nextln: 0007de: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 0007e3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0007ed: 48 89 54 24 50                  mov qword ptr [rsp + 0x50], rdx
    # nextln: 0007f2: 4c 89 54 24 30                  mov qword ptr [rsp + 0x30], r10
    # nextln: 0007f7: 4c 89 44 24 48                  mov qword ptr [rsp + 0x48], r8
    # nextln: 0007fc: 4c 89 4c 24 68                  mov qword ptr [rsp + 0x68], r9
    # nextln: 000801: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 000806: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 00080b: 48 89 7c 24 58                  mov qword ptr [rsp + 0x58], rdi
    # nextln: 000810: 4c 89 5c 24 78                  mov qword ptr [rsp + 0x78], r11
    # nextln: 000815: 4c 89 e6                        mov rsi, r12
    # nextln: 000818: 48 89 df                        mov rdi, rbx
    # nextln: 00081b: ff d0                           call rax
    # nextln: 00081d: 4c 8b 4c 24 40                  mov r9, qword ptr [rsp + 0x40]
    # nextln: 000822: 4c 8b 5c 24 38                  mov r11, qword ptr [rsp + 0x38]
    # nextln: 000827: 48 8b 74 24 78                  mov rsi, qword ptr [rsp + 0x78]
    # nextln: 00082c: 4c 8b 54 24 30                  mov r10, qword ptr [rsp + 0x30]
    # nextln: 000831: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 000836: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 00083b: 48 8b 7c 24 60                  mov rdi, qword ptr [rsp + 0x60]
    # nextln: 000840: 4c 8b 64 24 20                  mov r12, qword ptr [rsp + 0x20]
    # nextln: 000845: 33 c9                           xor ecx, ecx
    # nextln: 000847: 85 c0                           test eax, eax
    # nextln: 000849: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 00084e: 0f 94 c1                        sete cl
    # nextln: 000851: 44 23 e9                        and r13d, ecx
    # nextln: 000854: 4c 89 4c 24 40                  mov qword ptr [rsp + 0x40], r9
    # nextln: 000859: 48 8b 4c 24 58                  mov rcx, qword ptr [rsp + 0x58]
    # nextln: 00085e: 4c 89 5c 24 38                  mov qword ptr [rsp + 0x38], r11
    # nextln: 000863: 4d 89 d1                        mov r9, r10
    # nextln: 000866: 48 89 54 24 68                  mov qword ptr [rsp + 0x68], rdx
    # nextln: 00086b: 4c 89 e2                        mov rdx, r12
    # nextln: 00086e: 4c 8b 64 24 28                  mov r12, qword ptr [rsp + 0x28]
    # nextln: 000873: 4d 89 c2                        mov r10, r8
    # nextln: 000876: 49 89 f0                        mov r8, rsi
    # nextln: 000879: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 00087e: 49 bb 00 00 00 00 00 00 00 00   movabs r11, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000888: 48 89 4c 24 58                  mov qword ptr [rsp + 0x58], rcx
    # nextln: 00088d: 4c 89 64 24 28                  mov qword ptr [rsp + 0x28], r12
    # nextln: 000892: 4c 8b 64 24 38                  mov r12, qword ptr [rsp + 0x38]
    # nextln: 000897: 48 89 74 24 48                  mov qword ptr [rsp + 0x48], rsi
    # nextln: 00089c: 4c 89 44 24 78                  mov qword ptr [rsp + 0x78], r8
    # nextln: 0008a1: 4c 89 4c 24 30                  mov qword ptr [rsp + 0x30], r9
    # nextln: 0008a6: 4c 89 54 24 50                  mov qword ptr [rsp + 0x50], r10
    # nextln: 0008ab: 48 89 7c 24 60                  mov qword ptr [rsp + 0x60], rdi
    # nextln: 0008b0: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 0008b5: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 0008ba: 48 89 df                        mov rdi, rbx
    # nextln: 0008bd: 4c 89 e6                        mov rsi, r12
    # nextln: 0008c0: 41 ff d3                        call r11
    # nextln: 0008c3: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 0008c8: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 0008cd: 48 8b 5c 24 40                  mov rbx, qword ptr [rsp + 0x40]
    # nextln: 0008d2: 4c 8b 54 24 50                  mov r10, qword ptr [rsp + 0x50]
    # nextln: 0008d7: 4c 89 64 24 38                  mov qword ptr [rsp + 0x38], r12
    # nextln: 0008dc: 4c 8b 5c 24 68                  mov r11, qword ptr [rsp + 0x68]
    # nextln: 0008e1: 48 8b 7c 24 60                  mov rdi, qword ptr [rsp + 0x60]
    # nextln: 0008e6: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 0008eb: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0008f0: 48 8b 4c 24 78                  mov rcx, qword ptr [rsp + 0x78]
    # nextln: 0008f5: 4c 8b 64 24 28                  mov r12, qword ptr [rsp + 0x28]
    # nextln: 0008fa: 44 23 e8                        and r13d, eax
    # nextln: 0008fd: 48 89 7c 24 60                  mov qword ptr [rsp + 0x60], rdi
    # nextln: 000902: 4c 89 cf                        mov rdi, r9
    # nextln: 000905: 48 89 f0                        mov rax, rsi
    # nextln: 000908: 48 8b 74 24 58                  mov rsi, qword ptr [rsp + 0x58]
    # nextln: 00090d: 4d 89 d9                        mov r9, r11
    # nextln: 000910: 4c 89 54 24 50                  mov qword ptr [rsp + 0x50], r10
    # nextln: 000915: 4d 89 e2                        mov r10, r12
    # nextln: 000918: 4d 89 c4                        mov r12, r8
    # nextln: 00091b: 49 89 d8                        mov r8, rbx
    # nextln: 00091e: 48 8b 5c 24 38                  mov rbx, qword ptr [rsp + 0x38]
    # nextln: 000923: 49 bb 00 00 00 00 00 00 00 00   movabs r11, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 00092d: 4c 89 64 24 20                  mov qword ptr [rsp + 0x20], r12
    # nextln: 000932: 48 89 4c 24 78                  mov qword ptr [rsp + 0x78], rcx
    # nextln: 000937: 4c 89 4c 24 68                  mov qword ptr [rsp + 0x68], r9
    # nextln: 00093c: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000941: 4c 8b 64 24 60                  mov r12, qword ptr [rsp + 0x60]
    # nextln: 000946: 48 89 74 24 58                  mov qword ptr [rsp + 0x58], rsi
    # nextln: 00094b: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 000950: 48 89 44 24 48                  mov qword ptr [rsp + 0x48], rax
    # nextln: 000955: 48 89 7c 24 30                  mov qword ptr [rsp + 0x30], rdi
    # nextln: 00095a: 4c 89 54 24 28                  mov qword ptr [rsp + 0x28], r10
    # nextln: 00095f: 4c 89 fe                        mov rsi, r15
    # nextln: 000962: 4c 89 f7                        mov rdi, r14
    # nextln: 000965: 41 ff d3                        call r11
    # nextln: 000968: 4c 8b 54 24 18                  mov r10, qword ptr [rsp + 0x18]
    # nextln: 00096d: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 000972: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 000977: 4c 8b 74 24 58                  mov r14, qword ptr [rsp + 0x58]
    # nextln: 00097c: 4c 8b 44 24 68                  mov r8, qword ptr [rsp + 0x68]
    # nextln: 000981: 48 8b 7c 24 30                  mov rdi, qword ptr [rsp + 0x30]
    # nextln: 000986: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 00098b: 4c 8b 4c 24 78                  mov r9, qword ptr [rsp + 0x78]
    # nextln: 000990: 33 c9                           xor ecx, ecx
    # nextln: 000992: 85 c0                           test eax, eax
    # nextln: 000994: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000999: 0f 94 c1                        sete cl
    # nextln: 00099c: 44 23 e9                        and r13d, ecx
    # nextln: 00099f: 4c 89 44 24 68                  mov qword ptr [rsp + 0x68], r8
    # nextln: 0009a4: 49 89 d8                        mov r8, rbx
    # nextln: 0009a7: 4c 89 d3                        mov rbx, r10
    # nextln: 0009aa: 49 89 c2                        mov r10, rax
    # nextln: 0009ad: 48 89 d0                        mov rax, rdx
    # nextln: 0009b0: 48 89 f2                        mov rdx, rsi
    # nextln: 0009b3: 4c 89 e6                        mov rsi, r12
    # nextln: 0009b6: 4d 89 f4                        mov r12, r14
    # nextln: 0009b9: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 0009be: 48 89 f9                        mov rcx, rdi
    # nextln: 0009c1: 0f b7 bc 24 bc 00 00 00         movzx edi, word ptr [rsp + 0xbc]
    # nextln: 0009c9: 0f bf ff                        movsx edi, di
    # nextln: 0009cc: 48 89 44 24 50                  mov qword ptr [rsp + 0x50], rax
    # nextln: 0009d1: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0009db: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 0009e0: 48 89 54 24 40                  mov qword ptr [rsp + 0x40], rdx
    # nextln: 0009e5: 48 89 74 24 60                  mov qword ptr [rsp + 0x60], rsi
    # nextln: 0009ea: 4c 89 74 24 48                  mov qword ptr [rsp + 0x48], r14
    # nextln: 0009ef: 49 89 ce                        mov r14, rcx
    # nextln: 0009f2: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 0009f7: 4c 89 44 24 38                  mov qword ptr [rsp + 0x38], r8
    # nextln: 0009fc: 48 89 5c 24 18                  mov qword ptr [rsp + 0x18], rbx
    # nextln: 000a01: 4c 89 cb                        mov rbx, r9
    # nextln: 000a04: 4c 89 64 24 58                  mov qword ptr [rsp + 0x58], r12
    # nextln: 000a09: 4c 8b 64 24 68                  mov r12, qword ptr [rsp + 0x68]
    # nextln: 000a0e: 48 89 de                        mov rsi, rbx
    # nextln: 000a11: ff d0                           call rax
    # nextln: 000a13: 44 23 e8                        and r13d, eax
    # nextln: 000a16: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000a1b: 4c 89 f6                        mov rsi, r14
    # nextln: 000a1e: 4c 8b 74 24 58                  mov r14, qword ptr [rsp + 0x58]
    # nextln: 000a23: 48 8b 4c 24 60                  mov rcx, qword ptr [rsp + 0x60]
    # nextln: 000a28: 4c 8b 4c 24 38                  mov r9, qword ptr [rsp + 0x38]
    # nextln: 000a2d: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 000a32: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 000a37: 49 89 d8                        mov r8, rbx
    # nextln: 000a3a: 48 8b 5c 24 28                  mov rbx, qword ptr [rsp + 0x28]
    # nextln: 000a3f: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 000a44: 0f b7 84 24 bc 00 00 00         movzx eax, word ptr [rsp + 0xbc]
    # nextln: 000a4c: 48 89 7c 24 48                  mov qword ptr [rsp + 0x48], rdi
    # nextln: 000a51: 0f bf f8                        movsx edi, ax
    # nextln: 000a54: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000a5e: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000a63: 48 89 5c 24 28                  mov qword ptr [rsp + 0x28], rbx
    # nextln: 000a68: 48 89 74 24 30                  mov qword ptr [rsp + 0x30], rsi
    # nextln: 000a6d: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 000a72: 48 89 cb                        mov rbx, rcx
    # nextln: 000a75: 4c 89 4c 24 38                  mov qword ptr [rsp + 0x38], r9
    # nextln: 000a7a: 4c 89 44 24 78                  mov qword ptr [rsp + 0x78], r8
    # nextln: 000a7f: 4c 89 74 24 58                  mov qword ptr [rsp + 0x58], r14
    # nextln: 000a84: 49 89 d6                        mov r14, rdx
    # nextln: 000a87: 4c 89 e6                        mov rsi, r12
    # nextln: 000a8a: ff d0                           call rax
    # nextln: 000a8c: 44 23 e8                        and r13d, eax
    # nextln: 000a8f: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 000a94: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000a99: 4d 89 f0                        mov r8, r14
    # nextln: 000a9c: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 000aa1: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 000aa6: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 000aab: 48 89 df                        mov rdi, rbx
    # nextln: 000aae: 48 8b 5c 24 58                  mov rbx, qword ptr [rsp + 0x58]
    # nextln: 000ab3: 48 8b 54 24 78                  mov rdx, qword ptr [rsp + 0x78]
    # nextln: 000ab8: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 000abd: 0f b7 84 24 ba 00 00 00         movzx eax, word ptr [rsp + 0xba]
    # nextln: 000ac5: 48 89 7c 24 60                  mov qword ptr [rsp + 0x60], rdi
    # nextln: 000aca: 0f bf f8                        movsx edi, ax
    # nextln: 000acd: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000ad7: 48 89 5c 24 58                  mov qword ptr [rsp + 0x58], rbx
    # nextln: 000adc: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000ae1: 48 89 4c 24 30                  mov qword ptr [rsp + 0x30], rcx
    # nextln: 000ae6: 48 89 f3                        mov rbx, rsi
    # nextln: 000ae9: 4c 89 74 24 48                  mov qword ptr [rsp + 0x48], r14
    # nextln: 000aee: 4d 89 ce                        mov r14, r9
    # nextln: 000af1: 4c 89 44 24 50                  mov qword ptr [rsp + 0x50], r8
    # nextln: 000af6: 48 89 54 24 78                  mov qword ptr [rsp + 0x78], rdx
    # nextln: 000afb: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 000b00: 4c 89 fe                        mov rsi, r15
    # nextln: 000b03: ff d0                           call rax
    # nextln: 000b05: 44 23 e8                        and r13d, eax
    # nextln: 000b08: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000b0d: 4d 89 f2                        mov r10, r14
    # nextln: 000b10: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000b15: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000b1a: 49 89 d9                        mov r9, rbx
    # nextln: 000b1d: 48 8b 5c 24 58                  mov rbx, qword ptr [rsp + 0x58]
    # nextln: 000b22: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 000b27: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 000b2c: 48 8b 54 24 78                  mov rdx, qword ptr [rsp + 0x78]
    # nextln: 000b31: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 000b36: 0f b7 bc 24 ba 00 00 00         movzx edi, word ptr [rsp + 0xba]
    # nextln: 000b3e: 0f bf ff                        movsx edi, di
    # nextln: 000b41: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 000b46: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000b50: 48 89 5c 24 58                  mov qword ptr [rsp + 0x58], rbx
    # nextln: 000b55: 48 89 54 24 78                  mov qword ptr [rsp + 0x78], rdx
    # nextln: 000b5a: 4c 89 54 24 18                  mov qword ptr [rsp + 0x18], r10
    # nextln: 000b5f: 4c 89 74 24 48                  mov qword ptr [rsp + 0x48], r14
    # nextln: 000b64: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000b69: 4c 89 4c 24 38                  mov qword ptr [rsp + 0x38], r9
    # nextln: 000b6e: 49 89 f6                        mov r14, rsi
    # nextln: 000b71: 48 89 cb                        mov rbx, rcx
    # nextln: 000b74: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 000b79: 4c 89 e6                        mov rsi, r12
    # nextln: 000b7c: ff d0                           call rax
    # nextln: 000b7e: 33 c9                           xor ecx, ecx
    # nextln: 000b80: 85 c0                           test eax, eax
    # nextln: 000b82: 0f 94 c1                        sete cl
    # nextln: 000b85: 44 23 e9                        and r13d, ecx
    # nextln: 000b88: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 000b8d: 48 8b 4c 24 58                  mov rcx, qword ptr [rsp + 0x58]
    # nextln: 000b92: 4c 89 f6                        mov rsi, r14
    # nextln: 000b95: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 000b9a: 48 89 d8                        mov rax, rbx
    # nextln: 000b9d: 48 8b 5c 24 48                  mov rbx, qword ptr [rsp + 0x48]
    # nextln: 000ba2: 4c 8b 44 24 38                  mov r8, qword ptr [rsp + 0x38]
    # nextln: 000ba7: 48 8b 54 24 40                  mov rdx, qword ptr [rsp + 0x40]
    # nextln: 000bac: 4c 8b 74 24 60                  mov r14, qword ptr [rsp + 0x60]
    # nextln: 000bb1: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000bb6: 0f b7 bc 24 ba 00 00 00         movzx edi, word ptr [rsp + 0xba]
    # nextln: 000bbe: 0f bf ff                        movsx edi, di
    # nextln: 000bc1: 48 89 44 24 50                  mov qword ptr [rsp + 0x50], rax
    # nextln: 000bc6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000bd0: 48 89 5c 24 48                  mov qword ptr [rsp + 0x48], rbx
    # nextln: 000bd5: 4c 89 c3                        mov rbx, r8
    # nextln: 000bd8: 48 89 74 24 30                  mov qword ptr [rsp + 0x30], rsi
    # nextln: 000bdd: 48 89 4c 24 58                  mov qword ptr [rsp + 0x58], rcx
    # nextln: 000be2: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 000be7: 4c 89 4c 24 18                  mov qword ptr [rsp + 0x18], r9
    # nextln: 000bec: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000bf1: 48 89 54 24 40                  mov qword ptr [rsp + 0x40], rdx
    # nextln: 000bf6: 48 89 de                        mov rsi, rbx
    # nextln: 000bf9: ff d0                           call rax
    # nextln: 000bfb: 44 23 e8                        and r13d, eax
    # nextln: 000bfe: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 000c03: 4c 8b 4c 24 20                  mov r9, qword ptr [rsp + 0x20]
    # nextln: 000c08: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 000c0d: 48 89 da                        mov rdx, rbx
    # nextln: 000c10: 48 8b 5c 24 78                  mov rbx, qword ptr [rsp + 0x78]
    # nextln: 000c15: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 000c1a: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000c1f: 48 8b 44 24 50                  mov rax, qword ptr [rsp + 0x50]
    # nextln: 000c24: 4c 8b 54 24 40                  mov r10, qword ptr [rsp + 0x40]
    # nextln: 000c29: 0f b7 bc 24 b8 00 00 00         movzx edi, word ptr [rsp + 0xb8]
    # nextln: 000c31: 0f bf ff                        movsx edi, di
    # nextln: 000c34: 48 89 44 24 50                  mov qword ptr [rsp + 0x50], rax
    # nextln: 000c39: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000c43: 4c 89 54 24 40                  mov qword ptr [rsp + 0x40], r10
    # nextln: 000c48: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 000c4d: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 000c52: 4c 89 5c 24 48                  mov qword ptr [rsp + 0x48], r11
    # nextln: 000c57: 48 89 4c 24 30                  mov qword ptr [rsp + 0x30], rcx
    # nextln: 000c5c: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 000c61: 4c 89 4c 24 20                  mov qword ptr [rsp + 0x20], r9
    # nextln: 000c66: 4c 89 fe                        mov rsi, r15
    # nextln: 000c69: ff d0                           call rax
    # nextln: 000c6b: 33 c9                           xor ecx, ecx
    # nextln: 000c6d: 85 c0                           test eax, eax
    # nextln: 000c6f: 0f 94 c1                        sete cl
    # nextln: 000c72: 44 23 e9                        and r13d, ecx
    # nextln: 000c75: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000c7a: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000c7f: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000c84: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 000c89: 4c 8b 5c 24 38                  mov r11, qword ptr [rsp + 0x38]
    # nextln: 000c8e: 48 8b 44 24 48                  mov rax, qword ptr [rsp + 0x48]
    # nextln: 000c93: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 000c98: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 000c9d: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000ca7: 48 89 7c 24 40                  mov qword ptr [rsp + 0x40], rdi
    # nextln: 000cac: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 000cb1: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000cb6: 4c 89 5c 24 38                  mov qword ptr [rsp + 0x38], r11
    # nextln: 000cbb: 48 89 74 24 50                  mov qword ptr [rsp + 0x50], rsi
    # nextln: 000cc0: 4c 89 4c 24 30                  mov qword ptr [rsp + 0x30], r9
    # nextln: 000cc5: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 000cca: 48 89 44 24 48                  mov qword ptr [rsp + 0x48], rax
    # nextln: 000ccf: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 000cd4: 48 89 de                        mov rsi, rbx
    # nextln: 000cd7: ff d1                           call rcx
    # nextln: 000cd9: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 000cde: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000ce3: 4c 8b 44 24 38                  mov r8, qword ptr [rsp + 0x38]
    # nextln: 000ce8: 4c 8b 4c 24 48                  mov r9, qword ptr [rsp + 0x48]
    # nextln: 000ced: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 000cf2: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000cf7: 48 8b 5c 24 58                  mov rbx, qword ptr [rsp + 0x58]
    # nextln: 000cfc: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 000d01: 4c 8b 54 24 28                  mov r10, qword ptr [rsp + 0x28]
    # nextln: 000d06: 44 23 e8                        and r13d, eax
    # nextln: 000d09: 48 89 f8                        mov rax, rdi
    # nextln: 000d0c: 4c 89 84 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r8
    # nextln: 000d14: 4d 89 c8                        mov r8, r9
    # nextln: 000d17: 4c 8b 8c 24 a8 00 00 00         mov r9, qword ptr [rsp + 0xa8]
    # nextln: 000d1f: 48 89 f7                        mov rdi, rsi
    # nextln: 000d22: 4c 89 de                        mov rsi, r11
    # nextln: 000d25: 49 89 d3                        mov r11, rdx
    # nextln: 000d28: 4c 89 d2                        mov rdx, r10
    # nextln: 000d2b: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000d35: 48 89 74 24 40                  mov qword ptr [rsp + 0x40], rsi
    # nextln: 000d3a: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 000d3f: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 000d44: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 000d49: 4c 89 4c 24 38                  mov qword ptr [rsp + 0x38], r9
    # nextln: 000d4e: 4c 89 5c 24 50                  mov qword ptr [rsp + 0x50], r11
    # nextln: 000d53: 48 89 7c 24 30                  mov qword ptr [rsp + 0x30], rdi
    # nextln: 000d58: 4c 89 44 24 48                  mov qword ptr [rsp + 0x48], r8
    # nextln: 000d5d: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 000d62: 4c 89 e6                        mov rsi, r12
    # nextln: 000d65: 41 ff d2                        call r10
    # nextln: 000d68: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000d6d: 44 23 e8                        and r13d, eax
    # nextln: 000d70: 48 8b 44 24 40                  mov rax, qword ptr [rsp + 0x40]
    # nextln: 000d75: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 000d7a: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000d7f: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 000d84: 4c 8b 54 24 50                  mov r10, qword ptr [rsp + 0x50]
    # nextln: 000d89: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 000d8e: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 000d93: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000d9d: 48 89 44 24 40                  mov qword ptr [rsp + 0x40], rax
    # nextln: 000da2: 4c 89 54 24 50                  mov qword ptr [rsp + 0x50], r10
    # nextln: 000da7: 4c 89 4c 24 30                  mov qword ptr [rsp + 0x30], r9
    # nextln: 000dac: 4c 89 5c 24 48                  mov qword ptr [rsp + 0x48], r11
    # nextln: 000db1: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000db6: 48 89 7c 24 20                  mov qword ptr [rsp + 0x20], rdi
    # nextln: 000dbb: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 000dc0: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000dc5: 4c 89 fe                        mov rsi, r15
    # nextln: 000dc8: 4c 89 f7                        mov rdi, r14
    # nextln: 000dcb: 41 ff d0                        call r8
    # nextln: 000dce: 44 23 e8                        and r13d, eax
    # nextln: 000dd1: 4c 8b 54 24 40                  mov r10, qword ptr [rsp + 0x40]
    # nextln: 000dd6: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000ddb: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 000de0: 4c 8b 4c 24 38                  mov r9, qword ptr [rsp + 0x38]
    # nextln: 000de5: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 000dea: 4c 8b 5c 24 30                  mov r11, qword ptr [rsp + 0x30]
    # nextln: 000def: 48 8b 44 24 50                  mov rax, qword ptr [rsp + 0x50]
    # nextln: 000df4: 48 8b 7c 24 18                  mov rdi, qword ptr [rsp + 0x18]
    # nextln: 000df9: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000e03: 4c 89 54 24 40                  mov qword ptr [rsp + 0x40], r10
    # nextln: 000e08: 4c 89 4c 24 38                  mov qword ptr [rsp + 0x38], r9
    # nextln: 000e0d: 4c 89 44 24 48                  mov qword ptr [rsp + 0x48], r8
    # nextln: 000e12: 48 89 44 24 50                  mov qword ptr [rsp + 0x50], rax
    # nextln: 000e17: 48 89 7c 24 18                  mov qword ptr [rsp + 0x18], rdi
    # nextln: 000e1c: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000e21: 4c 89 5c 24 30                  mov qword ptr [rsp + 0x30], r11
    # nextln: 000e26: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 000e2b: 4c 89 e6                        mov rsi, r12
    # nextln: 000e2e: 4c 89 f7                        mov rdi, r14
    # nextln: 000e31: ff d2                           call rdx
    # nextln: 000e33: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000e38: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 000e3d: 4c 8b 54 24 30                  mov r10, qword ptr [rsp + 0x30]
    # nextln: 000e42: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 000e47: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000e4c: 4c 8b 4c 24 50                  mov r9, qword ptr [rsp + 0x50]
    # nextln: 000e51: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 000e56: 49 89 dc                        mov r12, rbx
    # nextln: 000e59: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 000e5e: 33 db                           xor ebx, ebx
    # nextln: 000e60: 85 c0                           test eax, eax
    # nextln: 000e62: 0f 94 c3                        sete bl
    # nextln: 000e65: 44 23 eb                        and r13d, ebx
    # nextln: 000e68: 4c 89 c8                        mov rax, r9
    # nextln: 000e6b: 4c 89 c3                        mov rbx, r8
    # nextln: 000e6e: 4d 89 d8                        mov r8, r11
    # nextln: 000e71: 4d 89 d3                        mov r11, r10
    # nextln: 000e74: 49 89 f2                        mov r10, rsi
    # nextln: 000e77: 48 89 de                        mov rsi, rbx
    # nextln: 000e7a: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000e84: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000e89: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000e8e: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000e93: 4c 89 5c 24 30                  mov qword ptr [rsp + 0x30], r11
    # nextln: 000e98: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 000e9d: 48 89 74 24 48                  mov qword ptr [rsp + 0x48], rsi
    # nextln: 000ea2: 48 89 fb                        mov rbx, rdi
    # nextln: 000ea5: 48 89 44 24 50                  mov qword ptr [rsp + 0x50], rax
    # nextln: 000eaa: 48 89 de                        mov rsi, rbx
    # nextln: 000ead: 4c 89 f7                        mov rdi, r14
    # nextln: 000eb0: 41 ff d1                        call r9
    # nextln: 000eb3: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000eb8: 4c 8b 4c 24 20                  mov r9, qword ptr [rsp + 0x20]
    # nextln: 000ebd: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000ec2: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000ec7: 49 89 de                        mov r14, rbx
    # nextln: 000eca: 48 8b 5c 24 48                  mov rbx, qword ptr [rsp + 0x48]
    # nextln: 000ecf: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 000ed4: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000ed9: 44 23 e8                        and r13d, eax
    # nextln: 000edc: 4c 89 c0                        mov rax, r8
    # nextln: 000edf: 49 89 f8                        mov r8, rdi
    # nextln: 000ee2: 48 89 f7                        mov rdi, rsi
    # nextln: 000ee5: 4c 89 ce                        mov rsi, r9
    # nextln: 000ee8: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000ef2: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 000ef7: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 000efc: 48 89 7c 24 30                  mov qword ptr [rsp + 0x30], rdi
    # nextln: 000f01: 48 89 44 24 50                  mov qword ptr [rsp + 0x50], rax
    # nextln: 000f06: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 000f0b: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000f10: 4c 89 e7                        mov rdi, r12
    # nextln: 000f13: 4c 89 fe                        mov rsi, r15
    # nextln: 000f16: 41 ff d1                        call r9
    # nextln: 000f19: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000f1e: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 000f23: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000f28: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 000f2d: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000f32: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000f37: 45 33 c9                        xor r9d, r9d
    # nextln: 000f3a: 85 c0                           test eax, eax
    # nextln: 000f3c: 41 0f 94 c1                     sete r9b
    # nextln: 000f40: 45 23 e9                        and r13d, r9d
    # nextln: 000f43: 48 89 f8                        mov rax, rdi
    # nextln: 000f46: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000f4d: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000f57: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000f5c: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 000f61: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000f66: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 000f6b: 48 89 74 24 30                  mov qword ptr [rsp + 0x30], rsi
    # nextln: 000f70: 4c 89 fe                        mov rsi, r15
    # nextln: 000f73: 41 ff d1                        call r9
    # nextln: 000f76: 44 23 e8                        and r13d, eax
    # nextln: 000f79: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000f7e: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000f83: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000f88: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000f8d: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 000f92: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000f99: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000fa3: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000fa8: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000fad: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 000fb2: 48 89 54 24 30                  mov qword ptr [rsp + 0x30], rdx
    # nextln: 000fb7: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 000fbc: 4c 89 f6                        mov rsi, r14
    # nextln: 000fbf: 41 ff d1                        call r9
    # nextln: 000fc2: 44 23 e8                        and r13d, eax
    # nextln: 000fc5: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000fca: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000fcf: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 000fd4: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000fd9: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000fde: 8b bc 24 b0 00 00 00            mov edi, dword ptr [rsp + 0xb0]
    # nextln: 000fe5: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000fef: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 000ff4: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000ff9: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000ffe: 48 89 54 24 30                  mov qword ptr [rsp + 0x30], rdx
    # nextln: 001003: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 001008: 4c 89 fe                        mov rsi, r15
    # nextln: 00100b: 41 ff d1                        call r9
    # nextln: 00100e: 33 c9                           xor ecx, ecx
    # nextln: 001010: 85 c0                           test eax, eax
    # nextln: 001012: 0f 94 c1                        sete cl
    # nextln: 001015: 44 23 e9                        and r13d, ecx
    # nextln: 001018: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 00101d: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 001022: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 001027: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 00102c: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 001031: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 001038: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 001042: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 001047: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 00104c: 48 89 74 24 40                  mov qword ptr [rsp + 0x40], rsi
    # nextln: 001051: 48 89 54 24 30                  mov qword ptr [rsp + 0x30], rdx
    # nextln: 001056: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 00105b: 4c 89 fe                        mov rsi, r15
    # nextln: 00105e: 41 ff d1                        call r9
    # nextln: 001061: 33 c9                           xor ecx, ecx
    # nextln: 001063: 85 c0                           test eax, eax
    # nextln: 001065: 0f 94 c1                        sete cl
    # nextln: 001068: 44 23 e9                        and r13d, ecx
    # nextln: 00106b: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 001070: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 001075: 48 8b 4c 24 40                  mov rcx, qword ptr [rsp + 0x40]
    # nextln: 00107a: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 00107f: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 001084: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 00108b: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 001095: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 00109a: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 00109f: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 0010a4: 48 89 4c 24 40                  mov qword ptr [rsp + 0x40], rcx
    # nextln: 0010a9: 48 89 54 24 30                  mov qword ptr [rsp + 0x30], rdx
    # nextln: 0010ae: 4c 89 f6                        mov rsi, r14
    # nextln: 0010b1: 41 ff d1                        call r9
    # nextln: 0010b4: 33 c9                           xor ecx, ecx
    # nextln: 0010b6: 85 c0                           test eax, eax
    # nextln: 0010b8: 0f 94 c1                        sete cl
    # nextln: 0010bb: 44 23 e9                        and r13d, ecx
    # nextln: 0010be: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0010c3: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 0010c8: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 0010cd: 48 8b 4c 24 40                  mov rcx, qword ptr [rsp + 0x40]
    # nextln: 0010d2: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 0010d7: 8b bc 24 b0 00 00 00            mov edi, dword ptr [rsp + 0xb0]
    # nextln: 0010de: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 0010e8: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 0010ed: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 0010f2: 48 89 4c 24 40                  mov qword ptr [rsp + 0x40], rcx
    # nextln: 0010f7: 48 89 54 24 30                  mov qword ptr [rsp + 0x30], rdx
    # nextln: 0010fc: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 001101: 4c 89 fe                        mov rsi, r15
    # nextln: 001104: 41 ff d1                        call r9
    # nextln: 001107: 44 23 e8                        and r13d, eax
    # nextln: 00110a: 48 8b 54 24 40                  mov rdx, qword ptr [rsp + 0x40]
    # nextln: 00110f: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 001114: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 001119: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 00111e: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 001123: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 00112a: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 001134: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 001139: 48 89 54 24 40                  mov qword ptr [rsp + 0x40], rdx
    # nextln: 00113e: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 001143: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 001148: 48 89 74 24 30                  mov qword ptr [rsp + 0x30], rsi
    # nextln: 00114d: 4c 89 fe                        mov rsi, r15
    # nextln: 001150: 41 ff d1                        call r9
    # nextln: 001153: 33 c9                           xor ecx, ecx
    # nextln: 001155: 85 c0                           test eax, eax
    # nextln: 001157: 0f 94 c1                        sete cl
    # nextln: 00115a: 44 23 e9                        and r13d, ecx
    # nextln: 00115d: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 001162: 48 8b 4c 24 40                  mov rcx, qword ptr [rsp + 0x40]
    # nextln: 001167: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 00116c: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 001171: 48 8b 44 24 30                  mov rax, qword ptr [rsp + 0x30]
    # nextln: 001176: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 00117d: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 001187: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 00118c: 48 89 4c 24 40                  mov qword ptr [rsp + 0x40], rcx
    # nextln: 001191: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 001196: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 00119b: 48 89 44 24 30                  mov qword ptr [rsp + 0x30], rax
    # nextln: 0011a0: 4c 89 f6                        mov rsi, r14
    # nextln: 0011a3: 41 ff d1                        call r9
    # nextln: 0011a6: 33 c9                           xor ecx, ecx
    # nextln: 0011a8: 85 c0                           test eax, eax
    # nextln: 0011aa: 0f 94 c1                        sete cl
    # nextln: 0011ad: 44 23 e9                        and r13d, ecx
    # nextln: 0011b0: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0011b5: 48 8b 54 24 40                  mov rdx, qword ptr [rsp + 0x40]
    # nextln: 0011ba: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 0011bf: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 0011c4: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 0011c9: 8b bc 24 b0 00 00 00            mov edi, dword ptr [rsp + 0xb0]
    # nextln: 0011d0: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0011da: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 0011df: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 0011e4: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 0011e9: 48 89 4c 24 30                  mov qword ptr [rsp + 0x30], rcx
    # nextln: 0011ee: 48 89 54 24 40                  mov qword ptr [rsp + 0x40], rdx
    # nextln: 0011f3: 4c 89 fe                        mov rsi, r15
    # nextln: 0011f6: 41 ff d1                        call r9
    # nextln: 0011f9: 33 c9                           xor ecx, ecx
    # nextln: 0011fb: 41 3b c4                        cmp eax, r12d
    # nextln: 0011fe: 4c 8b 64 24 18                  mov r12, qword ptr [rsp + 0x18]
    # nextln: 001203: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 001208: 48 8b 44 24 30                  mov rax, qword ptr [rsp + 0x30]
    # nextln: 00120d: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 001212: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 001217: 0f 94 c1                        sete cl
    # nextln: 00121a: 44 23 e9                        and r13d, ecx
    # nextln: 00121d: 48 89 f1                        mov rcx, rsi
    # nextln: 001220: 48 89 fe                        mov rsi, rdi
    # nextln: 001223: 48 89 d7                        mov rdi, rdx
    # nextln: 001226: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 001230: 48 89 7c 24 28                  mov qword ptr [rsp + 0x28], rdi
    # nextln: 001235: 48 89 44 24 30                  mov qword ptr [rsp + 0x30], rax
    # nextln: 00123a: 48 89 4c 24 20                  mov qword ptr [rsp + 0x20], rcx
    # nextln: 00123f: 48 89 74 24 40                  mov qword ptr [rsp + 0x40], rsi
    # nextln: 001244: 48 89 df                        mov rdi, rbx
    # nextln: 001247: 4c 89 fe                        mov rsi, r15
    # nextln: 00124a: ff d2                           call rdx
    # nextln: 00124c: 44 23 e8                        and r13d, eax
    # nextln: 00124f: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 001254: 48 8b 7c 24 30                  mov rdi, qword ptr [rsp + 0x30]
    # nextln: 001259: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 00125e: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 001263: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 00126d: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 001272: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 001277: 48 89 7c 24 30                  mov qword ptr [rsp + 0x30], rdi
    # nextln: 00127c: 48 89 74 24 40                  mov qword ptr [rsp + 0x40], rsi
    # nextln: 001281: 4c 89 f6                        mov rsi, r14
    # nextln: 001284: 48 89 df                        mov rdi, rbx
    # nextln: 001287: ff d1                           call rcx
    # nextln: 001289: 4c 89 e1                        mov rcx, r12
    # nextln: 00128c: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 001291: 48 8b 5c 24 28                  mov rbx, qword ptr [rsp + 0x28]
    # nextln: 001296: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 00129b: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 0012a0: 44 23 e8                        and r13d, eax
    # nextln: 0012a3: 48 89 f0                        mov rax, rsi
    # nextln: 0012a6: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 0012b0: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 0012b5: 49 89 d4                        mov r12, rdx
    # nextln: 0012b8: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 0012bd: 4c 89 fe                        mov rsi, r15
    # nextln: 0012c0: 41 ff d0                        call r8
    # nextln: 0012c3: 33 c9                           xor ecx, ecx
    # nextln: 0012c5: 85 c0                           test eax, eax
    # nextln: 0012c7: 0f 94 c1                        sete cl
    # nextln: 0012ca: 44 23 e9                        and r13d, ecx
    # nextln: 0012cd: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0012d2: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 0012d7: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 0012dc: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0012e6: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 0012eb: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 0012f0: 4c 89 fe                        mov rsi, r15
    # nextln: 0012f3: ff d2                           call rdx
    # nextln: 0012f5: 44 23 e8                        and r13d, eax
    # nextln: 0012f8: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0012fd: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 001302: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 001307: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 001311: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 001316: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 00131b: 4c 89 f6                        mov rsi, r14
    # nextln: 00131e: ff d2                           call rdx
    # nextln: 001320: 33 c9                           xor ecx, ecx
    # nextln: 001322: 85 c0                           test eax, eax
    # nextln: 001324: 0f 94 c1                        sete cl
    # nextln: 001327: 44 23 e9                        and r13d, ecx
    # nextln: 00132a: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 00132f: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 001334: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 001339: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 001343: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 001348: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 00134d: 4c 89 e6                        mov rsi, r12
    # nextln: 001350: ff d2                           call rdx
    # nextln: 001352: 44 23 e8                        and r13d, eax
    # nextln: 001355: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 00135a: 48 8b 4c 24 20                  mov rcx, qword ptr [rsp + 0x20]
    # nextln: 00135f: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 001363: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 00136d: 48 89 4c 24 20                  mov qword ptr [rsp + 0x20], rcx
    # nextln: 001372: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 001377: 4c 89 fe                        mov rsi, r15
    # nextln: 00137a: ff d2                           call rdx
    # nextln: 00137c: 33 c9                           xor ecx, ecx
    # nextln: 00137e: 85 c0                           test eax, eax
    # nextln: 001380: 0f 94 c1                        sete cl
    # nextln: 001383: 44 23 e9                        and r13d, ecx
    # nextln: 001386: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 00138b: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 001390: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 00139a: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 00139f: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 0013a4: 4c 89 fe                        mov rsi, r15
    # nextln: 0013a7: 48 89 df                        mov rdi, rbx
    # nextln: 0013aa: ff d2                           call rdx
    # nextln: 0013ac: 44 23 e8                        and r13d, eax
    # nextln: 0013af: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 0013b4: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0013b9: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0013c3: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 0013c8: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 0013cd: 48 89 df                        mov rdi, rbx
    # nextln: 0013d0: 4c 89 f6                        mov rsi, r14
    # nextln: 0013d3: ff d2                           call rdx
    # nextln: 0013d5: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 0013da: 4c 8b 74 24 20                  mov r14, qword ptr [rsp + 0x20]
    # nextln: 0013df: 4c 89 e6                        mov rsi, r12
    # nextln: 0013e2: 49 89 c4                        mov r12, rax
    # nextln: 0013e5: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0013ef: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 0013f4: 48 89 df                        mov rdi, rbx
    # nextln: 0013f7: ff d0                           call rax
    # nextln: 0013f9: 48 8b 5c 24 18                  mov rbx, qword ptr [rsp + 0x18]
    # nextln: 0013fe: 33 c9                           xor ecx, ecx
    # nextln: 001400: 45 85 e4                        test r12d, r12d
    # nextln: 001403: 0f 94 c1                        sete cl
    # nextln: 001406: 44 23 e9                        and r13d, ecx
    # nextln: 001409: 44 23 e8                        and r13d, eax
    # nextln: 00140c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 001416: 4c 89 fe                        mov rsi, r15
    # nextln: 001419: 4c 89 f7                        mov rdi, r14
    # nextln: 00141c: ff d0                           call rax
    # nextln: 00141e: 33 c9                           xor ecx, ecx
    # nextln: 001420: 85 c0                           test eax, eax
    # nextln: 001422: 0f 94 c1                        sete cl
    # nextln: 001425: 44 23 e9                        and r13d, ecx
    # nextln: 001428: 45 85 ed                        test r13d, r13d
    # nextln: 00142b: 0f 84 15 00 00 00               je 0x1446
    # nextln: 001431: 48 89 d8                        mov rax, rbx
    # nextln: 001434: 48 81 c4 d8 00 00 00            add rsp, 0xd8
    # nextln: 00143b: 5b                              pop rbx
    # nextln: 00143c: 41 5c                           pop r12
    # nextln: 00143e: 41 5d                           pop r13
    # nextln: 001440: 41 5e                           pop r14
    # nextln: 001442: 41 5f                           pop r15
    # nextln: 001444: 5d                              pop rbp
    # nextln: 001445: c3                              ret
    # nextln: 001446: 4c 89 f8                        mov rax, r15
    # nextln: 001449: 48 81 c4 d8 00 00 00            add rsp, 0xd8
    # nextln: 001450: 5b                              pop rbx
    # nextln: 001451: 41 5c                           pop r12
    # nextln: 001453: 41 5d                           pop r13
    # nextln: 001455: 41 5e                           pop r14
    # nextln: 001457: 41 5f                           pop r15
    # nextln: 001459: 5d                              pop rbp
    # nextln: 00145a: c3                              ret

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i32 = iconst 1
    %5:i64 = iext %4
    %6:i64 = sfill 32 %5
    %7:i32 = iconst 3
    %8:ptr = stackslot 8:8
    %9:i32 = iconst 64
    %10:ptr = stackslot 8:8
    %11:i32 = iconst 32
    %12:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %14:ptr = stackslot 2:2
    %15:ptr = stackslot 2:2
    %16:i32 = iconst 16
    %17:ptr = stackslot 2:2
    %18:i32 = iconst 15
    %19:ptr = stackslot 1:1
    %20:ptr = stackslot 1:1
    %21:i32 = iconst 8
    %22:ptr = stackslot 1:1
    %23:ctrl = store.1 %1, %3, %22
    %24:ctrl = store.1 %23, %3, %20
    %25:ctrl = store.1 %24, %3, %19
    %26:ctrl = store.2 %25, %3, %17
    %27:ctrl = store.2 %26, %3, %15
    %28:ctrl = store.2 %27, %3, %14
    %29:ctrl = store.4 %28, %3, %13
    %30:ctrl = store.4 %29, %3, %12
    %31:i32 = iconst 7
    %32:i32 = iconst 2
    %33:i64 = iext %32
    %34:i64 = sfill 32 %33
    %35:i32 = iconst 4294934528
    %36:i32 = iconst 4294967168
    %37:i64 = iconst 0
    %38:ctrl = store.8 %30, %37, %10
    %39:ctrl = store.8 %38, %37, %8
    %40:ctrl, %41:phisel = region %39
    %42:ctrl = store.1 %40, %36, %22
    %43:ctrl = store.1 %42, %4, %20
    %44:ctrl = store.1 %43, %32, %19
    %45:ctrl = store.2 %44, %35, %17
    %46:ctrl = store.2 %45, %4, %15
    %47:ctrl = store.2 %46, %32, %14
    %48:ctrl = store.4 %47, %4, %13
    %49:ctrl = store.4 %48, %32, %12
    %50:ctrl = store.8 %49, %6, %10
    %51:ctrl = store.8 %50, %34, %8
    %52:ctrl, %53:i32 = load.1 %51, %22
    %54:i32 = sfill 8 %53
    %55:ctrl, %56:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %52, %54, %31
    %57:ctrl, %58:i32 = load.1 %55, %22
    %59:i32 = sfill 8 %58
    %60:ctrl, %61:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %57, %59, %21
    %62:ctrl, %63:i32 = load.1 %60, %20
    %64:i32 = sfill 8 %63
    %65:ctrl, %66:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %62, %64, %3
    %67:ctrl, %68:i32 = load.1 %65, %20
    %69:i32 = sfill 8 %68
    %70:ctrl, %71:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %67, %69, %21
    %72:ctrl, %73:i32 = load.1 %70, %20
    %74:i32 = sfill 8 %73
    %75:ctrl, %76:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %72, %74, %11
    %77:ctrl, %78:i32 = load.1 %75, %19
    %79:i32 = sfill 8 %78
    %80:ctrl, %81:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %77, %79, %3
    %82:ctrl, %83:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %80, %22, %31
    %84:ctrl, %85:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %82, %22, %21
    %86:ctrl, %87:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %84, %20, %3
    %88:ctrl, %89:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %86, %20, %21
    %90:ctrl, %91:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %88, %20, %11
    %92:ctrl, %93:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %90, %19, %3
    %94:ctrl, %95:i32 = load.2 %92, %17
    %96:i32 = sfill 16 %95
    %97:ctrl, %98:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %94, %96, %18
    %99:ctrl, %100:i32 = load.2 %97, %17
    %101:i32 = sfill 16 %100
    %102:ctrl, %103:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %99, %101, %16
    %104:ctrl, %105:i32 = load.2 %102, %15
    %106:i32 = sfill 16 %105
    %107:ctrl, %108:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %104, %106, %3
    %109:ctrl, %110:i32 = load.2 %107, %15
    %111:i32 = sfill 16 %110
    %112:ctrl, %113:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %109, %111, %16
    %114:ctrl, %115:i32 = load.2 %112, %15
    %116:i32 = sfill 16 %115
    %117:ctrl, %118:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %114, %116, %11
    %119:ctrl, %120:i32 = load.2 %117, %14
    %121:i32 = sfill 16 %120
    %122:ctrl, %123:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %119, %121, %3
    %124:ctrl, %125:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %122, %17, %18
    %126:ctrl, %127:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %124, %17, %16
    %128:ctrl, %129:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %126, %15, %3
    %130:ctrl, %131:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %128, %15, %16
    %132:ctrl, %133:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %130, %15, %11
    %134:ctrl, %135:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %132, %14, %3
    %136:ctrl, %137:i32 = load.4 %134, %13
    %138:ctrl, %139:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %136, %137, %3
    %140:ctrl, %141:i32 = load.4 %138, %13
    %142:ctrl, %143:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %140, %141, %11
    %144:ctrl, %145:i32 = load.4 %142, %12
    %146:ctrl, %147:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %144, %145, %3
    %148:ctrl, %149:i32 = load.4 %146, %13
    %150:ctrl, %151:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %148, %149, %3
    %152:ctrl, %153:i32 = load.4 %150, %13
    %154:ctrl, %155:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %152, %153, %11
    %156:ctrl, %157:i32 = load.4 %154, %12
    %158:ctrl, %159:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %156, %157, %3
    %160:ctrl, %161:i32 = load.4 %158, %13
    %162:ctrl, %163:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %160, %161, %3
    %164:ctrl, %165:i32 = load.4 %162, %13
    %166:ctrl, %167:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %164, %165, %11
    %168:ctrl, %169:i32 = load.4 %166, %12
    %170:ctrl, %171:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %168, %169, %3
    %172:ctrl, %173:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %170, %13, %3
    %174:ctrl, %175:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %172, %13, %11
    %176:ctrl, %177:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %174, %12, %3
    %178:ctrl, %179:i64 = load.8 %176, %10
    %180:ctrl, %181:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %178, %179, %3
    %182:ctrl, %183:i64 = load.8 %180, %10
    %184:ctrl, %185:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %182, %183, %11
    %186:ctrl, %187:i64 = load.8 %184, %10
    %188:ctrl, %189:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %186, %187, %9
    %190:ctrl, %191:i64 = load.8 %188, %8
    %192:ctrl, %193:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %190, %191, %3
    %194:ctrl, %195:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %192, %10, %3
    %196:ctrl, %197:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %194, %10, %11
    %198:ctrl, %199:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %196, %10, %9
    %200:ctrl, %201:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %198, %8, %3
    %202:i32 = icmp eq %201, %3
    %203:i32 = icmp eq %197, %3
    %204:i32 = icmp eq %193, %3
    %205:i32 = icmp eq %185, %3
    %206:i32 = icmp eq %177, %3
    %207:i32 = icmp eq %171, %7
    %208:i32 = icmp eq %167, %3
    %209:i32 = icmp eq %163, %3
    %210:i32 = icmp eq %155, %3
    %211:i32 = icmp eq %151, %3
    %212:i32 = icmp eq %147, %3
    %213:i32 = icmp eq %135, %3
    %214:i32 = icmp eq %131, %3
    %215:i32 = icmp eq %123, %3
    %216:i32 = icmp eq %113, %3
    %217:i32 = icmp eq %93, %3
    %218:i32 = icmp eq %89, %3
    %219:i32 = icmp eq %81, %3
    %220:i32 = icmp eq %71, %3
    %221:i32 = and %4, %56
    %222:i32 = and %221, %61
    %223:i32 = and %222, %66
    %224:i32 = and %223, %220
    %225:i32 = and %224, %76
    %226:i32 = and %225, %219
    %227:i32 = and %226, %83
    %228:i32 = and %227, %85
    %229:i32 = and %228, %87
    %230:i32 = and %229, %218
    %231:i32 = and %230, %91
    %232:i32 = and %231, %217
    %233:i32 = and %232, %98
    %234:i32 = and %233, %103
    %235:i32 = and %234, %108
    %236:i32 = and %235, %216
    %237:i32 = and %236, %118
    %238:i32 = and %237, %215
    %239:i32 = and %238, %125
    %240:i32 = and %239, %127
    %241:i32 = and %240, %129
    %242:i32 = and %241, %214
    %243:i32 = and %242, %133
    %244:i32 = and %243, %213
    %245:i32 = and %244, %139
    %246:i32 = and %245, %143
    %247:i32 = and %246, %212
    %248:i32 = and %247, %211
    %249:i32 = and %248, %210
    %250:i32 = and %249, %159
    %251:i32 = and %250, %209
    %252:i32 = and %251, %208
    %253:i32 = and %252, %207
    %254:i32 = and %253, %173
    %255:i32 = and %254, %175
    %256:i32 = and %255, %206
    %257:i32 = and %256, %181
    %258:i32 = and %257, %205
    %259:i32 = and %258, %189
    %260:i32 = and %259, %204
    %261:i32 = and %260, %195
    %262:i32 = and %261, %203
    %263:i32 = and %262, %199
    %264:i32 = and %263, %202
    %265:ctrl, %266:ctrl = brcond %200, %264
    %267:ctrl, %268:phisel = region %265
    return %267, %4
    %269:ctrl, %270:phisel = region %266
    return %269, %3
}
