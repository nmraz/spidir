# run: schedule

func @arith_stuff:i32(i32, i32) {
    # check: function `arith_stuff`:
    # nextln: %0:ctrl, %1:i32, %2:i32 = entry
    # nextln: %3:ctrl, %4:phisel = region %0
    # nextln:     %5:i32 = iadd %1, %1
    # nextln:     %6:i32 = isub %5, %1
    # nextln:     %7:i32 = and %6, %1
    # nextln:     %8:i32 = or %7, %1
    # nextln:     %9:i32 = xor %8, %1
    # nextln:     %10:i32 = shl %9, %1
    # nextln:     %11:i32 = lshr %10, %1
    # nextln:     %12:i32 = ashr %11, %1
    # nextln:     %13:i32 = imul %12, %1
    # nextln: %14:ctrl, %15:i32 = sdiv %3, %13, %1
    # nextln: %16:ctrl, %17:i32 = udiv %14, %15, %1
    # nextln: %18:ctrl, %19:i32 = srem %16, %17, %1
    # nextln: %20:ctrl, %21:i32 = urem %18, %19, %1
    # nextln:     %22:i32 = icmp eq %21, %1
    # nextln:     %23:i32 = icmp ne %22, %1
    # nextln:     %24:i32 = icmp slt %23, %1
    # nextln:     %25:i32 = icmp sle %24, %1
    # nextln:     %26:i32 = icmp ult %25, %1
    # nextln:     %27:i32 = icmp ule %26, %1
    # nextln:     %28:i64 = iext %27
    # nextln:     %29:i32 = itrunc %28
    # nextln:     %30:i32 = sfill 16 %29
    # nextln: return %20, %30

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:ctrl, %4:phisel = region %0
    %5:i32 = iadd %1, %1
    %6:i32 = isub %5, %1
    %7:i32 = and %6, %1
    %8:i32 = or %7, %1
    %9:i32 = xor %8, %1
    %10:i32 = shl %9, %1
    %11:i32 = lshr %10, %1
    %12:i32 = ashr %11, %1
    %13:i32 = imul %12, %1
    %14:ctrl, %15:i32 = sdiv %3, %13, %1
    %16:ctrl, %17:i32 = udiv %14, %15, %1
    %18:ctrl, %19:i32 = srem %16, %17, %1
    %20:ctrl, %21:i32 = urem %18, %19, %1
    %22:i32 = icmp eq %21, %1
    %23:i32 = icmp ne %22, %1
    %24:i32 = icmp slt %23, %1
    %25:i32 = icmp sle %24, %1
    %26:i32 = icmp ult %25, %1
    %27:i32 = icmp ule %26, %1
    %28:i64 = iext %27
    %29:i32 = itrunc %28
    %30:i32 = sfill 16 %29
    return %20, %30
}

func @arith_stuff_juggled:i32(i32, i32) {
    # check: function `arith_stuff_juggled`:
    # nextln: %0:ctrl, %1:i32, %2:i32 = entry
    # nextln: %20:ctrl, %21:phisel = region %0
    # nextln:     %3:i32 = iadd %1, %1
    # nextln:     %9:i32 = isub %3, %1
    # nextln:     %4:i32 = and %9, %1
    # nextln:     %5:i32 = or %4, %1
    # nextln:     %6:i32 = xor %5, %1
    # nextln:     %7:i32 = shl %6, %1
    # nextln:     %10:i32 = lshr %7, %1
    # nextln:     %11:i32 = ashr %10, %1
    # nextln:     %12:i32 = imul %11, %1
    # nextln: %28:ctrl, %29:i32 = sdiv %20, %12, %1
    # nextln: %13:ctrl, %14:i32 = udiv %28, %29, %1
    # nextln: %16:ctrl, %17:i32 = srem %13, %14, %1
    # nextln: %24:ctrl, %25:i32 = urem %16, %17, %1
    # nextln:     %18:i32 = icmp eq %25, %1
    # nextln:     %15:i32 = icmp ne %18, %1
    # nextln:     %19:i32 = icmp slt %15, %1
    # nextln:     %22:i32 = icmp sle %19, %1
    # nextln:     %23:i32 = icmp ult %22, %1
    # nextln:     %8:i32 = icmp ule %23, %1
    # nextln:     %26:i64 = iext %8
    # nextln:     %27:i32 = itrunc %26
    # nextln:     %30:i32 = sfill 16 %27
    # nextln: return %24, %30

    %0:ctrl, %1:i32, %2:i32 = entry
    %5:i32 = iadd %1, %1
    %7:i32 = and %6, %1
    %8:i32 = or %7, %1
    return %20, %30
    %9:i32 = xor %8, %1
    %10:i32 = shl %9, %1
    %27:i32 = icmp ule %26, %1
    %6:i32 = isub %5, %1
    %11:i32 = lshr %10, %1
    %12:i32 = ashr %11, %1
    %13:i32 = imul %12, %1
    %16:ctrl, %17:i32 = udiv %14, %15, %1
    %23:i32 = icmp ne %22, %1
    %18:ctrl, %19:i32 = srem %16, %17, %1
    %22:i32 = icmp eq %21, %1
    %24:i32 = icmp slt %23, %1
    %3:ctrl, %4:phisel = region %0
    %25:i32 = icmp sle %24, %1
    %26:i32 = icmp ult %25, %1
    %20:ctrl, %21:i32 = urem %18, %19, %1
    %28:i64 = iext %27
    %29:i32 = itrunc %28
    %14:ctrl, %15:i32 = sdiv %3, %13, %1
    %30:i32 = sfill 16 %29
}
