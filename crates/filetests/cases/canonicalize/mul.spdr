# run: canonicalize

func @mul32:i32(i32, i32) {
    # check:   func @mul32:i32(i32, i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32, $(entry2=$val):i32 = entry
    # dag:         $(imul0=$val):i32 = imul $entry1, $entry2
    # dag:         return $entry0, $imul0
    # nextln:  }

    %c:ctrl, %a:i32, %b:i32 = entry
    %r:i32 = imul %a, %b
    return %c, %r
}

func @mul_fold32:i32() {
    # check:   func @mul_fold32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 35
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 7
    %r:i32 = imul %a, %b
    return %c, %r
}

func @mul_fold_wrap32:i32() {
    # check:   func @mul_fold_wrap32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 4294967261
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 4294967289
    %r:i32 = imul %a, %b
    return %c, %r
}

func @mulo32:i32(i32) {
    # check:   func @mulo32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 1
    %r:i32 = imul %a, %b
    return %c, %r
}

func @omul32:i32(i32) {
    # check:   func @omul32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 1
    %r:i32 = imul %a, %b
    return %c, %r
}

func @mulz32:i32(i32) {
    # check:   func @mulz32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 0
    %r:i32 = imul %a, %b
    return %c, %r
}

func @zmul32:i32(i32) {
    # check:   func @zmul32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 0
    %r:i32 = imul %a, %b
    return %c, %r
}

func @mulc32:i32(i32) {
    # check:   func @mulc32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(imul0=$val):i32 = imul $entry1, $iconst0
    # dag:         return $entry0, $imul0
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 5
    %r:i32 = imul %a, %b
    return %c, %r
}

func @cmul32:i32(i32) {
    # check:   func @cmul32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(imul0=$val):i32 = imul $entry1, $iconst0
    # dag:         return $entry0, $imul0
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 5
    %r:i32 = imul %a, %b
    return %c, %r
}

func @mul64:i64(i64, i64) {
    # check:   func @mul64:i64(i64, i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64, $(entry2=$val):i64 = entry
    # dag:         $(imul0=$val):i64 = imul $entry1, $entry2
    # dag:         return $entry0, $imul0
    # nextln:  }

    %c:ctrl, %a:i64, %b:i64 = entry
    %r:i64 = imul %a, %b
    return %c, %r
}

func @mul_fold64:i64() {
    # check:   func @mul_fold64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 35
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 7
    %r:i64 = imul %a, %b
    return %c, %r
}

func @mul_fold_wrap64:i64() {
    # check:   func @mul_fold_wrap64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 18446744073709551581
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 18446744073709551609
    %r:i64 = imul %a, %b
    return %c, %r
}

func @mulo64:i64(i64) {
    # check:   func @mulo64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 1
    %r:i64 = imul %a, %b
    return %c, %r
}

func @omul64:i64(i64) {
    # check:   func @omul64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 1
    %r:i64 = imul %a, %b
    return %c, %r
}

func @mulz64:i64(i64) {
    # check:   func @mulz64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 0
    %r:i64 = imul %a, %b
    return %c, %r
}

func @zmul64:i64(i64) {
    # check:   func @zmul64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 0
    %r:i64 = imul %a, %b
    return %c, %r
}

func @mulc64:i64(i64) {
    # check:   func @mulc64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(imul0=$val):i64 = imul $entry1, $iconst0
    # dag:         return $entry0, $imul0
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 5
    %r:i64 = imul %a, %b
    return %c, %r
}

func @cmul64:i64(i64) {
    # check:   func @cmul64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(imul0=$val):i64 = imul $entry1, $iconst0
    # dag:         return $entry0, $imul0
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 5
    %r:i64 = imul %a, %b
    return %c, %r
}
