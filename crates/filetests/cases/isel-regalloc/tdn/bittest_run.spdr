# run: isel-regalloc

extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)":i32(ptr, i32)
extfunc @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)":i32(i64, i32)

func @"System.Boolean Tests.BitTest::Run()":i32() {
    # check: function `System.Boolean Tests.BitTest::Run()`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, r12, r13, r14
    # nextln: frame: size 33, align 8
    # nextln:     !0: 30
    # nextln:     !1: 24
    # nextln:     !2: 0
    # nextln:     !3: 8
    # nextln:     !4: 16
    # nextln:     !5: 26
    # nextln:     !6: 20
    # nextln:     !7: 28
    # nextln:     !8: 31
    # nextln:     !9: 32
    # nextln:       block0:
    # nextln: 0000:     Jump(block1)
    # nextln:       block1:
    # nextln: 0001:     $$rax = MovRZ
    # nextln: 0004:     $$rbx = MovRZ
    # nextln: 0012:     MovStackR(!8, S8) $$rbx
    # nextln: 0013:     MovStackR(!0, S8) $$rbx
    # nextln: 0015:     MovStackR(!9, S8) $$rbx
    # nextln: 0016:     MovStackR(!7, S16) $$rbx
    # nextln: 0017:     MovStackR(!5, S16) $$rbx
    # nextln: 0018:     MovStackR(!1, S16) $$rbx
    # nextln: 0019:     MovStackR(!6, S32) $$rbx
    # nextln: 0020:     MovStackR(!4, S32) $$rbx
    # nextln: 0021:     MovStackR(!3, S64) $$rax
    # nextln: 0022:     MovStackR(!2, S64) $$rax
    # nextln: 0023:     Jump(block2)
    # nextln:       block2:
    # nextln: 0026:     $$rax = MovRmS32(1)
    # nextln: 0030:     $$r12 = MovRmS32(3)
    # nextln: 0032:     $$rcx = MovRmS32(2)
    # nextln: 0033:     $$rdx = MovsxRRm(Ext32_64) $$rax
    # nextln: 0034:     $$rdi = MovsxRRm(Ext32_64) $$rcx
    # nextln: 0035:     $$rsi = MovRU32(4294967168)
    # nextln: 0036:     MovStackR(!8, S8) $$rsi
    # nextln: 0037:     $$rsi = MovRU32(4294934528)
    # nextln: 0038:     MovStackR(!0, S8) $$rax
    # nextln: 0039:     MovStackR(!9, S8) $$rcx
    # nextln: 0040:     MovStackR(!7, S16) $$rsi
    # nextln: 0041:     MovStackR(!5, S16) $$rax
    # nextln: 0042:     MovStackR(!1, S16) $$rcx
    # nextln: 0043:     MovStackR(!6, S32) $$rax
    # nextln: 0044:     MovStackR(!4, S32) $$rcx
    # nextln: 0045:     MovStackR(!3, S64) $$rdx
    # nextln: 0046:     MovStackR(!2, S64) $$rdi
    # nextln: 0047:     $$rax = MovRStack(!8, S8)
    # nextln: 0048:     $$rdi = MovsxRRm(Ext8_32) $$rax
    # nextln: 0049:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln:           $$rsi = MovRmS32(7)
    # nextln: 0050:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$r13 = MovRmS32(1)
    # nextln:           $$r14 = $$r13
    # nextln: 0051:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0052:     $$rax = MovRStack(!8, S8)
    # nextln: 0053:     $$rdi = MovsxRRm(Ext8_32) $$rax
    # nextln: 0054:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln:           $$rsi = MovRmS32(8)
    # nextln: 0055:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0056:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0057:     $$rax = MovRStack(!0, S8)
    # nextln: 0058:     $$rdi = MovsxRRm(Ext8_32) $$rax
    # nextln: 0059:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln:           $$rsi = $$rbx
    # nextln: 0060:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0061:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0062:     $$rax = MovRStack(!0, S8)
    # nextln: 0063:     $$rdi = MovsxRRm(Ext8_32) $$rax
    # nextln: 0064:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln:           $$rsi = MovRmS32(8)
    # nextln: 0065:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0066:     $$rcx = MovRZ
    # nextln: 0067:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0068:     $$rcx = Setcc(E) $$rcx
    # nextln: 0069:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0070:     $$rax = MovRStack(!0, S8)
    # nextln: 0071:     $$rdi = MovsxRRm(Ext8_32) $$rax
    # nextln: 0072:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0073:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0074:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0075:     $$rax = MovRStack(!9, S8)
    # nextln: 0076:     $$rdi = MovsxRRm(Ext8_32) $$rax
    # nextln: 0077:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln:           $$rsi = $$rbx
    # nextln: 0078:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0079:     $$rcx = MovRZ
    # nextln: 0080:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0081:     $$rcx = Setcc(E) $$rcx
    # nextln: 0082:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0083:     $$rax = FuncAddrAbs(External(extfunc8))
    # nextln:           $$rsi = MovRmS32(7)
    # nextln:           $$rdi = StackAddr(!8)
    # nextln: 0084:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0085:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0086:     $$rax = FuncAddrAbs(External(extfunc8))
    # nextln:           $$rdi = StackAddr(!8)
    # nextln:           $$rsi = MovRmS32(8)
    # nextln: 0087:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0088:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0089:     $$rax = FuncAddrAbs(External(extfunc8))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln:           $$rsi = $$rbx
    # nextln: 0090:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0091:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0092:     $$rax = FuncAddrAbs(External(extfunc8))
    # nextln:           $$rsi = MovRmS32(8)
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0093:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0094:     $$rcx = MovRZ
    # nextln: 0095:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0096:     $$rcx = Setcc(E) $$rcx
    # nextln: 0097:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0098:     $$rax = FuncAddrAbs(External(extfunc8))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0099:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0100:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0101:     $$rax = FuncAddrAbs(External(extfunc8))
    # nextln:           $$rdi = StackAddr(!9)
    # nextln:           $$rsi = $$rbx
    # nextln: 0102:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0103:     $$rcx = MovRZ
    # nextln: 0104:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0105:     $$rcx = Setcc(E) $$rcx
    # nextln: 0106:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0107:     $$rax = MovRStack(!7, S16)
    # nextln: 0108:     $$rdi = MovsxRRm(Ext16_32) $$rax
    # nextln: 0109:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = MovRmS32(15)
    # nextln: 0110:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0111:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0112:     $$rax = MovRStack(!7, S16)
    # nextln: 0113:     $$rdi = MovsxRRm(Ext16_32) $$rax
    # nextln: 0114:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = MovRmS32(16)
    # nextln: 0115:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0116:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0117:     $$rax = MovRStack(!5, S16)
    # nextln: 0118:     $$rdi = MovsxRRm(Ext16_32) $$rax
    # nextln: 0119:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = $$rbx
    # nextln: 0120:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0121:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0122:     $$rax = MovRStack(!5, S16)
    # nextln: 0123:     $$rdi = MovsxRRm(Ext16_32) $$rax
    # nextln: 0124:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = MovRmS32(16)
    # nextln: 0125:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0126:     $$rcx = MovRZ
    # nextln: 0127:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0128:     $$rcx = Setcc(E) $$rcx
    # nextln: 0129:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0130:     $$rax = MovRStack(!5, S16)
    # nextln: 0131:     $$rdi = MovsxRRm(Ext16_32) $$rax
    # nextln: 0132:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0133:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0134:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0135:     $$rax = MovRStack(!1, S16)
    # nextln: 0136:     $$rdi = MovsxRRm(Ext16_32) $$rax
    # nextln: 0137:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rsi = $$rbx
    # nextln: 0138:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0139:     $$rcx = MovRZ
    # nextln: 0140:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0141:     $$rcx = Setcc(E) $$rcx
    # nextln: 0142:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0143:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rsi = MovRmS32(15)
    # nextln:           $$rdi = StackAddr(!7)
    # nextln: 0144:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0145:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0146:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rdi = StackAddr(!7)
    # nextln:           $$rsi = MovRmS32(16)
    # nextln: 0147:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0148:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0149:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rdi = StackAddr(!5)
    # nextln:           $$rsi = $$rbx
    # nextln: 0150:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0151:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0152:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rsi = MovRmS32(16)
    # nextln:           $$rdi = StackAddr(!5)
    # nextln: 0153:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0154:     $$rcx = MovRZ
    # nextln: 0155:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0156:     $$rcx = Setcc(E) $$rcx
    # nextln: 0157:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0158:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rdi = StackAddr(!5)
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0159:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0160:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0161:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rdi = StackAddr(!1)
    # nextln:           $$rsi = $$rbx
    # nextln: 0162:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0163:     $$rcx = MovRZ
    # nextln: 0164:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0165:     $$rcx = Setcc(E) $$rcx
    # nextln: 0166:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0167:     $$rdi = MovRStack(!6, S32)
    # nextln: 0168:     $$rax = FuncAddrAbs(External(extfunc7))
    # nextln:           $$rsi = $$rbx
    # nextln: 0169:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0170:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0171:     $$rdi = MovRStack(!6, S32)
    # nextln: 0172:     $$rax = FuncAddrAbs(External(extfunc7))
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0173:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0174:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0175:     $$rdi = MovRStack(!4, S32)
    # nextln: 0176:     $$rax = FuncAddrAbs(External(extfunc7))
    # nextln:           $$rsi = $$rbx
    # nextln: 0177:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0178:     $$rcx = MovRZ
    # nextln: 0179:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0180:     $$rcx = Setcc(E) $$rcx
    # nextln: 0181:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0182:     $$rdi = MovRStack(!6, S32)
    # nextln: 0183:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = $$rbx
    # nextln: 0184:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0185:     $$rcx = MovRZ
    # nextln: 0186:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0187:     $$rcx = Setcc(E) $$rcx
    # nextln: 0188:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0189:     $$rdi = MovRStack(!6, S32)
    # nextln: 0190:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0191:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0192:     $$rcx = MovRZ
    # nextln: 0193:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0194:     $$rcx = Setcc(E) $$rcx
    # nextln: 0195:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0196:     $$rdi = MovRStack(!4, S32)
    # nextln: 0197:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = $$rbx
    # nextln: 0198:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0199:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0200:     $$rdi = MovRStack(!6, S32)
    # nextln: 0201:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln:           $$rsi = $$rbx
    # nextln: 0202:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0203:     $$rcx = MovRZ
    # nextln: 0204:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0205:     $$rcx = Setcc(E) $$rcx
    # nextln: 0206:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0207:     $$rdi = MovRStack(!6, S32)
    # nextln: 0208:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0209:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0210:     $$rcx = MovRZ
    # nextln: 0211:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0212:     $$rcx = Setcc(E) $$rcx
    # nextln: 0213:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0214:     $$rdi = MovRStack(!4, S32)
    # nextln: 0215:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln:           $$rsi = $$rbx
    # nextln: 0216:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0217:     $$rcx = MovRZ
    # nextln: 0218:     AluRRm(S32, Cmp) $$rax, $$r12
    # nextln: 0219:     $$rcx = Setcc(E) $$rcx
    # nextln: 0220:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0221:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rdi = StackAddr(!6)
    # nextln:           $$rsi = $$rbx
    # nextln: 0222:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0223:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0224:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rdi = StackAddr(!6)
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0225:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0226:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0227:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rdi = StackAddr(!4)
    # nextln:           $$rsi = $$rbx
    # nextln: 0228:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0229:     $$rcx = MovRZ
    # nextln: 0230:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0231:     $$rcx = Setcc(E) $$rcx
    # nextln: 0232:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0233:     $$rdi = MovRStack(!3, S64)
    # nextln: 0234:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rsi = $$rbx
    # nextln: 0235:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0236:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0237:     $$rdi = MovRStack(!3, S64)
    # nextln: 0238:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0239:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0240:     $$rcx = MovRZ
    # nextln: 0241:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0242:     $$rcx = Setcc(E) $$rcx
    # nextln: 0243:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0244:     $$rdi = MovRStack(!3, S64)
    # nextln: 0245:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rsi = MovRmS32(64)
    # nextln: 0246:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0247:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0248:     $$rdi = MovRStack(!2, S64)
    # nextln: 0249:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rsi = $$rbx
    # nextln: 0250:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0251:     $$rcx = MovRZ
    # nextln: 0252:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0253:     $$rcx = Setcc(E) $$rcx
    # nextln: 0254:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0255:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln:           $$rdi = StackAddr(!3)
    # nextln:           $$rsi = $$rbx
    # nextln: 0256:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0257:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0258:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln:           $$rdi = StackAddr(!3)
    # nextln:           $$rsi = MovRmS32(32)
    # nextln: 0259:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$r12 = $$rax
    # nextln: 0260:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln:           $$rsi = MovRmS32(64)
    # nextln:           $$rdi = StackAddr(!3)
    # nextln: 0261:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0262:     $$rcx = MovRZ
    # nextln: 0263:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 0264:     $$rcx = Setcc(E) $$rcx
    # nextln: 0265:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0266:     $$r14 = AluRRm(S32, And) $$r14, $$rax
    # nextln: 0267:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln:           $$rdi = StackAddr(!2)
    # nextln:           $$rsi = $$rbx
    # nextln: 0268:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0269:     $$rcx = MovRZ
    # nextln: 0270:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0271:     $$rcx = Setcc(E) $$rcx
    # nextln: 0272:     $$r14 = AluRRm(S32, And) $$r14, $$rcx
    # nextln: 0273:     AluRRm(S32, Test) $$r14, $$r14
    # nextln: 0274:     Jumpcc(Ne, block3, block4)
    # nextln:       block3:
    # nextln:           $$rax = MovRmS32(1)
    # nextln: 0275:     Ret $$rax
    # nextln:       block4:
    # nextln:           $$rax = $$rbx
    # nextln: 0276:     Ret $$rax

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i32 = iconst 1
    %5:i64 = iext %4
    %6:i64 = sfill 32 %5
    %7:i32 = iconst 3
    %8:ptr = stackslot 8:8
    %9:i32 = iconst 64
    %10:ptr = stackslot 8:8
    %11:i32 = iconst 32
    %12:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %14:ptr = stackslot 2:2
    %15:ptr = stackslot 2:2
    %16:i32 = iconst 16
    %17:ptr = stackslot 2:2
    %18:i32 = iconst 15
    %19:ptr = stackslot 1:1
    %20:ptr = stackslot 1:1
    %21:i32 = iconst 8
    %22:ptr = stackslot 1:1
    %23:ctrl = store.1 %1, %3, %22
    %24:ctrl = store.1 %23, %3, %20
    %25:ctrl = store.1 %24, %3, %19
    %26:ctrl = store.2 %25, %3, %17
    %27:ctrl = store.2 %26, %3, %15
    %28:ctrl = store.2 %27, %3, %14
    %29:ctrl = store.4 %28, %3, %13
    %30:ctrl = store.4 %29, %3, %12
    %31:i32 = iconst 7
    %32:i32 = iconst 2
    %33:i64 = iext %32
    %34:i64 = sfill 32 %33
    %35:i32 = iconst 4294934528
    %36:i32 = iconst 4294967168
    %37:i64 = iconst 0
    %38:ctrl = store.8 %30, %37, %10
    %39:ctrl = store.8 %38, %37, %8
    %40:ctrl, %41:phisel = region %39
    %42:ctrl = store.1 %40, %36, %22
    %43:ctrl = store.1 %42, %4, %20
    %44:ctrl = store.1 %43, %32, %19
    %45:ctrl = store.2 %44, %35, %17
    %46:ctrl = store.2 %45, %4, %15
    %47:ctrl = store.2 %46, %32, %14
    %48:ctrl = store.4 %47, %4, %13
    %49:ctrl = store.4 %48, %32, %12
    %50:ctrl = store.8 %49, %6, %10
    %51:ctrl = store.8 %50, %34, %8
    %52:ctrl, %53:i32 = load.1 %51, %22
    %54:i32 = sfill 8 %53
    %55:ctrl, %56:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %52, %54, %31
    %57:ctrl, %58:i32 = load.1 %55, %22
    %59:i32 = sfill 8 %58
    %60:ctrl, %61:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %57, %59, %21
    %62:ctrl, %63:i32 = load.1 %60, %20
    %64:i32 = sfill 8 %63
    %65:ctrl, %66:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %62, %64, %3
    %67:ctrl, %68:i32 = load.1 %65, %20
    %69:i32 = sfill 8 %68
    %70:ctrl, %71:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %67, %69, %21
    %72:ctrl, %73:i32 = load.1 %70, %20
    %74:i32 = sfill 8 %73
    %75:ctrl, %76:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %72, %74, %11
    %77:ctrl, %78:i32 = load.1 %75, %19
    %79:i32 = sfill 8 %78
    %80:ctrl, %81:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %77, %79, %3
    %82:ctrl, %83:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %80, %22, %31
    %84:ctrl, %85:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %82, %22, %21
    %86:ctrl, %87:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %84, %20, %3
    %88:ctrl, %89:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %86, %20, %21
    %90:ctrl, %91:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %88, %20, %11
    %92:ctrl, %93:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %90, %19, %3
    %94:ctrl, %95:i32 = load.2 %92, %17
    %96:i32 = sfill 16 %95
    %97:ctrl, %98:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %94, %96, %18
    %99:ctrl, %100:i32 = load.2 %97, %17
    %101:i32 = sfill 16 %100
    %102:ctrl, %103:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %99, %101, %16
    %104:ctrl, %105:i32 = load.2 %102, %15
    %106:i32 = sfill 16 %105
    %107:ctrl, %108:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %104, %106, %3
    %109:ctrl, %110:i32 = load.2 %107, %15
    %111:i32 = sfill 16 %110
    %112:ctrl, %113:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %109, %111, %16
    %114:ctrl, %115:i32 = load.2 %112, %15
    %116:i32 = sfill 16 %115
    %117:ctrl, %118:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %114, %116, %11
    %119:ctrl, %120:i32 = load.2 %117, %14
    %121:i32 = sfill 16 %120
    %122:ctrl, %123:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %119, %121, %3
    %124:ctrl, %125:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %122, %17, %18
    %126:ctrl, %127:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %124, %17, %16
    %128:ctrl, %129:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %126, %15, %3
    %130:ctrl, %131:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %128, %15, %16
    %132:ctrl, %133:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %130, %15, %11
    %134:ctrl, %135:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %132, %14, %3
    %136:ctrl, %137:i32 = load.4 %134, %13
    %138:ctrl, %139:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %136, %137, %3
    %140:ctrl, %141:i32 = load.4 %138, %13
    %142:ctrl, %143:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %140, %141, %11
    %144:ctrl, %145:i32 = load.4 %142, %12
    %146:ctrl, %147:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %144, %145, %3
    %148:ctrl, %149:i32 = load.4 %146, %13
    %150:ctrl, %151:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %148, %149, %3
    %152:ctrl, %153:i32 = load.4 %150, %13
    %154:ctrl, %155:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %152, %153, %11
    %156:ctrl, %157:i32 = load.4 %154, %12
    %158:ctrl, %159:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %156, %157, %3
    %160:ctrl, %161:i32 = load.4 %158, %13
    %162:ctrl, %163:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %160, %161, %3
    %164:ctrl, %165:i32 = load.4 %162, %13
    %166:ctrl, %167:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %164, %165, %11
    %168:ctrl, %169:i32 = load.4 %166, %12
    %170:ctrl, %171:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %168, %169, %3
    %172:ctrl, %173:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %170, %13, %3
    %174:ctrl, %175:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %172, %13, %11
    %176:ctrl, %177:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %174, %12, %3
    %178:ctrl, %179:i64 = load.8 %176, %10
    %180:ctrl, %181:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %178, %179, %3
    %182:ctrl, %183:i64 = load.8 %180, %10
    %184:ctrl, %185:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %182, %183, %11
    %186:ctrl, %187:i64 = load.8 %184, %10
    %188:ctrl, %189:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %186, %187, %9
    %190:ctrl, %191:i64 = load.8 %188, %8
    %192:ctrl, %193:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %190, %191, %3
    %194:ctrl, %195:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %192, %10, %3
    %196:ctrl, %197:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %194, %10, %11
    %198:ctrl, %199:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %196, %10, %9
    %200:ctrl, %201:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %198, %8, %3
    %202:i32 = icmp eq %201, %3
    %203:i32 = icmp eq %197, %3
    %204:i32 = icmp eq %193, %3
    %205:i32 = icmp eq %185, %3
    %206:i32 = icmp eq %177, %3
    %207:i32 = icmp eq %171, %7
    %208:i32 = icmp eq %167, %3
    %209:i32 = icmp eq %163, %3
    %210:i32 = icmp eq %155, %3
    %211:i32 = icmp eq %151, %3
    %212:i32 = icmp eq %147, %3
    %213:i32 = icmp eq %135, %3
    %214:i32 = icmp eq %131, %3
    %215:i32 = icmp eq %123, %3
    %216:i32 = icmp eq %113, %3
    %217:i32 = icmp eq %93, %3
    %218:i32 = icmp eq %89, %3
    %219:i32 = icmp eq %81, %3
    %220:i32 = icmp eq %71, %3
    %221:i32 = and %4, %56
    %222:i32 = and %221, %61
    %223:i32 = and %222, %66
    %224:i32 = and %223, %220
    %225:i32 = and %224, %76
    %226:i32 = and %225, %219
    %227:i32 = and %226, %83
    %228:i32 = and %227, %85
    %229:i32 = and %228, %87
    %230:i32 = and %229, %218
    %231:i32 = and %230, %91
    %232:i32 = and %231, %217
    %233:i32 = and %232, %98
    %234:i32 = and %233, %103
    %235:i32 = and %234, %108
    %236:i32 = and %235, %216
    %237:i32 = and %236, %118
    %238:i32 = and %237, %215
    %239:i32 = and %238, %125
    %240:i32 = and %239, %127
    %241:i32 = and %240, %129
    %242:i32 = and %241, %214
    %243:i32 = and %242, %133
    %244:i32 = and %243, %213
    %245:i32 = and %244, %139
    %246:i32 = and %245, %143
    %247:i32 = and %246, %212
    %248:i32 = and %247, %211
    %249:i32 = and %248, %210
    %250:i32 = and %249, %159
    %251:i32 = and %250, %209
    %252:i32 = and %251, %208
    %253:i32 = and %252, %207
    %254:i32 = and %253, %173
    %255:i32 = and %254, %175
    %256:i32 = and %255, %206
    %257:i32 = and %256, %181
    %258:i32 = and %257, %205
    %259:i32 = and %258, %189
    %260:i32 = and %259, %204
    %261:i32 = and %260, %195
    %262:i32 = and %261, %203
    %263:i32 = and %262, %199
    %264:i32 = and %263, %202
    %265:ctrl, %266:ctrl = brcond %200, %264
    %267:ctrl, %268:phisel = region %265
    return %267, %4
    %269:ctrl, %270:phisel = region %266
    return %269, %3
}
