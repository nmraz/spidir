# run: codegen

func @icmp_eq64_64:i64(i64, i64) {
    # check: function `icmp_eq64_64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 48 3b fe                        cmp rdi, rsi
    # nextln: 000009: 0f 94 c0                        sete al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_eq64_32:i32(i64, i64) {
    # check: function `icmp_eq64_32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 48 3b fe                        cmp rdi, rsi
    # nextln: 000009: 0f 94 c0                        sete al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i32 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_eq32_64:i64(i32, i32) {
    # check: function `icmp_eq32_64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 3b fe                           cmp edi, esi
    # nextln: 000008: 0f 94 c0                        sete al
    # nextln: 00000b: 5d                              pop rbp
    # nextln: 00000c: c3                              ret

    %c:ctrl, %a:i32, %b:i32 = entry
    %icmp:i64 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_ne64_64:i64(i64, i64) {
    # check: function `icmp_ne64_64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 48 3b fe                        cmp rdi, rsi
    # nextln: 000009: 0f 95 c0                        setne al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ne %a, %b
    return %c, %icmp
}

func @icmp_slt64_64:i64(i64, i64) {
    # check: function `icmp_slt64_64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 48 3b fe                        cmp rdi, rsi
    # nextln: 000009: 0f 9c c0                        setl al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp slt %a, %b
    return %c, %icmp
}

func @icmp_sle64_64:i64(i64, i64) {
    # check: function `icmp_sle64_64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 48 3b fe                        cmp rdi, rsi
    # nextln: 000009: 0f 9e c0                        setle al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp sle %a, %b
    return %c, %icmp
}

func @icmp_ult64_64:i64(i64, i64) {
    # check: function `icmp_ult64_64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 48 3b fe                        cmp rdi, rsi
    # nextln: 000009: 0f 92 c0                        setb al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ult %a, %b
    return %c, %icmp
}

func @icmp_ule64_64:i64(i64, i64) {
    # check: function `icmp_ule64_64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 48 3b fe                        cmp rdi, rsi
    # nextln: 000009: 0f 96 c0                        setbe al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ule %a, %b
    return %c, %icmp
}
