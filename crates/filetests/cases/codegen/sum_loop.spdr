# run: codegen

func @sum_to_n:i32(i32) {
    # check: function `sum_to_n`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: b8 00 00 00 00                  mov eax, 0
    # nextln: 000009: 3b f8                           cmp edi, eax
    # nextln: 00000b: 0f 84 05 00 00 00               je 0x16
    # nextln: 000011: e9 05 00 00 00                  jmp 0x1b
    # nextln: 000016: e9 22 00 00 00                  jmp 0x3d
    # nextln: 00001b: b9 01 00 00 00                  mov ecx, 1
    # nextln: 000020: 48 89 c2                        mov rdx, rax
    # nextln: 000023: 48 89 fe                        mov rsi, rdi
    # nextln: 000026: 2b f1                           sub esi, ecx
    # nextln: 000028: 03 d7                           add edx, edi
    # nextln: 00002a: 3b f0                           cmp esi, eax
    # nextln: 00002c: 0f 84 08 00 00 00               je 0x3a
    # nextln: 000032: 48 89 f7                        mov rdi, rsi
    # nextln: 000035: e9 e9 ff ff ff                  jmp 0x23
    # nextln: 00003a: 48 89 d0                        mov rax, rdx
    # nextln: 00003d: 5d                              pop rbp
    # nextln: 00003e: c3                              ret

    %0:ctrl, %1:i32 = entry
    %10:i32 = iconst 1
    %2:i32 = iconst 0
    %3:i32 = icmp eq %1, %2
    %4:ctrl, %5:ctrl = brcond %0, %3
    %13:i32 = icmp eq %11, %2
    %14:ctrl, %15:ctrl = brcond %6, %13
    %16:ctrl, %17:phisel = region %4, %14
    %6:ctrl, %7:phisel = region %5, %15
    %8:i32 = phi %7, %1, %11
    %11:i32 = isub %8, %10
    %9:i32 = phi %7, %2, %12
    %12:i32 = iadd %9, %8
    %18:i32 = phi %17, %2, %12
    return %16, %18
}


func @sum_to_n_with_stack:i32(i32) {
    # check: function `sum_to_n_with_stack`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: b8 00 00 00 00                  mov eax, 0
    # nextln: 00000d: 89 3c 24                        mov dword ptr [rsp], edi
    # nextln: 000010: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000014: b9 01 00 00 00                  mov ecx, 1
    # nextln: 000019: 8b 14 24                        mov edx, dword ptr [rsp]
    # nextln: 00001c: 3b d0                           cmp edx, eax
    # nextln: 00001e: 0f 84 1a 00 00 00               je 0x3e
    # nextln: 000024: 8b 34 24                        mov esi, dword ptr [rsp]
    # nextln: 000027: 48 89 f2                        mov rdx, rsi
    # nextln: 00002a: 2b d1                           sub edx, ecx
    # nextln: 00002c: 8b 7c 24 04                     mov edi, dword ptr [rsp + 4]
    # nextln: 000030: 03 fe                           add edi, esi
    # nextln: 000032: 89 14 24                        mov dword ptr [rsp], edx
    # nextln: 000035: 89 7c 24 04                     mov dword ptr [rsp + 4], edi
    # nextln: 000039: e9 db ff ff ff                  jmp 0x19
    # nextln: 00003e: 8b 44 24 04                     mov eax, dword ptr [rsp + 4]
    # nextln: 000042: 48 83 c4 10                     add rsp, 0x10
    # nextln: 000046: 5d                              pop rbp
    # nextln: 000047: c3                              ret

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %5:ptr = stackslot 4:4
    %4:ptr = stackslot 4:4
    %6:ctrl = store.4 %2, %1, %4
    %24:i32 = iconst 1
    %7:i32 = iconst 0
    %8:ctrl = store.4 %6, %7, %5
    %13:i32 = icmp eq %12, %7
    %18:ctrl, %19:ctrl = brcond %11, %13
    %14:ctrl, %15:phisel = region %18
    %29:ctrl, %30:i32 = load.4 %14, %5
    return %29, %30
    %16:ctrl, %17:phisel = region %19
    %20:ctrl, %21:i32 = load.4 %16, %4
    %22:ctrl, %23:i32 = load.4 %20, %5
    %25:i32 = isub %21, %24
    %27:ctrl = store.4 %22, %25, %4
    %26:i32 = iadd %23, %21
    %28:ctrl = store.4 %27, %26, %5
    %9:ctrl, %10:phisel = region %8, %28
    %11:ctrl, %12:i32 = load.4 %9, %4
}
