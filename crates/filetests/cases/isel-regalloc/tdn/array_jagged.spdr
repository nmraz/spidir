# run: isel-regalloc[small-pic, large-abs]

extfunc @malloc:ptr(i64)

func @gc_new:ptr(i32, i64) {
    # check: function `gc_new`:
    # nextln: clobbers: rax, rcx, rdx, rdi, rsi, r8, r9, r10, r11
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rdi = $$rsi
    # nextln: 0000:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln: 0001:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0002:     Ret $$rax

    %c:ctrl, %type_id:i32, %size:i64 = entry
    %c1:ctrl, %p:ptr = call @malloc %c, %size
    return %c1, %p
}

func @throw_index_out_of_range_exception() {
    # check: function `throw_index_out_of_range_exception`:
    # nextln: clobbers: 
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln: 0000:     Ret

    %0:ctrl = entry
    return %0
}

func @"System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, r12, r13, r14, r15
    # nextln: frame: size 88, align 8
    # nextln:     !0: 0
    # nextln:     spill0: 8
    # nextln:     spill1: 16
    # nextln:     spill2: 24
    # nextln:     spill3: 32
    # nextln:     spill4: 40
    # nextln:     spill5: 48
    # nextln:     spill6: 56
    # nextln:     spill7: 64
    # nextln:     spill8: 72
    # nextln:     spill9: 80
    # nextln:       block0:
    # nextln: 0000:     Jump(block1)
    # nextln:       block1:
    # nextln: 0001:     $$rax = MovRI(0)
    # nextln: 0002:     MovStackR(!0, S64) $$rax
    # nextln: 0003:     Jump(block2)
    # nextln:       block2:
    # nextln: 0004:     $$rcx = MovRI(2)
    # nextln: 0005:     $$r15 = MovsxRRm(Ext32_64) $$rcx
    # nextln: 0006:     $$rdx = MovRI(4)
    # nextln:           $$rax = $$r15
    # nextln: 0007:     $$rax = AluRRm(S64, Imul) $$rax, $$rdx
    # nextln:           $$rsi = $$rcx
    # nextln:           $$r8 = $$rdx
    # nextln: 0008:     $$rdx = MovRI(8)
    # nextln:           $$rcx = $$r15
    # nextln: 0009:     $$rcx = AluRRm(S64, Imul) $$rcx, $$rdx
    # nextln:           $$r9 = $$rdi
    # nextln:           $$rdi = $$rsi
    # nextln: 0010:     $$rsi = MovRI(20)
    # nextln:           $$r10 = $$rsi
    # nextln: 0011:     $$r10 = AluRRm(S64, Add) $$r10, $$rax
    # nextln:           $$rax = $$r8
    # nextln:           $$r8 = $$r10
    # nextln: 0012:     $$r10 = MovRI(170)
    # nextln:           $$rbx = $$r10
    # nextln:           $$r10 = $$rdx
    # nextln:           $$rdx = $$rbx
    # nextln:           $$rbx = $$rdi
    # nextln:           $$rdi = $$rax
    # nextln:           $$rax = $$r9
    # nextln:           $$r9 = $$r8
    # nextln:           $$r8 = $$rbx
    # nextln:           $$r11 = $$rsi
    # nextln: 0013:     $$rbx = MovRI(24)
    # nextln:           $$rsi = $$rbx
    # nextln: 0014:     $$rsi = AluRRm(S64, Add) $$rsi, $$rcx
    # nextln:           $$rcx = $$rdi
    # nextln:           $$rdi = $$rdx
    # nextln:           $$rdx = $$r9
    # nextln:           $$r9 = $$r11
    # nextln:           $$r11 = $$r10
    # nextln:           $$r10 = $$rbx
    # nextln:           $$rbx = $$r8
    # nextln: 0015:     $$r8 = MovRI(16)
    # nextln: 0016:     $$r14 = MovRI(1)
    # nextln:           $$r13 = $$rbx
    # nextln:           $$rbx = $$r11
    # nextln:           $$r11 = $$r13
    # nextln:           $$r12 = $$r9
    # nextln:           $$r9 = $$rdi
    # nextln: 0017:     $$r13 = MovsxRRm(Ext32_64) $$r14
    # nextln: 0018:     $$rdi = MovRI(171)
    # nextln:           $$spill8 = $$r9
    # nextln:           $$spill4 = $$r13
    # nextln:           $$spill7 = $$r11
    # nextln:           $$spill2 = $$rax
    # nextln:           $$spill0 = $$r12
    # nextln:           $$r12 = $$r8
    # nextln:           $$r13 = $$rbx
    # nextln:           $$rbx = $$rcx
    # nextln:           $$spill3 = $$r10
    # nextln:           $$spill9 = $$rdx
    # nextln: 0019:     $$rax = CallRel(Internal(func0)) $$rdi, $$rsi
    # nextln:           $$rcx = $$rax
    # nextln: 0020:     $$rcx = AluRRm(S64, Add) $$rcx, $$r12
    # nextln: 0021:     MovMR(S32) $$rcx, $$r15
    # nextln: 0022:     MovStackR(!0, S64) $$rax
    # nextln:           $$rdi = $$spill4
    # nextln:           $$rdx = $$r12
    # nextln:           $$r8 = $$spill2
    # nextln:           $$rax = $$r13
    # nextln:           $$rsi = $$rbx
    # nextln:           $$rcx = $$spill3
    # nextln: 0023:     $$r13 = MovRStack(!0, S64)
    # nextln:           $$rbx = $$rdi
    # nextln:           $$r12 = $$rdx
    # nextln:           $$spill2 = $$r8
    # nextln:           $$spill5 = $$rax
    # nextln:           $$spill1 = $$rsi
    # nextln:           $$spill3 = $$rcx
    # nextln:           $$rsi = $$spill9
    # nextln:           $$rdi = $$spill8
    # nextln: 0024:     $$rax = CallRel(Internal(func0)) $$rdi, $$rsi
    # nextln:           $$rcx = $$rax
    # nextln: 0025:     $$rcx = AluRRm(S64, Add) $$rcx, $$r12
    # nextln: 0026:     MovMR(S32) $$rcx, $$r15
    # nextln: 0027:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0028:     AluRRm(S64, Cmp) $$rbx, $$rcx
    # nextln: 0029:     Jumpcc(L, block3, block4)
    # nextln:       block3:
    # nextln:           $$rcx = $$spill1
    # nextln:           $$rcx = $$spill1
    # nextln:           $$rsi = $$rcx
    # nextln: 0030:     $$rsi = AluRRm(S64, Imul) $$rsi, $$rbx
    # nextln:           $$r9 = $$r13
    # nextln: 0031:     $$r9 = AluRRm(S64, Add) $$r9, $$r12
    # nextln:           $$r8 = $$r12
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rdx = $$spill5
    # nextln:           $$rdi = $$spill3
    # nextln:           $$rcx = $$spill0
    # nextln: 0032:     $$rcx = AluRRm(S64, Add) $$rcx, $$rsi
    # nextln:           $$rsi = $$rax
    # nextln: 0033:     $$rsi = AluRRm(S64, Add) $$rsi, $$rcx
    # nextln: 0034:     MovMR(S32) $$rsi, $$r14
    # nextln:           $$rsi = $$r11
    # nextln: 0035:     $$r11 = MovRM(S32) $$r9
    # nextln: 0036:     $$r12 = MovRI(0)
    # nextln:           $$r9 = $$r10
    # nextln:           $$r10 = $$rsi
    # nextln: 0037:     $$r14 = MovsxRRm(Ext32_64) $$r12
    # nextln: 0038:     AluRRm(S64, Cmp) $$r14, $$r11
    # nextln: 0039:     Jumpcc(L, block6, block7)
    # nextln:       block6:
    # nextln:           $$r11 = $$rdx
    # nextln: 0040:     $$r11 = AluRRm(S64, Imul) $$r11, $$r14
    # nextln:           $$rsi = $$rdi
    # nextln: 0041:     $$rsi = AluRRm(S64, Add) $$rsi, $$r11
    # nextln: 0042:     $$r13 = AluRRm(S64, Add) $$r13, $$rsi
    # nextln:           $$rsi = $$r10
    # nextln: 0043:     MovMR(S64) $$r13, $$rax
    # nextln:           $$r13 = $$rbx
    # nextln:           $$rax = $$rdx
    # nextln:           $$rdx = $$rdi
    # nextln:           $$rdi = $$rsi
    # nextln:           $$rsi = $$r9
    # nextln: 0044:     $$rbx = MovRStack(!0, S64)
    # nextln:           $$r12 = $$r8
    # nextln:           $$spill2 = $$rsi
    # nextln:           $$spill6 = $$rcx
    # nextln:           $$spill5 = $$rax
    # nextln:           $$spill3 = $$rdx
    # nextln:           $$spill1 = $$rdi
    # nextln:           $$rdi = $$spill8
    # nextln:           $$rsi = $$spill9
    # nextln: 0045:     $$rax = CallRel(Internal(func0)) $$rdi, $$rsi
    # nextln:           $$rcx = $$spill1
    # nextln:           $$rdx = $$spill2
    # nextln:           $$r10 = $$rax
    # nextln: 0046:     $$r10 = AluRRm(S64, Add) $$r10, $$r12
    # nextln: 0047:     MovMR(S32) $$r10, $$r15
    # nextln:           $$rdi = $$rdx
    # nextln:           $$r11 = $$spill7
    # nextln:           $$rsi = $$r12
    # nextln:           $$r12 = $$spill5
    # nextln:           $$r8 = $$spill3
    # nextln:           $$r9 = $$spill6
    # nextln: 0048:     $$r15 = MovRM(S32) $$r10
    # nextln: 0049:     AluRRm(S64, Cmp) $$r14, $$r15
    # nextln: 0050:     Jumpcc(L, block8, block9)
    # nextln:       block8:
    # nextln:           $$r15 = $$rcx
    # nextln: 0051:     $$r15 = AluRRm(S64, Imul) $$r15, $$r14
    # nextln:           $$r14 = $$rdi
    # nextln:           $$rdi = $$rdx
    # nextln: 0052:     $$rdi = AluRRm(S64, Add) $$rdi, $$r15
    # nextln:           $$r15 = $$r14
    # nextln:           $$r14 = $$rax
    # nextln: 0053:     $$r14 = AluRRm(S64, Add) $$r14, $$rdi
    # nextln: 0054:     MovMR(S32) $$r14, $$r11
    # nextln: 0055:     $$rdi = MovRM(S32) $$r10
    # nextln: 0056:     AluRRm(S64, Cmp) $$r13, $$rdi
    # nextln: 0057:     Jumpcc(L, block10, block11)
    # nextln:       block10:
    # nextln:           $$r10 = $$rbx
    # nextln: 0058:     $$r10 = AluRRm(S64, Add) $$r10, $$rsi
    # nextln:           $$r11 = $$rax
    # nextln: 0059:     $$r11 = AluRRm(S64, Add) $$r11, $$r9
    # nextln: 0060:     $$rdi = MovRI(3)
    # nextln: 0061:     MovMR(S32) $$r11, $$rdi
    # nextln: 0062:     $$rdi = MovRM(S32) $$r10
    # nextln: 0063:     AluRRm(S64, Cmp) $$r13, $$rdi
    # nextln: 0064:     Jumpcc(L, block12, block13)
    # nextln:       block12:
    # nextln: 0065:     $$r12 = AluRRm(S64, Imul) $$r12, $$r13
    # nextln: 0066:     $$r8 = AluRRm(S64, Add) $$r8, $$r12
    # nextln: 0067:     $$rbx = AluRRm(S64, Add) $$rbx, $$r8
    # nextln: 0068:     MovMR(S64) $$rbx, $$rax
    # nextln: 0069:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rdi = $$rax
    # nextln: 0070:     $$rdi = AluRRm(S64, Add) $$rdi, $$rsi
    # nextln: 0071:     $$rdi = MovRM(S32) $$rdi
    # nextln: 0072:     AluRRm(S64, Cmp) $$r13, $$rdi
    # nextln: 0073:     Jumpcc(L, block14, block15)
    # nextln:       block14:
    # nextln: 0074:     $$rax = AluRRm(S64, Add) $$rax, $$r8
    # nextln: 0075:     $$rax = MovRM(S64) $$rax
    # nextln:           $$r8 = $$rax
    # nextln: 0076:     $$r8 = AluRRm(S64, Add) $$r8, $$rsi
    # nextln: 0077:     $$rsi = MovRM(S32) $$r8
    # nextln: 0078:     $$rdi = MovsxRRm(Ext32_64) $$r15
    # nextln: 0079:     AluRRm(S64, Cmp) $$rdi, $$rsi
    # nextln: 0080:     Jumpcc(L, block16, block17)
    # nextln:       block16:
    # nextln: 0081:     $$rcx = AluRRm(S64, Imul) $$rcx, $$rdi
    # nextln: 0082:     $$rdx = AluRRm(S64, Add) $$rdx, $$rcx
    # nextln: 0083:     $$rax = AluRRm(S64, Add) $$rax, $$rdx
    # nextln: 0084:     $$rax = MovRM(S32) $$rax
    # nextln: 0085:     Ret $$rax
    # nextln:       block17:
    # nextln: 0086:     Jump(block5)
    # nextln:       block15:
    # nextln: 0087:     Jump(block5)
    # nextln:       block13:
    # nextln: 0088:     Jump(block5)
    # nextln:       block11:
    # nextln: 0089:     Jump(block5)
    # nextln:       block9:
    # nextln: 0090:     Jump(block5)
    # nextln:       block7:
    # nextln: 0091:     Jump(block5)
    # nextln:       block4:
    # nextln: 0092:     Jump(block5)
    # nextln:       block5:
    # nextln: 0093:     CallRel(Internal(func1))
    # nextln: 0094:     Ud2

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %4:i64 = iext %1
    %5:i64 = sfill 32 %4
    %6:i64 = iconst 4
    %7:i64 = imul %6, %5
    %8:i64 = iconst 20
    %9:i64 = iadd %8, %7
    %10:i64 = iconst 16
    %11:i32 = iconst 1
    %12:i64 = iext %11
    %13:i64 = sfill 32 %12
    %14:i64 = imul %6, %13
    %15:i64 = iadd %8, %14
    %16:i64 = iconst 8
    %17:i64 = imul %16, %13
    %18:i64 = iconst 24
    %19:i64 = iadd %18, %17
    %20:ptr = stackslot 8:8
    %21:i32 = iconst 3
    %22:i32 = iconst 0
    %23:i64 = iext %22
    %24:i64 = sfill 32 %23
    %27:i64 = imul %16, %24
    %28:i64 = iadd %18, %27
    %25:i64 = imul %6, %24
    %26:i64 = iadd %8, %25
    %29:i32 = iconst 2
    %30:i64 = iext %29
    %31:i64 = sfill 32 %30
    %34:i64 = imul %31, %16
    %35:i64 = iadd %18, %34
    %32:i64 = imul %31, %6
    %33:i64 = iadd %8, %32
    %36:i32 = iconst 170
    %37:i32 = iconst 171
    %38:ptr = iconst 0
    %39:ctrl = store.8 %2, %38, %20
    %40:ctrl, %41:phisel = region %39
    %42:ctrl, %43:ptr = call @gc_new %40, %37, %35
    %44:ptr = ptroff %43, %10
    %45:ctrl = store.4 %42, %31, %44
    %46:ctrl = store.8 %45, %43, %20
    %47:ctrl, %48:ptr = load.8 %46, %20
    %49:ctrl, %50:ptr = call @gc_new %47, %36, %33
    %52:ptr = ptroff %50, %10
    %53:ctrl = store.4 %49, %31, %52
    %54:ctrl, %55:i64 = load.4 %53, %52
    %56:i64 = icmp slt %13, %55
    %57:ctrl, %58:ctrl = brcond %54, %56
    %59:ctrl, %60:phisel = region %57
    %51:ptr = ptroff %50, %15
    %61:ctrl = store.4 %59, %11, %51
    %63:ptr = ptroff %48, %10
    %64:ctrl, %65:i64 = load.4 %61, %63
    %66:i64 = icmp slt %24, %65
    %67:ctrl, %68:ctrl = brcond %64, %66
    %69:ctrl, %70:phisel = region %67
    %62:ptr = ptroff %48, %28
    %71:ctrl = store.8 %69, %50, %62
    %72:ctrl, %73:ptr = load.8 %71, %20
    %74:ctrl, %75:ptr = call @gc_new %72, %36, %33
    %78:ptr = ptroff %75, %10
    %79:ctrl = store.4 %74, %31, %78
    %80:ctrl, %81:i64 = load.4 %79, %78
    %82:i64 = icmp slt %24, %81
    %83:ctrl, %84:ctrl = brcond %80, %82
    %85:ctrl, %86:phisel = region %83
    %77:ptr = ptroff %75, %26
    %87:ctrl = store.4 %85, %29, %77
    %88:ctrl, %89:i64 = load.4 %87, %78
    %90:i64 = icmp slt %13, %89
    %91:ctrl, %92:ctrl = brcond %88, %90
    %93:ctrl, %94:phisel = region %91
    %76:ptr = ptroff %75, %15
    %95:ctrl = store.4 %93, %21, %76
    %97:ptr = ptroff %73, %10
    %98:ctrl, %99:i64 = load.4 %95, %97
    %100:i64 = icmp slt %13, %99
    %101:ctrl, %102:ctrl = brcond %98, %100
    %103:ctrl, %104:phisel = region %101
    %96:ptr = ptroff %73, %19
    %105:ctrl = store.8 %103, %75, %96
    %106:ctrl, %107:ptr = load.8 %105, %20
    %109:ptr = ptroff %107, %10
    %110:ctrl, %111:i64 = load.4 %106, %109
    %112:i64 = icmp slt %13, %111
    %113:ctrl, %114:ctrl = brcond %110, %112
    %115:ctrl, %116:phisel = region %113
    %108:ptr = ptroff %107, %19
    %117:ctrl, %118:ptr = load.8 %115, %108
    %120:ptr = ptroff %118, %10
    %121:ctrl, %122:i64 = load.4 %117, %120
    %123:i64 = icmp slt %5, %122
    %124:ctrl, %125:ctrl = brcond %121, %123
    %126:ctrl, %127:phisel = region %124
    %130:ctrl, %131:phisel = region %58, %68, %84, %92, %102, %114, %125
    %132:ctrl = call @throw_index_out_of_range_exception %130
    unreachable %132
    %119:ptr = ptroff %118, %9
    %128:ctrl, %129:i32 = load.4 %126, %119
    return %128, %129
}
