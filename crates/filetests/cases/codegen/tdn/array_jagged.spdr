# run: codegen

extfunc @malloc:ptr(i64)

func @gc_new:ptr(i32, i64) {
    # check: function `gc_new`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f7                        mov rdi, rsi
    # nextln: 000007: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @malloc + 0
    # nextln: 000011: ff d0                           call rax
    # nextln: 000013: 5d                              pop rbp
    # nextln: 000014: c3                              ret

    %c:ctrl, %type_id:i32, %size:i64 = entry
    %c1:ctrl, %p:ptr = call @malloc %c, %size
    return %c1, %p
}

func @throw_index_out_of_range_exception() {
    # check: function `throw_index_out_of_range_exception`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl = entry
    return %0
}

func @"System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 83 ec 68                     sub rsp, 0x68
    # nextln: 000011: 33 c0                           xor eax, eax
    # nextln: 000013: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 000017: b8 02 00 00 00                  mov eax, 2
    # nextln: 00001c: 4c 63 e0                        movsxd r12, eax
    # nextln: 00001f: 48 89 fa                        mov rdx, rdi
    # nextln: 000022: b9 04 00 00 00                  mov ecx, 4
    # nextln: 000027: 49 6b fc 04                     imul rdi, r12, 4
    # nextln: 00002b: 48 89 ce                        mov rsi, rcx
    # nextln: 00002e: 41 b8 08 00 00 00               mov r8d, 8
    # nextln: 000034: 49 6b cc 08                     imul rcx, r12, 8
    # nextln: 000038: 49 89 f1                        mov r9, rsi
    # nextln: 00003b: 48 89 d6                        mov rsi, rdx
    # nextln: 00003e: 48 89 c2                        mov rdx, rax
    # nextln: 000041: b8 14 00 00 00                  mov eax, 0x14
    # nextln: 000046: 4d 89 c2                        mov r10, r8
    # nextln: 000049: 4d 89 c8                        mov r8, r9
    # nextln: 00004c: 49 89 f1                        mov r9, rsi
    # nextln: 00004f: 4c 89 d6                        mov rsi, r10
    # nextln: 000052: 49 89 c2                        mov r10, rax
    # nextln: 000055: 4c 03 d7                        add r10, rdi
    # nextln: 000058: 48 89 f7                        mov rdi, rsi
    # nextln: 00005b: 4c 89 ce                        mov rsi, r9
    # nextln: 00005e: 4d 89 c1                        mov r9, r8
    # nextln: 000061: 49 89 d0                        mov r8, rdx
    # nextln: 000064: 4c 89 d2                        mov rdx, r10
    # nextln: 000067: 41 ba aa 00 00 00               mov r10d, 0xaa
    # nextln: 00006d: 4d 89 c3                        mov r11, r8
    # nextln: 000070: 49 89 c0                        mov r8, rax
    # nextln: 000073: 4c 89 c8                        mov rax, r9
    # nextln: 000076: 4d 89 d1                        mov r9, r10
    # nextln: 000079: 49 89 d2                        mov r10, rdx
    # nextln: 00007c: 48 89 f2                        mov rdx, rsi
    # nextln: 00007f: bb 18 00 00 00                  mov ebx, 0x18
    # nextln: 000084: 48 89 de                        mov rsi, rbx
    # nextln: 000087: 48 03 f1                        add rsi, rcx
    # nextln: 00008a: 48 89 d9                        mov rcx, rbx
    # nextln: 00008d: 41 bd 01 00 00 00               mov r13d, 1
    # nextln: 000093: 4c 89 d3                        mov rbx, r10
    # nextln: 000096: 4d 89 c2                        mov r10, r8
    # nextln: 000099: 4d 89 d8                        mov r8, r11
    # nextln: 00009c: 4d 89 cb                        mov r11, r9
    # nextln: 00009f: 49 89 c9                        mov r9, rcx
    # nextln: 0000a2: 48 89 f9                        mov rcx, rdi
    # nextln: 0000a5: 4d 63 f5                        movsxd r14, r13d
    # nextln: 0000a8: bf ab 00 00 00                  mov edi, 0xab
    # nextln: 0000ad: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 0000b2: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 0000b7: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 0000bc: 4c 89 4c 24 20                  mov qword ptr [rsp + 0x20], r9
    # nextln: 0000c1: 4d 89 d7                        mov r15, r10
    # nextln: 0000c4: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 0000c9: 48 89 5c 24 48                  mov qword ptr [rsp + 0x48], rbx
    # nextln: 0000ce: 4c 89 c3                        mov rbx, r8
    # nextln: 0000d1: e8 00 00 00 00                  call 0xd6  # RELOC_PC32 -> @gc_new + -4
    # nextln: 0000d6: 48 89 c1                        mov rcx, rax
    # nextln: 0000d9: 48 83 c1 10                     add rcx, 0x10
    # nextln: 0000dd: 44 89 21                        mov dword ptr [rcx], r12d
    # nextln: 0000e0: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 0000e4: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 0000e9: 4c 8b 4c 24 40                  mov r9, qword ptr [rsp + 0x40]
    # nextln: 0000ee: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 0000f3: 48 89 d9                        mov rcx, rbx
    # nextln: 0000f6: 4c 89 f8                        mov rax, r15
    # nextln: 0000f9: 48 8b 7c 24 18                  mov rdi, qword ptr [rsp + 0x18]
    # nextln: 0000fe: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000103: 4c 8b 3c 24                     mov r15, qword ptr [rsp]
    # nextln: 000107: 4c 89 cb                        mov rbx, r9
    # nextln: 00010a: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 00010f: 48 89 44 24 08                  mov qword ptr [rsp + 8], rax
    # nextln: 000114: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 000119: 48 89 df                        mov rdi, rbx
    # nextln: 00011c: e8 00 00 00 00                  call 0x121  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000121: 48 89 c1                        mov rcx, rax
    # nextln: 000124: 48 83 c1 10                     add rcx, 0x10
    # nextln: 000128: 44 89 21                        mov dword ptr [rcx], r12d
    # nextln: 00012b: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 00012d: 4c 3b f1                        cmp r14, rcx
    # nextln: 000130: 0f 8d ae 01 00 00               jge 0x2e4
    # nextln: 000136: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 00013b: 48 89 ce                        mov rsi, rcx
    # nextln: 00013e: 49 0f af f6                     imul rsi, r14
    # nextln: 000142: 4c 89 fa                        mov rdx, r15
    # nextln: 000145: 48 83 c2 10                     add rdx, 0x10
    # nextln: 000149: 48 89 df                        mov rdi, rbx
    # nextln: 00014c: 48 8b 5c 24 20                  mov rbx, qword ptr [rsp + 0x20]
    # nextln: 000151: 4c 8b 44 24 38                  mov r8, qword ptr [rsp + 0x38]
    # nextln: 000156: 48 8b 4c 24 08                  mov rcx, qword ptr [rsp + 8]
    # nextln: 00015b: 4c 8b 54 24 18                  mov r10, qword ptr [rsp + 0x18]
    # nextln: 000160: 4c 8b 4c 24 28                  mov r9, qword ptr [rsp + 0x28]
    # nextln: 000165: 49 89 cb                        mov r11, rcx
    # nextln: 000168: 4c 03 de                        add r11, rsi
    # nextln: 00016b: 48 89 c6                        mov rsi, rax
    # nextln: 00016e: 49 03 f3                        add rsi, r11
    # nextln: 000171: 44 89 2e                        mov dword ptr [rsi], r13d
    # nextln: 000174: 4c 8b 6c 24 10                  mov r13, qword ptr [rsp + 0x10]
    # nextln: 000179: 4c 89 c6                        mov rsi, r8
    # nextln: 00017c: 4d 89 c8                        mov r8, r9
    # nextln: 00017f: 4d 89 d1                        mov r9, r10
    # nextln: 000182: 4d 89 da                        mov r10, r11
    # nextln: 000185: 44 8b 1a                        mov r11d, dword ptr [rdx]
    # nextln: 000188: 33 d2                           xor edx, edx
    # nextln: 00018a: 48 89 74 24 50                  mov qword ptr [rsp + 0x50], rsi
    # nextln: 00018f: 4c 89 c6                        mov rsi, r8
    # nextln: 000192: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 000197: 4c 63 ea                        movsxd r13, edx
    # nextln: 00019a: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 00019f: 4d 3b eb                        cmp r13, r11
    # nextln: 0001a2: 0f 8d 3c 01 00 00               jge 0x2e4
    # nextln: 0001a8: 49 89 d3                        mov r11, rdx
    # nextln: 0001ab: 48 89 f2                        mov rdx, rsi
    # nextln: 0001ae: 49 0f af d5                     imul rdx, r13
    # nextln: 0001b2: 4c 89 5c 24 10                  mov qword ptr [rsp + 0x10], r11
    # nextln: 0001b7: 49 89 db                        mov r11, rbx
    # nextln: 0001ba: 4c 03 da                        add r11, rdx
    # nextln: 0001bd: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 0001c2: 4d 03 fb                        add r15, r11
    # nextln: 0001c5: 49 89 d3                        mov r11, rdx
    # nextln: 0001c8: 4c 89 d2                        mov rdx, r10
    # nextln: 0001cb: 4d 89 ca                        mov r10, r9
    # nextln: 0001ce: 49 89 f1                        mov r9, rsi
    # nextln: 0001d1: 4c 89 de                        mov rsi, r11
    # nextln: 0001d4: 49 89 07                        mov qword ptr [r15], rax
    # nextln: 0001d7: 4c 89 c0                        mov rax, r8
    # nextln: 0001da: 49 89 f0                        mov r8, rsi
    # nextln: 0001dd: 4c 89 d6                        mov rsi, r10
    # nextln: 0001e0: 4d 89 cb                        mov r11, r9
    # nextln: 0001e3: 49 89 d1                        mov r9, rdx
    # nextln: 0001e6: 48 89 ca                        mov rdx, rcx
    # nextln: 0001e9: 4c 89 d9                        mov rcx, r11
    # nextln: 0001ec: 4c 8b 3c 24                     mov r15, qword ptr [rsp]
    # nextln: 0001f0: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 0001f5: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 0001fa: 48 89 44 24 38                  mov qword ptr [rsp + 0x38], rax
    # nextln: 0001ff: 48 89 54 24 08                  mov qword ptr [rsp + 8], rdx
    # nextln: 000204: 4c 89 4c 24 30                  mov qword ptr [rsp + 0x30], r9
    # nextln: 000209: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 00020e: e8 00 00 00 00                  call 0x213  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000213: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000218: 4c 8b 54 24 38                  mov r10, qword ptr [rsp + 0x38]
    # nextln: 00021d: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000222: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000227: 49 89 c1                        mov r9, rax
    # nextln: 00022a: 49 83 c1 10                     add r9, 0x10
    # nextln: 00022e: 45 89 21                        mov dword ptr [r9], r12d
    # nextln: 000231: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000236: 4c 8b 44 24 30                  mov r8, qword ptr [rsp + 0x30]
    # nextln: 00023b: 45 8b 19                        mov r11d, dword ptr [r9]
    # nextln: 00023e: 4d 3b eb                        cmp r13, r11
    # nextln: 000241: 0f 8d 9d 00 00 00               jge 0x2e4
    # nextln: 000247: 49 89 cb                        mov r11, rcx
    # nextln: 00024a: 4d 0f af dd                     imul r11, r13
    # nextln: 00024e: 49 89 fc                        mov r12, rdi
    # nextln: 000251: 4d 03 e3                        add r12, r11
    # nextln: 000254: 49 89 c3                        mov r11, rax
    # nextln: 000257: 4d 03 dc                        add r11, r12
    # nextln: 00025a: 45 89 13                        mov dword ptr [r11], r10d
    # nextln: 00025d: 45 8b 09                        mov r9d, dword ptr [r9]
    # nextln: 000260: 4d 3b f1                        cmp r14, r9
    # nextln: 000263: 0f 8d 7b 00 00 00               jge 0x2e4
    # nextln: 000269: 4d 89 f9                        mov r9, r15
    # nextln: 00026c: 49 83 c1 10                     add r9, 0x10
    # nextln: 000270: 49 89 c2                        mov r10, rax
    # nextln: 000273: 4d 03 d0                        add r10, r8
    # nextln: 000276: 41 b8 03 00 00 00               mov r8d, 3
    # nextln: 00027c: 45 89 02                        mov dword ptr [r10], r8d
    # nextln: 00027f: 45 8b 01                        mov r8d, dword ptr [r9]
    # nextln: 000282: 4d 3b f0                        cmp r14, r8
    # nextln: 000285: 0f 8d 59 00 00 00               jge 0x2e4
    # nextln: 00028b: 49 0f af f6                     imul rsi, r14
    # nextln: 00028f: 48 03 de                        add rbx, rsi
    # nextln: 000292: 4c 03 fb                        add r15, rbx
    # nextln: 000295: 49 89 07                        mov qword ptr [r15], rax
    # nextln: 000298: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00029c: 48 89 c6                        mov rsi, rax
    # nextln: 00029f: 48 83 c6 10                     add rsi, 0x10
    # nextln: 0002a3: 8b 36                           mov esi, dword ptr [rsi]
    # nextln: 0002a5: 4c 3b f6                        cmp r14, rsi
    # nextln: 0002a8: 0f 8d 36 00 00 00               jge 0x2e4
    # nextln: 0002ae: 48 03 c3                        add rax, rbx
    # nextln: 0002b1: 48 8b 00                        mov rax, qword ptr [rax]
    # nextln: 0002b4: 48 89 c6                        mov rsi, rax
    # nextln: 0002b7: 48 83 c6 10                     add rsi, 0x10
    # nextln: 0002bb: 8b 36                           mov esi, dword ptr [rsi]
    # nextln: 0002bd: 48 63 d2                        movsxd rdx, edx
    # nextln: 0002c0: 48 3b d6                        cmp rdx, rsi
    # nextln: 0002c3: 0f 8d 1b 00 00 00               jge 0x2e4
    # nextln: 0002c9: 48 0f af ca                     imul rcx, rdx
    # nextln: 0002cd: 48 03 f9                        add rdi, rcx
    # nextln: 0002d0: 48 03 c7                        add rax, rdi
    # nextln: 0002d3: 8b 00                           mov eax, dword ptr [rax]
    # nextln: 0002d5: 48 83 c4 68                     add rsp, 0x68
    # nextln: 0002d9: 5b                              pop rbx
    # nextln: 0002da: 41 5c                           pop r12
    # nextln: 0002dc: 41 5d                           pop r13
    # nextln: 0002de: 41 5e                           pop r14
    # nextln: 0002e0: 41 5f                           pop r15
    # nextln: 0002e2: 5d                              pop rbp
    # nextln: 0002e3: c3                              ret
    # nextln: 0002e4: e8 00 00 00 00                  call 0x2e9  # RELOC_PC32 -> @throw_index_out_of_range_exception + -4
    # nextln: 0002e9: 0f 0b                           ud2

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %4:i64 = iext %1
    %5:i64 = sfill 32 %4
    %6:i64 = iconst 4
    %7:i64 = imul %6, %5
    %8:i64 = iconst 20
    %9:i64 = iadd %8, %7
    %10:i64 = iconst 16
    %11:i32 = iconst 1
    %12:i64 = iext %11
    %13:i64 = sfill 32 %12
    %14:i64 = imul %6, %13
    %15:i64 = iadd %8, %14
    %16:i64 = iconst 8
    %17:i64 = imul %16, %13
    %18:i64 = iconst 24
    %19:i64 = iadd %18, %17
    %20:ptr = stackslot 8:8
    %21:i32 = iconst 3
    %22:i32 = iconst 0
    %23:i64 = iext %22
    %24:i64 = sfill 32 %23
    %27:i64 = imul %16, %24
    %28:i64 = iadd %18, %27
    %25:i64 = imul %6, %24
    %26:i64 = iadd %8, %25
    %29:i32 = iconst 2
    %30:i64 = iext %29
    %31:i64 = sfill 32 %30
    %34:i64 = imul %31, %16
    %35:i64 = iadd %18, %34
    %32:i64 = imul %31, %6
    %33:i64 = iadd %8, %32
    %36:i32 = iconst 170
    %37:i32 = iconst 171
    %38:ptr = iconst 0
    %39:ctrl = store.8 %2, %38, %20
    %40:ctrl, %41:phisel = region %39
    %42:ctrl, %43:ptr = call @gc_new %40, %37, %35
    %44:ptr = ptroff %43, %10
    %45:ctrl = store.4 %42, %31, %44
    %46:ctrl = store.8 %45, %43, %20
    %47:ctrl, %48:ptr = load.8 %46, %20
    %49:ctrl, %50:ptr = call @gc_new %47, %36, %33
    %52:ptr = ptroff %50, %10
    %53:ctrl = store.4 %49, %31, %52
    %54:ctrl, %55:i64 = load.4 %53, %52
    %56:i64 = icmp slt %13, %55
    %57:ctrl, %58:ctrl = brcond %54, %56
    %59:ctrl, %60:phisel = region %57
    %51:ptr = ptroff %50, %15
    %61:ctrl = store.4 %59, %11, %51
    %63:ptr = ptroff %48, %10
    %64:ctrl, %65:i64 = load.4 %61, %63
    %66:i64 = icmp slt %24, %65
    %67:ctrl, %68:ctrl = brcond %64, %66
    %69:ctrl, %70:phisel = region %67
    %62:ptr = ptroff %48, %28
    %71:ctrl = store.8 %69, %50, %62
    %72:ctrl, %73:ptr = load.8 %71, %20
    %74:ctrl, %75:ptr = call @gc_new %72, %36, %33
    %78:ptr = ptroff %75, %10
    %79:ctrl = store.4 %74, %31, %78
    %80:ctrl, %81:i64 = load.4 %79, %78
    %82:i64 = icmp slt %24, %81
    %83:ctrl, %84:ctrl = brcond %80, %82
    %85:ctrl, %86:phisel = region %83
    %77:ptr = ptroff %75, %26
    %87:ctrl = store.4 %85, %29, %77
    %88:ctrl, %89:i64 = load.4 %87, %78
    %90:i64 = icmp slt %13, %89
    %91:ctrl, %92:ctrl = brcond %88, %90
    %93:ctrl, %94:phisel = region %91
    %76:ptr = ptroff %75, %15
    %95:ctrl = store.4 %93, %21, %76
    %97:ptr = ptroff %73, %10
    %98:ctrl, %99:i64 = load.4 %95, %97
    %100:i64 = icmp slt %13, %99
    %101:ctrl, %102:ctrl = brcond %98, %100
    %103:ctrl, %104:phisel = region %101
    %96:ptr = ptroff %73, %19
    %105:ctrl = store.8 %103, %75, %96
    %106:ctrl, %107:ptr = load.8 %105, %20
    %109:ptr = ptroff %107, %10
    %110:ctrl, %111:i64 = load.4 %106, %109
    %112:i64 = icmp slt %13, %111
    %113:ctrl, %114:ctrl = brcond %110, %112
    %115:ctrl, %116:phisel = region %113
    %108:ptr = ptroff %107, %19
    %117:ctrl, %118:ptr = load.8 %115, %108
    %120:ptr = ptroff %118, %10
    %121:ctrl, %122:i64 = load.4 %117, %120
    %123:i64 = icmp slt %5, %122
    %124:ctrl, %125:ctrl = brcond %121, %123
    %126:ctrl, %127:phisel = region %124
    %130:ctrl, %131:phisel = region %58, %68, %84, %92, %102, %114, %125
    %132:ctrl = call @throw_index_out_of_range_exception %130
    unreachable %132
    %119:ptr = ptroff %118, %9
    %128:ctrl, %129:i32 = load.4 %126, %119
    return %128, %129
}
