# run: codegen

extfunc @malloc:ptr(i64)

func @gc_new:ptr(i32, i64) {
    # check: function `gc_new`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f7                        mov rdi, rsi
    # nextln: 000007: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @malloc + 0
    # nextln: 000011: ff d0                           call rax
    # nextln: 000013: 5d                              pop rbp
    # nextln: 000014: c3                              ret

    %c:ctrl, %type_id:i32, %size:i64 = entry
    %c1:ctrl, %p:ptr = call @malloc %c, %size
    return %c1, %p
}

func @throw_index_out_of_range_exception() {
    # check: function `throw_index_out_of_range_exception`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl = entry
    return %0
}

func @"System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 83 ec 28                     sub rsp, 0x28
    # nextln: 000011: 48 89 7c 24 08                  mov qword ptr [rsp + 8], rdi
    # nextln: 000016: 33 c0                           xor eax, eax
    # nextln: 000018: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 00001c: b8 02 00 00 00                  mov eax, 2
    # nextln: 000021: 4c 63 f0                        movsxd r14, eax
    # nextln: 000024: 49 6b ce 04                     imul rcx, r14, 4
    # nextln: 000028: 49 6b c6 08                     imul rax, r14, 8
    # nextln: 00002c: ba 14 00 00 00                  mov edx, 0x14
    # nextln: 000031: 48 89 d7                        mov rdi, rdx
    # nextln: 000034: 48 03 f9                        add rdi, rcx
    # nextln: 000037: 48 89 f9                        mov rcx, rdi
    # nextln: 00003a: ba 18 00 00 00                  mov edx, 0x18
    # nextln: 00003f: 48 89 d6                        mov rsi, rdx
    # nextln: 000042: 48 03 f0                        add rsi, rax
    # nextln: 000045: 41 bc 01 00 00 00               mov r12d, 1
    # nextln: 00004b: 48 89 cb                        mov rbx, rcx
    # nextln: 00004e: 4d 63 ec                        movsxd r13, r12d
    # nextln: 000051: bf ab 00 00 00                  mov edi, 0xab
    # nextln: 000056: e8 00 00 00 00                  call 0x5b  # RELOC_PC32 -> @gc_new + -4
    # nextln: 00005b: 48 89 c1                        mov rcx, rax
    # nextln: 00005e: 48 83 c1 10                     add rcx, 0x10
    # nextln: 000062: 44 89 31                        mov dword ptr [rcx], r14d
    # nextln: 000065: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 000069: 4c 8b 3c 24                     mov r15, qword ptr [rsp]
    # nextln: 00006d: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 000072: 48 89 de                        mov rsi, rbx
    # nextln: 000075: e8 00 00 00 00                  call 0x7a  # RELOC_PC32 -> @gc_new + -4
    # nextln: 00007a: 48 89 de                        mov rsi, rbx
    # nextln: 00007d: 48 89 c1                        mov rcx, rax
    # nextln: 000080: 48 83 c1 10                     add rcx, 0x10
    # nextln: 000084: 44 89 31                        mov dword ptr [rcx], r14d
    # nextln: 000087: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000089: 4c 3b e9                        cmp r13, rcx
    # nextln: 00008c: 0f 8d 2f 01 00 00               jge 0x1c1
    # nextln: 000092: b9 04 00 00 00                  mov ecx, 4
    # nextln: 000097: 48 89 cf                        mov rdi, rcx
    # nextln: 00009a: 49 0f af fd                     imul rdi, r13
    # nextln: 00009e: 4c 89 fa                        mov rdx, r15
    # nextln: 0000a1: 48 83 c2 10                     add rdx, 0x10
    # nextln: 0000a5: b9 08 00 00 00                  mov ecx, 8
    # nextln: 0000aa: 41 b8 14 00 00 00               mov r8d, 0x14
    # nextln: 0000b0: 4c 03 c7                        add r8, rdi
    # nextln: 0000b3: 48 89 c7                        mov rdi, rax
    # nextln: 0000b6: 49 03 f8                        add rdi, r8
    # nextln: 0000b9: 4c 89 44 24 10                  mov qword ptr [rsp + 0x10], r8
    # nextln: 0000be: 44 89 27                        mov dword ptr [rdi], r12d
    # nextln: 0000c1: 8b 12                           mov edx, dword ptr [rdx]
    # nextln: 0000c3: 33 ff                           xor edi, edi
    # nextln: 0000c5: 48 63 df                        movsxd rbx, edi
    # nextln: 0000c8: 48 3b da                        cmp rbx, rdx
    # nextln: 0000cb: 0f 8d f0 00 00 00               jge 0x1c1
    # nextln: 0000d1: 48 89 ca                        mov rdx, rcx
    # nextln: 0000d4: 48 0f af d3                     imul rdx, rbx
    # nextln: 0000d8: 41 bc 18 00 00 00               mov r12d, 0x18
    # nextln: 0000de: 4c 89 e1                        mov rcx, r12
    # nextln: 0000e1: 48 03 ca                        add rcx, rdx
    # nextln: 0000e4: 4c 03 f9                        add r15, rcx
    # nextln: 0000e7: 49 89 07                        mov qword ptr [r15], rax
    # nextln: 0000ea: 4c 8b 3c 24                     mov r15, qword ptr [rsp]
    # nextln: 0000ee: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 0000f3: e8 00 00 00 00                  call 0xf8  # RELOC_PC32 -> @gc_new + -4
    # nextln: 0000f8: 48 89 c7                        mov rdi, rax
    # nextln: 0000fb: 48 83 c7 10                     add rdi, 0x10
    # nextln: 0000ff: 44 89 37                        mov dword ptr [rdi], r14d
    # nextln: 000102: 8b 0f                           mov ecx, dword ptr [rdi]
    # nextln: 000104: 48 3b d9                        cmp rbx, rcx
    # nextln: 000107: 0f 8d b4 00 00 00               jge 0x1c1
    # nextln: 00010d: b9 04 00 00 00                  mov ecx, 4
    # nextln: 000112: 48 89 ce                        mov rsi, rcx
    # nextln: 000115: 48 0f af f3                     imul rsi, rbx
    # nextln: 000119: ba 14 00 00 00                  mov edx, 0x14
    # nextln: 00011e: 49 89 d0                        mov r8, rdx
    # nextln: 000121: 4c 03 c6                        add r8, rsi
    # nextln: 000124: 48 89 c6                        mov rsi, rax
    # nextln: 000127: 49 03 f0                        add rsi, r8
    # nextln: 00012a: 41 b8 02 00 00 00               mov r8d, 2
    # nextln: 000130: 44 89 06                        mov dword ptr [rsi], r8d
    # nextln: 000133: 8b 3f                           mov edi, dword ptr [rdi]
    # nextln: 000135: 4c 3b ef                        cmp r13, rdi
    # nextln: 000138: 0f 8d 83 00 00 00               jge 0x1c1
    # nextln: 00013e: 4c 89 ff                        mov rdi, r15
    # nextln: 000141: 48 83 c7 10                     add rdi, 0x10
    # nextln: 000145: 48 89 c6                        mov rsi, rax
    # nextln: 000148: 48 03 74 24 10                  add rsi, qword ptr [rsp + 0x10]
    # nextln: 00014d: 41 b8 03 00 00 00               mov r8d, 3
    # nextln: 000153: 44 89 06                        mov dword ptr [rsi], r8d
    # nextln: 000156: 8b 3f                           mov edi, dword ptr [rdi]
    # nextln: 000158: 4c 3b ef                        cmp r13, rdi
    # nextln: 00015b: 0f 8d 60 00 00 00               jge 0x1c1
    # nextln: 000161: bf 08 00 00 00                  mov edi, 8
    # nextln: 000166: 49 0f af fd                     imul rdi, r13
    # nextln: 00016a: 4c 03 e7                        add r12, rdi
    # nextln: 00016d: 4d 03 fc                        add r15, r12
    # nextln: 000170: 49 89 07                        mov qword ptr [r15], rax
    # nextln: 000173: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000177: 48 89 c7                        mov rdi, rax
    # nextln: 00017a: 48 83 c7 10                     add rdi, 0x10
    # nextln: 00017e: 8b 3f                           mov edi, dword ptr [rdi]
    # nextln: 000180: 4c 3b ef                        cmp r13, rdi
    # nextln: 000183: 0f 8d 38 00 00 00               jge 0x1c1
    # nextln: 000189: 49 03 c4                        add rax, r12
    # nextln: 00018c: 48 8b 00                        mov rax, qword ptr [rax]
    # nextln: 00018f: 48 89 c7                        mov rdi, rax
    # nextln: 000192: 48 83 c7 10                     add rdi, 0x10
    # nextln: 000196: 8b 37                           mov esi, dword ptr [rdi]
    # nextln: 000198: 48 63 7c 24 08                  movsxd rdi, dword ptr [rsp + 8]
    # nextln: 00019d: 48 3b fe                        cmp rdi, rsi
    # nextln: 0001a0: 0f 8d 1b 00 00 00               jge 0x1c1
    # nextln: 0001a6: 48 0f af cf                     imul rcx, rdi
    # nextln: 0001aa: 48 03 d1                        add rdx, rcx
    # nextln: 0001ad: 48 03 c2                        add rax, rdx
    # nextln: 0001b0: 8b 00                           mov eax, dword ptr [rax]
    # nextln: 0001b2: 48 83 c4 28                     add rsp, 0x28
    # nextln: 0001b6: 5b                              pop rbx
    # nextln: 0001b7: 41 5c                           pop r12
    # nextln: 0001b9: 41 5d                           pop r13
    # nextln: 0001bb: 41 5e                           pop r14
    # nextln: 0001bd: 41 5f                           pop r15
    # nextln: 0001bf: 5d                              pop rbp
    # nextln: 0001c0: c3                              ret
    # nextln: 0001c1: e8 00 00 00 00                  call 0x1c6  # RELOC_PC32 -> @throw_index_out_of_range_exception + -4
    # nextln: 0001c6: 0f 0b                           ud2

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %4:i64 = iext %1
    %5:i64 = sfill 32 %4
    %6:i64 = iconst 4
    %7:i64 = imul %6, %5
    %8:i64 = iconst 20
    %9:i64 = iadd %8, %7
    %10:i64 = iconst 16
    %11:i32 = iconst 1
    %12:i64 = iext %11
    %13:i64 = sfill 32 %12
    %14:i64 = imul %6, %13
    %15:i64 = iadd %8, %14
    %16:i64 = iconst 8
    %17:i64 = imul %16, %13
    %18:i64 = iconst 24
    %19:i64 = iadd %18, %17
    %20:ptr = stackslot 8:8
    %21:i32 = iconst 3
    %22:i32 = iconst 0
    %23:i64 = iext %22
    %24:i64 = sfill 32 %23
    %27:i64 = imul %16, %24
    %28:i64 = iadd %18, %27
    %25:i64 = imul %6, %24
    %26:i64 = iadd %8, %25
    %29:i32 = iconst 2
    %30:i64 = iext %29
    %31:i64 = sfill 32 %30
    %34:i64 = imul %31, %16
    %35:i64 = iadd %18, %34
    %32:i64 = imul %31, %6
    %33:i64 = iadd %8, %32
    %36:i32 = iconst 170
    %37:i32 = iconst 171
    %38:ptr = iconst 0
    %39:ctrl = store.8 %2, %38, %20
    %40:ctrl, %41:phisel = region %39
    %42:ctrl, %43:ptr = call @gc_new %40, %37, %35
    %44:ptr = ptroff %43, %10
    %45:ctrl = store.4 %42, %31, %44
    %46:ctrl = store.8 %45, %43, %20
    %47:ctrl, %48:ptr = load.8 %46, %20
    %49:ctrl, %50:ptr = call @gc_new %47, %36, %33
    %52:ptr = ptroff %50, %10
    %53:ctrl = store.4 %49, %31, %52
    %54:ctrl, %55:i64 = load.4 %53, %52
    %56:i64 = icmp slt %13, %55
    %57:ctrl, %58:ctrl = brcond %54, %56
    %59:ctrl, %60:phisel = region %57
    %51:ptr = ptroff %50, %15
    %61:ctrl = store.4 %59, %11, %51
    %63:ptr = ptroff %48, %10
    %64:ctrl, %65:i64 = load.4 %61, %63
    %66:i64 = icmp slt %24, %65
    %67:ctrl, %68:ctrl = brcond %64, %66
    %69:ctrl, %70:phisel = region %67
    %62:ptr = ptroff %48, %28
    %71:ctrl = store.8 %69, %50, %62
    %72:ctrl, %73:ptr = load.8 %71, %20
    %74:ctrl, %75:ptr = call @gc_new %72, %36, %33
    %78:ptr = ptroff %75, %10
    %79:ctrl = store.4 %74, %31, %78
    %80:ctrl, %81:i64 = load.4 %79, %78
    %82:i64 = icmp slt %24, %81
    %83:ctrl, %84:ctrl = brcond %80, %82
    %85:ctrl, %86:phisel = region %83
    %77:ptr = ptroff %75, %26
    %87:ctrl = store.4 %85, %29, %77
    %88:ctrl, %89:i64 = load.4 %87, %78
    %90:i64 = icmp slt %13, %89
    %91:ctrl, %92:ctrl = brcond %88, %90
    %93:ctrl, %94:phisel = region %91
    %76:ptr = ptroff %75, %15
    %95:ctrl = store.4 %93, %21, %76
    %97:ptr = ptroff %73, %10
    %98:ctrl, %99:i64 = load.4 %95, %97
    %100:i64 = icmp slt %13, %99
    %101:ctrl, %102:ctrl = brcond %98, %100
    %103:ctrl, %104:phisel = region %101
    %96:ptr = ptroff %73, %19
    %105:ctrl = store.8 %103, %75, %96
    %106:ctrl, %107:ptr = load.8 %105, %20
    %109:ptr = ptroff %107, %10
    %110:ctrl, %111:i64 = load.4 %106, %109
    %112:i64 = icmp slt %13, %111
    %113:ctrl, %114:ctrl = brcond %110, %112
    %115:ctrl, %116:phisel = region %113
    %108:ptr = ptroff %107, %19
    %117:ctrl, %118:ptr = load.8 %115, %108
    %120:ptr = ptroff %118, %10
    %121:ctrl, %122:i64 = load.4 %117, %120
    %123:i64 = icmp slt %5, %122
    %124:ctrl, %125:ctrl = brcond %121, %123
    %126:ctrl, %127:phisel = region %124
    %130:ctrl, %131:phisel = region %58, %68, %84, %92, %102, %114, %125
    %132:ctrl = call @throw_index_out_of_range_exception %130
    unreachable %132
    %119:ptr = ptroff %118, %9
    %128:ctrl, %129:i32 = load.4 %126, %119
    return %128, %129
}
