# run: isel

func @icmp_eq64_64:i64(i64, i64) {
    # check: function `icmp_eq64_64`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S64, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(E) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_eq64_32:i32(i64, i64) {
    # check: function `icmp_eq64_32`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S64, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(E) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i32 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_eq32_64:i64(i32, i32) {
    # check: function `icmp_eq32_64`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S32, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(E) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i32, %b:i32 = entry
    %icmp:i64 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_ne64_64:i64(i64, i64) {
    # check: function `icmp_ne64_64`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S64, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(Ne) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ne %a, %b
    return %c, %icmp
}

func @icmp_slt64_64:i64(i64, i64) {
    # check: function `icmp_slt64_64`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S64, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(L) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp slt %a, %b
    return %c, %icmp
}

func @icmp_sle64_64:i64(i64, i64) {
    # check: function `icmp_sle64_64`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S64, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(Le) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp sle %a, %b
    return %c, %icmp
}

func @icmp_ult64_64:i64(i64, i64) {
    # check: function `icmp_ult64_64`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S64, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(B) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ult %a, %b
    return %c, %icmp
}

func @icmp_ule64_64:i64(i64, i64) {
    # check: function `icmp_ule64_64`:
    # nextln:       block0[%2:gpr64($$rdi), %3:gpr64($$rsi)]:
    # nextln: 0000:      %1:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S64, Cmp) %2(reg)[early], %3(any)[early]
    # nextln: 0002:      %0:gpr64(reg)[late] = Setcc(Be) %1(tied:0)[early]
    # nextln: 0003:      Ret %0($$rax)[early]

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ule %a, %b
    return %c, %icmp
}
