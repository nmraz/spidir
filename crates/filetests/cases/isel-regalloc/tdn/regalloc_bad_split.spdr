# run: isel-regalloc

extfunc @"System.Void System.Number::AppendUnknownChar[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Char)"(ptr, i32)
extfunc @"System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)":ptr(ptr)
extfunc @"System.Byte* System.Number+NumberBuffer::GetDigitsPointer()":ptr(ptr)
extfunc @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NegativeSignTChar[System.Char]()"(ptr, ptr)
extfunc @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::PerMilleSymbolTChar[System.Char]()"(ptr, ptr)
extfunc @jit_throw_index_out_of_range()
extfunc @jit_gc_memcpy:ptr(ptr, ptr, i64)
extfunc @"System.Void System.Span`1[System.Int32]::.ctor(System.Void*, System.Int32)"(ptr, ptr, i32)
extfunc @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Insert(System.Int32, System.ReadOnlySpan`1[System.Char])"(ptr, i32, ptr)
extfunc @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()":i32(ptr)
extfunc @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NumberGroupSeparatorTChar[System.Char]()"(ptr, ptr)
extfunc @"System.Span`1[System.Int32] System.Span`1[System.Int32]::op_Implicit(System.Int32[])"(ptr, ptr)
extfunc @"System.Int32 System.String::get_Length()":i32(ptr)
extfunc @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NumberDecimalSeparatorTChar[System.Char]()"(ptr, ptr)
extfunc @"System.Int32 System.Number::FindSection(System.ReadOnlySpan`1[System.Char], System.Int32)":i32(ptr, i32)
extfunc @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.ReadOnlySpan`1[System.Char])"(ptr, ptr)
extfunc @jit_bzero:ptr(ptr, i64)
extfunc @"System.Char System.Char::System.IUtfChar<System.Char>.CastFrom(System.Char)":i32(i32)
extfunc @"System.String System.Globalization.NumberFormatInfo::get_NumberGroupSeparator()":ptr(ptr)
extfunc @"System.Char& System.Runtime.InteropServices.MemoryMarshal::GetReference[System.Char](System.ReadOnlySpan`1[System.Char])":ptr(ptr)
extfunc @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::PercentSymbolTChar[System.Char]()"(ptr, ptr)
extfunc @"System.Void System.Span`1[System.Int32]::CopyTo(System.Span`1[System.Int32])"(ptr, ptr)
extfunc @"System.Void System.Number+NumberBuffer::CheckConsistency()"(ptr)
extfunc @"System.Void System.Number::FormatExponent[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Globalization.NumberFormatInfo, System.Int32, System.Char, System.Int32, System.Boolean)"(ptr, ptr, i32, i32, i32, i32)
extfunc @jit_newarr:ptr(ptr, i64)
extfunc @"System.Void System.Number::RoundNumber(NumberBuffer&, System.Int32, System.Boolean)"(ptr, i32, i32)
extfunc @"System.Int32 System.Collections.Generic.ValueListBuilder`1[System.Char]::get_Length()":i32(ptr)
extfunc @"System.Void System.Diagnostics.Debug::Assert(System.Boolean)"(i32)
extfunc @"System.Int32 System.Span`1[System.Int32]::get_Length()":i32(ptr)
extfunc @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.Char)"(ptr, i32)
extfunc @jit_gc_bzero:ptr(ptr, i64)
extfunc @"System.Int32& System.Span`1[System.Int32]::get_Item(System.Int32)":ptr(ptr, i32)

func @"System.Void System.Number::NumberToStringFormat[System.Char](System.Collections.Generic.ValueListBuilder`1&, NumberBuffer&, System.ReadOnlySpan`1[System.Char], System.Globalization.NumberFormatInfo)"(ptr, ptr, ptr, ptr) {
    # check: function `System.Void System.Number::NumberToStringFormat[System.Char](System.Collections.Generic.ValueListBuilder`1&, NumberBuffer&, System.ReadOnlySpan`1[System.Char], System.Globalization.NumberFormatInfo)`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, r12, r13, r14, r15, xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7, xmm8, xmm9, xmm10, xmm11, xmm12, xmm13, xmm14, xmm15
    # nextln: frame: size 808, align 16
    # nextln:     !0: 16
    # nextln:     !1: 560
    # nextln:     !2: 288
    # nextln:     !3: 720
    # nextln:     !4: 280
    # nextln:     !5: 32
    # nextln:     !6: 48
    # nextln:     !7: 64
    # nextln:     !8: 80
    # nextln:     !9: 0
    # nextln:     !10: 96
    # nextln:     !11: 112
    # nextln:     !12: 128
    # nextln:     !13: 144
    # nextln:     !14: 160
    # nextln:     !15: 176
    # nextln:     !16: 192
    # nextln:     !17: 208
    # nextln:     !18: 224
    # nextln:     !19: 240
    # nextln:     !20: 256
    # nextln:     spill0: 296
    # nextln:     spill1: 304
    # nextln:     spill2: 312
    # nextln:     spill3: 320
    # nextln:     spill4: 328
    # nextln:     spill5: 336
    # nextln:     spill6: 344
    # nextln:     spill7: 352
    # nextln:     spill8: 360
    # nextln:     spill9: 368
    # nextln:     spill10: 376
    # nextln:     spill11: 384
    # nextln:     spill12: 392
    # nextln:     spill13: 400
    # nextln:     spill14: 408
    # nextln:     spill15: 416
    # nextln:     spill16: 424
    # nextln:     spill17: 432
    # nextln:     spill18: 440
    # nextln:     spill19: 448
    # nextln:     spill20: 456
    # nextln:     spill21: 464
    # nextln:     spill22: 472
    # nextln:     spill23: 480
    # nextln:     spill24: 488
    # nextln:     spill25: 496
    # nextln:     spill26: 504
    # nextln:     spill27: 512
    # nextln:     spill28: 520
    # nextln:     spill29: 528
    # nextln:     spill30: 536
    # nextln:     spill31: 544
    # nextln:     spill32: 552
    # nextln:     spill33: 800
    # nextln:     spill34: 568
    # nextln:     spill35: 576
    # nextln:     spill36: 584
    # nextln:     spill37: 592
    # nextln:     spill38: 600
    # nextln:     spill39: 608
    # nextln:     spill40: 616
    # nextln:     spill41: 624
    # nextln:     spill42: 632
    # nextln:     spill43: 640
    # nextln:     spill44: 648
    # nextln:     spill45: 656
    # nextln:     spill46: 664
    # nextln:     spill47: 672
    # nextln:     spill48: 680
    # nextln:     spill49: 688
    # nextln:     spill50: 696
    # nextln:     spill51: 704
    # nextln:     spill52: 712
    # nextln:     spill53: 272
    # nextln:     spill54: 728
    # nextln:     spill55: 736
    # nextln:     spill56: 744
    # nextln:     spill57: 752
    # nextln:     spill58: 760
    # nextln:     spill59: 768
    # nextln:     spill60: 776
    # nextln:     spill61: 784
    # nextln:     spill62: 792
    # nextln:       block0:
    # nextln:           $$r13 = $$rcx
    # nextln:           $$rbx = $$rsi
    # nextln:           $$r12 = $$rdi
    # nextln: 0000:     Jump(block1)
    # nextln:       block1:
    # nextln: 0003:     $$rcx = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rax = MovRmS32(16)
    # nextln:           $$rdi = StackAddr(!0)
    # nextln:           $$rsi = $$rdx
    # nextln:           $$rdx = $$rax
    # nextln: 0004:     $$rax = CallRm $$rcx, $$rdi, $$rsi, $$rdx
    # nextln: 0005:     Jump(block2)
    # nextln:       block2:
    # nextln: 0008:     $$r15 = MovRI64(137576241302976)
    # nextln: 0011:     MovMR(S64, [!1 + 0]) $$r15
    # nextln: 0012:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rdi = StackAddr(!1)
    # nextln: 0013:     $$rax = CallRm $$rax, $$rdi
    # nextln:           $$r14 = $$rax
    # nextln: 0014:     MovMR(S64, [!2 + 0]) $$r15
    # nextln: 0015:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rdi = StackAddr(!2)
    # nextln: 0016:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0017:     AluRRm(S64, Cmp) $$r14, $$rax
    # nextln: 0018:     Jumpcc(E, block3, block4)
    # nextln:       block3:
    # nextln:           $$rcx = MovRmS32(1)
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$spill20 = $$r12
    # nextln:           $$r12 = $$rbx
    # nextln:           $$spill18 = $$r13
    # nextln: 0019:     Jump(block5)
    # nextln:       block4:
    # nextln: 0021:     MovMR(S64, [!3 + 0]) $$r15
    # nextln: 0022:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rdi = StackAddr(!3)
    # nextln: 0023:     $$rax = CallRm $$rax, $$rdi
    # nextln:           $$r14 = $$rax
    # nextln: 0025:     $$rax = MovRI64(137576241302592)
    # nextln: 0026:     MovMR(S64, [!4 + 0]) $$rax
    # nextln: 0027:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln:           $$rdi = StackAddr(!4)
    # nextln: 0028:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0029:     $$rcx = MovRmS32(0)
    # nextln: 0030:     AluRRm(S64, Cmp) $$r14, $$rax
    # nextln: 0031:     $$rcx = Setcc(E) $$rcx
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$spill20 = $$r12
    # nextln:           $$r12 = $$rbx
    # nextln:           $$spill18 = $$r13
    # nextln: 0032:     Jump(block5)
    # nextln:       block5:
    # nextln: 0033:     $$rdi = MovzxRRm(S8) $$rcx
    # nextln: 0034:     $$rcx = FuncAddrAbs(External(extfunc27))
    # nextln:           $$rbx = $$rax
    # nextln:           $$r13 = $$spill20
    # nextln: 0035:     CallRm $$rcx, $$rdi
    # nextln: 0036:     $$r14 = StackAddr(!5)
    # nextln: 0038:     $$rax = FuncAddrAbs(External(extfunc22))
    # nextln:           $$rdi = $$r12
    # nextln: 0039:     CallRm $$rax, $$rdi
    # nextln: 0040:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln:           $$rdi = $$r12
    # nextln: 0041:     $$rax = CallRm $$rax, $$rdi
    # nextln:           $$r15 = $$rax
    # nextln: 0042:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdx = MovRmS32(16)
    # nextln:           $$rdi = $$r14
    # nextln: 0043:     $$rax = CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0044:     $$rax = MovRM(S8, [reg + 0]) $$r15
    # nextln: 0045:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0046:     Jumpcc(Ne, block6, block7)
    # nextln:       block6:
    # nextln: 0047:     $$rax = MovRM(S8, [reg + 8]) $$r12
    # nextln: 0048:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0049:     Jumpcc(Ne, block395, block396)
    # nextln:       block395:
    # nextln:           $$rsi = MovRmS32(0)
    # nextln:           $$rax = MovRmS32(1)
    # nextln:           $$spill9 = $$rsi
    # nextln:           $$rsi = MovRmS32(1)
    # nextln: 0050:     Jump(block397)
    # nextln:       block396:
    # nextln:           $$rsi = MovRmS32(0)
    # nextln:           $$spill9 = $$rsi
    # nextln: 0051:     Jump(block397)
    # nextln:       block397:
    # nextln: 0052:     Jump(block8)
    # nextln:       block7:
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$rsi = MovRmS32(2)
    # nextln:           $$spill9 = $$rax
    # nextln: 0053:     Jump(block8)
    # nextln:       block8:
    # nextln: 0054:     $$rax = FuncAddrAbs(External(extfunc14))
    # nextln:           $$rdi = $$r14
    # nextln: 0055:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rcx = MovRmS32(0)
    # nextln: 0056:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln:           $$spill58 = $$rcx
    # nextln:           $$rcx = MovRmS32(1)
    # nextln: 0057:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln:           $$spill54 = $$rcx
    # nextln:           $$rcx = MovRmS32(2)
    # nextln: 0058:     $$rcx = MovsxRRm(Ext32_64) $$rcx
    # nextln:           $$spill57 = $$rcx
    # nextln: 0064:     $$rcx = MovRU32(4294967295)
    # nextln:           $$r14 = $$rbx
    # nextln:           $$rbx = $$spill9
    # nextln:           $$spill20 = $$r13
    # nextln:           $$r13 = $$rax
    # nextln:           $$spill19 = $$r12
    # nextln:           $$r12 = $$spill18
    # nextln: 0065:     Jump(block9)
    # nextln:       block9:
    # nextln: 0066:     Jump(block10)
    # nextln:       block10:
    # nextln: 0067:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdx = MovRmS32(16)
    # nextln:           $$rdi = StackAddr(!7)
    # nextln: 0068:     $$rax = CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0069:     $$rax = FuncAddrAbs(External(extfunc19))
    # nextln:           $$rdi = StackAddr(!7)
    # nextln: 0070:     $$rax = CallRm $$rax, $$rdi
    # nextln:           $$rcx = $$spill19
    # nextln:           $$rdi = $$r15
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rdx = $$spill20
    # nextln:           $$r9 = MovRmS32(0)
    # nextln:           $$r8 = MovRmS32(2147483647)
    # nextln:           $$r10 = MovRU32(4294967295)
    # nextln:           $$rsi = $$spill58
    # nextln:           $$rsi = MovRmS32(2147483647)
    # nextln:           $$spill8 = $$rsi
    # nextln:           $$rsi = MovRU32(4294967295)
    # nextln:           $$spill7 = $$rsi
    # nextln:           $$spill5 = $$rax
    # nextln:           $$rsi = MovRmS32(0)
    # nextln:           $$spill12 = $$rsi
    # nextln:           $$spill4 = $$rsi
    # nextln:           $$rsi = $$spill58
    # nextln:           $$spill3 = $$rsi
    # nextln:           $$spill2 = $$rsi
    # nextln:           $$rsi = MovRmS32(0)
    # nextln:           $$spill1 = $$rsi
    # nextln:           $$spill22 = $$rdi
    # nextln:           $$spill0 = $$r13
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r13
    # nextln:           $$r13 = MovRU32(4294967295)
    # nextln: 0071:     Jump(block11)
    # nextln:       block11:
    # nextln: 0072:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0073:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0074:     AluRRm(S32, Cmp) $$rax, $$r12
    # nextln: 0075:     Jumpcc(Le, block12, block14)
    # nextln:       block12:
    # nextln:           $$spill9 = $$r15
    # nextln:           $$rdx = $$spill7
    # nextln:           $$r15 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln:           $$rax = $$spill5
    # nextln:           $$r10 = $$spill2
    # nextln:           $$r14 = $$spill1
    # nextln:           $$r8 = $$spill20
    # nextln:           $$r11 = $$spill0
    # nextln:           $$r9 = $$rbx
    # nextln:           $$rbx = $$spill22
    # nextln:           $$rsi = $$spill19
    # nextln:           $$rdi = $$spill4
    # nextln: 0076:     Jump(block13)
    # nextln:       block14:
    # nextln:           $$rax = $$rbx
    # nextln:           $$spill9 = $$r15
    # nextln:           $$r11 = $$r13
    # nextln: 0077:     $$r13 = AddRI(S32, 1) $$r12
    # nextln: 0078:     $$rcx = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$rdx = $$spill57
    # nextln: 0079:     $$rcx = ImulRR(S64) $$rcx, $$rdx
    # nextln:           $$rdx = $$spill5
    # nextln: 0080:     $$rcx = AddRR(S64) $$rdx, $$rcx
    # nextln: 0081:     $$r12 = MovRM(S16, [reg + 0]) $$rcx
    # nextln:           $$r10 = $$spill4
    # nextln:           $$rcx = $$spill1
    # nextln:           $$r9 = $$spill19
    # nextln:           $$r8 = $$spill20
    # nextln:           $$rdi = $$rdx
    # nextln:           $$rbx = $$spill22
    # nextln:           $$rsi = $$spill0
    # nextln:           $$rdx = $$spill7
    # nextln: 0082:     $$r14 = MovzxRRm(S16) $$r12
    # nextln: 0083:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 0084:     Jumpcc(Ne, block15, block16)
    # nextln:       block15:
    # nextln:           $$r12 = $$rcx
    # nextln:           $$rcx = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r15 = $$r11
    # nextln:           $$r11 = $$rsi
    # nextln:           $$rsi = $$r9
    # nextln:           $$r9 = $$rax
    # nextln:           $$rax = $$rdi
    # nextln:           $$rdi = $$r10
    # nextln:           $$r10 = $$spill2
    # nextln: 0085:     $$r12 = MovRmS32(0)
    # nextln: 0086:     AluRmI(S32, Cmp, 59) $$rcx
    # nextln:           $$spill21 = $$rcx
    # nextln: 0087:     $$r12 = Setcc(E) $$r12
    # nextln: 0088:     $$rcx = MovRmS32(0)
    # nextln: 0089:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 0090:     $$rcx = Setcc(E) $$rcx
    # nextln:           $$r12 = $$r13
    # nextln:           $$r13 = $$spill21
    # nextln:           $$spill19 = $$rsi
    # nextln:           $$spill7 = $$rdx
    # nextln:           $$spill6 = $$r15
    # nextln:           $$spill4 = $$rdi
    # nextln:           $$spill20 = $$r8
    # nextln:           $$spill0 = $$r11
    # nextln:           $$spill11 = $$r9
    # nextln:           $$spill10 = $$rbx
    # nextln: 0091:     Jump(block17)
    # nextln:       block16:
    # nextln:           $$r15 = $$r11
    # nextln:           $$r12 = $$r13
    # nextln:           $$r11 = $$rsi
    # nextln:           $$rsi = $$r9
    # nextln:           $$r9 = $$rax
    # nextln:           $$rax = $$rdi
    # nextln:           $$rdi = $$r10
    # nextln:           $$r10 = $$spill2
    # nextln:           $$r13 = $$r14
    # nextln:           $$r14 = $$rcx
    # nextln: 0092:     Jump(block13)
    # nextln:       block13:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln:           $$spill11 = $$r9
    # nextln:           $$spill19 = $$rsi
    # nextln:           $$spill7 = $$rdx
    # nextln:           $$spill4 = $$rdi
    # nextln:           $$spill2 = $$r10
    # nextln:           $$spill10 = $$rbx
    # nextln:           $$spill20 = $$r8
    # nextln:           $$spill0 = $$r11
    # nextln:           $$spill6 = $$r15
    # nextln: 0093:     Jump(block17)
    # nextln:       block17:
    # nextln: 0094:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0095:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0096:     Jumpcc(Ne, block18, block19)
    # nextln:       block18:
    # nextln: 0097:     $$rcx = MovzxRRm(S16) $$r13
    # nextln:           $$spill21 = $$r13
    # nextln: 0098:     $$r9 = MovzxRRm(S16) $$rcx
    # nextln: 0099:     AluRmI(S32, Cmp, 69) $$r9
    # nextln: 0100:     Jumpcc(A, block299, block300)
    # nextln:       block299:
    # nextln: 0101:     AluRmI(S32, Cmp, 92) $$r9
    # nextln: 0102:     Jumpcc(E, block381, block382)
    # nextln:       block381:
    # nextln: 0103:     $$rcx = FuncAddrAbs(External(extfunc9))
    # nextln:           $$r15 = $$rax
    # nextln:           $$r13 = $$spill12
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0104:     $$rax = CallRm $$rcx, $$rdi
    # nextln: 0105:     AluRRm(S32, Cmp) $$rax, $$r12
    # nextln: 0106:     Jumpcc(Le, block389, block390)
    # nextln:       block389:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln:           $$rbx = $$spill10
    # nextln:           $$r9 = $$spill11
    # nextln: 0107:     Jump(block391)
    # nextln:       block390:
    # nextln: 0108:     $$rax = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$rcx = $$spill57
    # nextln: 0109:     $$rax = ImulRR(S64) $$rax, $$rcx
    # nextln: 0110:     $$rax = AddRR(S64) $$r15, $$rax
    # nextln: 0111:     $$rax = MovRM(S16, [reg + 0]) $$rax
    # nextln: 0112:     $$rcx = MovRmS32(0)
    # nextln: 0113:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0114:     $$rcx = Setcc(Ne) $$rcx
    # nextln:           $$rbx = $$spill10
    # nextln:           $$r9 = $$spill11
    # nextln: 0115:     Jump(block391)
    # nextln:       block391:
    # nextln: 0116:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 0117:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0118:     Jumpcc(Ne, block392, block393)
    # nextln:       block392:
    # nextln: 0119:     $$r12 = AddRI(S32, 1) $$r12
    # nextln:           $$spill10 = $$rbx
    # nextln:           $$spill11 = $$r9
    # nextln: 0120:     Jump(block394)
    # nextln:       block393:
    # nextln:           $$spill10 = $$rbx
    # nextln:           $$spill11 = $$r9
    # nextln: 0121:     Jump(block394)
    # nextln:       block394:
    # nextln:           $$spill13 = $$r12
    # nextln:           $$rbx = $$r15
    # nextln:           $$r8 = $$r13
    # nextln:           $$rdx = $$spill9
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r9 = $$spill4
    # nextln:           $$r13 = $$spill3
    # nextln:           $$r10 = $$spill2
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rcx = $$spill20
    # nextln:           $$rax = $$spill0
    # nextln:           $$rdi = $$spill21
    # nextln:           $$r12 = $$spill8
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln: 0122:     Jump(block310)
    # nextln:       block382:
    # nextln:           $$r13 = $$spill12
    # nextln:           $$r15 = $$rax
    # nextln: 0123:     Jump(block383)
    # nextln:       block383:
    # nextln: 0124:     AluRmI(S32, Cmp, 101) $$r9
    # nextln: 0125:     Jumpcc(E, block384, block385)
    # nextln:       block384:
    # nextln:           $$rbx = $$r12
    # nextln:           $$spill1 = $$r14
    # nextln:           $$r14 = $$r13
    # nextln:           $$r12 = $$spill10
    # nextln:           $$r13 = $$spill11
    # nextln: 0126:     Jump(block308)
    # nextln:       block385:
    # nextln: 0127:     Jump(block386)
    # nextln:       block386:
    # nextln: 0128:     AluRmI(S32, Cmp, 8240) $$r9
    # nextln: 0129:     Jumpcc(E, block387, block388)
    # nextln:       block387:
    # nextln: 0130:     $$r14 = AddRI(S32, 3) $$r14
    # nextln:           $$spill13 = $$r12
    # nextln:           $$rbx = $$r15
    # nextln:           $$r8 = $$r13
    # nextln:           $$rdx = $$spill9
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r9 = $$spill4
    # nextln:           $$r13 = $$spill3
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rcx = $$spill20
    # nextln:           $$rax = $$spill0
    # nextln:           $$rdi = $$spill21
    # nextln:           $$r12 = $$spill8
    # nextln:           $$r10 = $$spill2
    # nextln: 0131:     Jump(block310)
    # nextln:       block388:
    # nextln:           $$spill13 = $$r12
    # nextln:           $$r12 = $$spill8
    # nextln:           $$rbx = $$r15
    # nextln:           $$r8 = $$r13
    # nextln:           $$rdx = $$spill9
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r9 = $$spill4
    # nextln:           $$r13 = $$spill3
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rcx = $$spill20
    # nextln:           $$rax = $$spill0
    # nextln:           $$rdi = $$spill21
    # nextln: 0132:     Jump(block310)
    # nextln:       block300:
    # nextln:           $$r13 = $$spill12
    # nextln:           $$r15 = $$rax
    # nextln:           $$rax = $$r9
    # nextln: 0133:     $$rax = AluRmI(S32, Sub, 34) $$rax
    # nextln: 0134:     AluRmI(S32, Cmp, 6) $$rax
    # nextln: 0135:     Jumpcc(B, block301, block302)
    # nextln:       block301:
    # nextln: 0136:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0137:     Jumpcc(E, block361, block363)
    # nextln:       block361:
    # nextln:           $$r9 = $$spill2
    # nextln:           $$rbx = $$r12
    # nextln:           $$rcx = $$spill4
    # nextln:           $$r8 = $$spill3
    # nextln:           $$rax = $$spill0
    # nextln:           $$r12 = $$spill6
    # nextln:           $$rdx = $$spill11
    # nextln:           $$rdi = $$spill8
    # nextln:           $$r11 = $$spill7
    # nextln:           $$rsi = $$r15
    # nextln:           $$r15 = $$spill9
    # nextln:           $$r10 = $$spill19
    # nextln:           $$spill1 = $$r14
    # nextln:           $$r14 = $$spill10
    # nextln: 0138:     Jump(block362)
    # nextln:       block363:
    # nextln: 0139:     AluRmI(S32, Cmp, 1) $$rax
    # nextln: 0140:     Jumpcc(E, block364, block365)
    # nextln:       block364:
    # nextln: 0141:     $$r13 = AddRI(S32, 1) $$r13
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$spill13 = $$r12
    # nextln:           $$r12 = $$spill8
    # nextln:           $$rbx = $$r15
    # nextln:           $$rdi = $$spill21
    # nextln:           $$r8 = $$r13
    # nextln:           $$rax = $$spill0
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rdx = $$spill9
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r9 = $$spill4
    # nextln:           $$rcx = $$spill20
    # nextln:           $$r13 = $$spill3
    # nextln: 0142:     Jump(block310)
    # nextln:       block365:
    # nextln: 0143:     AluRmI(S32, Cmp, 2) $$rax
    # nextln: 0144:     Jumpcc(E, block366, block367)
    # nextln:       block366:
    # nextln:           $$rcx = $$spill20
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rsi = $$r14
    # nextln:           $$rax = $$spill0
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r14 = $$spill7
    # nextln:           $$r9 = $$spill4
    # nextln:           $$rdx = $$spill9
    # nextln:           $$rdi = $$spill21
    # nextln:           $$spill13 = $$r12
    # nextln:           $$r12 = $$spill8
    # nextln:           $$r8 = $$r13
    # nextln:           $$r13 = $$spill3
    # nextln: 0145:     Jump(block310)
    # nextln:       block367:
    # nextln: 0146:     AluRmI(S32, Cmp, 3) $$rax
    # nextln: 0147:     Jumpcc(E, block368, block369)
    # nextln:       block368:
    # nextln: 0148:     $$r14 = AddRI(S32, 2) $$r14
    # nextln:           $$rbx = $$r15
    # nextln:           $$rax = $$spill0
    # nextln:           $$r11 = $$spill6
    # nextln:           $$spill13 = $$r12
    # nextln:           $$r12 = $$spill8
    # nextln:           $$r9 = $$spill4
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rdx = $$spill9
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$rdi = $$spill21
    # nextln:           $$r15 = $$spill19
    # nextln:           $$rcx = $$spill20
    # nextln:           $$r8 = $$r13
    # nextln:           $$r13 = $$spill3
    # nextln: 0149:     Jump(block310)
    # nextln:       block369:
    # nextln: 0150:     AluRmI(S32, Cmp, 4) $$rax
    # nextln: 0151:     Jumpcc(E, block370, block371)
    # nextln:       block370:
    # nextln:           $$spill13 = $$r12
    # nextln:           $$rbx = $$r15
    # nextln:           $$r8 = $$r13
    # nextln:           $$rdx = $$spill9
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r9 = $$spill4
    # nextln:           $$r13 = $$spill3
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rsi = $$r14
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rcx = $$spill20
    # nextln:           $$rax = $$spill0
    # nextln:           $$rdi = $$spill21
    # nextln:           $$r12 = $$spill8
    # nextln:           $$r14 = $$spill7
    # nextln: 0152:     Jump(block310)
    # nextln:       block371:
    # nextln:           $$rdi = $$spill8
    # nextln:           $$r11 = $$spill7
    # nextln:           $$r10 = $$spill19
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$spill6
    # nextln:           $$rsi = $$r15
    # nextln:           $$r15 = $$spill9
    # nextln:           $$rcx = $$spill4
    # nextln:           $$r8 = $$spill3
    # nextln:           $$r9 = $$spill2
    # nextln:           $$spill1 = $$r14
    # nextln:           $$r14 = $$spill10
    # nextln:           $$rax = $$spill0
    # nextln:           $$rdx = $$spill11
    # nextln: 0153:     Jump(block362)
    # nextln:       block362:
    # nextln:           $$spill9 = $$r15
    # nextln:           $$spill19 = $$r10
    # nextln:           $$spill4 = $$rcx
    # nextln:           $$spill8 = $$rdi
    # nextln:           $$spill7 = $$r11
    # nextln:           $$spill6 = $$r12
    # nextln:           $$spill2 = $$r9
    # nextln:           $$spill22 = $$r14
    # nextln:           $$spill0 = $$rax
    # nextln:           $$spill11 = $$rdx
    # nextln:           $$spill3 = $$r8
    # nextln: 0154:     Jump(block372)
    # nextln:       block372:
    # nextln: 0155:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$r14 = $$spill21
    # nextln:           $$r12 = $$rsi
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0156:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0157:     AluRRm(S32, Cmp) $$rax, $$rbx
    # nextln: 0158:     Jumpcc(Le, block373, block375)
    # nextln:       block373:
    # nextln:           $$spill5 = $$r12
    # nextln:           $$spill21 = $$r14
    # nextln:           $$rax = $$spill9
    # nextln:           $$r15 = $$spill19
    # nextln:           $$spill12 = $$r13
    # nextln:           $$r12 = $$spill4
    # nextln:           $$rsi = $$spill8
    # nextln:           $$rdi = $$spill3
    # nextln:           $$r8 = $$spill6
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rdx = $$spill1
    # nextln:           $$spill13 = $$rbx
    # nextln:           $$rbx = $$spill7
    # nextln:           $$r13 = $$spill22
    # nextln:           $$r14 = $$spill20
    # nextln:           $$r11 = $$spill0
    # nextln:           $$r9 = $$spill11
    # nextln: 0159:     Jump(block374)
    # nextln:       block375:
    # nextln: 0160:     $$rax = MovsxRRm(Ext32_64) $$rbx
    # nextln:           $$rcx = $$spill57
    # nextln: 0161:     $$rax = ImulRR(S64) $$rax, $$rcx
    # nextln: 0162:     $$rax = AddRR(S64) $$r12, $$rax
    # nextln: 0163:     $$rcx = MovRM(S16, [reg + 0]) $$rax
    # nextln: 0164:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0165:     Jumpcc(Ne, block376, block377)
    # nextln:       block376:
    # nextln: 0166:     $$rbx = AddRI(S32, 1) $$rbx
    # nextln:           $$spill13 = $$rbx
    # nextln: 0167:     $$rcx = MovRM(S16, [reg + 0]) $$rax
    # nextln: 0168:     $$rax = MovRmS32(0)
    # nextln: 0169:     AluRRm(S32, Cmp) $$rcx, $$r14
    # nextln:           $$spill21 = $$r14
    # nextln: 0170:     $$rax = Setcc(E) $$rax
    # nextln: 0171:     $$rcx = MovRmS32(0)
    # nextln: 0172:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0173:     $$rcx = Setcc(E) $$rcx
    # nextln:           $$r14 = $$spill20
    # nextln:           $$r11 = $$spill0
    # nextln:           $$spill5 = $$r12
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r12 = $$spill4
    # nextln:           $$rsi = $$spill8
    # nextln:           $$r9 = $$spill11
    # nextln:           $$rbx = $$spill7
    # nextln:           $$rdi = $$spill3
    # nextln:           $$r8 = $$spill6
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rdx = $$spill1
    # nextln:           $$rax = $$spill22
    # nextln:           $$spill12 = $$r13
    # nextln:           $$r13 = $$rax
    # nextln:           $$rax = $$spill9
    # nextln: 0174:     Jump(block378)
    # nextln:       block377:
    # nextln:           $$r10 = $$spill2
    # nextln:           $$r9 = $$spill11
    # nextln:           $$rdx = $$spill1
    # nextln:           $$rax = $$spill9
    # nextln:           $$r15 = $$spill19
    # nextln:           $$r11 = $$spill0
    # nextln:           $$spill12 = $$r13
    # nextln:           $$spill13 = $$rbx
    # nextln:           $$rsi = $$spill8
    # nextln:           $$r13 = $$spill22
    # nextln:           $$spill5 = $$r12
    # nextln:           $$r12 = $$spill4
    # nextln:           $$r8 = $$spill6
    # nextln:           $$rdi = $$spill3
    # nextln:           $$spill21 = $$r14
    # nextln:           $$r14 = $$spill20
    # nextln:           $$rbx = $$spill7
    # nextln: 0175:     Jump(block374)
    # nextln:       block374:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln: 0176:     Jump(block378)
    # nextln:       block378:
    # nextln: 0177:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0178:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0179:     Jumpcc(Ne, block379, block380)
    # nextln:       block379:
    # nextln:           $$rcx = $$rax
    # nextln:           $$rax = $$spill12
    # nextln:           $$spill19 = $$r15
    # nextln:           $$spill8 = $$rsi
    # nextln:           $$spill7 = $$rbx
    # nextln:           $$spill3 = $$rdi
    # nextln:           $$spill6 = $$r8
    # nextln:           $$spill2 = $$r10
    # nextln:           $$spill1 = $$rdx
    # nextln:           $$rbx = $$spill13
    # nextln:           $$spill22 = $$r13
    # nextln:           $$r13 = $$rax
    # nextln:           $$spill20 = $$r14
    # nextln:           $$spill0 = $$r11
    # nextln:           $$spill11 = $$r9
    # nextln:           $$rsi = $$spill5
    # nextln:           $$spill9 = $$rcx
    # nextln:           $$spill4 = $$r12
    # nextln: 0180:     Jump(block372)
    # nextln:       block380:
    # nextln:           $$spill7 = $$rbx
    # nextln:           $$rbx = $$r8
    # nextln:           $$spill2 = $$r10
    # nextln:           $$spill22 = $$r13
    # nextln:           $$r13 = $$spill5
    # nextln:           $$r8 = $$r14
    # nextln:           $$spill11 = $$r9
    # nextln:           $$r9 = $$r11
    # nextln:           $$r11 = $$rax
    # nextln:           $$rax = $$rdi
    # nextln:           $$rdi = $$spill21
    # nextln:           $$rcx = $$r12
    # nextln:           $$r12 = $$spill13
    # nextln:           $$spill8 = $$rsi
    # nextln:           $$rsi = $$rdx
    # nextln:           $$rdx = $$r15
    # nextln:           $$r15 = $$spill12
    # nextln:           $$r14 = $$spill7
    # nextln:           $$r12 = $$spill8
    # nextln:           $$spill62 = $$rax
    # nextln:           $$rax = $$r9
    # nextln:           $$r9 = $$rcx
    # nextln:           $$rcx = $$r8
    # nextln:           $$r8 = $$r15
    # nextln:           $$r15 = $$rdx
    # nextln:           $$rdx = $$r11
    # nextln:           $$r11 = $$rbx
    # nextln:           $$rbx = $$r13
    # nextln:           $$r13 = $$spill62
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = $$spill22
    # nextln:           $$spill10 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln: 0181:     Jump(block310)
    # nextln:       block302:
    # nextln:           $$rdi = $$spill0
    # nextln:           $$rcx = $$spill3
    # nextln:           $$r11 = $$spill9
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill4
    # nextln:           $$r8 = $$spill20
    # nextln:           $$rdx = $$spill21
    # nextln:           $$rbx = $$spill6
    # nextln:           $$rax = $$r13
    # nextln:           $$r13 = $$r15
    # nextln:           $$r15 = $$rax
    # nextln: 0182:     Jump(block303)
    # nextln:       block303:
    # nextln:           $$r10 = $$r9
    # nextln: 0183:     $$r10 = AluRmI(S32, Sub, 44) $$r10
    # nextln: 0184:     AluRmI(S32, Cmp, 5) $$r10
    # nextln: 0185:     Jumpcc(B, block304, block305)
    # nextln:       block304:
    # nextln:           $$r9 = $$r12
    # nextln: 0186:     $$r12 = MovRmS32(0)
    # nextln:           $$rax = $$spill7
    # nextln: 0187:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0188:     $$r12 = Setcc(S) $$r12
    # nextln: 0189:     AluRRm(S32, Test) $$r10, $$r10
    # nextln: 0190:     Jumpcc(E, block335, block336)
    # nextln:       block335:
    # nextln: 0191:     AluRRm(S32, Test) $$r15, $$r15
    # nextln: 0192:     Jumpcc(Le, block350, block351)
    # nextln:       block350:
    # nextln:           $$r10 = $$r15
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$r10
    # nextln:           $$rax = $$spill19
    # nextln:           $$r10 = $$rdx
    # nextln:           $$rdx = $$r8
    # nextln:           $$r8 = $$r9
    # nextln:           $$r9 = $$rdi
    # nextln:           $$rdi = $$r10
    # nextln:           $$r12 = MovRmS32(0)
    # nextln:           $$spill5 = $$r13
    # nextln:           $$r13 = $$r11
    # nextln:           $$r11 = $$rdi
    # nextln:           $$spill61 = $$rcx
    # nextln:           $$rcx = $$rsi
    # nextln:           $$rsi = $$spill61
    # nextln:           $$rdi = $$rax
    # nextln:           $$r10 = $$spill10
    # nextln:           $$spill22 = $$r10
    # nextln:           $$rax = $$spill11
    # nextln: 0193:     Jump(block352)
    # nextln:       block351:
    # nextln:           $$rax = $$rcx
    # nextln:           $$rcx = $$rsi
    # nextln:           $$rsi = $$rax
    # nextln:           $$spill5 = $$r13
    # nextln:           $$r13 = $$r11
    # nextln:           $$r11 = $$rdx
    # nextln:           $$rdx = $$r8
    # nextln:           $$r8 = $$r9
    # nextln:           $$r9 = $$rdi
    # nextln:           $$rdi = $$spill19
    # nextln:           $$rax = $$rbx
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$rax
    # nextln:           $$r10 = $$spill10
    # nextln:           $$spill22 = $$r10
    # nextln:           $$rax = $$spill11
    # nextln: 0194:     Jump(block352)
    # nextln:       block352:
    # nextln: 0195:     $$r10 = MovzxRRm(S8) $$r12
    # nextln: 0196:     AluRRm(S32, Test) $$r10, $$r10
    # nextln: 0197:     Jumpcc(Ne, block353, block354)
    # nextln:       block353:
    # nextln: 0198:     $$r10 = MovRmS32(0)
    # nextln: 0199:     AluRRm(S32, Test) $$r15, $$r15
    # nextln: 0200:     $$r10 = Setcc(S) $$r10
    # nextln: 0201:     $$r12 = MovRmS32(0)
    # nextln: 0202:     AluRRm(S32, Test) $$r10, $$r10
    # nextln: 0203:     $$r12 = Setcc(E) $$r12
    # nextln: 0204:     $$r10 = MovzxRRm(S8) $$r12
    # nextln: 0205:     AluRRm(S32, Test) $$r10, $$r10
    # nextln: 0206:     Jumpcc(Ne, block356, block357)
    # nextln:       block356:
    # nextln: 0207:     $$r10 = MovRmS32(0)
    # nextln: 0208:     AluRRm(S32, Cmp) $$r15, $$rbx
    # nextln: 0209:     $$r10 = Setcc(E) $$r10
    # nextln: 0210:     $$r10 = MovzxRRm(S8) $$r10
    # nextln: 0211:     AluRRm(S32, Test) $$r10, $$r10
    # nextln: 0212:     Jumpcc(Ne, block359, block360)
    # nextln:       block359:
    # nextln: 0213:     $$r13 = AddRI(S32, 1) $$r13
    # nextln:           $$r10 = $$spill22
    # nextln:           $$spill13 = $$r8
    # nextln:           $$r8 = $$rbx
    # nextln:           $$rbx = $$spill5
    # nextln:           $$spill10 = $$r10
    # nextln:           $$r10 = $$spill2
    # nextln:           $$spill61 = $$rcx
    # nextln:           $$rcx = $$rdx
    # nextln:           $$rdx = $$r13
    # nextln:           $$r13 = $$rsi
    # nextln:           $$rsi = $$spill61
    # nextln:           $$spill61 = $$rdi
    # nextln:           $$rdi = $$r11
    # nextln:           $$r11 = $$r15
    # nextln:           $$r15 = $$spill61
    # nextln:           $$spill11 = $$rax
    # nextln:           $$rax = $$r9
    # nextln:           $$r9 = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$r12 = $$spill8
    # nextln: 0214:     Jump(block310)
    # nextln:       block360:
    # nextln:           $$r10 = $$spill22
    # nextln:           $$r12 = $$spill54
    # nextln:           $$spill2 = $$r12
    # nextln: 0215:     Jump(block358)
    # nextln:       block357:
    # nextln:           $$r10 = $$spill22
    # nextln: 0216:     Jump(block358)
    # nextln:       block358:
    # nextln:           $$r13 = MovRmS32(1)
    # nextln:           $$r15 = $$rbx
    # nextln: 0217:     Jump(block355)
    # nextln:       block354:
    # nextln:           $$r10 = $$spill22
    # nextln: 0218:     Jump(block355)
    # nextln:       block355:
    # nextln:           $$r12 = $$spill8
    # nextln:           $$spill13 = $$r8
    # nextln:           $$spill10 = $$r10
    # nextln:           $$r10 = $$spill2
    # nextln:           $$r8 = $$rbx
    # nextln:           $$rbx = $$spill5
    # nextln:           $$spill61 = $$r15
    # nextln:           $$r15 = $$rdi
    # nextln:           $$rdi = $$r11
    # nextln:           $$r11 = $$spill61
    # nextln:           $$spill11 = $$rax
    # nextln:           $$rax = $$r9
    # nextln:           $$r9 = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$spill61 = $$rsi
    # nextln:           $$rsi = $$rcx
    # nextln:           $$rcx = $$rdx
    # nextln:           $$rdx = $$r13
    # nextln:           $$r13 = $$spill61
    # nextln: 0219:     Jump(block310)
    # nextln:       block336:
    # nextln:           $$spill5 = $$r13
    # nextln:           $$r13 = $$r11
    # nextln:           $$spill61 = $$rbx
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$spill61
    # nextln:           $$spill61 = $$rcx
    # nextln:           $$rcx = $$rsi
    # nextln:           $$rsi = $$spill61
    # nextln:           $$rax = $$rdi
    # nextln:           $$rdi = $$spill19
    # nextln:           $$r11 = $$rdx
    # nextln:           $$rdx = $$r8
    # nextln:           $$r8 = $$r9
    # nextln: 0220:     AluRmI(S32, Cmp, 1) $$r10
    # nextln: 0221:     Jumpcc(E, block337, block338)
    # nextln:       block337:
    # nextln:           $$r10 = $$rcx
    # nextln:           $$r9 = $$r13
    # nextln:           $$r12 = $$r8
    # nextln:           $$r8 = $$r11
    # nextln:           $$r11 = $$rdx
    # nextln:           $$rdx = $$r12
    # nextln:           $$rcx = $$rsi
    # nextln:           $$rsi = $$rax
    # nextln:           $$rax = $$r15
    # nextln:           $$r15 = $$spill5
    # nextln:           $$r12 = $$spill8
    # nextln:           $$r13 = $$rcx
    # nextln:           $$spill13 = $$rdx
    # nextln:           $$rdx = $$r9
    # nextln:           $$r9 = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$rcx = $$r11
    # nextln:           $$r11 = $$rax
    # nextln:           $$rax = $$rsi
    # nextln:           $$rsi = $$r10
    # nextln:           $$r10 = $$spill2
    # nextln:           $$spill61 = $$rbx
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$rdi
    # nextln:           $$rdi = $$r8
    # nextln:           $$r8 = $$spill61
    # nextln: 0222:     Jump(block310)
    # nextln:       block338:
    # nextln:           $$r9 = $$r13
    # nextln:           $$r13 = $$rbx
    # nextln:           $$rbx = $$rdi
    # nextln:           $$rdi = $$r11
    # nextln:           $$r11 = $$rdx
    # nextln:           $$rdx = $$r8
    # nextln:           $$r8 = $$rcx
    # nextln:           $$rcx = $$rsi
    # nextln:           $$rsi = $$rax
    # nextln:           $$spill6 = $$r15
    # nextln:           $$r15 = $$spill5
    # nextln: 0223:     AluRmI(S32, Cmp, 2) $$r10
    # nextln: 0224:     Jumpcc(E, block339, block340)
    # nextln:       block339:
    # nextln: 0225:     $$r10 = MovzxRRm(S8) $$r12
    # nextln: 0226:     AluRRm(S32, Test) $$r10, $$r10
    # nextln: 0227:     Jumpcc(Ne, block347, block348)
    # nextln:       block347:
    # nextln:           $$r12 = $$rdx
    # nextln:           $$rdx = $$r9
    # nextln:           $$r9 = $$r13
    # nextln:           $$r10 = $$spill10
    # nextln:           $$rax = $$spill11
    # nextln: 0228:     Jump(block349)
    # nextln:       block348:
    # nextln:           $$r12 = $$rdx
    # nextln:           $$rdx = $$r9
    # nextln:           $$r9 = $$r13
    # nextln:           $$r13 = $$spill7
    # nextln:           $$r10 = $$spill10
    # nextln:           $$rax = $$spill11
    # nextln: 0229:     Jump(block349)
    # nextln:       block349:
    # nextln:           $$spill13 = $$r12
    # nextln:           $$spill10 = $$r10
    # nextln:           $$spill11 = $$rax
    # nextln:           $$rax = $$rsi
    # nextln:           $$spill61 = $$r15
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$spill61
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rsi = $$r8
    # nextln:           $$r8 = $$r9
    # nextln:           $$r9 = $$r14
    # nextln:           $$r14 = $$r13
    # nextln:           $$r13 = $$rcx
    # nextln:           $$rcx = $$r11
    # nextln:           $$r11 = $$spill6
    # nextln:           $$r12 = $$spill8
    # nextln: 0230:     Jump(block310)
    # nextln:       block340:
    # nextln:           $$r12 = $$rdx
    # nextln:           $$rdx = $$r9
    # nextln: 0231:     AluRmI(S32, Cmp, 3) $$r10
    # nextln: 0232:     Jumpcc(E, block341, block342)
    # nextln:       block341:
    # nextln:           $$r9 = $$r14
    # nextln:           $$r10 = $$spill2
    # nextln:           $$r14 = $$spill7
    # nextln:           $$rax = $$rsi
    # nextln:           $$spill13 = $$r12
    # nextln:           $$r12 = $$spill8
    # nextln:           $$spill61 = $$rbx
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$spill61
    # nextln:           $$rsi = $$r8
    # nextln:           $$r8 = $$r13
    # nextln:           $$r13 = $$rcx
    # nextln:           $$rcx = $$r11
    # nextln:           $$r11 = $$spill6
    # nextln: 0233:     Jump(block310)
    # nextln:       block342:
    # nextln: 0234:     Jump(block343)
    # nextln:       block343:
    # nextln: 0235:     $$r9 = MovRmS32(0)
    # nextln: 0236:     AluRmI(S32, Cmp, 2147483647) $$spill8
    # nextln: 0237:     $$r9 = Setcc(E) $$r9
    # nextln: 0238:     $$r9 = MovzxRRm(S8) $$r9
    # nextln: 0239:     AluRRm(S32, Test) $$r9, $$r9
    # nextln: 0240:     Jumpcc(Ne, block344, block345)
    # nextln:       block344:
    # nextln:           $$r14 = $$r13
    # nextln:           $$r10 = $$spill10
    # nextln:           $$rax = $$spill11
    # nextln: 0241:     Jump(block346)
    # nextln:       block345:
    # nextln:           $$r14 = $$r13
    # nextln:           $$r10 = $$spill10
    # nextln:           $$r13 = $$spill8
    # nextln:           $$rax = $$spill11
    # nextln: 0242:     Jump(block346)
    # nextln:       block346:
    # nextln: 0243:     $$r14 = AddRI(S32, 1) $$r14
    # nextln:           $$r9 = $$r14
    # nextln:           $$spill11 = $$rax
    # nextln:           $$rax = $$rsi
    # nextln:           $$rsi = $$r8
    # nextln:           $$r8 = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$spill13 = $$r12
    # nextln:           $$r12 = $$r13
    # nextln:           $$r13 = $$rcx
    # nextln:           $$rcx = $$r11
    # nextln:           $$r11 = $$spill6
    # nextln:           $$spill61 = $$rbx
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$spill61
    # nextln:           $$spill10 = $$r10
    # nextln:           $$r10 = $$spill2
    # nextln: 0244:     Jump(block310)
    # nextln:       block305:
    # nextln:           $$spill6 = $$rbx
    # nextln:           $$rbx = $$spill19
    # nextln:           $$rax = $$rsi
    # nextln:           $$rsi = $$rdi
    # nextln:           $$rdi = $$rdx
    # nextln:           $$rdx = $$r11
    # nextln:           $$r11 = $$r8
    # nextln:           $$r8 = $$rax
    # nextln:           $$rax = $$r13
    # nextln:           $$r13 = $$r15
    # nextln:           $$r15 = $$rax
    # nextln: 0245:     Jump(block306)
    # nextln:       block306:
    # nextln: 0246:     AluRmI(S32, Cmp, 69) $$r9
    # nextln: 0247:     Jumpcc(E, block307, block309)
    # nextln:       block307:
    # nextln:           $$rax = $$spill10
    # nextln:           $$spill20 = $$r11
    # nextln:           $$spill0 = $$rsi
    # nextln:           $$spill1 = $$r8
    # nextln:           $$spill21 = $$rdi
    # nextln:           $$spill9 = $$rdx
    # nextln:           $$spill19 = $$rbx
    # nextln:           $$spill4 = $$r14
    # nextln:           $$r14 = $$r13
    # nextln:           $$r13 = $$spill11
    # nextln:           $$spill3 = $$rcx
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$rax
    # nextln: 0248:     Jump(block308)
    # nextln:       block308:
    # nextln: 0249:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0250:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0251:     AluRRm(S32, Cmp) $$rax, $$rbx
    # nextln: 0252:     Jumpcc(Le, block311, block313)
    # nextln:       block311:
    # nextln:           $$spill18 = $$r13
    # nextln: 0253:     Jump(block312)
    # nextln:       block313:
    # nextln: 0254:     $$rax = MovsxRRm(Ext32_64) $$rbx
    # nextln:           $$rcx = $$spill57
    # nextln: 0255:     $$rax = ImulRR(S64) $$rax, $$rcx
    # nextln: 0256:     $$rax = AddRR(S64) $$r15, $$rax
    # nextln: 0257:     $$rax = MovRM(S16, [reg + 0]) $$rax
    # nextln: 0258:     AluRmI(S32, Cmp, 48) $$rax
    # nextln: 0259:     Jumpcc(E, block314, block315)
    # nextln:       block314:
    # nextln:           $$rcx = MovRmS32(1)
    # nextln:           $$rax = $$spill57
    # nextln:           $$spill18 = $$r13
    # nextln: 0260:     Jump(block325)
    # nextln:       block315:
    # nextln:           $$spill18 = $$r13
    # nextln: 0261:     Jump(block312)
    # nextln:       block312:
    # nextln: 0262:     $$r13 = AddRI(S32, 1) $$rbx
    # nextln: 0263:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0264:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0265:     AluRRm(S32, Cmp) $$rax, $$r13
    # nextln: 0266:     Jumpcc(Le, block316, block318)
    # nextln:       block316:
    # nextln:           $$rax = $$spill57
    # nextln: 0267:     Jump(block317)
    # nextln:       block318:
    # nextln: 0268:     $$rcx = MovsxRRm(Ext32_64) $$rbx
    # nextln:           $$rax = $$spill57
    # nextln: 0269:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 0270:     $$rcx = AddRR(S64) $$r15, $$rcx
    # nextln: 0271:     $$rdx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0272:     AluRmI(S32, Cmp, 43) $$rdx
    # nextln: 0273:     Jumpcc(E, block319, block321)
    # nextln:       block319:
    # nextln: 0274:     Jump(block320)
    # nextln:       block321:
    # nextln: 0275:     $$rcx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0276:     AluRmI(S32, Cmp, 45) $$rcx
    # nextln: 0277:     Jumpcc(Ne, block322, block323)
    # nextln:       block322:
    # nextln: 0278:     Jump(block317)
    # nextln:       block317:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln: 0279:     Jump(block324)
    # nextln:       block323:
    # nextln: 0280:     Jump(block320)
    # nextln:       block320:
    # nextln: 0281:     $$rcx = AddRI(S32, 1) $$rbx
    # nextln: 0282:     $$rcx = MovsxRRm(Ext32_64) $$rcx
    # nextln: 0283:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 0284:     $$rcx = AddRR(S64) $$r15, $$rcx
    # nextln: 0285:     $$rdx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0286:     $$rcx = MovRmS32(0)
    # nextln: 0287:     AluRmI(S32, Cmp, 48) $$rdx
    # nextln: 0288:     $$rcx = Setcc(E) $$rcx
    # nextln: 0289:     Jump(block324)
    # nextln:       block324:
    # nextln: 0290:     Jump(block325)
    # nextln:       block325:
    # nextln: 0291:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0292:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0293:     Jumpcc(Ne, block326, block327)
    # nextln:       block326:
    # nextln:           $$r13 = $$spill7
    # nextln:           $$spill5 = $$r15
    # nextln:           $$rsi = $$spill21
    # nextln:           $$rcx = $$r14
    # nextln:           $$r14 = $$spill8
    # nextln:           $$r9 = $$spill4
    # nextln:           $$rdx = $$spill2
    # nextln:           $$spill57 = $$rax
    # nextln:           $$r8 = $$spill1
    # nextln:           $$r15 = $$r12
    # nextln:           $$r12 = $$spill19
    # nextln:           $$rax = $$spill0
    # nextln:           $$r10 = $$spill18
    # nextln:           $$rdi = $$spill9
    # nextln:           $$r11 = $$spill20
    # nextln:           $$spill22 = $$r15
    # nextln:           $$spill12 = $$rcx
    # nextln: 0294:     Jump(block329)
    # nextln:       block329:
    # nextln: 0295:     $$rbx = AddRI(S32, 1) $$rbx
    # nextln: 0296:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0297:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0298:     AluRRm(S32, Cmp) $$rax, $$rbx
    # nextln: 0299:     Jumpcc(Le, block330, block331)
    # nextln:       block330:
    # nextln:           $$r9 = $$spill18
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rcx = $$spill0
    # nextln:           $$rsi = $$spill1
    # nextln:           $$rdi = $$spill22
    # nextln:           $$rax = $$spill20
    # nextln:           $$r8 = $$spill12
    # nextln:           $$rdx = $$spill9
    # nextln:           $$r11 = $$spill6
    # nextln:           $$r15 = MovRmS32(0)
    # nextln:           $$spill7 = $$r13
    # nextln:           $$r15 = $$spill5
    # nextln:           $$r13 = $$rax
    # nextln:           $$rax = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r12 = MovRmS32(0)
    # nextln: 0300:     Jump(block332)
    # nextln:       block331:
    # nextln:           $$r9 = $$spill18
    # nextln:           $$r11 = $$spill6
    # nextln:           $$r10 = $$spill2
    # nextln:           $$spill8 = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$rdx = $$spill9
    # nextln:           $$rdi = $$spill22
    # nextln:           $$spill7 = $$r13
    # nextln:           $$r8 = $$spill12
    # nextln:           $$r13 = $$spill20
    # nextln:           $$rcx = $$spill0
    # nextln:           $$rsi = $$spill1
    # nextln: 0301:     $$rax = MovsxRRm(Ext32_64) $$rbx
    # nextln:           $$spill13 = $$rbx
    # nextln:           $$r12 = $$spill57
    # nextln: 0302:     $$rax = ImulRR(S64) $$rax, $$r12
    # nextln:           $$r15 = $$spill5
    # nextln: 0303:     $$rax = AddRR(S64) $$r15, $$rax
    # nextln: 0304:     $$rax = MovRM(S16, [reg + 0]) $$rax
    # nextln: 0305:     $$r12 = MovRmS32(0)
    # nextln: 0306:     AluRmI(S32, Cmp, 48) $$rax
    # nextln: 0307:     $$r12 = Setcc(E) $$r12
    # nextln:           $$rax = $$spill8
    # nextln: 0308:     Jump(block332)
    # nextln:       block332:
    # nextln: 0309:     $$r12 = MovzxRRm(S8) $$r12
    # nextln: 0310:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 0311:     Jumpcc(Ne, block333, block334)
    # nextln:       block333:
    # nextln:           $$r12 = $$r14
    # nextln:           $$spill0 = $$rcx
    # nextln:           $$r14 = $$rax
    # nextln:           $$spill18 = $$r9
    # nextln:           $$spill6 = $$r11
    # nextln:           $$spill12 = $$r8
    # nextln:           $$spill2 = $$r10
    # nextln:           $$spill1 = $$rsi
    # nextln:           $$spill22 = $$rdi
    # nextln:           $$spill5 = $$r15
    # nextln:           $$spill9 = $$rdx
    # nextln:           $$spill20 = $$r13
    # nextln:           $$r13 = $$spill7
    # nextln: 0312:     Jump(block329)
    # nextln:       block334:
    # nextln:           $$r12 = $$rax
    # nextln:           $$spill22 = $$rdi
    # nextln:           $$rax = $$rcx
    # nextln:           $$rcx = $$r13
    # nextln:           $$spill18 = $$r9
    # nextln:           $$spill13 = $$rbx
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$rdi = $$spill21
    # nextln:           $$r9 = $$spill4
    # nextln:           $$r13 = $$spill54
    # nextln: 0313:     Jump(block328)
    # nextln:       block327:
    # nextln:           $$rdx = $$spill9
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rdi = $$spill21
    # nextln:           $$r8 = $$r14
    # nextln:           $$r14 = $$spill7
    # nextln:           $$r9 = $$spill4
    # nextln:           $$r13 = $$spill3
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rsi = $$spill1
    # nextln:           $$spill22 = $$r12
    # nextln:           $$r12 = $$spill8
    # nextln:           $$rcx = $$spill20
    # nextln:           $$spill57 = $$rax
    # nextln:           $$rax = $$spill0
    # nextln:           $$spill13 = $$rbx
    # nextln:           $$rbx = $$r15
    # nextln:           $$r15 = $$spill19
    # nextln: 0314:     Jump(block328)
    # nextln:       block328:
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = $$spill18
    # nextln:           $$spill11 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$rax = $$spill22
    # nextln:           $$spill10 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln: 0315:     Jump(block310)
    # nextln:       block309:
    # nextln:           $$spill13 = $$r12
    # nextln:           $$rax = $$rsi
    # nextln:           $$spill61 = $$r15
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$spill61
    # nextln:           $$r9 = $$r14
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rsi = $$r8
    # nextln:           $$r8 = $$r13
    # nextln:           $$r13 = $$rcx
    # nextln:           $$rcx = $$r11
    # nextln:           $$r11 = $$spill6
    # nextln:           $$r12 = $$spill8
    # nextln:           $$r14 = $$spill7
    # nextln: 0316:     Jump(block310)
    # nextln:       block310:
    # nextln:           $$spill19 = $$r15
    # nextln:           $$r15 = $$rdx
    # nextln:           $$spill8 = $$r12
    # nextln:           $$spill7 = $$r14
    # nextln:           $$r14 = $$rdi
    # nextln:           $$r12 = $$spill13
    # nextln:           $$spill5 = $$rbx
    # nextln:           $$spill12 = $$r8
    # nextln:           $$spill3 = $$r13
    # nextln:           $$spill2 = $$r10
    # nextln:           $$spill1 = $$rsi
    # nextln:           $$r13 = $$r11
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = $$spill10
    # nextln:           $$spill22 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$spill20 = $$rcx
    # nextln:           $$spill0 = $$rax
    # nextln:           $$rbx = $$spill11
    # nextln:           $$spill4 = $$r9
    # nextln: 0317:     Jump(block11)
    # nextln:       block19:
    # nextln:           $$r9 = $$spill10
    # nextln:           $$r10 = $$spill2
    # nextln:           $$rdx = $$spill8
    # nextln:           $$rcx = $$spill20
    # nextln:           $$spill21 = $$r13
    # nextln:           $$r11 = $$spill6
    # nextln:           $$rsi = $$r14
    # nextln:           $$rax = $$spill0
    # nextln:           $$rbx = $$spill4
    # nextln:           $$rdi = $$spill11
    # nextln:           $$r8 = $$spill12
    # nextln:           $$r14 = $$spill7
    # nextln:           $$r13 = $$spill3
    # nextln:           $$r15 = $$spill19
    # nextln: 0318:     $$r12 = MovRmS32(0)
    # nextln: 0319:     AluRRm(S32, Test) $$r14, $$r14
    # nextln: 0320:     $$r12 = Setcc(S) $$r12
    # nextln: 0321:     $$r12 = MovzxRRm(S8) $$r12
    # nextln: 0322:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 0323:     Jumpcc(Ne, block20, block21)
    # nextln:       block20:
    # nextln:           $$r12 = $$spill9
    # nextln:           $$r14 = $$r11
    # nextln:           $$spill23 = $$r10
    # nextln:           $$r10 = $$rdx
    # nextln:           $$rdx = $$rcx
    # nextln:           $$spill22 = $$r9
    # nextln:           $$r9 = $$r8
    # nextln:           $$rcx = $$rdi
    # nextln:           $$rdi = $$r8
    # nextln:           $$r8 = $$rax
    # nextln:           $$rax = $$r15
    # nextln:           $$r15 = $$r13
    # nextln:           $$r13 = $$rbx
    # nextln: 0324:     Jump(block22)
    # nextln:       block21:
    # nextln:           $$r12 = $$spill9
    # nextln:           $$spill23 = $$r10
    # nextln:           $$r10 = $$rdx
    # nextln:           $$spill22 = $$r9
    # nextln:           $$r9 = $$r8
    # nextln:           $$rdx = $$rcx
    # nextln:           $$rcx = $$rdi
    # nextln:           $$rdi = $$r14
    # nextln:           $$r14 = $$r11
    # nextln:           $$r8 = $$rax
    # nextln:           $$rax = $$r15
    # nextln:           $$r15 = $$r13
    # nextln:           $$r13 = $$rbx
    # nextln: 0325:     Jump(block22)
    # nextln:       block22:
    # nextln: 0326:     $$r11 = MovRmS32(0)
    # nextln: 0327:     AluRRm(S32, Test) $$r14, $$r14
    # nextln: 0328:     $$r11 = Setcc(S) $$r11
    # nextln: 0329:     $$rbx = MovRmS32(0)
    # nextln: 0330:     AluRRm(S32, Test) $$r11, $$r11
    # nextln: 0331:     $$rbx = Setcc(E) $$rbx
    # nextln: 0332:     $$r11 = MovzxRRm(S8) $$rbx
    # nextln: 0333:     AluRRm(S32, Test) $$r11, $$r11
    # nextln: 0334:     Jumpcc(Ne, block23, block24)
    # nextln:       block23:
    # nextln: 0335:     $$r11 = MovRmS32(0)
    # nextln: 0336:     AluRRm(S32, Cmp) $$r14, $$rdi
    # nextln: 0337:     $$r11 = Setcc(E) $$r11
    # nextln: 0338:     $$r11 = MovzxRRm(S8) $$r11
    # nextln: 0339:     AluRRm(S32, Test) $$r11, $$r11
    # nextln: 0340:     Jumpcc(Ne, block296, block297)
    # nextln:       block296:
    # nextln: 0341:     $$r11 = ImulRRmI(S32, 3) $$r12
    # nextln:           $$rbx = $$r12
    # nextln: 0342:     $$rsi = AluRRm(S32, Sub) $$rsi, $$r11
    # nextln:           $$r11 = $$rax
    # nextln:           $$r12 = $$r15
    # nextln:           $$r15 = $$spill22
    # nextln:           $$r14 = $$spill21
    # nextln:           $$rax = $$spill23
    # nextln: 0343:     Jump(block298)
    # nextln:       block297:
    # nextln:           $$r11 = $$rax
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r15
    # nextln:           $$r15 = $$spill22
    # nextln:           $$r14 = $$spill21
    # nextln:           $$rax = $$spill54
    # nextln: 0344:     Jump(block298)
    # nextln:       block298:
    # nextln:           $$spill9 = $$rbx
    # nextln:           $$spill23 = $$rax
    # nextln: 0345:     Jump(block25)
    # nextln:       block24:
    # nextln:           $$r11 = $$rax
    # nextln:           $$rax = $$spill23
    # nextln:           $$rbx = $$r12
    # nextln:           $$r14 = $$spill21
    # nextln:           $$r12 = $$r15
    # nextln:           $$r15 = $$spill22
    # nextln:           $$spill9 = $$rbx
    # nextln: 0346:     Jump(block25)
    # nextln:       block25:
    # nextln: 0347:     $$rax = MovRM(S8, [reg + 0]) $$r15
    # nextln: 0348:     $$rbx = MovRmS32(0)
    # nextln: 0349:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0350:     $$rbx = Setcc(Ne) $$rbx
    # nextln: 0351:     $$rax = MovzxRRm(S8) $$rbx
    # nextln: 0352:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0353:     Jumpcc(Ne, block26, block27)
    # nextln:       block26:
    # nextln: 0354:     $$rax = MovRM(S32, [reg + 4]) $$r11
    # nextln: 0355:     $$rax = AddRR(S32) $$rax, $$rsi
    # nextln: 0356:     MovMR(S32, [reg + 4]) $$rax, $$r11
    # nextln: 0357:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 0358:     Jumpcc(Ne, block288, block289)
    # nextln:       block288:
    # nextln:           $$rbx = $$spill9
    # nextln:           $$rax = $$spill23
    # nextln:           $$spill17 = $$r8
    # nextln:           $$spill14 = $$r10
    # nextln:           $$spill15 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln:           $$spill24 = $$r12
    # nextln:           $$r12 = $$r15
    # nextln:           $$r15 = $$r11
    # nextln:           $$spill20 = $$rdx
    # nextln:           $$spill16 = $$r9
    # nextln:           $$spill18 = $$rcx
    # nextln:           $$rsi = $$r9
    # nextln:           $$r14 = $$rdi
    # nextln: 0359:     Jump(block290)
    # nextln:       block289:
    # nextln:           $$rax = $$spill23
    # nextln:           $$rbx = $$spill9
    # nextln: 0360:     $$rsi = MovRM(S32, [reg + 4]) $$r11
    # nextln: 0361:     $$rsi = AddRR(S32) $$rsi, $$r9
    # nextln: 0362:     $$rsi = AluRRm(S32, Sub) $$rsi, $$rdi
    # nextln:           $$spill14 = $$r10
    # nextln:           $$spill15 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln:           $$r14 = $$rdi
    # nextln:           $$spill24 = $$r12
    # nextln:           $$r12 = $$r15
    # nextln:           $$r15 = $$r11
    # nextln:           $$spill20 = $$rdx
    # nextln:           $$spill16 = $$r9
    # nextln:           $$spill17 = $$r8
    # nextln:           $$spill18 = $$rcx
    # nextln: 0363:     Jump(block290)
    # nextln:       block290:
    # nextln: 0364:     $$rax = FuncAddrAbs(External(extfunc25))
    # nextln:           $$rdi = $$r15
    # nextln:           $$rdx = $$spill58
    # nextln: 0365:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0366:     $$rcx = MovRM(S8, [reg + 0]) $$r12
    # nextln: 0367:     $$rax = MovRmS32(0)
    # nextln: 0368:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0369:     $$rax = Setcc(E) $$rax
    # nextln: 0370:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0371:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0372:     Jumpcc(Ne, block291, block292)
    # nextln:       block291:
    # nextln: 0373:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rdx = MovRmS32(16)
    # nextln:           $$rdi = StackAddr(!6)
    # nextln:           $$rsi = StackAddr(!0)
    # nextln: 0374:     $$rax = CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0375:     $$rax = FuncAddrAbs(External(extfunc14))
    # nextln:           $$rsi = MovRmS32(2)
    # nextln:           $$rdi = StackAddr(!6)
    # nextln: 0376:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0377:     $$rcx = MovRmS32(0)
    # nextln: 0378:     AluRRm(S32, Cmp) $$rax, $$spill17
    # nextln: 0379:     $$rcx = Setcc(E) $$rcx
    # nextln: 0380:     $$rdx = MovRmS32(0)
    # nextln: 0381:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0382:     $$rdx = Setcc(E) $$rdx
    # nextln: 0383:     $$rcx = MovzxRRm(S8) $$rdx
    # nextln: 0384:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0385:     Jumpcc(Ne, block294, block295)
    # nextln:       block294:
    # nextln:           $$spill19 = $$r15
    # nextln:           $$r14 = $$r13
    # nextln:           $$r13 = $$rax
    # nextln:           $$r15 = $$r12
    # nextln:           $$r12 = $$spill18
    # nextln: 0386:     Jump(block9)
    # nextln:       block295:
    # nextln:           $$r10 = $$spill14
    # nextln:           $$r8 = $$spill15
    # nextln:           $$rdx = $$spill24
    # nextln:           $$r11 = $$spill23
    # nextln:           $$rax = $$spill20
    # nextln:           $$r9 = $$spill16
    # nextln:           $$rcx = $$spill17
    # nextln:           $$rsi = $$r15
    # nextln:           $$rbx = $$r14
    # nextln:           $$rdi = $$r12
    # nextln:           $$r12 = $$spill18
    # nextln: 0387:     Jump(block293)
    # nextln:       block292:
    # nextln:           $$rbx = $$r14
    # nextln:           $$r10 = $$spill14
    # nextln:           $$r8 = $$spill15
    # nextln:           $$rdx = $$spill24
    # nextln:           $$r11 = $$spill23
    # nextln:           $$rdi = $$r12
    # nextln:           $$rax = $$spill20
    # nextln:           $$r9 = $$spill16
    # nextln:           $$rcx = $$spill17
    # nextln:           $$r12 = $$spill18
    # nextln:           $$rsi = $$r15
    # nextln: 0388:     Jump(block293)
    # nextln:       block293:
    # nextln:           $$r14 = $$r11
    # nextln:           $$r15 = $$r13
    # nextln:           $$r13 = $$rsi
    # nextln:           $$rsi = $$rax
    # nextln:           $$rax = $$rcx
    # nextln:           $$rcx = $$r9
    # nextln:           $$r9 = $$r15
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r15
    # nextln: 0389:     Jump(block31)
    # nextln:       block27:
    # nextln:           $$rsi = $$r11
    # nextln:           $$rbx = $$rdi
    # nextln:           $$r11 = $$spill23
    # nextln:           $$rdi = $$r15
    # nextln:           $$rax = $$rdx
    # nextln:           $$rdx = $$r12
    # nextln:           $$r12 = $$rcx
    # nextln:           $$rcx = $$r8
    # nextln:           $$r8 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln: 0390:     $$r15 = MovRM(S8, [reg + 10]) $$rsi
    # nextln: 0391:     $$r14 = MovRmS32(0)
    # nextln: 0392:     AluRmI(S32, Cmp, 3) $$r15
    # nextln: 0393:     $$r14 = Setcc(E) $$r14
    # nextln: 0394:     $$r15 = MovRmS32(0)
    # nextln: 0395:     AluRRm(S32, Test) $$r14, $$r14
    # nextln: 0396:     $$r15 = Setcc(E) $$r15
    # nextln: 0397:     $$r14 = MovzxRRm(S8) $$r15
    # nextln: 0398:     AluRRm(S32, Test) $$r14, $$r14
    # nextln: 0399:     Jumpcc(Ne, block28, block29)
    # nextln:       block28:
    # nextln:           $$r14 = MovRmS32(0)
    # nextln: 0400:     MovMR(S8, [reg + 8]) $$r14, $$rsi
    # nextln: 0401:     Jump(block30)
    # nextln:       block29:
    # nextln: 0402:     Jump(block30)
    # nextln:       block30:
    # nextln:           $$r14 = MovRmS32(0)
    # nextln: 0403:     MovMR(S32, [reg + 4]) $$r14, $$rsi
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r15
    # nextln:           $$r15 = $$rsi
    # nextln:           $$rsi = $$rax
    # nextln:           $$rax = $$rcx
    # nextln:           $$rcx = $$r9
    # nextln:           $$r9 = $$r13
    # nextln:           $$r13 = $$r15
    # nextln:           $$r14 = $$r11
    # nextln: 0404:     Jump(block31)
    # nextln:       block31:
    # nextln: 0405:     Jump(block32)
    # nextln:       block32:
    # nextln: 0406:     AluRRm(S32, Cmp) $$r10, $$r12
    # nextln: 0407:     Jumpcc(L, block33, block34)
    # nextln:       block33:
    # nextln:           $$r11 = $$r12
    # nextln: 0408:     $$r11 = AluRRm(S32, Sub) $$r11, $$r10
    # nextln: 0409:     Jump(block35)
    # nextln:       block34:
    # nextln:           $$r11 = MovRmS32(0)
    # nextln: 0410:     Jump(block35)
    # nextln:       block35:
    # nextln: 0411:     AluRRm(S32, Cmp) $$r12, $$r8
    # nextln: 0412:     Jumpcc(L, block36, block37)
    # nextln:       block36:
    # nextln:           $$r10 = $$r12
    # nextln: 0413:     $$r10 = AluRRm(S32, Sub) $$r10, $$r8
    # nextln: 0414:     Jump(block38)
    # nextln:       block37:
    # nextln:           $$r10 = MovRmS32(0)
    # nextln: 0415:     Jump(block38)
    # nextln:       block38:
    # nextln: 0416:     $$r8 = MovzxRRm(S8) $$rdx
    # nextln: 0417:     AluRRm(S32, Test) $$r8, $$r8
    # nextln: 0418:     Jumpcc(Ne, block39, block40)
    # nextln:       block39:
    # nextln:           $$r15 = MovRmS32(0)
    # nextln:           $$spill32 = $$rcx
    # nextln:           $$spill47 = $$r12
    # nextln:           $$spill49 = $$r11
    # nextln:           $$spill48 = $$r10
    # nextln:           $$spill46 = $$rdx
    # nextln:           $$spill38 = $$rdi
    # nextln:           $$spill40 = $$r9
    # nextln:           $$spill39 = $$rsi
    # nextln:           $$spill42 = $$rax
    # nextln:           $$spill35 = $$r13
    # nextln:           $$r15 = $$rbx
    # nextln:           $$r8 = MovRmS32(0)
    # nextln:           $$spill44 = $$r8
    # nextln: 0419:     Jump(block44)
    # nextln:       block40:
    # nextln: 0420:     $$r8 = MovRM(S32, [reg + 4]) $$r13
    # nextln: 0421:     AluRRm(S32, Cmp) $$r12, $$r8
    # nextln: 0422:     Jumpcc(L, block41, block42)
    # nextln:       block41:
    # nextln: 0423:     $$r8 = MovRM(S32, [reg + 4]) $$r13
    # nextln: 0424:     Jump(block43)
    # nextln:       block42:
    # nextln:           $$r8 = $$r12
    # nextln: 0425:     Jump(block43)
    # nextln:       block43:
    # nextln: 0426:     $$r15 = MovRM(S32, [reg + 4]) $$r13
    # nextln: 0427:     $$r15 = AluRRm(S32, Sub) $$r15, $$r12
    # nextln:           $$spill42 = $$rax
    # nextln:           $$spill32 = $$rcx
    # nextln:           $$spill47 = $$r8
    # nextln:           $$spill49 = $$r11
    # nextln:           $$spill48 = $$r10
    # nextln:           $$spill38 = $$rdi
    # nextln:           $$spill40 = $$r9
    # nextln:           $$spill39 = $$rsi
    # nextln:           $$spill44 = $$r15
    # nextln:           $$spill35 = $$r13
    # nextln:           $$r15 = $$rbx
    # nextln:           $$spill46 = $$rdx
    # nextln: 0428:     Jump(block44)
    # nextln:       block44:
    # nextln: 0429:     $$rbx = MovzxRRm(S8) $$r14
    # nextln:           $$spill45 = $$r14
    # nextln: 0433:     $$rax = FuncAddrAbs(External(extfunc16))
    # nextln:           $$rsi = MovRmS32(16)
    # nextln:           $$rdi = StackAddr(!9)
    # nextln: 0434:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0435:     $$rax = FuncAddrAbs(External(extfunc30))
    # nextln:           $$rsi = MovRmS32(16)
    # nextln:           $$rdi = StackAddr(!10)
    # nextln: 0436:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0437:     $$rax = FuncAddrAbs(External(extfunc7))
    # nextln:           $$rdi = StackAddr(!10)
    # nextln:           $$rdx = MovRmS32(4)
    # nextln:           $$rsi = StackAddr(!9)
    # nextln: 0438:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0439:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rdx = MovRmS32(16)
    # nextln:           $$rsi = StackAddr(!10)
    # nextln:           $$rdi = StackAddr(!8)
    # nextln: 0440:     $$rax = CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0441:     AluRRm(S32, Test) $$rbx, $$rbx
    # nextln: 0442:     Jumpcc(Ne, block45, block46)
    # nextln:       block45:
    # nextln: 0443:     $$rax = FuncAddrAbs(External(extfunc18))
    # nextln:           $$rbx = $$r15
    # nextln:           $$rdi = $$rbx
    # nextln: 0444:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0445:     $$rcx = FuncAddrAbs(External(extfunc12))
    # nextln:           $$rdi = $$rax
    # nextln: 0446:     $$rax = CallRm $$rcx, $$rdi
    # nextln: 0447:     $$rcx = MovRmS32(0)
    # nextln: 0448:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0449:     $$rcx = Setcc(G) $$rcx
    # nextln: 0450:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 0451:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0452:     Jumpcc(Ne, block260, block261)
    # nextln:       block260:
    # nextln: 0453:     $$r10 = MovRM(S64, [reg + 16]) $$rbx
    # nextln:           $$spill43 = $$rbx
    # nextln: 0454:     $$rax = MovRM(S32, [reg + 16]) $$r10
    # nextln: 0455:     $$rcx = MovRmS32(0)
    # nextln: 0456:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0457:     $$rcx = Setcc(Ne) $$rcx
    # nextln: 0458:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0459:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0460:     Jumpcc(Ne, block263, block264)
    # nextln:       block263:
    # nextln: 0461:     $$rdx = MovRM(S32, [reg + 16]) $$r10
    # nextln:           $$rcx = MovRmS32(0)
    # nextln: 0462:     $$rcx = MovsxRRm(Ext32_64) $$rcx
    # nextln: 0463:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0464:     Jumpcc(B, block286, block287)
    # nextln:       block286:
    # nextln: 0465:     $$rcx = ImulRRmI(S64, 4) $$rcx
    # nextln: 0466:     $$rcx = AddRI(S64, 24) $$rcx
    # nextln: 0467:     $$r8 = AddRR(S64) $$r10, $$rcx
    # nextln:           $$rcx = $$spill42
    # nextln:           $$rsi = $$spill44
    # nextln:           $$rdx = $$spill47
    # nextln:           $$r13 = $$rax
    # nextln:           $$rax = $$spill49
    # nextln:           $$r9 = $$spill38
    # nextln:           $$rbx = $$r10
    # nextln:           $$r10 = $$spill39
    # nextln:           $$rdi = $$spill32
    # nextln: 0468:     $$r8 = MovRM(S32, [reg + 0]) $$r8
    # nextln:           $$r11 = $$spill45
    # nextln:           $$r15 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln:           $$spill27 = $$r8
    # nextln:           $$r8 = $$r12
    # nextln:           $$r12 = $$rbx
    # nextln:           $$rbx = $$r10
    # nextln:           $$r10 = MovRU32(4294967295)
    # nextln:           $$r14 = MovRmS32(0)
    # nextln:           $$r14 = $$rax
    # nextln:           $$rax = $$r8
    # nextln:           $$r8 = $$rcx
    # nextln:           $$spill62 = $$rcx
    # nextln:           $$rcx = $$rdi
    # nextln:           $$rdi = $$rsi
    # nextln:           $$rsi = $$spill62
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = MovRU32(4294967295)
    # nextln:           $$spill36 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$r10 = $$rbx
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r13
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$spill25 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$r13 = $$r15
    # nextln:           $$r15 = $$r11
    # nextln: 0469:     Jump(block265)
    # nextln:       block287:
    # nextln: 0470:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln: 0471:     CallRm $$rax
    # nextln: 0472:     Ud2
    # nextln:       block264:
    # nextln:           $$rcx = $$spill42
    # nextln:           $$rsi = $$spill44
    # nextln:           $$rdi = $$spill32
    # nextln:           $$rbx = $$r10
    # nextln:           $$rdx = $$spill47
    # nextln:           $$r8 = $$r12
    # nextln:           $$r12 = $$spill35
    # nextln:           $$r13 = $$rax
    # nextln:           $$rax = $$spill49
    # nextln:           $$r9 = $$spill38
    # nextln:           $$r10 = $$spill39
    # nextln:           $$r15 = $$spill45
    # nextln:           $$r11 = MovRmS32(0)
    # nextln:           $$r14 = MovRU32(4294967295)
    # nextln:           $$r14 = $$rax
    # nextln:           $$rax = $$r8
    # nextln:           $$r8 = $$rcx
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = MovRU32(4294967295)
    # nextln:           $$spill36 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$spill25 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$spill27 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$r11 = $$rsi
    # nextln:           $$rsi = $$rcx
    # nextln:           $$rcx = $$rdi
    # nextln:           $$rdi = $$r11
    # nextln: 0473:     Jump(block265)
    # nextln:       block265:
    # nextln: 0474:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0475:     Jumpcc(S, block266, block267)
    # nextln:       block266:
    # nextln:           $$r11 = $$spill27
    # nextln:           $$spill34 = $$rsi
    # nextln:           $$spill42 = $$r8
    # nextln:           $$spill32 = $$rcx
    # nextln:           $$spill47 = $$rdx
    # nextln:           $$spill44 = $$rdi
    # nextln:           $$spill38 = $$r9
    # nextln:           $$rcx = $$r11
    # nextln:           $$spill50 = $$rax
    # nextln:           $$rax = $$r14
    # nextln: 0476:     Jump(block268)
    # nextln:       block267:
    # nextln:           $$spill38 = $$r9
    # nextln:           $$r11 = $$spill27
    # nextln:           $$r9 = MovRmS32(0)
    # nextln:           $$spill34 = $$rsi
    # nextln:           $$spill42 = $$r8
    # nextln:           $$spill32 = $$rcx
    # nextln:           $$spill47 = $$rdx
    # nextln:           $$spill44 = $$rdi
    # nextln:           $$rdi = MovRmS32(0)
    # nextln:           $$spill50 = $$rax
    # nextln:           $$rax = $$r14
    # nextln:           $$rcx = $$r11
    # nextln: 0477:     Jump(block268)
    # nextln:       block268:
    # nextln: 0478:     $$r14 = AddRR(S32) $$rdx, $$rdi
    # nextln: 0479:     AluRRm(S32, Cmp) $$r14, $$rax
    # nextln: 0480:     Jumpcc(L, block269, block270)
    # nextln:       block269:
    # nextln:           $$rsi = $$spill38
    # nextln:           $$r14 = $$rax
    # nextln: 0481:     Jump(block271)
    # nextln:       block270:
    # nextln:           $$rsi = $$spill38
    # nextln: 0482:     Jump(block271)
    # nextln:       block271:
    # nextln: 0485:     $$rdx = StackAddr(!12)
    # nextln:           $$spill29 = $$r13
    # nextln:           $$r9 = $$spill32
    # nextln:           $$rdi = $$r15
    # nextln:           $$r15 = $$spill44
    # nextln:           $$r13 = $$r12
    # nextln:           $$r12 = $$spill42
    # nextln:           $$spill61 = $$r10
    # nextln:           $$r10 = $$rbx
    # nextln:           $$rbx = $$spill61
    # nextln:           $$r8 = $$spill25
    # nextln:           $$spill27 = $$r11
    # nextln:           $$r11 = $$spill50
    # nextln:           $$rdx = $$spill34
    # nextln:           $$spill49 = $$rax
    # nextln:           $$spill45 = $$rdi
    # nextln:           $$spill38 = $$rsi
    # nextln:           $$spill30 = $$rcx
    # nextln:           $$spill39 = $$rbx
    # nextln:           $$spill35 = $$r13
    # nextln:           $$spill28 = $$r10
    # nextln: 0486:     Jump(block272)
    # nextln:       block272:
    # nextln: 0487:     $$rcx = MovRmS32(0)
    # nextln:           $$rax = $$spill30
    # nextln: 0488:     AluRRm(S32, Cmp) $$rax, $$r14
    # nextln:           $$spill26 = $$r14
    # nextln: 0489:     $$rcx = Setcc(L) $$rcx
    # nextln: 0490:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0491:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0492:     Jumpcc(Ne, block273, block274)
    # nextln:       block273:
    # nextln: 0493:     $$rcx = MovRmS32(0)
    # nextln:           $$rax = $$spill27
    # nextln: 0494:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0495:     $$rcx = Setcc(E) $$rcx
    # nextln: 0496:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0497:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0498:     Jumpcc(Ne, block276, block277)
    # nextln:       block277:
    # nextln:           $$rax = $$spill36
    # nextln: 0499:     $$rax = AddRI(S32, 1) $$rax
    # nextln:           $$spill36 = $$rax
    # nextln: 0500:     $$rax = FuncAddrAbs(External(extfunc28))
    # nextln:           $$r13 = $$spill36
    # nextln:           $$rdi = StackAddr(!8)
    # nextln: 0501:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0502:     $$rcx = MovRmS32(0)
    # nextln: 0503:     AluRRm(S32, Cmp) $$r13, $$rax
    # nextln: 0504:     $$rcx = Setcc(L) $$rcx
    # nextln: 0505:     $$rdx = MovRmS32(0)
    # nextln: 0506:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0507:     $$rdx = Setcc(E) $$rdx
    # nextln: 0508:     $$rax = MovzxRRm(S8) $$rdx
    # nextln: 0509:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0510:     Jumpcc(Ne, block278, block279)
    # nextln:       block278:
    # nextln: 0511:     $$rax = FuncAddrAbs(External(extfunc28))
    # nextln:           $$rdi = StackAddr(!8)
    # nextln: 0512:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0513:     $$rax = ImulRRmI(S32, 2) $$rax
    # nextln: 0514:     $$r14 = MovsxRRm(Ext32_64) $$rax
    # nextln: 0515:     $$rax = FuncAddrAbs(External(extfunc24))
    # nextln:           $$rdi = MovRI64(137576242762560)
    # nextln:           $$rsi = $$r14
    # nextln: 0516:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$r15 = $$rax
    # nextln: 0517:     MovMR(S32, [reg + 16]) $$r14, $$r15
    # nextln: 0518:     $$rax = FuncAddrAbs(External(extfunc11))
    # nextln:           $$rsi = StackAddr(!11)
    # nextln:           $$rdi = $$r15
    # nextln: 0519:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0520:     $$rax = FuncAddrAbs(External(extfunc21))
    # nextln:           $$rdi = StackAddr(!8)
    # nextln:           $$rsi = StackAddr(!11)
    # nextln: 0521:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0522:     $$rax = FuncAddrAbs(External(extfunc11))
    # nextln:           $$rsi = StackAddr(!12)
    # nextln:           $$rdi = $$r15
    # nextln: 0523:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0524:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rdi = StackAddr(!8)
    # nextln:           $$rsi = StackAddr(!12)
    # nextln:           $$rdx = MovRmS32(16)
    # nextln: 0525:     $$rax = CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln:           $$rax = $$spill40
    # nextln:           $$r9 = $$spill44
    # nextln:           $$rbx = $$spill30
    # nextln:           $$r14 = $$spill35
    # nextln:           $$r13 = $$spill28
    # nextln:           $$r15 = $$spill26
    # nextln:           $$r10 = $$spill34
    # nextln:           $$r8 = $$r12
    # nextln:           $$r12 = $$spill29
    # nextln:           $$rsi = $$spill32
    # nextln:           $$rdi = $$spill50
    # nextln:           $$rcx = $$spill49
    # nextln:           $$rdx = $$spill48
    # nextln:           $$r11 = $$spill47
    # nextln:           $$spill42 = $$r8
    # nextln:           $$rax = $$r12
    # nextln:           $$r12 = $$spill27
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$r13
    # nextln:           $$r13 = $$spill25
    # nextln: 0526:     Jump(block280)
    # nextln:       block279:
    # nextln:           $$r11 = $$spill47
    # nextln:           $$rax = $$spill40
    # nextln:           $$r15 = $$spill26
    # nextln:           $$rdi = $$spill50
    # nextln:           $$r10 = $$spill34
    # nextln:           $$r14 = $$spill35
    # nextln:           $$rdx = $$spill48
    # nextln:           $$r8 = $$r12
    # nextln:           $$rcx = $$spill49
    # nextln:           $$r12 = $$spill29
    # nextln:           $$rsi = $$spill32
    # nextln:           $$r13 = $$spill28
    # nextln:           $$r9 = $$spill44
    # nextln:           $$rbx = $$spill30
    # nextln:           $$spill42 = $$r8
    # nextln:           $$rax = $$r12
    # nextln:           $$r12 = $$spill27
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$r13
    # nextln:           $$r13 = $$spill25
    # nextln: 0527:     Jump(block280)
    # nextln:       block280:
    # nextln:           $$r14 = $$rax
    # nextln: 0528:     $$r14 = AluRmI(S32, Sub, 1) $$r14
    # nextln:           $$spill29 = $$rax
    # nextln: 0529:     $$rax = FuncAddrAbs(External(extfunc31))
    # nextln:           $$rdi = StackAddr(!8)
    # nextln:           $$rsi = $$spill36
    # nextln: 0530:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0531:     $$rcx = MovRmS32(0)
    # nextln: 0532:     AluRRm(S32, Cmp) $$r13, $$r14
    # nextln: 0533:     $$rcx = Setcc(L) $$rcx
    # nextln: 0534:     MovMR(S32, [reg + 0]) $$r15, $$rax
    # nextln: 0535:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 0536:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0537:     Jumpcc(Ne, block281, block282)
    # nextln:       block281:
    # nextln: 0538:     $$r13 = AddRI(S32, 1) $$r13
    # nextln: 0539:     $$rcx = MovRM(S32, [reg + 16]) $$rbx
    # nextln: 0540:     $$rax = MovsxRRm(Ext32_64) $$r13
    # nextln: 0541:     AluRRm(S64, Cmp) $$rax, $$rcx
    # nextln: 0542:     Jumpcc(B, block284, block285)
    # nextln:       block284:
    # nextln: 0543:     $$rax = ImulRRmI(S64, 4) $$rax
    # nextln: 0544:     $$rax = AddRI(S64, 24) $$rax
    # nextln: 0545:     $$rax = AddRR(S64) $$rbx, $$rax
    # nextln: 0546:     $$r12 = MovRM(S32, [reg + 0]) $$rax
    # nextln:           $$rax = $$spill36
    # nextln:           $$r14 = $$spill26
    # nextln:           $$rdx = $$spill34
    # nextln:           $$r10 = $$spill50
    # nextln:           $$rsi = $$spill48
    # nextln:           $$rdi = $$r13
    # nextln:           $$rcx = $$r15
    # nextln:           $$r13 = $$spill35
    # nextln:           $$r9 = $$spill29
    # nextln:           $$r8 = $$spill43
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$spill39
    # nextln:           $$r11 = $$r12
    # nextln:           $$r12 = $$spill45
    # nextln: 0547:     Jump(block283)
    # nextln:       block285:
    # nextln: 0548:     $$rax = FuncAddrAbs(External(extfunc5))
    # nextln: 0549:     CallRm $$rax
    # nextln: 0550:     Ud2
    # nextln:       block282:
    # nextln:           $$r11 = $$r12
    # nextln:           $$r14 = $$spill26
    # nextln:           $$rsi = $$spill48
    # nextln:           $$r12 = $$spill45
    # nextln:           $$rax = $$spill38
    # nextln:           $$rdi = $$r13
    # nextln:           $$rcx = $$r15
    # nextln:           $$r15 = $$rbx
    # nextln:           $$r13 = $$spill35
    # nextln:           $$rdx = $$spill34
    # nextln:           $$r10 = $$spill50
    # nextln:           $$r8 = $$spill43
    # nextln:           $$r9 = $$spill29
    # nextln:           $$rbx = $$spill39
    # nextln: 0551:     Jump(block283)
    # nextln:       block283:
    # nextln: 0552:     $$rcx = AddRR(S32) $$rcx, $$r11
    # nextln:           $$spill50 = $$r10
    # nextln:           $$spill29 = $$r9
    # nextln:           $$spill28 = $$r15
    # nextln:           $$spill27 = $$r11
    # nextln:           $$spill34 = $$rdx
    # nextln:           $$spill45 = $$r12
    # nextln:           $$r12 = $$spill42
    # nextln:           $$spill25 = $$rdi
    # nextln:           $$spill30 = $$rcx
    # nextln:           $$spill39 = $$rbx
    # nextln:           $$spill35 = $$r13
    # nextln:           $$spill43 = $$r8
    # nextln:           $$spill48 = $$rsi
    # nextln: 0553:     Jump(block272)
    # nextln:       block276:
    # nextln:           $$rax = $$spill34
    # nextln:           $$r9 = $$spill50
    # nextln:           $$rsi = $$spill48
    # nextln:           $$r8 = $$spill43
    # nextln:           $$rcx = $$spill45
    # nextln:           $$r15 = $$r12
    # nextln:           $$r11 = $$spill40
    # nextln:           $$r12 = $$spill46
    # nextln:           $$r14 = $$spill38
    # nextln:           $$rbx = $$spill39
    # nextln:           $$r13 = $$spill35
    # nextln:           $$rdi = $$spill49
    # nextln:           $$r10 = $$spill32
    # nextln:           $$rdx = $$spill47
    # nextln: 0554:     Jump(block275)
    # nextln:       block274:
    # nextln:           $$r11 = $$spill40
    # nextln:           $$r9 = $$spill50
    # nextln:           $$rcx = $$spill45
    # nextln:           $$r13 = $$spill35
    # nextln:           $$r10 = $$spill32
    # nextln:           $$rax = $$spill34
    # nextln:           $$rsi = $$spill48
    # nextln:           $$rdi = $$spill49
    # nextln:           $$rdx = $$spill47
    # nextln:           $$r8 = $$spill43
    # nextln:           $$r15 = $$r12
    # nextln:           $$r12 = $$spill46
    # nextln:           $$r14 = $$spill38
    # nextln:           $$rbx = $$spill39
    # nextln: 0555:     Jump(block275)
    # nextln:       block275:
    # nextln: 0556:     Jump(block262)
    # nextln:       block261:
    # nextln:           $$rcx = $$spill45
    # nextln:           $$r14 = $$spill38
    # nextln:           $$r11 = $$spill40
    # nextln:           $$r13 = $$spill35
    # nextln:           $$r8 = $$rbx
    # nextln:           $$rbx = $$spill39
    # nextln:           $$r15 = $$spill42
    # nextln:           $$r10 = $$spill32
    # nextln:           $$rdx = $$spill47
    # nextln:           $$r9 = $$r12
    # nextln:           $$r12 = $$spill46
    # nextln:           $$rdi = $$spill49
    # nextln:           $$rsi = $$spill48
    # nextln:           $$rax = MovRU32(4294967295)
    # nextln:           $$rax = $$r15
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = MovRU32(4294967295)
    # nextln:           $$spill36 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln: 0557:     Jump(block262)
    # nextln:       block262:
    # nextln:           $$spill49 = $$rdi
    # nextln: 0558:     Jump(block47)
    # nextln:       block46:
    # nextln:           $$r8 = $$r15
    # nextln:           $$r15 = $$spill42
    # nextln:           $$rcx = $$spill45
    # nextln:           $$r10 = $$spill32
    # nextln:           $$r9 = $$r12
    # nextln:           $$r14 = $$spill38
    # nextln:           $$rdx = $$spill47
    # nextln:           $$rsi = $$spill48
    # nextln:           $$r11 = $$spill40
    # nextln:           $$rbx = $$spill39
    # nextln:           $$r13 = $$spill35
    # nextln:           $$r12 = $$spill46
    # nextln:           $$rdi = $$spill49
    # nextln:           $$rax = MovRU32(4294967295)
    # nextln:           $$rax = $$r15
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = MovRU32(4294967295)
    # nextln:           $$spill36 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln: 0559:     Jump(block47)
    # nextln:       block47:
    # nextln: 0560:     $$rdi = MovRM(S8, [reg + 8]) $$r13
    # nextln: 0561:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0562:     Jumpcc(Ne, block48, block49)
    # nextln:       block48:
    # nextln: 0563:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0564:     Jumpcc(Ne, block258, block259)
    # nextln:       block258:
    # nextln:           $$rdi = $$spill49
    # nextln:           $$spill45 = $$rcx
    # nextln: 0565:     Jump(block50)
    # nextln:       block259:
    # nextln:           $$spill47 = $$rdx
    # nextln:           $$spill45 = $$rcx
    # nextln: 0566:     $$rdx = MovRM(S32, [reg + 4]) $$r13
    # nextln: 0567:     $$rcx = MovRmS32(0)
    # nextln: 0568:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0569:     $$rcx = Setcc(Ne) $$rcx
    # nextln:           $$rdi = $$spill49
    # nextln:           $$rdx = $$spill47
    # nextln:           $$spill34 = $$rax
    # nextln:           $$spill32 = $$r10
    # nextln:           $$spill50 = $$r9
    # nextln:           $$spill48 = $$rsi
    # nextln:           $$spill46 = $$r12
    # nextln:           $$spill42 = $$r15
    # nextln:           $$spill38 = $$r14
    # nextln:           $$spill40 = $$r11
    # nextln:           $$r14 = $$rbx
    # nextln:           $$spill35 = $$r13
    # nextln: 0570:     Jump(block51)
    # nextln:       block49:
    # nextln:           $$rdi = $$spill49
    # nextln:           $$spill45 = $$rcx
    # nextln: 0571:     Jump(block50)
    # nextln:       block50:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln:           $$spill34 = $$rax
    # nextln:           $$spill32 = $$r10
    # nextln:           $$spill50 = $$r9
    # nextln:           $$spill48 = $$rsi
    # nextln:           $$spill47 = $$rdx
    # nextln:           $$spill46 = $$r12
    # nextln:           $$spill42 = $$r15
    # nextln:           $$spill40 = $$r11
    # nextln:           $$spill35 = $$r13
    # nextln:           $$spill38 = $$r14
    # nextln:           $$r14 = $$rbx
    # nextln: 0572:     Jump(block51)
    # nextln:       block51:
    # nextln: 0573:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 0574:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0575:     Jumpcc(Ne, block52, block53)
    # nextln:       block52:
    # nextln: 0577:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln:           $$r15 = $$rdi
    # nextln:           $$r12 = $$spill45
    # nextln:           $$rbx = $$spill36
    # nextln:           $$r13 = $$r8
    # nextln:           $$rsi = StackAddr(!13)
    # nextln:           $$rdi = $$r13
    # nextln: 0578:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0579:     $$rax = FuncAddrAbs(External(extfunc15))
    # nextln:           $$rsi = StackAddr(!13)
    # nextln:           $$rdi = $$r14
    # nextln: 0580:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$spill43 = $$r13
    # nextln: 0581:     Jump(block54)
    # nextln:       block53:
    # nextln:           $$r15 = $$rdi
    # nextln:           $$r12 = $$spill45
    # nextln:           $$rbx = $$spill36
    # nextln:           $$r13 = $$r8
    # nextln:           $$spill43 = $$r13
    # nextln: 0582:     Jump(block54)
    # nextln:       block54:
    # nextln:           $$rax = MovRmS32(1)
    # nextln: 0583:     $$rax = MovsxRRm(Ext32_64) $$rax
    # nextln:           $$spill59 = $$rax
    # nextln: 0585:     $$rax = FuncAddrAbs(External(extfunc6))
    # nextln:           $$rsi = StackAddr(!0)
    # nextln:           $$rdi = StackAddr(!14)
    # nextln:           $$rdx = MovRmS32(16)
    # nextln: 0586:     $$rax = CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 0587:     $$rax = FuncAddrAbs(External(extfunc19))
    # nextln:           $$rdi = StackAddr(!14)
    # nextln: 0588:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0594:     $$rcx = StackAddr(!19)
    # nextln:           $$r9 = $$spill50
    # nextln:           $$rdi = $$r15
    # nextln:           $$rsi = $$spill48
    # nextln:           $$r10 = $$spill47
    # nextln:           $$rcx = $$r12
    # nextln:           $$rdx = $$spill44
    # nextln:           $$r12 = $$spill42
    # nextln:           $$r13 = $$spill38
    # nextln:           $$r11 = $$spill40
    # nextln:           $$spill36 = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln:           $$r8 = $$spill34
    # nextln:           $$r15 = $$spill32
    # nextln:           $$r14 = $$rax
    # nextln:           $$rax = $$spill46
    # nextln:           $$spill45 = $$rcx
    # nextln:           $$spill41 = $$r13
    # nextln:           $$spill39 = $$rbx
    # nextln:           $$rbx = $$r11
    # nextln:           $$r13 = $$r14
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = $$spill58
    # nextln:           $$spill33 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$rax = $$spill43
    # nextln:           $$spill31 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln: 0595:     Jump(block55)
    # nextln:       block55:
    # nextln: 0596:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$r14 = $$rdi
    # nextln:           $$r15 = $$rdx
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0597:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0598:     AluRRm(S32, Cmp) $$rax, $$r12
    # nextln: 0599:     Jumpcc(Le, block56, block58)
    # nextln:       block56:
    # nextln:           $$rcx = $$spill47
    # nextln:           $$r10 = $$spill45
    # nextln:           $$r11 = $$spill31
    # nextln:           $$spill40 = $$rbx
    # nextln:           $$rax = $$spill38
    # nextln:           $$spill37 = $$r13
    # nextln:           $$r13 = $$spill39
    # nextln:           $$r8 = $$spill36
    # nextln:           $$rdx = $$spill33
    # nextln:           $$rsi = $$spill32
    # nextln:           $$rdi = $$spill50
    # nextln:           $$r9 = $$spill41
    # nextln: 0600:     Jump(block57)
    # nextln:       block58:
    # nextln: 0601:     $$rax = AddRI(S32, 1) $$r12
    # nextln: 0602:     $$rcx = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$rdx = $$spill57
    # nextln: 0603:     $$rcx = ImulRR(S64) $$rcx, $$rdx
    # nextln: 0604:     $$rcx = AddRR(S64) $$r13, $$rcx
    # nextln:           $$spill37 = $$r13
    # nextln: 0605:     $$rcx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0606:     $$rbx = MovzxRRm(S16) $$rcx
    # nextln: 0607:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0608:     Jumpcc(Ne, block59, block60)
    # nextln:       block59:
    # nextln: 0609:     $$rcx = MovRmS32(0)
    # nextln: 0610:     AluRmI(S32, Cmp, 59) $$rbx
    # nextln: 0611:     $$rcx = Setcc(E) $$rcx
    # nextln: 0612:     $$rdx = MovRmS32(0)
    # nextln: 0613:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0614:     $$rdx = Setcc(E) $$rdx
    # nextln:           $$r10 = $$spill45
    # nextln:           $$rsi = $$spill32
    # nextln:           $$r12 = $$r15
    # nextln:           $$r9 = $$spill41
    # nextln:           $$r8 = $$spill36
    # nextln:           $$r13 = $$spill39
    # nextln:           $$r11 = $$spill31
    # nextln:           $$rdi = $$spill50
    # nextln:           $$rcx = $$spill47
    # nextln:           $$r15 = $$rbx
    # nextln:           $$rbx = $$rax
    # nextln:           $$rax = $$spill38
    # nextln:           $$spill49 = $$r14
    # nextln:           $$spill40 = $$r15
    # nextln:           $$r15 = $$r12
    # nextln:           $$r14 = $$r8
    # nextln:           $$r8 = $$rbx
    # nextln:           $$rbx = $$spill33
    # nextln: 0615:     Jump(block61)
    # nextln:       block60:
    # nextln:           $$r13 = $$spill39
    # nextln:           $$spill40 = $$rbx
    # nextln:           $$r8 = $$spill36
    # nextln:           $$rdx = $$spill33
    # nextln:           $$rsi = $$spill32
    # nextln:           $$rbx = $$rax
    # nextln:           $$rax = $$spill38
    # nextln:           $$r11 = $$spill31
    # nextln:           $$rdi = $$spill50
    # nextln:           $$r9 = $$spill41
    # nextln:           $$rcx = $$spill47
    # nextln:           $$r10 = $$spill45
    # nextln:           $$r12 = $$rbx
    # nextln: 0616:     Jump(block57)
    # nextln:       block57:
    # nextln:           $$rbx = MovRmS32(0)
    # nextln:           $$spill49 = $$r14
    # nextln:           $$r14 = $$r8
    # nextln:           $$r8 = $$r12
    # nextln:           $$rbx = $$rdx
    # nextln:           $$rdx = MovRmS32(0)
    # nextln: 0617:     Jump(block61)
    # nextln:       block61:
    # nextln: 0618:     $$rdx = MovzxRRm(S8) $$rdx
    # nextln: 0619:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0620:     Jumpcc(Ne, block62, block63)
    # nextln:       block62:
    # nextln: 0621:     $$r12 = MovRmS32(0)
    # nextln: 0622:     AluRRm(S32, Test) $$r15, $$r15
    # nextln: 0623:     $$r12 = Setcc(G) $$r12
    # nextln: 0624:     $$rdx = MovzxRRm(S8) $$r12
    # nextln: 0625:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0626:     Jumpcc(Ne, block75, block76)
    # nextln:       block75:
    # nextln: 0627:     $$r12 = MovzxRRm(S16) $$spill40
    # nextln:           $$rdx = $$rbx
    # nextln: 0628:     $$r12 = MovzxRRm(S16) $$r12
    # nextln: 0629:     AluRmI(S32, Cmp, 35) $$r12
    # nextln: 0630:     Jumpcc(E, block230, block232)
    # nextln:       block230:
    # nextln:           $$spill31 = $$r11
    # nextln:           $$r12 = $$spill49
    # nextln:           $$rbx = $$spill48
    # nextln:           $$spill45 = $$r10
    # nextln:           $$spill44 = $$r15
    # nextln:           $$r15 = $$spill46
    # nextln:           $$r11 = $$r9
    # nextln:           $$r9 = $$r8
    # nextln:           $$spill38 = $$rax
    # nextln:           $$rax = $$rdi
    # nextln:           $$rdi = $$rcx
    # nextln:           $$rcx = $$spill40
    # nextln:           $$r10 = $$spill37
    # nextln:           $$spill36 = $$r14
    # nextln:           $$r14 = $$r13
    # nextln:           $$r8 = $$spill35
    # nextln:           $$r13 = $$spill34
    # nextln: 0631:     Jump(block231)
    # nextln:       block232:
    # nextln: 0632:     Jump(block233)
    # nextln:       block233:
    # nextln: 0633:     AluRmI(S32, Cmp, 46) $$r12
    # nextln: 0634:     Jumpcc(E, block234, block235)
    # nextln:       block234:
    # nextln:           $$r12 = $$spill49
    # nextln:           $$spill31 = $$r11
    # nextln:           $$r11 = $$r9
    # nextln:           $$spill45 = $$r10
    # nextln:           $$r10 = $$spill37
    # nextln:           $$spill36 = $$r14
    # nextln:           $$r14 = $$r13
    # nextln:           $$r13 = $$spill34
    # nextln:           $$spill44 = $$r15
    # nextln:           $$r15 = $$spill46
    # nextln:           $$spill38 = $$rax
    # nextln:           $$rax = $$rdi
    # nextln:           $$rdi = $$rcx
    # nextln:           $$rcx = $$spill40
    # nextln:           $$r9 = $$r8
    # nextln:           $$r8 = $$spill35
    # nextln:           $$rbx = $$spill48
    # nextln: 0635:     Jump(block231)
    # nextln:       block235:
    # nextln: 0636:     Jump(block236)
    # nextln:       block236:
    # nextln: 0637:     AluRmI(S32, Cmp, 48) $$r12
    # nextln: 0638:     Jumpcc(E, block237, block238)
    # nextln:       block237:
    # nextln:           $$spill36 = $$r14
    # nextln:           $$r12 = $$spill49
    # nextln:           $$rbx = $$spill48
    # nextln:           $$spill45 = $$r10
    # nextln:           $$r10 = $$spill37
    # nextln:           $$spill44 = $$r15
    # nextln:           $$r15 = $$spill46
    # nextln:           $$r14 = $$r13
    # nextln:           $$r13 = $$spill34
    # nextln:           $$spill38 = $$rax
    # nextln:           $$rax = $$rdi
    # nextln:           $$rdi = $$rcx
    # nextln:           $$spill31 = $$r11
    # nextln:           $$r11 = $$r9
    # nextln:           $$r9 = $$r8
    # nextln:           $$r8 = $$spill35
    # nextln:           $$rcx = $$spill40
    # nextln: 0639:     Jump(block231)
    # nextln:       block231:
    # nextln:           $$spill50 = $$rax
    # nextln:           $$spill49 = $$r12
    # nextln:           $$spill46 = $$r15
    # nextln:           $$spill52 = $$r9
    # nextln:           $$r9 = $$r11
    # nextln:           $$spill40 = $$rcx
    # nextln:           $$spill37 = $$r10
    # nextln:           $$spill35 = $$r8
    # nextln:           $$spill33 = $$rdx
    # nextln:           $$rdx = $$rbx
    # nextln:           $$spill47 = $$rdi
    # nextln:           $$spill39 = $$r14
    # nextln: 0640:     Jump(block240)
    # nextln:       block240:
    # nextln: 0641:     $$rbx = MovRmS32(0)
    # nextln:           $$rax = $$spill44
    # nextln: 0642:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0643:     $$rbx = Setcc(G) $$rbx
    # nextln: 0644:     $$rdi = MovzxRRm(S8) $$rbx
    # nextln: 0645:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0646:     Jumpcc(Ne, block241, block242)
    # nextln:       block241:
    # nextln:           $$rax = $$spill38
    # nextln: 0647:     $$rdi = MovRM(S8, [reg + 0]) $$rax
    # nextln: 0648:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0649:     Jumpcc(Ne, block243, block244)
    # nextln:       block243:
    # nextln:           $$r10 = $$r9
    # nextln:           $$rdi = $$rdx
    # nextln:           $$rcx = $$r13
    # nextln:           $$r13 = $$rsi
    # nextln:           $$rsi = $$spill50
    # nextln:           $$r9 = $$spill49
    # nextln:           $$rax = $$spill38
    # nextln:           $$rdx = $$spill40
    # nextln:           $$r8 = $$spill59
    # nextln: 0650:     $$r8 = AddRR(S64) $$rax, $$r8
    # nextln:           $$spill51 = $$r8
    # nextln: 0651:     $$rax = MovRM(S8, [reg + 0]) $$rax
    # nextln:           $$rbx = $$spill31
    # nextln:           $$r15 = $$spill44
    # nextln:           $$r8 = $$rsi
    # nextln:           $$rsi = $$rdi
    # nextln:           $$r14 = $$r13
    # nextln:           $$rdi = $$rdx
    # nextln:           $$rdx = $$spill46
    # nextln:           $$r12 = $$spill36
    # nextln:           $$r11 = $$r10
    # nextln:           $$r10 = $$r9
    # nextln:           $$r9 = $$spill45
    # nextln:           $$r13 = $$spill39
    # nextln:           $$spill48 = $$rsi
    # nextln:           $$spill41 = $$r11
    # nextln:           $$rbx = $$spill51
    # nextln:           $$spill34 = $$rcx
    # nextln:           $$spill32 = $$r14
    # nextln:           $$r14 = $$spill47
    # nextln: 0652:     Jump(block245)
    # nextln:       block244:
    # nextln:           $$r15 = $$spill44
    # nextln:           $$rdi = $$spill40
    # nextln:           $$r8 = $$spill50
    # nextln:           $$r14 = $$rsi
    # nextln:           $$rax = $$spill38
    # nextln:           $$r10 = $$spill49
    # nextln:           $$rsi = $$rdx
    # nextln:           $$rdx = $$spill46
    # nextln:           $$rbx = $$spill31
    # nextln:           $$r12 = $$spill36
    # nextln:           $$r11 = $$r9
    # nextln:           $$r9 = $$spill45
    # nextln:           $$spill34 = $$r13
    # nextln:           $$rcx = MovRmS32(48)
    # nextln:           $$r13 = $$spill39
    # nextln:           $$rbx = $$rax
    # nextln:           $$rax = MovRmS32(48)
    # nextln:           $$spill32 = $$r14
    # nextln:           $$r14 = $$spill47
    # nextln:           $$spill41 = $$r11
    # nextln:           $$spill48 = $$rsi
    # nextln: 0653:     Jump(block245)
    # nextln:       block245:
    # nextln: 0654:     $$rdi = MovzxRRm(S16) $$rax
    # nextln: 0655:     $$rax = FuncAddrAbs(External(extfunc17))
    # nextln: 0656:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0657:     $$rsi = MovzxRRm(S16) $$rax
    # nextln: 0658:     $$rax = FuncAddrAbs(External(extfunc29))
    # nextln:           $$rdi = $$spill39
    # nextln: 0659:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rax = $$spill45
    # nextln: 0660:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0661:     Jumpcc(Ne, block246, block247)
    # nextln:       block246:
    # nextln: 0662:     AluRmI(S32, Cmp, 1) $$r14
    # nextln: 0663:     Jumpcc(Le, block256, block257)
    # nextln:       block256:
    # nextln: 0664:     Jump(block248)
    # nextln:       block257:
    # nextln: 0665:     $$rax = MovRmS32(0)
    # nextln: 0666:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 0667:     $$rax = Setcc(S) $$rax
    # nextln: 0668:     $$rcx = MovRmS32(0)
    # nextln: 0669:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0670:     $$rcx = Setcc(E) $$rcx
    # nextln: 0671:     Jump(block249)
    # nextln:       block247:
    # nextln: 0672:     Jump(block248)
    # nextln:       block248:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln: 0673:     Jump(block249)
    # nextln:       block249:
    # nextln: 0674:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 0675:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0676:     Jumpcc(Ne, block250, block251)
    # nextln:       block250:
    # nextln: 0677:     $$rax = FuncAddrAbs(External(extfunc31))
    # nextln:           $$rdi = StackAddr(!8)
    # nextln:           $$rsi = $$r12
    # nextln: 0678:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0679:     $$rcx = MovRM(S32, [reg + 0]) $$rax
    # nextln: 0680:     $$rcx = AddRI(S32, 1) $$rcx
    # nextln: 0681:     $$rax = MovRmS32(0)
    # nextln: 0682:     AluRRm(S32, Cmp) $$r14, $$rcx
    # nextln: 0683:     $$rax = Setcc(E) $$rax
    # nextln: 0684:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0685:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0686:     Jumpcc(Ne, block253, block254)
    # nextln:       block253:
    # nextln: 0687:     $$r12 = AluRmI(S32, Sub, 1) $$r12
    # nextln: 0688:     $$rax = FuncAddrAbs(External(extfunc10))
    # nextln:           $$rsi = StackAddr(!19)
    # nextln:           $$rdi = $$spill31
    # nextln: 0689:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0690:     $$rax = FuncAddrAbs(External(extfunc15))
    # nextln:           $$rsi = StackAddr(!19)
    # nextln:           $$rdi = $$r13
    # nextln: 0691:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0692:     Jump(block255)
    # nextln:       block254:
    # nextln: 0693:     Jump(block255)
    # nextln:       block255:
    # nextln: 0694:     Jump(block252)
    # nextln:       block251:
    # nextln: 0695:     Jump(block252)
    # nextln:       block252:
    # nextln: 0696:     $$r14 = AluRmI(S32, Sub, 1) $$r14
    # nextln: 0697:     $$r15 = AluRmI(S32, Sub, 1) $$r15
    # nextln:           $$spill36 = $$r12
    # nextln:           $$spill47 = $$r14
    # nextln:           $$spill44 = $$r15
    # nextln:           $$rdx = $$spill48
    # nextln:           $$r9 = $$spill41
    # nextln:           $$spill38 = $$rbx
    # nextln:           $$spill39 = $$r13
    # nextln:           $$r13 = $$spill34
    # nextln:           $$rsi = $$spill32
    # nextln: 0698:     Jump(block240)
    # nextln:       block242:
    # nextln:           $$rbx = $$spill49
    # nextln:           $$rcx = $$spill46
    # nextln:           $$rax = $$spill40
    # nextln:           $$rdi = $$spill38
    # nextln:           $$r14 = $$spill36
    # nextln:           $$r15 = $$rsi
    # nextln:           $$rsi = $$spill35
    # nextln:           $$r12 = $$spill47
    # nextln:           $$r10 = $$spill44
    # nextln:           $$r11 = $$spill50
    # nextln:           $$r8 = $$spill45
    # nextln: 0699:     Jump(block239)
    # nextln:       block238:
    # nextln:           $$spill52 = $$r8
    # nextln:           $$r8 = $$r10
    # nextln:           $$r10 = $$r15
    # nextln:           $$spill33 = $$rdx
    # nextln:           $$spill39 = $$r13
    # nextln:           $$r13 = $$spill34
    # nextln:           $$r15 = $$rsi
    # nextln:           $$rsi = $$spill35
    # nextln:           $$rbx = $$spill49
    # nextln:           $$rdx = $$spill48
    # nextln:           $$r12 = $$rcx
    # nextln:           $$rcx = $$spill46
    # nextln:           $$spill31 = $$r11
    # nextln:           $$r11 = $$rdi
    # nextln:           $$rdi = $$rax
    # nextln:           $$rax = $$spill40
    # nextln: 0700:     Jump(block239)
    # nextln:       block239:
    # nextln:           $$spill50 = $$r11
    # nextln:           $$spill49 = $$rbx
    # nextln:           $$spill48 = $$rdx
    # nextln:           $$spill47 = $$r12
    # nextln:           $$spill46 = $$rcx
    # nextln:           $$spill45 = $$r8
    # nextln:           $$spill41 = $$r9
    # nextln:           $$spill38 = $$rdi
    # nextln:           $$spill36 = $$r14
    # nextln:           $$spill35 = $$rsi
    # nextln:           $$spill34 = $$r13
    # nextln:           $$r13 = $$r10
    # nextln: 0701:     Jump(block77)
    # nextln:       block76:
    # nextln:           $$spill31 = $$r11
    # nextln:           $$r12 = $$rcx
    # nextln:           $$spill52 = $$r8
    # nextln:           $$rdx = $$spill48
    # nextln:           $$r11 = $$rdi
    # nextln:           $$rdi = $$rax
    # nextln:           $$rcx = $$spill46
    # nextln:           $$spill33 = $$rbx
    # nextln:           $$rbx = $$spill49
    # nextln:           $$r8 = $$r10
    # nextln:           $$spill39 = $$r13
    # nextln:           $$r13 = $$spill34
    # nextln:           $$r10 = $$r15
    # nextln:           $$r15 = $$rsi
    # nextln:           $$rsi = $$spill35
    # nextln:           $$rax = $$spill40
    # nextln:           $$spill47 = $$r12
    # nextln:           $$spill45 = $$r8
    # nextln:           $$spill41 = $$r9
    # nextln:           $$spill38 = $$rdi
    # nextln:           $$spill36 = $$r14
    # nextln:           $$r13 = $$r10
    # nextln:           $$spill50 = $$r11
    # nextln: 0702:     Jump(block77)
    # nextln:       block77:
    # nextln: 0703:     $$rcx = MovzxRRm(S16) $$rax
    # nextln:           $$spill40 = $$rax
    # nextln: 0704:     $$rax = MovzxRRm(S16) $$rcx
    # nextln:           $$spill60 = $$rax
    # nextln: 0705:     AluRmI(S32, Cmp, 69) $$spill60
    # nextln: 0706:     Jumpcc(A, block78, block79)
    # nextln:       block78:
    # nextln: 0707:     AluRmI(S32, Cmp, 92) $$spill60
    # nextln: 0708:     Jumpcc(E, block216, block217)
    # nextln:       block216:
    # nextln: 0709:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rbx = $$spill37
    # nextln:           $$r12 = $$spill33
    # nextln:           $$r14 = $$spill52
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0710:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0711:     AluRRm(S32, Cmp) $$rax, $$r14
    # nextln: 0712:     Jumpcc(Le, block224, block225)
    # nextln:       block224:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln:           $$spill44 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln:           $$rax = $$spill57
    # nextln: 0713:     Jump(block226)
    # nextln:       block225:
    # nextln: 0714:     $$rcx = MovsxRRm(Ext32_64) $$r14
    # nextln:           $$rax = $$spill57
    # nextln: 0715:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 0716:     $$rcx = AddRR(S64) $$rbx, $$rcx
    # nextln: 0717:     $$rdx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0718:     $$rcx = MovRmS32(0)
    # nextln: 0719:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0720:     $$rcx = Setcc(Ne) $$rcx
    # nextln:           $$spill44 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln: 0721:     Jump(block226)
    # nextln:       block226:
    # nextln: 0722:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0723:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0724:     Jumpcc(Ne, block227, block228)
    # nextln:       block227:
    # nextln:           $$rcx = $$rbx
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$spill39
    # nextln: 0725:     $$r14 = AddRI(S32, 1) $$r13
    # nextln: 0726:     $$rdx = MovsxRRm(Ext32_64) $$r13
    # nextln:           $$spill57 = $$rax
    # nextln: 0727:     $$rax = ImulRR(S64) $$rdx, $$rax
    # nextln:           $$rdx = $$rcx
    # nextln: 0728:     $$rcx = AddRR(S64) $$rdx, $$rax
    # nextln:           $$rax = $$rdx
    # nextln: 0729:     $$rcx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0730:     $$rsi = MovzxRRm(S16) $$rcx
    # nextln: 0731:     $$rcx = FuncAddrAbs(External(extfunc0))
    # nextln:           $$r13 = $$rax
    # nextln:           $$rdi = $$r12
    # nextln: 0732:     CallRm $$rcx, $$rdi, $$rsi
    # nextln:           $$rcx = $$spill44
    # nextln:           $$r10 = $$spill47
    # nextln:           $$r9 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln:           $$rax = $$spill46
    # nextln:           $$rsi = $$spill36
    # nextln:           $$rdi = $$spill45
    # nextln:           $$r11 = $$rbx
    # nextln:           $$rbx = $$spill38
    # nextln:           $$r8 = $$spill35
    # nextln:           $$r14 = $$r15
    # nextln:           $$r15 = $$spill34
    # nextln:           $$rdx = $$spill50
    # nextln:           $$rax = $$r10
    # nextln:           $$rdi = $$r9
    # nextln:           $$r9 = $$spill49
    # nextln:           $$r10 = $$r11
    # nextln:           $$r11 = $$spill48
    # nextln:           $$r12 = $$spill41
    # nextln: 0733:     Jump(block229)
    # nextln:       block228:
    # nextln:           $$rdx = $$spill50
    # nextln:           $$r9 = $$spill49
    # nextln:           $$r11 = $$spill48
    # nextln:           $$rsi = $$spill36
    # nextln:           $$r8 = $$spill35
    # nextln:           $$spill57 = $$rax
    # nextln:           $$rax = $$spill47
    # nextln:           $$rcx = $$spill44
    # nextln:           $$r10 = $$r12
    # nextln:           $$r12 = $$spill41
    # nextln:           $$rdi = $$rbx
    # nextln:           $$rbx = $$spill38
    # nextln:           $$r14 = $$r15
    # nextln:           $$r15 = $$spill34
    # nextln: 0734:     Jump(block229)
    # nextln:       block229:
    # nextln:           $$spill48 = $$r11
    # nextln:           $$spill47 = $$rax
    # nextln:           $$spill44 = $$rcx
    # nextln:           $$spill42 = $$r13
    # nextln:           $$spill41 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill38 = $$rbx
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill37 = $$rdi
    # nextln:           $$spill36 = $$rsi
    # nextln:           $$r13 = $$r8
    # nextln:           $$spill34 = $$r15
    # nextln:           $$spill33 = $$r10
    # nextln:           $$spill32 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$spill49 = $$r9
    # nextln:           $$r15 = $$rdx
    # nextln: 0735:     Jump(block90)
    # nextln:       block217:
    # nextln:           $$rax = $$spill47
    # nextln:           $$rcx = $$r13
    # nextln:           $$r13 = $$spill52
    # nextln:           $$rsi = $$spill36
    # nextln:           $$r12 = $$spill41
    # nextln:           $$r10 = $$spill33
    # nextln:           $$rdx = $$spill50
    # nextln:           $$r9 = $$spill49
    # nextln:           $$rdi = $$spill37
    # nextln:           $$r14 = $$r15
    # nextln:           $$rbx = $$spill38
    # nextln:           $$r8 = $$spill35
    # nextln:           $$r15 = $$spill34
    # nextln:           $$r11 = $$spill48
    # nextln: 0736:     Jump(block218)
    # nextln:       block218:
    # nextln: 0737:     AluRmI(S32, Cmp, 101) $$spill60
    # nextln: 0738:     Jumpcc(E, block219, block220)
    # nextln:       block219:
    # nextln:           $$spill35 = $$r8
    # nextln:           $$spill34 = $$r15
    # nextln:           $$spill33 = $$r10
    # nextln:           $$spill32 = $$r14
    # nextln:           $$spill50 = $$rdx
    # nextln:           $$spill41 = $$r12
    # nextln:           $$spill49 = $$r9
    # nextln:           $$spill48 = $$r11
    # nextln:           $$spill47 = $$rax
    # nextln:           $$spill44 = $$rcx
    # nextln:           $$r12 = $$r13
    # nextln:           $$spill38 = $$rbx
    # nextln:           $$r14 = $$rdi
    # nextln:           $$r13 = $$rsi
    # nextln: 0739:     Jump(block87)
    # nextln:       block220:
    # nextln:           $$spill49 = $$r9
    # nextln:           $$spill37 = $$rdi
    # nextln:           $$spill48 = $$r11
    # nextln:           $$spill36 = $$rsi
    # nextln:           $$spill50 = $$rdx
    # nextln:           $$spill38 = $$rbx
    # nextln:           $$rbx = $$spill31
    # nextln:           $$spill34 = $$r15
    # nextln:           $$r15 = $$rax
    # nextln:           $$spill44 = $$rcx
    # nextln:           $$spill41 = $$r12
    # nextln:           $$r12 = $$spill39
    # nextln:           $$spill35 = $$r8
    # nextln:           $$spill61 = $$r13
    # nextln:           $$r13 = $$r14
    # nextln:           $$r14 = $$spill61
    # nextln:           $$spill33 = $$r10
    # nextln: 0740:     Jump(block221)
    # nextln:       block221:
    # nextln: 0741:     AluRmI(S32, Cmp, 8240) $$spill60
    # nextln: 0742:     Jumpcc(E, block222, block223)
    # nextln:       block222:
    # nextln: 0743:     $$rax = FuncAddrAbs(External(extfunc4))
    # nextln:           $$rsi = StackAddr(!17)
    # nextln:           $$rdi = $$rbx
    # nextln: 0744:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0745:     $$rax = FuncAddrAbs(External(extfunc15))
    # nextln:           $$rsi = StackAddr(!17)
    # nextln:           $$rdi = $$r12
    # nextln: 0746:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$spill47 = $$r15
    # nextln:           $$r15 = $$spill50
    # nextln:           $$spill42 = $$r14
    # nextln:           $$spill32 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln:           $$spill31 = $$rbx
    # nextln:           $$rbx = $$spill45
    # nextln:           $$r14 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln: 0747:     Jump(block90)
    # nextln:       block223:
    # nextln:           $$spill47 = $$r15
    # nextln:           $$r15 = $$spill50
    # nextln:           $$spill31 = $$rbx
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill52 = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r11 = $$spill35
    # nextln:           $$spill32 = $$r13
    # nextln: 0748:     Jump(block89)
    # nextln:       block79:
    # nextln:           $$r12 = $$spill39
    # nextln:           $$rbx = $$spill31
    # nextln:           $$r14 = $$spill52
    # nextln:           $$spill44 = $$r13
    # nextln:           $$r13 = $$r15
    # nextln:           $$r15 = $$spill47
    # nextln:           $$rcx = $$spill60
    # nextln: 0749:     $$rcx = AluRmI(S32, Sub, 34) $$rcx
    # nextln: 0750:     AluRmI(S32, Cmp, 6) $$rcx
    # nextln: 0751:     Jumpcc(B, block80, block81)
    # nextln:       block80:
    # nextln: 0752:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0753:     Jumpcc(E, block190, block192)
    # nextln:       block190:
    # nextln:           $$r9 = $$spill41
    # nextln:           $$rcx = $$spill36
    # nextln:           $$rdi = $$spill49
    # nextln:           $$rax = $$spill34
    # nextln:           $$r11 = $$spill50
    # nextln:           $$rdx = $$spill48
    # nextln:           $$r8 = $$spill46
    # nextln:           $$r10 = $$spill45
    # nextln:           $$rsi = $$spill35
    # nextln:           $$spill47 = $$r15
    # nextln:           $$r15 = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r12 = $$rbx
    # nextln:           $$rbx = $$r13
    # nextln:           $$r13 = $$spill40
    # nextln: 0754:     Jump(block191)
    # nextln:       block192:
    # nextln: 0755:     AluRmI(S32, Cmp, 1) $$rcx
    # nextln: 0756:     Jumpcc(E, block193, block194)
    # nextln:       block193:
    # nextln:           $$spill31 = $$rbx
    # nextln:           $$spill47 = $$r15
    # nextln:           $$spill39 = $$r12
    # nextln:           $$spill32 = $$r13
    # nextln:           $$r13 = $$spill36
    # nextln:           $$r12 = $$r14
    # nextln:           $$r14 = $$spill37
    # nextln: 0757:     Jump(block151)
    # nextln:       block194:
    # nextln: 0758:     AluRmI(S32, Cmp, 2) $$rcx
    # nextln: 0759:     Jumpcc(E, block195, block196)
    # nextln:       block195:
    # nextln:           $$spill47 = $$r15
    # nextln:           $$r15 = $$spill50
    # nextln:           $$spill31 = $$rbx
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill52 = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r11 = $$spill35
    # nextln:           $$spill32 = $$r13
    # nextln: 0760:     Jump(block89)
    # nextln:       block196:
    # nextln: 0761:     AluRmI(S32, Cmp, 3) $$rcx
    # nextln: 0762:     Jumpcc(E, block197, block198)
    # nextln:       block197:
    # nextln: 0763:     $$rax = FuncAddrAbs(External(extfunc20))
    # nextln:           $$rsi = StackAddr(!16)
    # nextln:           $$rdi = $$rbx
    # nextln: 0764:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0765:     $$rax = FuncAddrAbs(External(extfunc15))
    # nextln:           $$rsi = StackAddr(!16)
    # nextln:           $$rdi = $$r12
    # nextln: 0766:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$spill47 = $$r15
    # nextln:           $$r15 = $$spill50
    # nextln:           $$spill42 = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill32 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln:           $$spill31 = $$rbx
    # nextln:           $$rbx = $$spill45
    # nextln: 0767:     Jump(block90)
    # nextln:       block198:
    # nextln: 0768:     AluRmI(S32, Cmp, 4) $$rcx
    # nextln: 0769:     Jumpcc(E, block199, block200)
    # nextln:       block199:
    # nextln:           $$spill47 = $$r15
    # nextln:           $$r15 = $$spill50
    # nextln:           $$spill31 = $$rbx
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill52 = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r11 = $$spill35
    # nextln:           $$spill32 = $$r13
    # nextln: 0770:     Jump(block89)
    # nextln:       block200:
    # nextln:           $$r11 = $$spill50
    # nextln:           $$r8 = $$spill46
    # nextln:           $$rdx = $$spill48
    # nextln:           $$rsi = $$spill35
    # nextln:           $$spill47 = $$r15
    # nextln:           $$r15 = $$r14
    # nextln:           $$r9 = $$spill41
    # nextln:           $$rcx = $$spill36
    # nextln:           $$r10 = $$spill45
    # nextln:           $$rdi = $$spill49
    # nextln:           $$r14 = $$r12
    # nextln:           $$r12 = $$rbx
    # nextln:           $$rbx = $$r13
    # nextln:           $$r13 = $$spill40
    # nextln:           $$rax = $$spill34
    # nextln: 0771:     Jump(block191)
    # nextln:       block191:
    # nextln:           $$spill34 = $$rax
    # nextln:           $$spill35 = $$rsi
    # nextln:           $$spill36 = $$rcx
    # nextln:           $$spill49 = $$rdi
    # nextln:           $$spill48 = $$rdx
    # nextln:           $$spill31 = $$r12
    # nextln:           $$spill41 = $$r9
    # nextln:           $$spill32 = $$rbx
    # nextln:           $$spill50 = $$r11
    # nextln:           $$r12 = $$r15
    # nextln:           $$rbx = $$r13
    # nextln:           $$r13 = $$r14
    # nextln:           $$r14 = $$spill37
    # nextln:           $$spill45 = $$r10
    # nextln: 0772:     Jump(block201)
    # nextln:       block201:
    # nextln: 0773:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$r15 = $$r8
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0774:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0775:     AluRRm(S32, Cmp) $$rax, $$r12
    # nextln: 0776:     Jumpcc(Le, block202, block204)
    # nextln:       block202:
    # nextln:           $$rax = $$spill57
    # nextln: 0777:     Jump(block203)
    # nextln:       block204:
    # nextln: 0778:     $$rcx = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$rax = $$spill57
    # nextln: 0779:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 0780:     $$rcx = AddRR(S64) $$r14, $$rcx
    # nextln: 0781:     $$rcx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0782:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0783:     Jumpcc(Ne, block205, block206)
    # nextln:       block205:
    # nextln: 0784:     $$rcx = MovsxRRm(Ext32_64) $$r12
    # nextln: 0785:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 0786:     $$rcx = AddRR(S64) $$r14, $$rcx
    # nextln: 0787:     $$rcx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0788:     $$rdx = MovRmS32(0)
    # nextln: 0789:     AluRRm(S32, Cmp) $$rcx, $$rbx
    # nextln: 0790:     $$rdx = Setcc(E) $$rdx
    # nextln: 0791:     $$rcx = MovRmS32(0)
    # nextln: 0792:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0793:     $$rcx = Setcc(E) $$rcx
    # nextln:           $$spill46 = $$r15
    # nextln: 0794:     Jump(block207)
    # nextln:       block206:
    # nextln: 0795:     Jump(block203)
    # nextln:       block203:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln:           $$spill46 = $$r15
    # nextln: 0796:     Jump(block207)
    # nextln:       block207:
    # nextln: 0797:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 0798:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0799:     Jumpcc(Ne, block208, block209)
    # nextln:       block208:
    # nextln: 0800:     $$r15 = AddRI(S32, 1) $$r12
    # nextln: 0801:     $$rcx = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$r12 = $$rax
    # nextln: 0802:     $$rcx = ImulRR(S64) $$rcx, $$r12
    # nextln: 0803:     $$rcx = AddRR(S64) $$r14, $$rcx
    # nextln: 0804:     $$rax = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0805:     $$rsi = MovzxRRm(S16) $$rax
    # nextln: 0806:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r13
    # nextln: 0807:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$r8 = $$spill46
    # nextln:           $$spill57 = $$r12
    # nextln:           $$r12 = $$r15
    # nextln: 0808:     Jump(block201)
    # nextln:       block209:
    # nextln:           $$spill40 = $$rbx
    # nextln:           $$spill39 = $$r13
    # nextln:           $$spill57 = $$rax
    # nextln: 0809:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$r13 = $$spill36
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0810:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0811:     AluRRm(S32, Cmp) $$rax, $$r12
    # nextln: 0812:     Jumpcc(Le, block210, block211)
    # nextln:       block210:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 0813:     Jump(block212)
    # nextln:       block211:
    # nextln: 0814:     $$rax = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$rcx = $$spill57
    # nextln: 0815:     $$rax = ImulRR(S64) $$rax, $$rcx
    # nextln: 0816:     $$rax = AddRR(S64) $$r14, $$rax
    # nextln: 0817:     $$rcx = MovRM(S16, [reg + 0]) $$rax
    # nextln: 0818:     $$rax = MovRmS32(0)
    # nextln: 0819:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0820:     $$rax = Setcc(Ne) $$rax
    # nextln: 0821:     Jump(block212)
    # nextln:       block212:
    # nextln: 0822:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0823:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0824:     Jumpcc(Ne, block213, block214)
    # nextln:       block213:
    # nextln: 0825:     $$r12 = AddRI(S32, 1) $$r12
    # nextln: 0826:     Jump(block215)
    # nextln:       block214:
    # nextln: 0827:     Jump(block215)
    # nextln:       block215:
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill42 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill37 = $$r14
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln:           $$r15 = $$spill50
    # nextln:           $$r14 = $$spill39
    # nextln: 0828:     Jump(block90)
    # nextln:       block81:
    # nextln:           $$spill32 = $$r13
    # nextln:           $$r13 = $$spill36
    # nextln:           $$spill47 = $$r15
    # nextln:           $$spill31 = $$rbx
    # nextln:           $$spill39 = $$r12
    # nextln:           $$r12 = $$r14
    # nextln:           $$r14 = $$spill37
    # nextln: 0829:     Jump(block82)
    # nextln:       block82:
    # nextln:           $$rcx = $$spill60
    # nextln: 0830:     $$rcx = AluRmI(S32, Sub, 44) $$rcx
    # nextln: 0831:     AluRmI(S32, Cmp, 5) $$rcx
    # nextln: 0832:     Jumpcc(B, block83, block84)
    # nextln:       block83:
    # nextln: 0833:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0834:     Jumpcc(E, block143, block144)
    # nextln:       block143:
    # nextln:           $$r15 = $$spill50
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill42 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill37 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln: 0835:     Jump(block90)
    # nextln:       block144:
    # nextln: 0836:     AluRmI(S32, Cmp, 1) $$rcx
    # nextln: 0837:     Jumpcc(E, block145, block146)
    # nextln:       block145:
    # nextln:           $$r11 = $$spill35
    # nextln:           $$r15 = $$spill50
    # nextln:           $$spill52 = $$r12
    # nextln:           $$spill37 = $$r14
    # nextln:           $$spill36 = $$r13
    # nextln:           $$rbx = $$spill45
    # nextln:           $$r14 = $$spill39
    # nextln: 0838:     Jump(block89)
    # nextln:       block146:
    # nextln: 0839:     AluRmI(S32, Cmp, 2) $$rcx
    # nextln: 0840:     Jumpcc(E, block147, block148)
    # nextln:       block147:
    # nextln: 0841:     $$rax = MovRmS32(0)
    # nextln:           $$rcx = $$spill47
    # nextln: 0842:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0843:     $$rax = Setcc(Ne) $$rax
    # nextln: 0844:     $$rax = AluRRm(S32, Or) $$rax, $$spill33
    # nextln: 0845:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0846:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0847:     Jumpcc(Ne, block179, block180)
    # nextln:       block179:
    # nextln:           $$r15 = $$spill50
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill42 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill37 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln: 0848:     Jump(block90)
    # nextln:       block180:
    # nextln:           $$rax = $$spill48
    # nextln: 0849:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0850:     Jumpcc(S, block181, block182)
    # nextln:       block181:
    # nextln:           $$rax = MovRmS32(1)
    # nextln: 0851:     Jump(block186)
    # nextln:       block182:
    # nextln:           $$rax = $$spill32
    # nextln: 0852:     AluRRm(S32, Cmp) $$rax, $$spill50
    # nextln: 0853:     Jumpcc(Le, block183, block184)
    # nextln:       block183:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 0854:     Jump(block185)
    # nextln:       block184:
    # nextln:           $$rax = $$spill38
    # nextln: 0855:     $$rcx = MovRM(S8, [reg + 0]) $$rax
    # nextln: 0856:     $$rax = MovRmS32(0)
    # nextln: 0857:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0858:     $$rax = Setcc(Ne) $$rax
    # nextln: 0859:     Jump(block185)
    # nextln:       block185:
    # nextln: 0860:     Jump(block186)
    # nextln:       block186:
    # nextln: 0861:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0862:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0863:     Jumpcc(Ne, block187, block188)
    # nextln:       block187:
    # nextln: 0864:     $$rax = FuncAddrAbs(External(extfunc13))
    # nextln:           $$rsi = StackAddr(!15)
    # nextln:           $$rdi = $$spill31
    # nextln: 0865:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0866:     $$rax = FuncAddrAbs(External(extfunc15))
    # nextln:           $$rsi = StackAddr(!15)
    # nextln:           $$rdi = $$spill39
    # nextln: 0867:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rax = $$spill54
    # nextln:           $$spill33 = $$rax
    # nextln: 0868:     Jump(block189)
    # nextln:       block188:
    # nextln: 0869:     Jump(block189)
    # nextln:       block189:
    # nextln:           $$r15 = $$spill50
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill37 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$spill42 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln: 0870:     Jump(block90)
    # nextln:       block148:
    # nextln: 0871:     AluRmI(S32, Cmp, 3) $$rcx
    # nextln: 0872:     Jumpcc(E, block149, block150)
    # nextln:       block149:
    # nextln:           $$rbx = $$spill45
    # nextln:           $$spill36 = $$r13
    # nextln:           $$spill52 = $$r12
    # nextln:           $$spill37 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$r15 = $$spill50
    # nextln:           $$r11 = $$spill35
    # nextln: 0873:     Jump(block89)
    # nextln:       block150:
    # nextln: 0874:     Jump(block151)
    # nextln:       block151:
    # nextln: 0875:     $$rax = MovRmS32(0)
    # nextln:           $$rcx = $$spill44
    # nextln: 0876:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0877:     $$rax = Setcc(S) $$rax
    # nextln: 0878:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0879:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0880:     Jumpcc(Ne, block152, block153)
    # nextln:       block152:
    # nextln:           $$rax = $$spill44
    # nextln: 0881:     $$rax = AddRI(S32, 1) $$rax
    # nextln:           $$spill44 = $$rax
    # nextln:           $$rax = $$spill47
    # nextln: 0882:     AluRRm(S32, Cmp) $$rax, $$spill49
    # nextln: 0883:     Jumpcc(Le, block176, block177)
    # nextln:       block176:
    # nextln:           $$rax = MovRmS32(48)
    # nextln:           $$rbx = $$spill38
    # nextln: 0884:     Jump(block178)
    # nextln:       block177:
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$rbx = $$spill38
    # nextln: 0885:     Jump(block178)
    # nextln:       block178:
    # nextln: 0886:     $$rax = MovzxRRm(S16) $$rax
    # nextln:           $$spill40 = $$rax
    # nextln: 0887:     Jump(block160)
    # nextln:       block153:
    # nextln:           $$rax = $$spill38
    # nextln: 0888:     $$rax = MovRM(S8, [reg + 0]) $$rax
    # nextln: 0889:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0890:     Jumpcc(Ne, block154, block155)
    # nextln:       block154:
    # nextln:           $$rax = $$spill38
    # nextln:           $$rbx = $$spill59
    # nextln: 0891:     $$rbx = AddRR(S64) $$rax, $$rbx
    # nextln: 0892:     $$rax = MovRM(S8, [reg + 0]) $$rax
    # nextln: 0893:     Jump(block159)
    # nextln:       block155:
    # nextln:           $$rax = $$spill48
    # nextln: 0894:     AluRRm(S32, Cmp) $$rax, $$spill47
    # nextln: 0895:     Jumpcc(L, block156, block157)
    # nextln:       block156:
    # nextln:           $$rax = MovRmS32(48)
    # nextln:           $$rbx = $$spill38
    # nextln: 0896:     Jump(block158)
    # nextln:       block157:
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$rbx = $$spill38
    # nextln: 0897:     Jump(block158)
    # nextln:       block158:
    # nextln: 0898:     Jump(block159)
    # nextln:       block159:
    # nextln: 0899:     $$rax = MovzxRRm(S16) $$rax
    # nextln:           $$spill40 = $$rax
    # nextln: 0900:     Jump(block160)
    # nextln:       block160:
    # nextln: 0901:     $$rax = MovRmS32(0)
    # nextln:           $$rcx = $$spill40
    # nextln: 0902:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0903:     $$rax = Setcc(Ne) $$rax
    # nextln: 0904:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0905:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0906:     Jumpcc(Ne, block161, block162)
    # nextln:       block161:
    # nextln: 0907:     $$rdi = MovzxRRm(S16) $$spill40
    # nextln: 0908:     $$rax = FuncAddrAbs(External(extfunc17))
    # nextln: 0909:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0910:     $$rsi = MovzxRRm(S16) $$rax
    # nextln: 0911:     $$rax = FuncAddrAbs(External(extfunc29))
    # nextln:           $$rdi = $$spill39
    # nextln: 0912:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rax = $$spill45
    # nextln: 0913:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0914:     Jumpcc(Ne, block164, block165)
    # nextln:       block164:
    # nextln: 0915:     AluRmI(S32, Cmp, 1) $$spill47
    # nextln: 0916:     Jumpcc(Le, block174, block175)
    # nextln:       block174:
    # nextln: 0917:     Jump(block166)
    # nextln:       block175:
    # nextln: 0918:     $$rcx = MovRmS32(0)
    # nextln: 0919:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 0920:     $$rcx = Setcc(S) $$rcx
    # nextln: 0921:     $$rax = MovRmS32(0)
    # nextln: 0922:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 0923:     $$rax = Setcc(E) $$rax
    # nextln: 0924:     Jump(block167)
    # nextln:       block165:
    # nextln: 0925:     Jump(block166)
    # nextln:       block166:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 0926:     Jump(block167)
    # nextln:       block167:
    # nextln: 0927:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0928:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0929:     Jumpcc(Ne, block168, block169)
    # nextln:       block168:
    # nextln: 0930:     $$rax = FuncAddrAbs(External(extfunc31))
    # nextln:           $$rdi = StackAddr(!8)
    # nextln:           $$rsi = $$r13
    # nextln: 0931:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln: 0932:     $$rcx = MovRM(S32, [reg + 0]) $$rax
    # nextln: 0933:     $$rcx = AddRI(S32, 1) $$rcx
    # nextln: 0934:     $$rax = MovRmS32(0)
    # nextln:           $$rdx = $$spill47
    # nextln: 0935:     AluRRm(S32, Cmp) $$rdx, $$rcx
    # nextln: 0936:     $$rax = Setcc(E) $$rax
    # nextln: 0937:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 0938:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0939:     Jumpcc(Ne, block171, block172)
    # nextln:       block171:
    # nextln: 0940:     $$r13 = AluRmI(S32, Sub, 1) $$r13
    # nextln: 0941:     $$rax = FuncAddrAbs(External(extfunc10))
    # nextln:           $$rsi = StackAddr(!18)
    # nextln:           $$rdi = $$spill31
    # nextln: 0942:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0943:     $$rax = FuncAddrAbs(External(extfunc15))
    # nextln:           $$rsi = StackAddr(!18)
    # nextln:           $$rdi = $$spill39
    # nextln: 0944:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 0945:     Jump(block173)
    # nextln:       block172:
    # nextln: 0946:     Jump(block173)
    # nextln:       block173:
    # nextln: 0947:     Jump(block170)
    # nextln:       block169:
    # nextln: 0948:     Jump(block170)
    # nextln:       block170:
    # nextln: 0949:     Jump(block163)
    # nextln:       block162:
    # nextln: 0950:     Jump(block163)
    # nextln:       block163:
    # nextln: 0951:     $$spill47 = AluRmI(S32, Sub, 1) $$spill47
    # nextln:           $$spill42 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill37 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$r15 = $$spill50
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill35
    # nextln:           $$spill38 = $$rbx
    # nextln:           $$rbx = $$spill45
    # nextln: 0952:     Jump(block90)
    # nextln:       block84:
    # nextln: 0953:     Jump(block85)
    # nextln:       block85:
    # nextln: 0954:     AluRmI(S32, Cmp, 69) $$spill60
    # nextln: 0955:     Jumpcc(E, block86, block88)
    # nextln:       block86:
    # nextln: 0956:     Jump(block87)
    # nextln:       block87:
    # nextln: 0957:     $$rax = MovzxRRm(S8) $$spill46
    # nextln: 0958:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0959:     Jumpcc(Ne, block91, block92)
    # nextln:       block91:
    # nextln: 0960:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0961:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0962:     AluRRm(S32, Cmp) $$rax, $$r12
    # nextln: 0963:     Jumpcc(Le, block109, block110)
    # nextln:       block109:
    # nextln:           $$r15 = MovRmS32(0)
    # nextln:           $$rax = $$spill58
    # nextln:           $$spill53 = $$rax
    # nextln:           $$rcx = $$r15
    # nextln: 0964:     Jump(block111)
    # nextln:       block110:
    # nextln:           $$rax = $$spill58
    # nextln:           $$r15 = MovRmS32(0)
    # nextln: 0965:     $$rdx = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$rcx = $$spill57
    # nextln: 0966:     $$rdx = ImulRR(S64) $$rdx, $$rcx
    # nextln: 0967:     $$rcx = AddRR(S64) $$r14, $$rdx
    # nextln: 0968:     $$rdx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 0969:     $$rcx = MovRmS32(0)
    # nextln: 0970:     AluRmI(S32, Cmp, 48) $$rdx
    # nextln: 0971:     $$rcx = Setcc(E) $$rcx
    # nextln:           $$spill53 = $$rax
    # nextln: 0972:     Jump(block111)
    # nextln:       block111:
    # nextln: 0973:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 0974:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0975:     Jumpcc(Ne, block112, block113)
    # nextln:       block112:
    # nextln: 0976:     $$r15 = AddRI(S32, 1) $$r15
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill31
    # nextln:           $$rdi = $$spill40
    # nextln:           $$spill55 = $$r15
    # nextln:           $$rsi = $$spill36
    # nextln:           $$r15 = $$spill34
    # nextln:           $$rax = $$spill50
    # nextln:           $$r8 = $$spill49
    # nextln:           $$rcx = $$spill47
    # nextln:           $$r9 = $$spill45
    # nextln:           $$r10 = $$r13
    # nextln:           $$r13 = $$spill44
    # nextln:           $$r11 = $$spill39
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r14
    # nextln:           $$r14 = $$spill38
    # nextln:           $$rdx = $$spill48
    # nextln: 0977:     Jump(block130)
    # nextln:       block113:
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill31
    # nextln: 0978:     $$rbx = AddRI(S32, 1) $$r12
    # nextln: 0979:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 0980:     $$rax = CallRm $$rax, $$rdi
    # nextln: 0981:     AluRRm(S32, Cmp) $$rax, $$rbx
    # nextln: 0982:     Jumpcc(Le, block114, block116)
    # nextln:       block114:
    # nextln:           $$rbx = $$spill36
    # nextln:           $$rcx = $$spill39
    # nextln:           $$rdx = $$spill53
    # nextln:           $$rax = $$r13
    # nextln:           $$r13 = $$spill57
    # nextln: 0983:     Jump(block115)
    # nextln:       block116:
    # nextln:           $$rcx = $$spill39
    # nextln:           $$rdx = $$spill53
    # nextln:           $$rax = $$r13
    # nextln:           $$rbx = $$spill36
    # nextln: 0984:     $$rdi = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$r13 = $$spill57
    # nextln: 0985:     $$rdi = ImulRR(S64) $$rdi, $$r13
    # nextln: 0986:     $$rdi = AddRR(S64) $$r14, $$rdi
    # nextln: 0987:     $$rdi = MovRM(S16, [reg + 0]) $$rdi
    # nextln: 0988:     AluRmI(S32, Cmp, 43) $$rdi
    # nextln: 0989:     Jumpcc(Ne, block117, block118)
    # nextln:       block117:
    # nextln: 0990:     Jump(block115)
    # nextln:       block115:
    # nextln:           $$rdi = MovRmS32(0)
    # nextln:           $$spill57 = $$r13
    # nextln:           $$spill53 = $$rdx
    # nextln: 0991:     Jump(block119)
    # nextln:       block118:
    # nextln: 0992:     $$rdi = AddRI(S32, 1) $$r12
    # nextln: 0993:     $$rdi = MovsxRRm(Ext32_64) $$rdi
    # nextln:           $$spill57 = $$r13
    # nextln:           $$rsi = $$spill57
    # nextln: 0994:     $$rdi = ImulRR(S64) $$rdi, $$rsi
    # nextln: 0995:     $$rdi = AddRR(S64) $$r14, $$rdi
    # nextln: 0996:     $$rsi = MovRM(S16, [reg + 0]) $$rdi
    # nextln: 0997:     $$rdi = MovRmS32(0)
    # nextln: 0998:     AluRmI(S32, Cmp, 48) $$rsi
    # nextln: 0999:     $$rdi = Setcc(E) $$rdi
    # nextln:           $$spill53 = $$rdx
    # nextln: 1000:     Jump(block119)
    # nextln:       block119:
    # nextln: 1001:     $$rdx = MovzxRRm(S8) $$rdi
    # nextln: 1002:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 1003:     Jumpcc(Ne, block120, block121)
    # nextln:       block120:
    # nextln:           $$r10 = $$rax
    # nextln:           $$r11 = $$rcx
    # nextln:           $$rdx = $$spill48
    # nextln:           $$rdi = $$spill40
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = $$spill54
    # nextln:           $$spill53 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$spill55 = $$r15
    # nextln:           $$rsi = $$rbx
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r14
    # nextln:           $$rcx = $$spill47
    # nextln:           $$r9 = $$spill45
    # nextln:           $$r13 = $$spill44
    # nextln:           $$r15 = $$spill34
    # nextln:           $$rax = $$spill50
    # nextln:           $$r8 = $$spill49
    # nextln:           $$r14 = $$spill38
    # nextln: 1004:     Jump(block130)
    # nextln:       block121:
    # nextln:           $$spill31 = $$rax
    # nextln:           $$spill39 = $$rcx
    # nextln: 1005:     $$r13 = AddRI(S32, 1) $$r12
    # nextln: 1006:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 1007:     $$rax = CallRm $$rax, $$rdi
    # nextln: 1008:     AluRRm(S32, Cmp) $$rax, $$r13
    # nextln: 1009:     Jumpcc(Le, block122, block124)
    # nextln:       block122:
    # nextln:           $$rax = $$spill57
    # nextln: 1010:     Jump(block123)
    # nextln:       block124:
    # nextln: 1011:     $$rcx = MovsxRRm(Ext32_64) $$r12
    # nextln:           $$rax = $$spill57
    # nextln: 1012:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 1013:     $$rcx = AddRR(S64) $$r14, $$rcx
    # nextln: 1014:     $$rcx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 1015:     AluRmI(S32, Cmp, 45) $$rcx
    # nextln: 1016:     Jumpcc(Ne, block125, block126)
    # nextln:       block125:
    # nextln: 1017:     Jump(block123)
    # nextln:       block123:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln: 1018:     Jump(block127)
    # nextln:       block126:
    # nextln: 1019:     $$rcx = AddRI(S32, 1) $$r12
    # nextln: 1020:     $$rcx = MovsxRRm(Ext32_64) $$rcx
    # nextln: 1021:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 1022:     $$rcx = AddRR(S64) $$r14, $$rcx
    # nextln: 1023:     $$rdx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 1024:     $$rcx = MovRmS32(0)
    # nextln: 1025:     AluRmI(S32, Cmp, 48) $$rdx
    # nextln: 1026:     $$rcx = Setcc(E) $$rcx
    # nextln: 1027:     Jump(block127)
    # nextln:       block127:
    # nextln: 1028:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 1029:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1030:     Jumpcc(Ne, block128, block129)
    # nextln:       block128:
    # nextln:           $$r11 = $$spill39
    # nextln:           $$rdi = $$spill40
    # nextln:           $$rdx = $$spill48
    # nextln:           $$spill55 = $$r15
    # nextln:           $$spill57 = $$rax
    # nextln:           $$rcx = $$spill47
    # nextln:           $$r10 = $$spill31
    # nextln:           $$rax = $$spill50
    # nextln:           $$r9 = $$spill45
    # nextln:           $$rsi = $$rbx
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$r14
    # nextln:           $$r14 = $$spill38
    # nextln:           $$r15 = $$spill34
    # nextln:           $$r13 = $$spill44
    # nextln:           $$r8 = $$spill49
    # nextln: 1031:     Jump(block130)
    # nextln:       block130:
    # nextln:           $$spill38 = $$r14
    # nextln:           $$spill31 = $$r10
    # nextln:           $$spill39 = $$r11
    # nextln:           $$spill37 = $$r12
    # nextln:           $$spill40 = $$rdi
    # nextln:           $$spill47 = $$rcx
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = $$spill53
    # nextln:           $$spill56 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$spill50 = $$rax
    # nextln:           $$spill34 = $$r15
    # nextln:           $$r14 = $$spill55
    # nextln:           $$spill49 = $$r8
    # nextln:           $$spill48 = $$rdx
    # nextln:           $$spill36 = $$rsi
    # nextln:           $$spill45 = $$r9
    # nextln:           $$spill44 = $$r13
    # nextln: 1032:     Jump(block131)
    # nextln:       block131:
    # nextln: 1033:     $$rbx = AddRI(S32, 1) $$rbx
    # nextln: 1034:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 1035:     $$rax = CallRm $$rax, $$rdi
    # nextln: 1036:     AluRRm(S32, Cmp) $$rax, $$rbx
    # nextln: 1037:     Jumpcc(Le, block132, block133)
    # nextln:       block132:
    # nextln:           $$r10 = $$spill35
    # nextln:           $$rdi = $$spill34
    # nextln:           $$r9 = $$spill33
    # nextln:           $$r11 = $$spill50
    # nextln:           $$r12 = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln:           $$rdx = $$spill32
    # nextln:           $$rax = $$spill41
    # nextln:           $$r8 = $$spill48
    # nextln:           $$rcx = $$spill47
    # nextln:           $$r14 = $$spill44
    # nextln:           $$r15 = $$spill38
    # nextln:           $$rsi = $$spill40
    # nextln:           $$r13 = MovRmS32(0)
    # nextln:           $$r13 = $$spill37
    # nextln:           $$rax = MovRmS32(0)
    # nextln:           $$spill61 = $$rdx
    # nextln:           $$rdx = $$r12
    # nextln:           $$r12 = $$spill61
    # nextln: 1038:     Jump(block134)
    # nextln:       block133:
    # nextln:           $$r10 = $$spill35
    # nextln:           $$rdi = $$spill34
    # nextln:           $$r11 = $$spill50
    # nextln:           $$r9 = $$spill33
    # nextln:           $$rdx = $$rbx
    # nextln:           $$r8 = $$spill48
    # nextln:           $$r15 = $$spill38
    # nextln:           $$rsi = $$spill40
    # nextln:           $$rbx = $$r14
    # nextln:           $$r14 = $$spill44
    # nextln: 1039:     $$rax = MovsxRRm(Ext32_64) $$rdx
    # nextln:           $$rcx = $$spill57
    # nextln: 1040:     $$rax = ImulRR(S64) $$rax, $$rcx
    # nextln:           $$r13 = $$spill37
    # nextln: 1041:     $$rax = AddRR(S64) $$r13, $$rax
    # nextln: 1042:     $$rcx = MovRM(S16, [reg + 0]) $$rax
    # nextln:           $$r12 = $$spill32
    # nextln: 1043:     $$rax = MovRmS32(0)
    # nextln: 1044:     AluRmI(S32, Cmp, 48) $$rcx
    # nextln: 1045:     $$rax = Setcc(E) $$rax
    # nextln:           $$rcx = $$spill47
    # nextln: 1046:     Jump(block134)
    # nextln:       block134:
    # nextln: 1047:     $$rax = MovzxRRm(S8) $$rax
    # nextln: 1048:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1049:     Jumpcc(Ne, block135, block136)
    # nextln:       block135:
    # nextln: 1050:     $$rbx = AddRI(S32, 1) $$rbx
    # nextln:           $$spill44 = $$r14
    # nextln:           $$spill35 = $$r10
    # nextln:           $$spill38 = $$r15
    # nextln:           $$spill40 = $$rsi
    # nextln:           $$spill34 = $$rdi
    # nextln:           $$spill33 = $$r9
    # nextln:           $$spill48 = $$r8
    # nextln:           $$r14 = $$rbx
    # nextln:           $$rbx = $$rdx
    # nextln:           $$spill47 = $$rcx
    # nextln:           $$spill37 = $$r13
    # nextln:           $$spill32 = $$r12
    # nextln:           $$spill50 = $$r11
    # nextln: 1051:     Jump(block131)
    # nextln:       block136:
    # nextln:           $$spill38 = $$r15
    # nextln:           $$spill37 = $$r13
    # nextln:           $$rax = $$rsi
    # nextln:           $$spill55 = $$rbx
    # nextln:           $$spill35 = $$r10
    # nextln:           $$spill33 = $$r9
    # nextln:           $$spill32 = $$r12
    # nextln:           $$spill50 = $$r11
    # nextln:           $$spill48 = $$r8
    # nextln:           $$rbx = $$rcx
    # nextln:           $$spill42 = $$rdx
    # nextln: 1052:     $$r8 = MovRmS32(0)
    # nextln: 1053:     AluRmI(S32, Cmp, 10) $$spill55
    # nextln: 1054:     $$r8 = Setcc(G) $$r8
    # nextln: 1055:     $$rcx = MovzxRRm(S8) $$r8
    # nextln: 1056:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1057:     Jumpcc(Ne, block137, block138)
    # nextln:       block137:
    # nextln:           $$r9 = $$spill45
    # nextln:           $$rsi = $$spill38
    # nextln:           $$r12 = $$spill32
    # nextln:           $$rcx = $$spill41
    # nextln:           $$r8 = $$rax
    # nextln:           $$r11 = $$spill50
    # nextln:           $$r13 = $$spill56
    # nextln:           $$rdx = $$spill49
    # nextln:           $$r10 = $$spill35
    # nextln:           $$r15 = $$spill42
    # nextln:           $$rax = MovRmS32(10)
    # nextln:           $$rax = $$rcx
    # nextln:           $$spill47 = $$rbx
    # nextln:           $$spill44 = $$r14
    # nextln:           $$rsi = $$spill31
    # nextln:           $$rbx = $$r15
    # nextln:           $$spill62 = $$rdx
    # nextln:           $$rdx = $$r13
    # nextln:           $$r13 = $$spill62
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = MovRmS32(10)
    # nextln:           $$spill55 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln:           $$spill34 = $$rdi
    # nextln:           $$rdi = $$spill37
    # nextln:           $$r12 = $$r8
    # nextln:           $$r8 = $$spill39
    # nextln:           $$r11 = $$spill48
    # nextln: 1058:     Jump(block139)
    # nextln:       block138:
    # nextln:           $$r9 = $$spill45
    # nextln:           $$r15 = $$spill31
    # nextln:           $$r8 = $$spill39
    # nextln:           $$r12 = $$rax
    # nextln:           $$rsi = $$spill56
    # nextln:           $$rdx = $$spill42
    # nextln:           $$rax = $$spill41
    # nextln:           $$rcx = $$rdi
    # nextln:           $$rdi = $$spill37
    # nextln:           $$spill47 = $$rbx
    # nextln:           $$rbx = $$spill32
    # nextln:           $$r11 = $$spill48
    # nextln:           $$r13 = $$spill49
    # nextln:           $$r10 = $$spill35
    # nextln:           $$spill44 = $$r14
    # nextln:           $$spill34 = $$rcx
    # nextln:           $$rbx = $$rdx
    # nextln:           $$rdx = $$rsi
    # nextln:           $$rsi = $$r15
    # nextln: 1059:     Jump(block139)
    # nextln:       block139:
    # nextln: 1060:     $$rcx = MovRM(S8, [reg + 0]) $$rax
    # nextln:           $$spill41 = $$rax
    # nextln: 1061:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1062:     Jumpcc(Ne, block140, block141)
    # nextln:       block140:
    # nextln:           $$r14 = $$spill47
    # nextln:           $$r10 = $$spill38
    # nextln:           $$rax = $$rdx
    # nextln:           $$r9 = $$spill36
    # nextln:           $$rcx = $$spill35
    # nextln: 1063:     $$rdx = MovRM(S32, [reg + 4]) $$rcx
    # nextln: 1064:     $$rdx = AluRRm(S32, Sub) $$rdx, $$spill50
    # nextln:           $$spill48 = $$r11
    # nextln:           $$r15 = $$rdi
    # nextln:           $$rdi = $$rcx
    # nextln:           $$spill49 = $$r13
    # nextln:           $$spill42 = $$rbx
    # nextln:           $$r13 = $$rsi
    # nextln:           $$r14 = $$r8
    # nextln:           $$r8 = $$r10
    # nextln: 1065:     Jump(block142)
    # nextln:       block141:
    # nextln:           $$r9 = $$spill36
    # nextln:           $$rax = $$rdx
    # nextln:           $$r14 = $$spill47
    # nextln:           $$rcx = $$spill35
    # nextln:           $$r10 = $$spill38
    # nextln:           $$rdx = MovRmS32(0)
    # nextln:           $$spill42 = $$rbx
    # nextln:           $$r15 = $$rdi
    # nextln:           $$rdi = $$rcx
    # nextln:           $$spill49 = $$r13
    # nextln:           $$r13 = $$rsi
    # nextln:           $$r14 = $$r8
    # nextln:           $$r8 = $$r10
    # nextln:           $$spill48 = $$r11
    # nextln: 1066:     Jump(block142)
    # nextln:       block142:
    # nextln: 1067:     $$rcx = MovzxRRm(S16) $$r12
    # nextln:           $$spill40 = $$r12
    # nextln: 1068:     $$r9 = MovzxRRm(S8) $$rax
    # nextln: 1069:     $$rax = FuncAddrAbs(External(extfunc23))
    # nextln:           $$rbx = $$rdi
    # nextln:           $$r12 = $$r8
    # nextln:           $$r8 = $$spill55
    # nextln:           $$rdi = $$r14
    # nextln:           $$rsi = $$r13
    # nextln: 1070:     CallRm $$rax, $$rdi, $$rsi, $$rdx, $$rcx, $$r8, $$r9
    # nextln:           $$spill39 = $$r14
    # nextln:           $$r14 = $$r15
    # nextln:           $$rdx = $$spill32
    # nextln:           $$rsi = $$rbx
    # nextln:           $$rax = $$spill40
    # nextln:           $$r9 = $$spill34
    # nextln:           $$rcx = $$spill49
    # nextln:           $$r11 = $$spill47
    # nextln:           $$rbx = $$spill45
    # nextln:           $$r10 = $$spill44
    # nextln:           $$r15 = $$spill41
    # nextln:           $$rdi = $$spill36
    # nextln:           $$r8 = $$spill33
    # nextln:           $$spill38 = $$r12
    # nextln:           $$rax = $$r15
    # nextln:           $$r15 = $$spill58
    # nextln:           $$r10 = $$r13
    # nextln:           $$r13 = $$rdi
    # nextln:           $$r12 = $$r9
    # nextln:           $$r9 = $$rcx
    # nextln:           $$rcx = $$rdx
    # nextln:           $$rdx = $$r8
    # nextln:           $$r8 = $$rbx
    # nextln:           $$rdi = $$spill48
    # nextln:           $$rbx = $$r11
    # nextln:           $$r11 = $$rsi
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill50
    # nextln: 1071:     Jump(block96)
    # nextln:       block129:
    # nextln:           $$spill57 = $$rax
    # nextln:           $$r15 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$r13 = $$spill46
    # nextln:           $$rax = $$spill40
    # nextln:           $$spill36 = $$rbx
    # nextln:           $$rbx = $$r12
    # nextln: 1072:     $$rdi = MovzxRRm(S16) $$rax
    # nextln: 1073:     $$rax = FuncAddrAbs(External(extfunc17))
    # nextln: 1074:     $$rax = CallRm $$rax, $$rdi
    # nextln: 1075:     $$rsi = MovzxRRm(S16) $$rax
    # nextln: 1076:     $$rax = FuncAddrAbs(External(extfunc29))
    # nextln:           $$rdi = $$r14
    # nextln: 1077:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$spill37 = $$r15
    # nextln:           $$spill42 = $$rbx
    # nextln:           $$r15 = $$spill50
    # nextln:           $$r12 = $$spill40
    # nextln:           $$rbx = $$spill45
    # nextln:           $$r13 = $$spill35
    # nextln: 1078:     Jump(block90)
    # nextln:       block92:
    # nextln:           $$spill36 = $$r13
    # nextln:           $$r13 = $$spill46
    # nextln:           $$rbx = $$r12
    # nextln:           $$r15 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln: 1079:     $$rdi = MovzxRRm(S16) $$spill40
    # nextln: 1080:     $$rax = FuncAddrAbs(External(extfunc17))
    # nextln: 1081:     $$rax = CallRm $$rax, $$rdi
    # nextln: 1082:     $$rsi = MovzxRRm(S16) $$rax
    # nextln: 1083:     $$rax = FuncAddrAbs(External(extfunc29))
    # nextln:           $$rdi = $$r14
    # nextln: 1084:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 1085:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 1086:     $$rax = CallRm $$rax, $$rdi
    # nextln: 1087:     $$rcx = MovRmS32(0)
    # nextln: 1088:     AluRRm(S32, Cmp) $$rbx, $$rax
    # nextln: 1089:     $$rcx = Setcc(L) $$rcx
    # nextln: 1090:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 1091:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1092:     Jumpcc(Ne, block93, block94)
    # nextln:       block93:
    # nextln: 1093:     $$rax = MovsxRRm(Ext32_64) $$rbx
    # nextln:           $$r12 = $$spill57
    # nextln: 1094:     $$rax = ImulRR(S64) $$rax, $$r12
    # nextln: 1095:     $$rax = AddRR(S64) $$r15, $$rax
    # nextln: 1096:     $$rax = MovRM(S16, [reg + 0]) $$rax
    # nextln: 1097:     AluRmI(S32, Cmp, 43) $$rax
    # nextln: 1098:     Jumpcc(E, block97, block98)
    # nextln:       block97:
    # nextln:           $$rcx = MovRmS32(1)
    # nextln:           $$rax = $$rbx
    # nextln: 1099:     Jump(block99)
    # nextln:       block98:
    # nextln: 1100:     $$rax = MovsxRRm(Ext32_64) $$rbx
    # nextln: 1101:     $$rax = ImulRR(S64) $$rax, $$r12
    # nextln: 1102:     $$rax = AddRR(S64) $$r15, $$rax
    # nextln: 1103:     $$rax = MovRM(S16, [reg + 0]) $$rax
    # nextln: 1104:     $$rcx = MovRmS32(0)
    # nextln: 1105:     AluRmI(S32, Cmp, 45) $$rax
    # nextln: 1106:     $$rcx = Setcc(E) $$rcx
    # nextln:           $$rax = $$rbx
    # nextln: 1107:     Jump(block99)
    # nextln:       block99:
    # nextln: 1108:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 1109:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1110:     Jumpcc(Ne, block100, block101)
    # nextln:       block100:
    # nextln: 1111:     $$rbx = AddRI(S32, 1) $$rax
    # nextln: 1112:     $$rax = MovsxRRm(Ext32_64) $$rax
    # nextln: 1113:     $$rax = ImulRR(S64) $$rax, $$r12
    # nextln: 1114:     $$rax = AddRR(S64) $$r15, $$rax
    # nextln: 1115:     $$rax = MovRM(S16, [reg + 0]) $$rax
    # nextln: 1116:     $$rsi = MovzxRRm(S16) $$rax
    # nextln: 1117:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r14
    # nextln: 1118:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rcx = $$spill47
    # nextln:           $$rsi = $$spill44
    # nextln:           $$r8 = $$spill41
    # nextln:           $$r11 = $$spill31
    # nextln:           $$spill42 = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln:           $$r14 = $$r15
    # nextln:           $$r10 = $$spill36
    # nextln:           $$rdi = $$spill34
    # nextln:           $$r15 = $$spill33
    # nextln:           $$rdx = $$spill32
    # nextln:           $$spill57 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln:           $$r9 = $$spill49
    # nextln:           $$rax = $$r13
    # nextln:           $$r13 = $$spill48
    # nextln: 1119:     Jump(block102)
    # nextln:       block101:
    # nextln:           $$r9 = $$spill49
    # nextln:           $$rcx = $$spill47
    # nextln:           $$rsi = $$spill44
    # nextln:           $$r8 = $$spill41
    # nextln:           $$r11 = $$spill31
    # nextln:           $$rbx = $$r14
    # nextln:           $$spill42 = $$rax
    # nextln:           $$rax = $$r13
    # nextln:           $$r13 = $$spill48
    # nextln:           $$r14 = $$r15
    # nextln:           $$r10 = $$spill36
    # nextln:           $$rdi = $$spill34
    # nextln:           $$r15 = $$spill33
    # nextln:           $$rdx = $$spill32
    # nextln:           $$spill57 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln: 1120:     Jump(block102)
    # nextln:       block102:
    # nextln:           $$spill49 = $$r9
    # nextln:           $$spill46 = $$rax
    # nextln:           $$spill44 = $$rsi
    # nextln:           $$spill41 = $$r8
    # nextln:           $$spill31 = $$r11
    # nextln:           $$spill36 = $$r10
    # nextln:           $$spill34 = $$rdi
    # nextln:           $$spill33 = $$r15
    # nextln:           $$r15 = $$r13
    # nextln:           $$r13 = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln:           $$r14 = $$spill42
    # nextln:           $$spill32 = $$rdx
    # nextln:           $$spill47 = $$rcx
    # nextln: 1121:     Jump(block103)
    # nextln:       block103:
    # nextln: 1122:     $$rax = FuncAddrAbs(External(extfunc9))
    # nextln:           $$rdi = StackAddr(!0)
    # nextln: 1123:     $$rax = CallRm $$rax, $$rdi
    # nextln: 1124:     AluRRm(S32, Cmp) $$rax, $$r14
    # nextln: 1125:     Jumpcc(Le, block104, block105)
    # nextln:       block104:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln:           $$spill40 = $$r12
    # nextln:           $$rax = $$spill57
    # nextln: 1126:     Jump(block106)
    # nextln:       block105:
    # nextln: 1127:     $$rcx = MovsxRRm(Ext32_64) $$r14
    # nextln:           $$rax = $$spill57
    # nextln: 1128:     $$rcx = ImulRR(S64) $$rcx, $$rax
    # nextln: 1129:     $$rcx = AddRR(S64) $$rbx, $$rcx
    # nextln: 1130:     $$rdx = MovRM(S16, [reg + 0]) $$rcx
    # nextln: 1131:     $$rcx = MovRmS32(0)
    # nextln: 1132:     AluRmI(S32, Cmp, 48) $$rdx
    # nextln: 1133:     $$rcx = Setcc(E) $$rcx
    # nextln:           $$spill40 = $$r12
    # nextln: 1134:     Jump(block106)
    # nextln:       block106:
    # nextln: 1135:     $$rcx = MovzxRRm(S8) $$rcx
    # nextln: 1136:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1137:     Jumpcc(Ne, block107, block108)
    # nextln:       block107:
    # nextln: 1138:     $$r12 = AddRI(S32, 1) $$r14
    # nextln: 1139:     $$rcx = MovsxRRm(Ext32_64) $$r14
    # nextln:           $$r14 = $$rax
    # nextln: 1140:     $$rax = ImulRR(S64) $$rcx, $$r14
    # nextln: 1141:     $$rax = AddRR(S64) $$rbx, $$rax
    # nextln: 1142:     $$rax = MovRM(S16, [reg + 0]) $$rax
    # nextln: 1143:     $$rsi = MovzxRRm(S16) $$rax
    # nextln: 1144:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rdi = $$r13
    # nextln: 1145:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$spill57 = $$r14
    # nextln:           $$r14 = $$r12
    # nextln:           $$r12 = $$spill40
    # nextln: 1146:     Jump(block103)
    # nextln:       block108:
    # nextln:           $$r9 = $$spill49
    # nextln:           $$rdx = $$spill33
    # nextln:           $$rcx = $$spill32
    # nextln:           $$spill39 = $$r13
    # nextln:           $$spill57 = $$rax
    # nextln:           $$r13 = $$spill36
    # nextln:           $$rsi = $$rbx
    # nextln:           $$rdi = $$r15
    # nextln:           $$rbx = $$spill47
    # nextln:           $$r15 = $$spill46
    # nextln:           $$r11 = $$spill35
    # nextln:           $$rax = $$spill41
    # nextln:           $$r8 = $$spill45
    # nextln:           $$r10 = $$spill31
    # nextln:           $$r12 = $$spill34
    # nextln:           $$spill42 = $$r14
    # nextln:           $$r14 = $$spill50
    # nextln: 1147:     Jump(block95)
    # nextln:       block94:
    # nextln:           $$r8 = $$spill45
    # nextln:           $$r10 = $$spill31
    # nextln:           $$spill52 = $$rbx
    # nextln:           $$rbx = $$spill47
    # nextln:           $$rdi = $$spill48
    # nextln:           $$spill39 = $$r14
    # nextln:           $$rdx = $$spill33
    # nextln:           $$rsi = $$r15
    # nextln:           $$r14 = $$spill50
    # nextln:           $$r15 = $$r13
    # nextln:           $$rcx = $$spill32
    # nextln:           $$r9 = $$spill49
    # nextln:           $$r13 = $$spill36
    # nextln:           $$r11 = $$spill35
    # nextln:           $$r12 = $$spill34
    # nextln:           $$rax = $$spill41
    # nextln:           $$spill61 = $$rax
    # nextln:           $$rax = $$spill52
    # nextln:           $$spill42 = $$rax
    # nextln:           $$rax = $$spill61
    # nextln: 1148:     Jump(block95)
    # nextln:       block95:
    # nextln: 1149:     Jump(block96)
    # nextln:       block96:
    # nextln:           $$spill37 = $$rsi
    # nextln:           $$spill34 = $$r12
    # nextln:           $$spill49 = $$r9
    # nextln:           $$spill48 = $$rdi
    # nextln:           $$spill31 = $$r10
    # nextln:           $$spill47 = $$rbx
    # nextln:           $$spill46 = $$r15
    # nextln:           $$r15 = $$r14
    # nextln:           $$spill36 = $$r13
    # nextln:           $$rbx = $$r8
    # nextln:           $$spill41 = $$rax
    # nextln:           $$r12 = $$spill40
    # nextln:           $$spill32 = $$rcx
    # nextln:           $$r14 = $$spill39
    # nextln:           $$r13 = $$r11
    # nextln:           $$spill33 = $$rdx
    # nextln: 1150:     Jump(block90)
    # nextln:       block88:
    # nextln:           $$spill52 = $$r12
    # nextln:           $$rcx = $$spill32
    # nextln:           $$r15 = $$spill46
    # nextln:           $$rdi = $$spill48
    # nextln:           $$r8 = $$spill45
    # nextln:           $$r10 = $$spill31
    # nextln:           $$rdx = $$spill33
    # nextln:           $$r9 = $$spill49
    # nextln:           $$rax = $$spill41
    # nextln:           $$rbx = $$spill47
    # nextln:           $$r11 = $$spill35
    # nextln:           $$r12 = $$spill34
    # nextln:           $$rsi = $$r14
    # nextln:           $$r14 = $$spill50
    # nextln:           $$rbx = $$r8
    # nextln:           $$r15 = $$r14
    # nextln:           $$r14 = $$spill39
    # nextln:           $$spill37 = $$rsi
    # nextln:           $$spill36 = $$r13
    # nextln: 1151:     Jump(block89)
    # nextln:       block89:
    # nextln: 1152:     $$rsi = MovzxRRm(S16) $$spill40
    # nextln:           $$r12 = $$spill40
    # nextln: 1153:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$r13 = $$r11
    # nextln:           $$rdi = $$r14
    # nextln: 1154:     CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rax = $$spill52
    # nextln:           $$spill42 = $$rax
    # nextln: 1155:     Jump(block90)
    # nextln:       block90:
    # nextln:           $$spill39 = $$r14
    # nextln:           $$spill45 = $$rbx
    # nextln:           $$spill50 = $$r15
    # nextln:           $$spill35 = $$r13
    # nextln:           $$r13 = $$spill37
    # nextln:           $$rdx = $$spill44
    # nextln:           $$rdi = $$spill49
    # nextln:           $$rbx = $$r12
    # nextln:           $$r12 = $$spill42
    # nextln: 1156:     Jump(block55)
    # nextln:       block63:
    # nextln:           $$rbx = $$r11
    # nextln:           $$rax = $$spill35
    # nextln:           $$r14 = $$r13
    # nextln: 1157:     $$rcx = MovRM(S8, [reg + 8]) $$rax
    # nextln: 1158:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1159:     Jumpcc(Ne, block64, block65)
    # nextln:       block64:
    # nextln:           $$rcx = $$spill34
    # nextln: 1160:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1161:     Jumpcc(Ne, block71, block72)
    # nextln:       block71:
    # nextln:           $$rdi = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln: 1162:     Jump(block66)
    # nextln:       block72:
    # nextln: 1163:     $$rax = MovRM(S32, [reg + 4]) $$rax
    # nextln: 1164:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1165:     Jumpcc(Ne, block73, block74)
    # nextln:       block73:
    # nextln:           $$rdi = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln: 1166:     Jump(block66)
    # nextln:       block74:
    # nextln: 1167:     $$rax = FuncAddrAbs(External(extfunc26))
    # nextln:           $$rdi = $$r14
    # nextln: 1168:     $$rax = CallRm $$rax, $$rdi
    # nextln: 1169:     $$rcx = MovRmS32(0)
    # nextln: 1170:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1171:     $$rcx = Setcc(G) $$rcx
    # nextln:           $$rdi = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln: 1172:     Jump(block67)
    # nextln:       block65:
    # nextln:           $$rdi = $$rbx
    # nextln:           $$rbx = $$r14
    # nextln: 1173:     Jump(block66)
    # nextln:       block66:
    # nextln:           $$rcx = MovRmS32(0)
    # nextln: 1174:     Jump(block67)
    # nextln:       block67:
    # nextln: 1175:     $$rax = MovzxRRm(S8) $$rcx
    # nextln: 1176:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1177:     Jumpcc(Ne, block68, block69)
    # nextln:       block68:
    # nextln: 1179:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln:           $$rsi = StackAddr(!20)
    # nextln: 1180:     CallRm $$rax, $$rdi, $$rsi
    # nextln: 1181:     $$rax = FuncAddrAbs(External(extfunc8))
    # nextln:           $$rsi = MovRmS32(0)
    # nextln:           $$rdx = StackAddr(!20)
    # nextln:           $$rdi = $$rbx
    # nextln: 1182:     CallRm $$rax, $$rdi, $$rsi, $$rdx
    # nextln: 1183:     Jump(block70)
    # nextln:       block69:
    # nextln: 1184:     Jump(block70)
    # nextln:       block70:
    # nextln: 1185:     Ret

    %0:ctrl, %1:ptr, %2:ptr, %3:ptr, %4:ptr = entry
    %5:ptr = stackslot 16:8
    %6:ptr = stackslot 16:8
    %7:ptr = stackslot 8:8
    %8:ptr = stackslot 8:8
    %9:ptr = stackslot 8:8
    %10:ptr = stackslot 8:8
    %11:ptr = stackslot 16:8
    %12:ptr = stackslot 16:8
    %13:ptr = stackslot 16:8
    %14:ptr = stackslot 16:16
    %15:ptr = stackslot 16:8
    %16:ptr = stackslot 16:8
    %17:ptr = stackslot 16:8
    %18:ptr = stackslot 16:8
    %19:ptr = stackslot 16:8
    %20:ptr = stackslot 16:8
    %21:ptr = stackslot 16:8
    %22:ptr = stackslot 16:8
    %23:ptr = stackslot 16:8
    %24:ptr = stackslot 16:8
    %25:ptr = stackslot 16:8
    %26:ctrl, %27:phisel = region %0
    %28:i32 = iconst 0
    %29:i32 = iconst 65535
    %30:i32 = iconst 2
    %31:i64 = iext %30
    %32:i64 = sfill 32 %31
    %33:i32 = iconst 1
    %34:i64 = iext %33
    %35:i64 = sfill 32 %34
    %36:i32 = iconst 46
    %37:i32 = iconst 35
    %38:i32 = iconst 255
    %40:i32 = and %33, %38
    %39:i32 = and %28, %38
    %41:i32 = iconst 8240
    %42:i64 = iconst 4
    %43:i32 = iconst 48
    %44:i32 = iconst 45
    %45:i32 = iconst 43
    %46:i32 = iconst 4
    %47:i32 = iconst 34
    %48:i32 = iconst 3
    %49:i32 = iconst 2147483647
    %50:i32 = iconst 44
    %51:i32 = iconst 4294967295
    %52:i64 = iconst 16
    %53:ctrl, %54:ptr = call @jit_gc_memcpy %26, %5, %3, %52
    %55:ctrl, %56:phisel = region %53
    %57:i64 = iconst 8
    %58:i32 = iconst 101
    %59:i32 = iconst 92
    %60:i32 = iconst 69
    %61:i32 = iconst 5
    %62:i32 = iconst 6
    %63:i64 = iconst 24
    %64:ptr = iconst 137576242762560
    %65:i32 = iconst 10
    %66:i32 = iconst 59
    %67:i64 = iconst 10
    %68:ptr = iconst 137576241302592
    %69:ptr = iconst 137576241302976
    %70:ctrl = store.8 %55, %69, %7
    %71:ctrl, %72:ptr = call @"System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" %70, %7
    %73:ctrl = store.8 %71, %69, %8
    %74:ctrl, %75:ptr = call @"System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" %73, %8
    %76:i32 = icmp eq %72, %75
    %77:ctrl, %78:ctrl = brcond %74, %76
    %79:ctrl, %80:phisel = region %77
    %81:ctrl, %82:phisel = region %78
    %83:ctrl = store.8 %81, %69, %9
    %84:ctrl, %85:ptr = call @"System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" %83, %9
    %86:ctrl = store.8 %84, %68, %10
    %87:ctrl, %88:ptr = call @"System.Type System.Type::GetTypeFromHandle(System.RuntimeTypeHandle)" %86, %10
    %89:ctrl, %90:phisel = region %87, %79
    %95:i32 = phi %90, %28, %28
    %94:ptr = phi %90, %1, %1
    %92:ptr = phi %90, %2, %2
    %93:ptr = ptroff %92, %57
    %91:ptr = phi %90, %4, %4
    %96:i32 = icmp eq %85, %88
    %97:i32 = phi %90, %96, %33
    %98:i32 = and %97, %38
    %99:ctrl = call @"System.Void System.Diagnostics.Debug::Assert(System.Boolean)" %89, %98
    %100:ctrl = call @"System.Void System.Number+NumberBuffer::CheckConsistency()" %99, %92
    %101:ctrl, %102:ptr = call @"System.Byte* System.Number+NumberBuffer::GetDigitsPointer()" %100, %92
    %103:ctrl, %104:ptr = call @jit_gc_memcpy %101, %11, %5, %52
    %105:ctrl, %106:i32 = load.1 %103, %102
    %107:ctrl, %108:ctrl = brcond %105, %106
    %109:ctrl, %110:phisel = region %107
    %111:ctrl, %112:i32 = load.1 %109, %93
    %113:ctrl, %114:ctrl = brcond %111, %112
    %115:ctrl, %116:phisel = region %113
    %117:ctrl, %118:phisel = region %114
    %119:ctrl, %120:phisel = region %117, %115
    %128:ptr = phi %120, %11, %11
    %127:i32 = phi %120, %28, %33
    %126:i32 = phi %120, %28, %28
    %125:ptr = phi %120, %102, %102
    %124:i32 = phi %120, %95, %95
    %123:ptr = phi %120, %94, %94
    %122:ptr = phi %120, %92, %92
    %121:ptr = phi %120, %91, %91
    %129:ctrl, %130:phisel = region %108
    %131:ctrl, %132:phisel = region %119, %129
    %140:ptr = phi %132, %128, %11
    %139:i32 = phi %132, %127, %30
    %141:ctrl, %142:i32 = call @"System.Int32 System.Number::FindSection(System.ReadOnlySpan`1[System.Char], System.Int32)" %131, %140, %139
    %138:i32 = phi %132, %126, %28
    %137:ptr = phi %132, %125, %102
    %136:i32 = phi %132, %124, %95
    %135:ptr = phi %132, %123, %94
    %134:ptr = phi %132, %122, %92
    %1032:ptr = phi %162, %134, %1031
    %1033:ptr = phi %662, %1032, %1064
    %1034:ptr = phi %467, %1033, %1033
    %1035:ptr = phi %469, %1033, %1034
    %1036:ptr = phi %722, %1035
    %1037:ptr = phi %732, %1036
    %1038:ptr = phi %740, %1036, %1037
    %978:ptr = phi %973, %1038, %977
    %979:ptr = phi %228, %978
    %1065:ptr = ptroff %979, %42
    %980:ptr = phi %192, %979
    %981:ptr = ptroff %980, %42
    %982:ctrl, %983:i32 = load.4 %191, %981
    %195:i32 = iadd %983, %194
    %196:i32 = isub %195, %1170
    %197:i32 = phi %985, %196, %1174
    %198:ctrl = call @"System.Void System.Number::RoundNumber(NumberBuffer&, System.Int32, System.Boolean)" %984, %1029, %197, %39
    %199:ctrl, %200:i32 = load.1 %198, %1152
    %201:i32 = icmp eq %200, %28
    %202:i32 = and %201, %38
    %203:ctrl, %204:ctrl = brcond %199, %202
    %205:ctrl, %206:phisel = region %203
    %207:ctrl, %208:ptr = call @jit_gc_memcpy %205, %13, %5, %52
    %209:ctrl, %210:i32 = call @"System.Int32 System.Number::FindSection(System.ReadOnlySpan`1[System.Char], System.Int32)" %207, %13, %30
    %153:i32 = phi %206, %152
    %154:i32 = icmp eq %210, %153
    %155:i32 = icmp eq %154, %28
    %156:i32 = and %155, %38
    %157:ctrl, %158:ctrl = brcond %209, %156
    %159:ctrl, %160:phisel = region %157
    %161:ctrl, %162:phisel = region %141, %159
    %163:ctrl, %164:phisel = region %161
    %165:ctrl, %166:ptr = call @jit_gc_memcpy %163, %12, %5, %52
    %167:ctrl, %168:ptr = call @"System.Char& System.Runtime.InteropServices.MemoryMarshal::GetReference[System.Char](System.ReadOnlySpan`1[System.Char])" %165, %12
    %169:i64 = ptrtoint %168
    %170:ptr = inttoptr %169
    %211:i32 = phi %160, %210
    %143:i32 = phi %162, %142, %211
    %171:i32 = phi %160, %1264
    %172:i32 = phi %162, %138, %171
    %173:i32 = phi %662, %172, %1288
    %174:i32 = phi %467, %173, %173
    %175:i32 = phi %469, %173, %174
    %176:i32 = phi %722, %175
    %177:i32 = phi %740, %176, %736
    %178:i32 = phi %749, %177
    %179:i32 = phi %958, %178
    %180:i32 = imul %179, %48
    %181:i32 = isub %962, %180
    %182:i32 = phi %971, %181, %1117
    %183:i32 = phi %973, %764, %182
    %184:i32 = phi %228, %183
    %185:i32 = iadd %1067, %184
    %186:ctrl = store.4 %1066, %185, %1065
    %187:ctrl, %188:ctrl = brcond %186, %1157
    %189:ctrl, %190:phisel = region %187
    %984:ctrl, %985:phisel = region %982, %189
    %1028:ptr = phi %190, %979
    %1029:ptr = phi %985, %980, %1028
    %1030:ptr = phi %206, %1029
    %1031:ptr = phi %160, %1030
    %191:ctrl, %192:phisel = region %188
    %230:i32 = phi %192, %229
    %232:i32 = phi %985, %230, %231
    %233:i32 = phi %206, %232
    %234:i32 = phi %160, %233
    %235:i32 = phi %162, %136, %234
    %236:i32 = phi %662, %235, %719
    %237:i32 = phi %467, %236, %472
    %238:i32 = phi %469, %472, %237
    %239:i32 = phi %480, %238
    %240:i32 = and %239, %29
    %241:i32 = and %240, %29
    %242:i32 = icmp ult %60, %241
    %243:ctrl, %244:ctrl = brcond %479, %242
    %245:ctrl, %246:phisel = region %243
    %273:i32 = phi %246, %239
    %247:i32 = phi %246, %241
    %250:i32 = icmp eq %247, %59
    %251:ctrl, %252:ctrl = brcond %245, %250
    %253:ctrl, %254:phisel = region %251
    %255:ctrl, %256:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %253, %5
    %257:ctrl, %258:phisel = region %252
    %259:ctrl, %260:phisel = region %257
    %249:i32 = icmp eq %247, %58
    %261:ctrl, %262:ctrl = brcond %259, %249
    %263:ctrl, %264:phisel = region %262
    %265:ctrl, %266:phisel = region %263
    %248:i32 = icmp eq %247, %41
    %267:ctrl, %268:ctrl = brcond %265, %248
    %269:ctrl, %270:phisel = region %267
    %271:ctrl, %272:phisel = region %268
    %274:ctrl, %275:phisel = region %244
    %363:i32 = phi %275, %239
    %276:i32 = phi %275, %241
    %284:i32 = isub %276, %47
    %290:i32 = icmp ult %284, %62
    %291:ctrl, %292:ctrl = brcond %274, %290
    %293:ctrl, %294:phisel = region %291
    %321:ctrl, %322:phisel = region %292
    %323:ctrl, %324:phisel = region %321
    %289:i32 = icmp eq %284, %28
    %295:ctrl, %296:ctrl = brcond %293, %289
    %297:ctrl, %298:phisel = region %296
    %288:i32 = icmp eq %284, %33
    %299:ctrl, %300:ctrl = brcond %297, %288
    %301:ctrl, %302:phisel = region %299
    %303:ctrl, %304:phisel = region %300
    %287:i32 = icmp eq %284, %30
    %305:ctrl, %306:ctrl = brcond %303, %287
    %307:ctrl, %308:phisel = region %306
    %286:i32 = icmp eq %284, %48
    %309:ctrl, %310:ctrl = brcond %307, %286
    %311:ctrl, %312:phisel = region %309
    %313:ctrl, %314:phisel = region %310
    %285:i32 = icmp eq %284, %46
    %315:ctrl, %316:ctrl = brcond %313, %285
    %317:ctrl, %318:phisel = region %316
    %319:ctrl, %320:phisel = region %295, %317
    %365:i32 = phi %320, %363, %363
    %278:i32 = isub %276, %50
    %283:i32 = icmp ult %278, %61
    %325:ctrl, %326:ctrl = brcond %323, %283
    %327:ctrl, %328:phisel = region %325
    %351:ctrl, %352:phisel = region %326
    %353:ctrl, %354:phisel = region %351
    %282:i32 = icmp eq %278, %28
    %329:ctrl, %330:ctrl = brcond %327, %282
    %331:ctrl, %332:phisel = region %329
    %333:ctrl, %334:phisel = region %330
    %281:i32 = icmp eq %278, %33
    %335:ctrl, %336:ctrl = brcond %333, %281
    %337:ctrl, %338:phisel = region %336
    %280:i32 = icmp eq %278, %30
    %339:ctrl, %340:ctrl = brcond %337, %280
    %341:ctrl, %342:phisel = region %339
    %343:ctrl, %344:phisel = region %340
    %279:i32 = icmp eq %278, %48
    %345:ctrl, %346:ctrl = brcond %343, %279
    %347:ctrl, %348:phisel = region %346
    %349:ctrl, %350:phisel = region %347
    %277:i32 = icmp eq %276, %60
    %355:ctrl, %356:ctrl = brcond %353, %277
    %357:ctrl, %358:phisel = region %355, %261
    %359:ctrl, %360:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %357, %5
    %364:i32 = phi %358, %363, %273
    %361:ctrl, %362:phisel = region %356
    %659:ctrl, %660:phisel = region %305, %315, %311, %301, %622, %335, %345, %392, %415, %437, %443, %361, %573, %271, %269, %657
    %661:ctrl, %662:phisel = region %167, %659
    %663:ctrl, %664:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %661, %5
    %379:i32 = phi %660, %384, %384, %384, %384, %895, %384, %384, %378, %873, %385, %821, %384, %907, %896, %896, %898
    %380:i32 = phi %662, %49, %379
    %381:i32 = phi %467, %380, %380
    %382:i32 = phi %469, %380, %381
    %383:i32 = phi %480, %382
    %896:i32 = phi %246, %383
    %384:i32 = phi %275, %383
    %899:i32 = phi %358, %384, %896
    %892:i32 = phi %320, %384, %384
    %386:i32 = icmp eq %384, %49
    %387:i32 = and %386, %38
    %388:ctrl, %389:ctrl = brcond %349, %387
    %390:ctrl, %391:phisel = region %388
    %392:ctrl, %393:phisel = region %389, %390
    %395:i32 = phi %393, %401, %401
    %396:i32 = phi %660, %401, %401, %401, %401, %879, %401, %401, %395, %874, %402, %823, %401, %891, %880, %880, %882
    %397:i32 = phi %662, %51, %396
    %398:i32 = phi %467, %397, %397
    %399:i32 = phi %469, %397, %398
    %400:i32 = phi %480, %399
    %880:i32 = phi %246, %400
    %401:i32 = phi %275, %400
    %883:i32 = phi %358, %401, %880
    %876:i32 = phi %320, %401, %401
    %403:i32 = icmp slt %401, %28
    %410:i32 = and %403, %38
    %411:ctrl, %412:ctrl = brcond %341, %410
    %413:ctrl, %414:phisel = region %411
    %415:ctrl, %416:phisel = region %412, %413
    %873:i32 = phi %416, %384, %384
    %417:i32 = phi %416, %363, %363
    %404:i32 = phi %375, %403, %28
    %405:i32 = and %404, %38
    %406:ctrl, %407:ctrl = brcond %374, %405
    %408:ctrl, %409:phisel = region %406
    %443:ctrl, %444:phisel = region %407, %441
    %448:i32 = phi %444, %483, %447
    %449:i32 = phi %660, %482, %482, %482, %482, %625, %482, %482, %485, %484, %483, %448, %482, %720, %487, %487, %667
    %450:i32 = phi %662, %143, %449
    %455:i32 = icmp sle %664, %450
    %456:ctrl, %457:ctrl = brcond %663, %455
    %458:ctrl, %459:phisel = region %457
    %454:i32 = iadd %450, %33
    %451:i64 = iext %450
    %452:i64 = sfill 32 %451
    %453:i64 = imul %452, %32
    %579:i64 = iadd %578, %453
    %580:ptr = inttoptr %579
    %460:ctrl, %461:i32 = load.2 %458, %580
    %472:i32 = and %461, %29
    %473:i32 = icmp eq %472, %66
    %474:i32 = icmp eq %473, %28
    %462:ctrl, %463:ctrl = brcond %460, %461
    %464:ctrl, %465:phisel = region %462
    %466:ctrl, %467:phisel = region %456, %463
    %468:ctrl, %469:phisel = region %464, %466
    %475:i32 = phi %469, %474, %28
    %476:i32 = and %475, %38
    %477:ctrl, %478:ctrl = brcond %468, %476
    %479:ctrl, %480:phisel = region %477
    %1265:i32 = phi %480, %175
    %1276:i32 = phi %246, %1265
    %1266:i32 = phi %275, %1265
    %1279:i32 = phi %358, %1266, %1276
    %1272:i32 = phi %320, %1266, %1266
    %1271:i32 = phi %393, %1266, %1266
    %1270:i32 = phi %416, %1266, %1266
    %1041:ptr = phi %480, %1035
    %1052:ptr = phi %246, %1041
    %1042:ptr = phi %275, %1041
    %1055:ptr = phi %358, %1042, %1052
    %1048:ptr = phi %320, %1042, %1042
    %1047:ptr = phi %393, %1042, %1042
    %1046:ptr = phi %416, %1042, %1042
    %721:ctrl, %722:phisel = region %478
    %726:i32 = phi %722, %399
    %727:i32 = icmp slt %726, %28
    %728:i32 = and %727, %38
    %729:ctrl, %730:ctrl = brcond %721, %728
    %731:ctrl, %732:phisel = region %729
    %736:i32 = phi %732, %176
    %739:ctrl, %740:phisel = region %730, %731
    %725:i32 = phi %722, %382
    %738:i32 = phi %732, %725
    %754:i32 = phi %740, %725, %738
    %723:i32 = phi %722, %238
    %733:i32 = phi %732, %723
    %741:i32 = phi %740, %723, %733
    %470:i32 = phi %467, %450, %454
    %471:i32 = phi %469, %454, %470
    %481:i32 = phi %480, %471
    %487:i32 = phi %246, %481
    %491:i32 = icmp sle %256, %487
    %492:ctrl, %493:ctrl = brcond %255, %491
    %494:ctrl, %495:phisel = region %492
    %496:ctrl, %497:phisel = region %493
    %488:i64 = iext %487
    %489:i64 = sfill 32 %488
    %490:i64 = imul %489, %32
    %482:i32 = phi %275, %481
    %498:i32 = phi %358, %482, %487
    %502:i32 = icmp sle %360, %498
    %503:ctrl, %504:ctrl = brcond %359, %502
    %505:ctrl, %506:phisel = region %504
    %499:i64 = iext %498
    %500:i64 = sfill 32 %499
    %501:i64 = imul %500, %32
    %486:i32 = phi %320, %482, %482
    %485:i32 = phi %393, %482, %482
    %484:i32 = phi %416, %482, %482
    %421:i32 = phi %467, %420, %420
    %422:i32 = phi %469, %420, %421
    %724:i32 = phi %722, %422
    %737:i32 = phi %732, %724
    %742:i32 = phi %740, %724, %737
    %743:i32 = icmp slt %742, %28
    %744:i32 = icmp eq %743, %28
    %745:i32 = and %744, %38
    %746:ctrl, %747:ctrl = brcond %739, %745
    %748:ctrl, %749:phisel = region %746
    %1039:ptr = phi %749, %1038
    %755:i32 = phi %749, %754
    %753:i32 = phi %749, %742
    %750:i32 = phi %749, %741
    %423:i32 = phi %480, %422
    %832:i32 = phi %246, %423
    %424:i32 = phi %275, %423
    %835:i32 = phi %358, %424, %832
    %828:i32 = phi %320, %424, %424
    %827:i32 = phi %393, %424, %424
    %425:i32 = phi %375, %424, %424
    %428:i32 = icmp slt %425, %28
    %429:i32 = icmp eq %428, %28
    %430:i32 = and %429, %38
    %431:ctrl, %432:ctrl = brcond %408, %430
    %433:ctrl, %434:phisel = region %431
    %426:i32 = icmp eq %425, %377
    %427:i32 = and %426, %38
    %435:ctrl, %436:ctrl = brcond %433, %427
    %437:ctrl, %438:phisel = region %435
    %439:ctrl, %440:phisel = region %436
    %441:ctrl, %442:phisel = region %432, %439
    %586:ptr = phi %442, %585, %585
    %587:ptr = phi %444, %585, %586
    %576:ptr = phi %660, %584, %584, %584, %584, %637, %584, %584, %589, %588, %585, %587, %584, %575, %638, %638, %665
    %577:ptr = phi %662, %170, %576
    %581:ptr = phi %467, %577, %577
    %582:ptr = phi %469, %577, %581
    %583:ptr = phi %480, %582
    %638:ptr = phi %246, %583
    %639:i64 = ptrtoint %638
    %640:i64 = iadd %639, %490
    %641:ptr = inttoptr %640
    %642:ctrl, %643:i32 = load.2 %496, %641
    %644:ctrl, %645:phisel = region %642, %494
    %1277:i32 = phi %645, %1276, %1276
    %1053:ptr = phi %645, %1052, %1052
    %897:i32 = phi %645, %896, %896
    %881:i32 = phi %645, %880, %880
    %833:i32 = phi %645, %832, %832
    %648:i32 = phi %645, %487, %487
    %649:i32 = iadd %648, %33
    %647:i32 = phi %645, %273, %273
    %646:ptr = phi %645, %638, %638
    %650:i32 = icmp ult %28, %643
    %651:i32 = phi %645, %650, %28
    %652:i32 = and %651, %38
    %653:ctrl, %654:ctrl = brcond %644, %652
    %655:ctrl, %656:phisel = region %653
    %657:ctrl, %658:phisel = region %654, %655
    %1278:i32 = phi %658, %1277, %1277
    %1054:ptr = phi %658, %1053, %1053
    %898:i32 = phi %658, %897, %897
    %882:i32 = phi %658, %881, %881
    %834:i32 = phi %658, %833, %833
    %667:i32 = phi %658, %648, %649
    %666:i32 = phi %658, %647, %647
    %665:ptr = phi %658, %646, %646
    %584:ptr = phi %275, %583
    %668:ptr = phi %358, %584, %638
    %669:i64 = ptrtoint %668
    %670:i64 = iadd %669, %501
    %671:ptr = inttoptr %670
    %507:ctrl, %508:i32 = load.2 %505, %671
    %509:i32 = icmp eq %508, %43
    %510:ctrl, %511:ctrl = brcond %507, %509
    %512:ctrl, %513:phisel = region %510
    %514:ctrl, %515:phisel = region %503, %511
    %516:ctrl, %517:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %514, %5
    %1280:i32 = phi %515, %1279, %1279
    %1056:ptr = phi %515, %1055, %1055
    %900:i32 = phi %515, %899, %899
    %884:i32 = phi %515, %883, %883
    %836:i32 = phi %515, %835, %835
    %672:ptr = phi %515, %668, %668
    %675:i64 = ptrtoint %672
    %519:i32 = phi %515, %498, %498
    %523:i32 = iadd %519, %33
    %524:i32 = icmp sle %517, %523
    %525:ctrl, %526:ctrl = brcond %516, %524
    %527:ctrl, %528:phisel = region %526
    %520:i64 = iext %519
    %521:i64 = sfill 32 %520
    %522:i64 = imul %521, %32
    %676:i64 = iadd %675, %522
    %677:ptr = inttoptr %676
    %529:ctrl, %530:i32 = load.2 %527, %677
    %531:i32 = icmp eq %530, %45
    %532:ctrl, %533:ctrl = brcond %529, %531
    %534:ctrl, %535:phisel = region %533
    %536:ctrl, %537:i32 = load.2 %534, %677
    %538:i32 = icmp ne %537, %44
    %539:ctrl, %540:ctrl = brcond %536, %538
    %541:ctrl, %542:phisel = region %525, %539
    %1282:i32 = phi %542, %1280, %1280
    %1058:ptr = phi %542, %1056, %1056
    %902:i32 = phi %542, %900, %900
    %886:i32 = phi %542, %884, %884
    %838:i32 = phi %542, %836, %836
    %678:ptr = phi %542, %672, %672
    %544:i32 = phi %542, %519, %519
    %545:ctrl, %546:phisel = region %532, %540
    %1281:i32 = phi %546, %1280, %1280
    %1057:ptr = phi %546, %1056, %1056
    %901:i32 = phi %546, %900, %900
    %885:i32 = phi %546, %884, %884
    %837:i32 = phi %546, %836, %836
    %673:ptr = phi %546, %672, %672
    %674:i64 = ptrtoint %673
    %548:i32 = phi %546, %519, %519
    %549:i32 = iadd %548, %33
    %550:i64 = iext %549
    %551:i64 = sfill 32 %550
    %552:i64 = imul %551, %32
    %553:i64 = iadd %674, %552
    %554:ptr = inttoptr %553
    %555:ctrl, %556:i32 = load.2 %545, %554
    %557:ctrl, %558:phisel = region %555, %541
    %559:ctrl, %560:phisel = region %512, %557
    %1283:i32 = phi %558, %1281, %1282
    %1284:i32 = phi %560, %1279, %1283
    %1059:ptr = phi %558, %1057, %1058
    %1060:ptr = phi %560, %1055, %1059
    %903:i32 = phi %558, %901, %902
    %904:i32 = phi %560, %899, %903
    %887:i32 = phi %558, %885, %886
    %888:i32 = phi %560, %883, %887
    %839:i32 = phi %558, %837, %838
    %840:i32 = phi %560, %835, %839
    %679:ptr = phi %558, %673, %678
    %680:ptr = phi %560, %668, %679
    %563:i32 = phi %558, %548, %544
    %564:i32 = phi %560, %498, %563
    %565:i32 = icmp eq %556, %43
    %566:i32 = phi %558, %565, %28
    %567:i32 = phi %560, %33, %566
    %568:i32 = and %567, %38
    %569:ctrl, %570:ctrl = brcond %559, %568
    %571:ctrl, %572:phisel = region %569
    %694:ctrl, %695:phisel = region %571, %692
    %696:ctrl, %697:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %694, %5
    %681:ptr = phi %695, %680, %710
    %682:i64 = ptrtoint %681
    %683:i64 = iadd %682, %702
    %684:ptr = inttoptr %683
    %685:ctrl, %686:i32 = load.2 %714, %684
    %708:ctrl, %709:phisel = region %685, %706
    %1286:i32 = phi %709, %1285, %1285
    %1285:i32 = phi %695, %1284, %1286
    %1062:ptr = phi %709, %1061, %1061
    %1061:ptr = phi %695, %1060, %1062
    %906:i32 = phi %709, %905, %905
    %905:i32 = phi %695, %904, %906
    %890:i32 = phi %709, %889, %889
    %889:i32 = phi %695, %888, %890
    %842:i32 = phi %709, %841, %841
    %841:i32 = phi %695, %840, %842
    %713:i32 = phi %709, %699, %699
    %698:i32 = phi %695, %564, %713
    %699:i32 = iadd %698, %33
    %703:i32 = icmp sle %697, %699
    %704:ctrl, %705:ctrl = brcond %696, %703
    %706:ctrl, %707:phisel = region %704
    %714:ctrl, %715:phisel = region %705
    %700:i64 = iext %699
    %701:i64 = sfill 32 %700
    %702:i64 = imul %701, %32
    %710:ptr = phi %709, %681, %681
    %687:i32 = icmp eq %686, %43
    %688:i32 = phi %709, %687, %28
    %689:i32 = and %688, %38
    %690:ctrl, %691:ctrl = brcond %708, %689
    %692:ctrl, %693:phisel = region %690
    %716:ctrl, %717:phisel = region %691
    %573:ctrl, %574:phisel = region %570, %716
    %1287:i32 = phi %574, %1284, %1286
    %1063:ptr = phi %574, %1060, %1062
    %907:i32 = phi %574, %904, %906
    %891:i32 = phi %574, %888, %890
    %843:i32 = phi %574, %840, %842
    %720:i32 = phi %574, %564, %713
    %575:ptr = phi %574, %680, %710
    %518:i32 = phi %515, %364, %364
    %547:i32 = phi %546, %518, %518
    %543:i32 = phi %542, %518, %518
    %561:i32 = phi %558, %547, %543
    %562:i32 = phi %560, %364, %561
    %712:i32 = phi %695, %562, %711
    %711:i32 = phi %709, %712, %712
    %718:i32 = phi %574, %562, %711
    %590:ptr = phi %320, %584, %584
    %591:ptr = phi %619, %590, %637
    %592:i64 = ptrtoint %591
    %593:i64 = iadd %592, %630
    %594:ptr = inttoptr %593
    %595:ctrl, %596:i32 = load.2 %634, %594
    %597:ctrl, %598:ctrl = brcond %595, %596
    %599:ctrl, %600:phisel = region %597
    %601:ctrl, %602:i32 = load.2 %599, %594
    %603:ctrl, %604:phisel = region %632, %598
    %605:ctrl, %606:phisel = region %601, %603
    %636:ptr = phi %604, %591, %591
    %637:ptr = phi %606, %591, %636
    %607:i32 = phi %604, %609, %609
    %608:i32 = phi %606, %609, %607
    %609:i32 = phi %619, %365, %608
    %610:i32 = icmp eq %602, %609
    %611:i32 = icmp eq %610, %28
    %612:i32 = phi %606, %611, %28
    %613:i32 = and %612, %38
    %614:ctrl, %615:ctrl = brcond %605, %613
    %616:ctrl, %617:phisel = region %614
    %618:ctrl, %619:phisel = region %319, %616
    %620:ctrl, %621:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %618, %5
    %1273:i32 = phi %619, %1272, %1275
    %1274:i32 = phi %604, %1273, %1273
    %1275:i32 = phi %606, %1273, %1274
    %1049:ptr = phi %619, %1048, %1051
    %1050:ptr = phi %604, %1049, %1049
    %1051:ptr = phi %606, %1049, %1050
    %942:i32 = phi %619, %941, %944
    %943:i32 = phi %604, %942, %942
    %944:i32 = phi %606, %942, %943
    %945:i32 = phi %660, %366, %366, %366, %940, %944, %366, %366, %909, %875, %377, %825, %366, %1148, %1137, %1137, %1139
    %946:i32 = phi %662, %28, %945
    %947:i32 = phi %467, %946, %946
    %948:i32 = phi %469, %946, %947
    %1136:i32 = phi %480, %948
    %1137:i32 = phi %246, %1136
    %1138:i32 = phi %645, %1137, %1137
    %1139:i32 = phi %658, %1138, %1138
    %366:i32 = phi %275, %1136
    %1140:i32 = phi %358, %366, %1137
    %1141:i32 = phi %515, %1140, %1140
    %1143:i32 = phi %542, %1141, %1141
    %1142:i32 = phi %546, %1141, %1141
    %1144:i32 = phi %558, %1142, %1143
    %1145:i32 = phi %560, %1140, %1144
    %1146:i32 = phi %695, %1145, %1147
    %1147:i32 = phi %709, %1146, %1146
    %1148:i32 = phi %574, %1145, %1147
    %941:i32 = phi %320, %366, %366
    %940:i32 = iadd %366, %33
    %908:i32 = phi %393, %366, %366
    %909:i32 = iadd %908, %33
    %875:i32 = phi %416, %366, %366
    %874:i32 = phi %416, %401, %366
    %367:i32 = icmp sle %366, %28
    %368:ctrl, %369:ctrl = brcond %331, %367
    %370:ctrl, %371:phisel = region %368
    %372:ctrl, %373:phisel = region %369
    %374:ctrl, %375:phisel = region %372, %370
    %1267:i32 = phi %375, %1266, %1266
    %1269:i32 = phi %444, %1267, %33
    %1268:i32 = iadd %1267, %33
    %1288:i32 = phi %660, %1266, %1266, %1266, %1266, %1275, %1266, %1266, %1271, %1270, %1268, %1269, %1266, %1287, %1276, %1276, %1278
    %1043:ptr = phi %375, %1042, %1042
    %1044:ptr = phi %442, %1043, %1043
    %1045:ptr = phi %444, %1043, %1044
    %1064:ptr = phi %660, %1042, %1042, %1042, %1042, %1051, %1042, %1042, %1047, %1046, %1043, %1045, %1042, %1063, %1052, %1052, %1054
    %483:i32 = phi %375, %482, %482
    %377:i32 = phi %375, %366, %366
    %824:i32 = phi %442, %377, %377
    %826:i32 = phi %444, %425, %824
    %825:i32 = phi %444, %377, %824
    %376:i32 = phi %375, %363, %363
    %949:i32 = phi %722, %948
    %950:i32 = phi %732, %949
    %1130:i32 = phi %740, %949, %950
    %1131:i32 = phi %749, %1130
    %951:i32 = phi %740, %726, %950
    %952:i32 = phi %749, %951
    %953:i32 = icmp eq %753, %952
    %954:i32 = and %953, %38
    %955:ctrl, %956:ctrl = brcond %748, %954
    %957:ctrl, %958:phisel = region %955
    %1132:i32 = phi %958, %1131
    %1040:ptr = phi %958, %1039
    %967:i32 = phi %958, %952
    %966:i32 = phi %958, %755
    %959:i32 = phi %958, %750
    %968:ctrl, %969:phisel = region %956
    %970:ctrl, %971:phisel = region %957, %968
    %972:ctrl, %973:phisel = region %747, %970
    %1257:i32 = phi %969, %178
    %1258:i32 = phi %971, %179, %1257
    %1259:i32 = phi %973, %177, %1258
    %1133:i32 = phi %969, %1131
    %1134:i32 = phi %971, %1132, %1133
    %1135:i32 = phi %973, %1130, %1134
    %1127:i32 = phi %969, %952
    %1128:i32 = phi %971, %967, %1127
    %1129:i32 = phi %973, %951, %1128
    %1124:i32 = phi %969, %755
    %1125:i32 = phi %971, %966, %1124
    %1126:i32 = phi %973, %754, %1125
    %1110:i32 = phi %969, %750
    %1111:i32 = phi %971, %959, %1110
    %1112:i32 = phi %973, %741, %1111
    %976:ptr = phi %969, %1039
    %977:ptr = phi %971, %1040, %976
    %925:i32 = phi %619, %924, %927
    %926:i32 = phi %604, %925, %925
    %927:i32 = phi %606, %925, %926
    %910:i32 = phi %660, %919, %919, %919, %919, %927, %919, %919, %909, %923, %920, %922, %919, %939, %928, %928, %930
    %911:i32 = phi %662, %28, %910
    %912:i32 = phi %467, %911, %911
    %913:i32 = phi %469, %911, %912
    %918:i32 = phi %480, %913
    %928:i32 = phi %246, %918
    %929:i32 = phi %645, %928, %928
    %930:i32 = phi %658, %929, %929
    %919:i32 = phi %275, %918
    %931:i32 = phi %358, %919, %928
    %932:i32 = phi %515, %931, %931
    %934:i32 = phi %542, %932, %932
    %933:i32 = phi %546, %932, %932
    %935:i32 = phi %558, %933, %934
    %936:i32 = phi %560, %931, %935
    %937:i32 = phi %695, %936, %938
    %938:i32 = phi %709, %937, %937
    %939:i32 = phi %574, %936, %938
    %924:i32 = phi %320, %919, %919
    %923:i32 = phi %416, %919, %919
    %920:i32 = phi %375, %919, %919
    %921:i32 = phi %442, %920, %920
    %922:i32 = phi %444, %920, %921
    %914:i32 = phi %722, %913
    %915:i32 = phi %732, %914
    %916:i32 = phi %740, %914, %915
    %917:i32 = phi %749, %916
    %1121:i32 = phi %969, %917
    %965:i32 = phi %958, %917
    %1122:i32 = phi %971, %965, %1121
    %1123:i32 = phi %973, %916, %1122
    %893:i32 = phi %619, %892, %895
    %894:i32 = phi %604, %893, %893
    %895:i32 = phi %606, %893, %894
    %877:i32 = phi %619, %876, %879
    %878:i32 = phi %604, %877, %877
    %879:i32 = phi %606, %877, %878
    %860:i32 = phi %619, %859, %862
    %861:i32 = phi %604, %860, %860
    %862:i32 = phi %606, %860, %861
    %845:i32 = phi %660, %854, %854, %854, %854, %862, %854, %854, %858, %844, %855, %857, %854, %872, %863, %863, %865
    %846:i32 = phi %662, %39, %845
    %847:i32 = phi %467, %846, %846
    %848:i32 = phi %469, %846, %847
    %853:i32 = phi %480, %848
    %863:i32 = phi %246, %853
    %864:i32 = phi %645, %863, %863
    %865:i32 = phi %658, %864, %864
    %854:i32 = phi %275, %853
    %866:i32 = phi %358, %854, %863
    %867:i32 = phi %515, %866, %866
    %869:i32 = phi %542, %867, %867
    %868:i32 = phi %546, %867, %867
    %870:i32 = phi %558, %868, %869
    %871:i32 = phi %560, %866, %870
    %872:i32 = phi %574, %871, %40
    %859:i32 = phi %320, %854, %854
    %858:i32 = phi %393, %854, %854
    %855:i32 = phi %375, %854, %854
    %856:i32 = phi %442, %855, %855
    %857:i32 = phi %444, %855, %856
    %844:i32 = phi %416, %854, %854
    %849:i32 = phi %722, %848
    %850:i32 = phi %732, %849
    %851:i32 = phi %740, %849, %850
    %852:i32 = phi %749, %851
    %1118:i32 = phi %969, %852
    %964:i32 = phi %958, %852
    %1119:i32 = phi %971, %964, %1118
    %1120:i32 = phi %973, %851, %1119
    %829:i32 = phi %619, %828, %831
    %830:i32 = phi %604, %829, %829
    %831:i32 = phi %606, %829, %830
    %805:i32 = phi %619, %804, %807
    %806:i32 = phi %604, %805, %805
    %807:i32 = phi %606, %805, %806
    %791:i32 = phi %660, %800, %800, %800, %800, %807, %800, %800, %803, %802, %801, %790, %800, %819, %808, %808, %810
    %792:i32 = phi %662, %39, %791
    %793:i32 = phi %467, %792, %792
    %794:i32 = phi %469, %792, %793
    %799:i32 = phi %480, %794
    %808:i32 = phi %246, %799
    %809:i32 = phi %645, %808, %808
    %810:i32 = phi %658, %809, %809
    %800:i32 = phi %275, %799
    %811:i32 = phi %358, %800, %808
    %812:i32 = phi %515, %811, %811
    %814:i32 = phi %542, %812, %812
    %813:i32 = phi %546, %812, %812
    %815:i32 = phi %558, %813, %814
    %816:i32 = phi %560, %811, %815
    %817:i32 = phi %695, %816, %818
    %818:i32 = phi %709, %817, %817
    %819:i32 = phi %574, %816, %818
    %804:i32 = phi %320, %800, %800
    %803:i32 = phi %393, %800, %800
    %802:i32 = phi %416, %800, %800
    %801:i32 = phi %375, %800, %800
    %789:i32 = phi %442, %801, %40
    %790:i32 = phi %444, %801, %789
    %795:i32 = phi %722, %794
    %796:i32 = phi %732, %795
    %797:i32 = phi %740, %795, %796
    %798:i32 = phi %749, %797
    %963:i32 = phi %958, %798
    %974:i32 = phi %971, %963, %40
    %975:i32 = phi %973, %797, %974
    %773:i32 = phi %619, %772, %775
    %774:i32 = phi %604, %773, %773
    %775:i32 = phi %606, %773, %774
    %758:i32 = phi %660, %767, %767, %771, %767, %775, %767, %767, %770, %769, %768, %757, %767, %788, %776, %779, %778
    %759:i32 = phi %662, %28, %758
    %760:i32 = phi %467, %759, %759
    %761:i32 = phi %469, %759, %760
    %766:i32 = phi %480, %761
    %776:i32 = phi %246, %766
    %779:i32 = iadd %776, %48
    %777:i32 = phi %645, %776, %776
    %778:i32 = phi %658, %777, %777
    %767:i32 = phi %275, %766
    %780:i32 = phi %358, %767, %776
    %781:i32 = phi %515, %780, %780
    %783:i32 = phi %542, %781, %781
    %782:i32 = phi %546, %781, %781
    %784:i32 = phi %558, %782, %783
    %785:i32 = phi %560, %780, %784
    %786:i32 = phi %695, %785, %787
    %787:i32 = phi %709, %786, %786
    %788:i32 = phi %574, %785, %787
    %772:i32 = phi %320, %767, %767
    %771:i32 = iadd %767, %30
    %770:i32 = phi %393, %767, %767
    %769:i32 = phi %416, %767, %767
    %768:i32 = phi %375, %767, %767
    %756:i32 = phi %442, %768, %768
    %757:i32 = phi %444, %768, %756
    %762:i32 = phi %722, %761
    %763:i32 = phi %732, %762
    %764:i32 = phi %740, %762, %763
    %765:i32 = phi %749, %764
    %1117:i32 = phi %969, %765
    %962:i32 = phi %958, %765
    %626:i32 = phi %619, %486, %625
    %631:i32 = icmp sle %621, %626
    %632:ctrl, %633:ctrl = brcond %620, %631
    %634:ctrl, %635:phisel = region %633
    %628:i64 = iext %626
    %629:i64 = sfill 32 %628
    %630:i64 = imul %629, %32
    %627:i32 = iadd %626, %33
    %624:i32 = phi %604, %626, %626
    %625:i32 = phi %606, %627, %624
    %622:ctrl, %623:phisel = region %615
    %589:ptr = phi %393, %584, %584
    %588:ptr = phi %416, %584, %584
    %585:ptr = phi %375, %584, %584
    %578:i64 = ptrtoint %577
    %447:i32 = phi %442, %483, %483
    %445:i32 = phi %442, %376, %376
    %418:i32 = phi %416, %424, %424
    %419:i32 = phi %660, %424, %424, %424, %424, %831, %424, %424, %827, %418, %425, %826, %424, %843, %832, %832, %834
    %420:i32 = phi %662, %51, %419
    %216:ptr = phi %467, %215, %215
    %217:ptr = phi %469, %215, %216
    %1227:ptr = phi %480, %217
    %1238:ptr = phi %246, %1227
    %1239:ptr = phi %645, %1238, %1238
    %1240:ptr = phi %658, %1239, %1239
    %1228:ptr = phi %275, %1227
    %1241:ptr = phi %358, %1228, %1238
    %1242:ptr = phi %515, %1241, %1241
    %1244:ptr = phi %542, %1242, %1242
    %1243:ptr = phi %546, %1242, %1242
    %1245:ptr = phi %558, %1243, %1244
    %1246:ptr = phi %560, %1241, %1245
    %1247:ptr = phi %695, %1246, %1248
    %1248:ptr = phi %709, %1247, %1247
    %1249:ptr = phi %574, %1246, %1248
    %1234:ptr = phi %320, %1228, %1228
    %1235:ptr = phi %619, %1234, %1237
    %1236:ptr = phi %604, %1235, %1235
    %1237:ptr = phi %606, %1235, %1236
    %1233:ptr = phi %393, %1228, %1228
    %1232:ptr = phi %416, %1228, %1228
    %1229:ptr = phi %375, %1228, %1228
    %1230:ptr = phi %442, %1229, %1229
    %1231:ptr = phi %444, %1229, %1230
    %1250:ptr = phi %660, %1228, %1228, %1228, %1228, %1237, %1228, %1228, %1233, %1232, %1229, %1231, %1228, %1249, %1238, %1238, %1240
    %218:ptr = phi %722, %217
    %734:ptr = phi %732, %218
    %219:ptr = phi %740, %218, %734
    %751:ptr = phi %749, %219
    %1113:ptr = phi %969, %751
    %960:ptr = phi %958, %751
    %1114:ptr = phi %971, %960, %1113
    %220:ptr = phi %973, %219, %1114
    %221:ctrl, %222:i32 = load.1 %972, %220
    %223:i32 = icmp ult %28, %222
    %224:i32 = and %223, %38
    %225:ctrl, %226:ctrl = brcond %221, %224
    %227:ctrl, %228:phisel = region %225
    %1066:ctrl, %1067:i32 = load.4 %227, %1065
    %1260:i32 = phi %228, %1259
    %1262:i32 = phi %190, %1260
    %1261:i32 = phi %192, %1260
    %1263:i32 = phi %985, %1261, %1262
    %1264:i32 = phi %206, %1263
    %1173:i32 = phi %228, %1135
    %1174:i32 = phi %190, %1173
    %1169:i32 = phi %228, %1129
    %1171:i32 = phi %190, %1169
    %1170:i32 = phi %192, %1169
    %1172:i32 = phi %985, %1170, %1171
    %1255:i32 = phi %206, %1172
    %1165:i32 = phi %228, %1126
    %1167:i32 = phi %190, %1165
    %1166:i32 = phi %192, %1165
    %1168:i32 = phi %985, %1166, %1167
    %1254:i32 = phi %206, %1168
    %1161:i32 = phi %228, %1123
    %1163:i32 = phi %190, %1161
    %1162:i32 = phi %192, %1161
    %1164:i32 = phi %985, %1162, %1163
    %1253:i32 = phi %206, %1164
    %1157:i32 = phi %228, %1120
    %1159:i32 = phi %190, %1157
    %1158:i32 = phi %192, %1157
    %1160:i32 = phi %985, %1158, %1159
    %1252:i32 = phi %206, %1160
    %1153:i32 = phi %228, %975
    %1155:i32 = phi %190, %1153
    %1154:i32 = phi %192, %1153
    %1156:i32 = phi %985, %1154, %1155
    %1251:i32 = phi %206, %1156
    %1149:ptr = phi %228, %220
    %1151:ptr = phi %190, %1149
    %1150:ptr = phi %192, %1149
    %1152:ptr = phi %985, %1150, %1151
    %212:ptr = phi %206, %1152
    %213:ptr = phi %160, %212
    %214:ptr = phi %162, %137, %213
    %215:ptr = phi %662, %214, %1250
    %1071:ptr = phi %228, %1070
    %1073:ptr = phi %190, %1071
    %1072:ptr = phi %192, %1071
    %1074:ptr = phi %985, %1072, %1073
    %1075:ptr = phi %206, %1074
    %1076:ptr = phi %160, %1075
    %1077:ptr = phi %162, %135, %1076
    %1078:ptr = phi %662, %1077, %1109
    %1079:ptr = phi %467, %1078, %1078
    %1080:ptr = phi %469, %1078, %1079
    %1086:ptr = phi %480, %1080
    %1097:ptr = phi %246, %1086
    %1098:ptr = phi %645, %1097, %1097
    %1099:ptr = phi %658, %1098, %1098
    %1087:ptr = phi %275, %1086
    %1100:ptr = phi %358, %1087, %1097
    %1101:ptr = phi %515, %1100, %1100
    %1103:ptr = phi %542, %1101, %1101
    %1102:ptr = phi %546, %1101, %1101
    %1104:ptr = phi %558, %1102, %1103
    %1105:ptr = phi %560, %1100, %1104
    %1106:ptr = phi %695, %1105, %1107
    %1107:ptr = phi %709, %1106, %1106
    %1108:ptr = phi %574, %1105, %1107
    %1093:ptr = phi %320, %1087, %1087
    %1094:ptr = phi %619, %1093, %1096
    %1095:ptr = phi %604, %1094, %1094
    %1096:ptr = phi %606, %1094, %1095
    %1092:ptr = phi %393, %1087, %1087
    %1091:ptr = phi %416, %1087, %1087
    %1088:ptr = phi %375, %1087, %1087
    %1089:ptr = phi %442, %1088, %1088
    %1090:ptr = phi %444, %1088, %1089
    %1109:ptr = phi %660, %1087, %1087, %1087, %1087, %1096, %1087, %1087, %1092, %1091, %1088, %1090, %1087, %1108, %1097, %1097, %1099
    %1081:ptr = phi %722, %1080
    %1082:ptr = phi %732, %1081
    %1083:ptr = phi %740, %1081, %1082
    %1084:ptr = phi %749, %1083
    %1085:ptr = phi %958, %1084
    %1068:ptr = phi %969, %1084
    %1069:ptr = phi %971, %1085, %1068
    %1070:ptr = phi %973, %1083, %1069
    %229:i32 = phi %228, %1112
    %231:i32 = phi %190, %229
    %1176:ctrl, %1177:phisel = region %226
    %1224:i32 = phi %1177, %1135
    %1221:i32 = phi %1177, %1129
    %1218:i32 = phi %1177, %1126
    %1215:i32 = phi %1177, %1123
    %1212:i32 = phi %1177, %1120
    %1209:i32 = phi %1177, %975
    %1206:ptr = phi %1177, %220
    %1203:i32 = phi %1177, %1112
    %1200:ptr = phi %1177, %1070
    %1179:ptr = phi %1177, %978
    %1180:ptr = ptroff %1179, %67
    %1181:ctrl, %1182:i32 = load.1 %1176, %1180
    %1183:i32 = icmp eq %1182, %48
    %1184:i32 = icmp eq %1183, %28
    %1185:i32 = and %1184, %38
    %1186:ctrl, %1187:ctrl = brcond %1181, %1185
    %1188:ctrl, %1189:phisel = region %1186
    %1225:i32 = phi %1189, %1224
    %1222:i32 = phi %1189, %1221
    %1219:i32 = phi %1189, %1218
    %1216:i32 = phi %1189, %1215
    %1213:i32 = phi %1189, %1212
    %1210:i32 = phi %1189, %1209
    %1207:ptr = phi %1189, %1206
    %1204:i32 = phi %1189, %1203
    %1201:ptr = phi %1189, %1200
    %1191:ptr = phi %1189, %1179
    %1192:ptr = ptroff %1191, %57
    %1193:ctrl = store.1 %1188, %28, %1192
    %1194:ctrl, %1195:phisel = region %1187, %1193
    %1226:i32 = phi %1195, %1224, %1225
    %1223:i32 = phi %1195, %1221, %1222
    %1220:i32 = phi %1195, %1218, %1219
    %1217:i32 = phi %1195, %1215, %1216
    %1214:i32 = phi %1195, %1212, %1213
    %1211:i32 = phi %1195, %1209, %1210
    %1208:ptr = phi %1195, %1206, %1207
    %1205:i32 = phi %1195, %1203, %1204
    %1202:ptr = phi %1195, %1200, %1201
    %1197:ptr = phi %1195, %1179, %1191
    %1198:ptr = ptroff %1197, %42
    %1199:ctrl = store.4 %1194, %28, %1198
    %145:i32 = phi %467, %144, %144
    %146:i32 = phi %469, %144, %145
    %5920:i32 = phi %480, %146
    %5931:i32 = phi %246, %5920
    %5932:i32 = phi %645, %5931, %5931
    %5933:i32 = phi %658, %5932, %5932
    %5921:i32 = phi %275, %5920
    %5934:i32 = phi %358, %5921, %5931
    %5935:i32 = phi %515, %5934, %5934
    %5937:i32 = phi %542, %5935, %5935
    %5936:i32 = phi %546, %5935, %5935
    %5938:i32 = phi %558, %5936, %5937
    %5939:i32 = phi %560, %5934, %5938
    %5940:i32 = phi %695, %5939, %5941
    %5941:i32 = phi %709, %5940, %5940
    %5942:i32 = phi %574, %5939, %5941
    %5927:i32 = phi %320, %5921, %5921
    %5928:i32 = phi %619, %5927, %5930
    %5929:i32 = phi %604, %5928, %5928
    %5930:i32 = phi %606, %5928, %5929
    %5926:i32 = phi %393, %5921, %5921
    %5925:i32 = phi %416, %5921, %5921
    %5922:i32 = phi %375, %5921, %5921
    %5923:i32 = phi %442, %5922, %5922
    %5924:i32 = phi %444, %5922, %5923
    %5943:i32 = phi %660, %5921, %5921, %5921, %5921, %5930, %5921, %5921, %5926, %5925, %5922, %5924, %5921, %5942, %5931, %5931, %5933
    %144:i32 = phi %662, %143, %5943
    %147:i32 = phi %722, %146
    %735:i32 = phi %732, %147
    %148:i32 = phi %740, %147, %735
    %752:i32 = phi %749, %148
    %1115:i32 = phi %969, %752
    %961:i32 = phi %958, %752
    %1116:i32 = phi %971, %961, %1115
    %149:i32 = phi %973, %148, %1116
    %2077:i32 = phi %1177, %149
    %2078:i32 = phi %1189, %2077
    %2079:i32 = phi %1195, %2077, %2078
    %150:i32 = phi %228, %149
    %151:i32 = phi %190, %150
    %446:i32 = phi %444, %376, %445
    %402:i32 = phi %375, %401, %401
    %822:i32 = phi %442, %402, %402
    %823:i32 = phi %444, %402, %822
    %394:i32 = phi %393, %363, %363
    %719:i32 = phi %660, %363, %363, %363, %363, %608, %363, %363, %394, %417, %376, %446, %363, %718, %273, %273, %666
    %385:i32 = phi %375, %384, %384
    %820:i32 = phi %442, %385, %385
    %821:i32 = phi %444, %385, %820
    %378:i32 = phi %393, %384, %366
    %194:i32 = phi %192, %1173
    %1175:i32 = phi %985, %194, %1174
    %1256:i32 = phi %206, %1175
    %193:i32 = phi %192, %150
    %152:i32 = phi %985, %193, %151
    %1289:ctrl, %1290:phisel = region %158
    %2038:i32 = phi %1290, %1256
    %1334:i32 = phi %1290, %1255
    %1330:i32 = phi %1290, %1254
    %1326:i32 = phi %1290, %1253
    %1322:i32 = phi %1290, %1252
    %1318:i32 = phi %1290, %1251
    %1317:i32 = phi %1290, %153
    %1313:ptr = phi %1290, %212
    %1309:i32 = phi %1290, %233
    %1305:ptr = phi %1290, %1075
    %1301:ptr = phi %1290, %1030
    %1291:ctrl, %1292:phisel = region %204, %1289
    %1293:ctrl, %1294:phisel = region %1291, %1199
    %1295:ctrl, %1296:phisel = region %1293
    %2076:i32 = phi %1292, %152, %1317
    %2080:i32 = phi %1294, %2076, %2079
    %2081:i32 = phi %1296, %2080
    %2039:i32 = phi %1292, %1175, %2038
    %2040:i32 = phi %1294, %2039, %1226
    %2041:i32 = phi %1296, %2040
    %1335:i32 = phi %1292, %1172, %1334
    %1336:i32 = phi %1294, %1335, %1223
    %1337:i32 = phi %1296, %1336
    %1331:i32 = phi %1292, %1168, %1330
    %1332:i32 = phi %1294, %1331, %1220
    %1333:i32 = phi %1296, %1332
    %1338:i32 = icmp slt %1333, %1337
    %1339:ctrl, %1340:ctrl = brcond %1295, %1338
    %1341:ctrl, %1342:phisel = region %1339
    %2083:i32 = phi %1342, %2081
    %2043:i32 = phi %1342, %2041
    %1352:i32 = phi %1342, %1337
    %1351:i32 = phi %1342, %1333
    %1353:i32 = isub %1352, %1351
    %1354:ctrl, %1355:phisel = region %1340
    %1356:ctrl, %1357:phisel = region %1354, %1341
    %1358:i32 = phi %1357, %28, %1353
    %2082:i32 = phi %1355, %2081
    %2084:i32 = phi %1357, %2082, %2083
    %2042:i32 = phi %1355, %2041
    %2044:i32 = phi %1357, %2042, %2043
    %1375:i32 = phi %1355, %1337
    %1376:i32 = phi %1357, %1375, %1352
    %1327:i32 = phi %1292, %1164, %1326
    %1328:i32 = phi %1294, %1327, %1217
    %1329:i32 = phi %1296, %1328
    %1373:i32 = phi %1355, %1329
    %1350:i32 = phi %1342, %1329
    %1374:i32 = phi %1357, %1373, %1350
    %1377:i32 = icmp slt %1376, %1374
    %1378:ctrl, %1379:ctrl = brcond %1356, %1377
    %1380:ctrl, %1381:phisel = region %1378
    %2086:i32 = phi %1381, %2084
    %2046:i32 = phi %1381, %2044
    %1391:i32 = phi %1381, %1376
    %1390:i32 = phi %1381, %1358
    %1389:i32 = phi %1381, %1374
    %1392:i32 = isub %1391, %1389
    %1393:ctrl, %1394:phisel = region %1379
    %1395:ctrl, %1396:phisel = region %1393, %1380
    %1397:i32 = phi %1396, %28, %1392
    %2085:i32 = phi %1394, %2084
    %2087:i32 = phi %1396, %2085, %2086
    %2045:i32 = phi %1394, %2044
    %2047:i32 = phi %1396, %2045, %2046
    %1442:i32 = phi %1394, %1376
    %1443:i32 = phi %1396, %1442, %1391
    %1438:i32 = phi %1394, %1358
    %1439:i32 = phi %1396, %1438, %1390
    %1323:i32 = phi %1292, %1160, %1322
    %1324:i32 = phi %1294, %1323, %1214
    %1325:i32 = phi %1296, %1324
    %1371:i32 = phi %1355, %1325
    %1349:i32 = phi %1342, %1325
    %1372:i32 = phi %1357, %1371, %1349
    %1410:i32 = phi %1394, %1372
    %1388:i32 = phi %1381, %1372
    %1411:i32 = phi %1396, %1410, %1388
    %1412:i32 = and %1411, %38
    %1413:ctrl, %1414:ctrl = brcond %1395, %1412
    %1415:ctrl, %1416:phisel = region %1413
    %2088:i32 = phi %1416, %2087
    %2048:i32 = phi %1416, %2047
    %1444:i32 = phi %1416, %1443
    %1440:i32 = phi %1416, %1439
    %1424:i32 = phi %1416, %1397
    %1423:i32 = phi %1416, %1411
    %1425:ctrl, %1426:phisel = region %1414
    %2089:i32 = phi %1426, %2087
    %2049:i32 = phi %1426, %2047
    %1445:i32 = phi %1426, %1443
    %1441:i32 = phi %1426, %1439
    %1437:i32 = phi %1426, %1397
    %1436:i32 = phi %1426, %1411
    %1319:i32 = phi %1292, %1156, %1318
    %1320:i32 = phi %1294, %1319, %1211
    %1321:i32 = phi %1296, %1320
    %1369:i32 = phi %1355, %1321
    %1348:i32 = phi %1342, %1321
    %1370:i32 = phi %1357, %1369, %1348
    %1408:i32 = phi %1394, %1370
    %1387:i32 = phi %1381, %1370
    %1409:i32 = phi %1396, %1408, %1387
    %1435:i32 = phi %1426, %1409
    %1422:i32 = phi %1416, %1409
    %1314:ptr = phi %1292, %1152, %1313
    %1315:ptr = phi %1294, %1314, %1208
    %1316:ptr = phi %1296, %1315
    %1367:ptr = phi %1355, %1316
    %1347:ptr = phi %1342, %1316
    %1368:ptr = phi %1357, %1367, %1347
    %1406:ptr = phi %1394, %1368
    %1386:ptr = phi %1381, %1368
    %1407:ptr = phi %1396, %1406, %1386
    %1434:ptr = phi %1426, %1407
    %1421:ptr = phi %1416, %1407
    %1310:i32 = phi %1292, %232, %1309
    %1311:i32 = phi %1294, %1310, %1205
    %1312:i32 = phi %1296, %1311
    %1365:i32 = phi %1355, %1312
    %1346:i32 = phi %1342, %1312
    %1366:i32 = phi %1357, %1365, %1346
    %1404:i32 = phi %1394, %1366
    %1385:i32 = phi %1381, %1366
    %1405:i32 = phi %1396, %1404, %1385
    %1433:i32 = phi %1426, %1405
    %1420:i32 = phi %1416, %1405
    %1306:ptr = phi %1292, %1074, %1305
    %1307:ptr = phi %1294, %1306, %1202
    %1308:ptr = phi %1296, %1307
    %1363:ptr = phi %1355, %1308
    %1345:ptr = phi %1342, %1308
    %1364:ptr = phi %1357, %1363, %1345
    %1402:ptr = phi %1394, %1364
    %1384:ptr = phi %1381, %1364
    %1403:ptr = phi %1396, %1402, %1384
    %1432:ptr = phi %1426, %1403
    %1419:ptr = phi %1416, %1403
    %1302:ptr = phi %1292, %1029, %1301
    %1303:ptr = phi %1294, %1302, %1197
    %1304:ptr = phi %1296, %1303
    %1361:ptr = phi %1355, %1304
    %1344:ptr = phi %1342, %1304
    %1362:ptr = phi %1357, %1361, %1344
    %1400:ptr = phi %1394, %1362
    %1383:ptr = phi %1381, %1362
    %1401:ptr = phi %1396, %1400, %1383
    %1428:ptr = phi %1426, %1401
    %1429:ptr = ptroff %1428, %42
    %1430:ctrl, %1431:i32 = load.4 %1425, %1429
    %1446:i32 = icmp slt %1445, %1431
    %1447:ctrl, %1448:ctrl = brcond %1430, %1446
    %1449:ctrl, %1450:phisel = region %1447
    %2091:i32 = phi %1450, %2089
    %2051:i32 = phi %1450, %2049
    %1463:i32 = phi %1450, %1445
    %1462:i32 = phi %1450, %1441
    %1461:i32 = phi %1450, %1437
    %1460:i32 = phi %1450, %1436
    %1459:i32 = phi %1450, %1435
    %1458:ptr = phi %1450, %1434
    %1457:i32 = phi %1450, %1433
    %1456:ptr = phi %1450, %1432
    %1452:ptr = phi %1450, %1428
    %1453:ptr = ptroff %1452, %42
    %1454:ctrl, %1455:i32 = load.4 %1449, %1453
    %1464:ctrl, %1465:phisel = region %1448
    %1466:ctrl, %1467:phisel = region %1464, %1454
    %2090:i32 = phi %1465, %2089
    %2092:i32 = phi %1467, %2090, %2091
    %2050:i32 = phi %1465, %2049
    %2052:i32 = phi %1467, %2050, %2051
    %1602:i32 = phi %1465, %1445
    %1676:i32 = phi %1467, %1602, %1455
    %1603:i32 = phi %1467, %1602, %1463
    %1595:i32 = phi %1465, %1441
    %1596:i32 = phi %1467, %1595, %1462
    %1588:i32 = phi %1465, %1437
    %1589:i32 = phi %1467, %1588, %1461
    %1581:i32 = phi %1465, %1436
    %1582:i32 = phi %1467, %1581, %1460
    %1495:i32 = phi %1465, %1435
    %1496:i32 = phi %1467, %1495, %1459
    %1492:ptr = phi %1465, %1434
    %1493:ptr = phi %1467, %1492, %1458
    %1489:i32 = phi %1465, %1433
    %1490:i32 = phi %1467, %1489, %1457
    %1486:ptr = phi %1465, %1432
    %1487:ptr = phi %1467, %1486, %1456
    %1470:ptr = phi %1465, %1428
    %1471:ptr = phi %1467, %1470, %1452
    %1472:ptr = ptroff %1471, %42
    %1473:ctrl, %1474:i32 = load.4 %1466, %1472
    %1475:ctrl, %1476:phisel = region %1415, %1473
    %1477:ctrl, %1478:ptr = call @jit_bzero %1475, %14, %52
    %1479:ctrl, %1480:ptr = call @jit_gc_bzero %1477, %15, %52
    %1481:ctrl = call @"System.Void System.Span`1[System.Int32]::.ctor(System.Void*, System.Int32)" %1479, %15, %14, %46
    %1482:ctrl, %1483:ptr = call @jit_gc_memcpy %1481, %6, %15, %52
    %2093:i32 = phi %1476, %2088, %2092
    %2053:i32 = phi %1476, %2048, %2052
    %1677:i32 = phi %1476, %1444, %1676
    %1604:i32 = phi %1476, %1444, %1603
    %1597:i32 = phi %1476, %1440, %1596
    %1590:i32 = phi %1476, %1424, %1589
    %1583:i32 = phi %1476, %1423, %1582
    %1497:i32 = phi %1476, %1422, %1496
    %1498:i32 = and %1497, %38
    %1499:ctrl, %1500:ctrl = brcond %1482, %1498
    %1501:ctrl, %1502:phisel = region %1499
    %2114:i32 = phi %1502, %2093
    %2094:i32 = phi %1502, %2093
    %2054:i32 = phi %1502, %2053
    %1678:i32 = phi %1502, %1677
    %1605:i32 = phi %1502, %1604
    %1598:i32 = phi %1502, %1597
    %1591:i32 = phi %1502, %1590
    %1584:i32 = phi %1502, %1583
    %1577:i32 = phi %1502, %1497
    %1565:i32 = phi %1502, %51
    %1494:ptr = phi %1476, %1421, %1493
    %1573:ptr = phi %1502, %1494
    %1491:i32 = phi %1476, %1420, %1490
    %1569:i32 = phi %1502, %1491
    %1488:ptr = phi %1476, %1419, %1487
    %1561:ptr = phi %1502, %1488
    %1609:i32 = isub %1474, %1603
    %1610:i32 = phi %1476, %28, %1609
    %1611:i32 = phi %1502, %1610
    %1418:ptr = phi %1416, %1401
    %1485:ptr = phi %1476, %1418, %1471
    %1557:ptr = phi %1502, %1485
    %133:ptr = phi %132, %121, %91
    %989:ptr = phi %162, %133, %988
    %990:ptr = phi %662, %989, %1027
    %991:ptr = phi %467, %990, %990
    %992:ptr = phi %469, %990, %991
    %1004:ptr = phi %480, %992
    %1015:ptr = phi %246, %1004
    %1016:ptr = phi %645, %1015, %1015
    %1017:ptr = phi %658, %1016, %1016
    %1005:ptr = phi %275, %1004
    %1018:ptr = phi %358, %1005, %1015
    %1019:ptr = phi %515, %1018, %1018
    %1021:ptr = phi %542, %1019, %1019
    %1020:ptr = phi %546, %1019, %1019
    %1022:ptr = phi %558, %1020, %1021
    %1023:ptr = phi %560, %1018, %1022
    %1024:ptr = phi %695, %1023, %1025
    %1025:ptr = phi %709, %1024, %1024
    %1026:ptr = phi %574, %1023, %1025
    %1011:ptr = phi %320, %1005, %1005
    %1012:ptr = phi %619, %1011, %1014
    %1013:ptr = phi %604, %1012, %1012
    %1014:ptr = phi %606, %1012, %1013
    %1010:ptr = phi %393, %1005, %1005
    %1009:ptr = phi %416, %1005, %1005
    %1006:ptr = phi %375, %1005, %1005
    %1007:ptr = phi %442, %1006, %1006
    %1008:ptr = phi %444, %1006, %1007
    %1027:ptr = phi %660, %1005, %1005, %1005, %1005, %1014, %1005, %1005, %1010, %1009, %1006, %1008, %1005, %1026, %1015, %1015, %1017
    %993:ptr = phi %722, %992
    %994:ptr = phi %732, %993
    %995:ptr = phi %740, %993, %994
    %996:ptr = phi %749, %995
    %998:ptr = phi %969, %996
    %997:ptr = phi %958, %996
    %999:ptr = phi %971, %997, %998
    %1000:ptr = phi %973, %995, %999
    %1178:ptr = phi %1177, %1000
    %1190:ptr = phi %1189, %1178
    %1196:ptr = phi %1195, %1178, %1190
    %1001:ptr = phi %228, %1000
    %1003:ptr = phi %190, %1001
    %1002:ptr = phi %192, %1001
    %986:ptr = phi %985, %1002, %1003
    %987:ptr = phi %206, %986
    %1297:ptr = phi %1290, %987
    %1298:ptr = phi %1292, %986, %1297
    %1299:ptr = phi %1294, %1298, %1196
    %1300:ptr = phi %1296, %1299
    %1359:ptr = phi %1355, %1300
    %1343:ptr = phi %1342, %1300
    %1360:ptr = phi %1357, %1359, %1343
    %1398:ptr = phi %1394, %1360
    %1382:ptr = phi %1381, %1360
    %1399:ptr = phi %1396, %1398, %1382
    %1427:ptr = phi %1426, %1399
    %1468:ptr = phi %1465, %1427
    %1451:ptr = phi %1450, %1427
    %1469:ptr = phi %1467, %1468, %1451
    %1417:ptr = phi %1416, %1399
    %1484:ptr = phi %1476, %1417, %1469
    %1503:ptr = phi %1502, %1484
    %1504:ctrl, %1505:ptr = call @"System.String System.Globalization.NumberFormatInfo::get_NumberGroupSeparator()" %1501, %1503
    %1506:ctrl, %1507:i32 = call @"System.Int32 System.String::get_Length()" %1504, %1505
    %1508:i32 = icmp slt %28, %1507
    %1509:i32 = and %1508, %38
    %1510:ctrl, %1511:ctrl = brcond %1506, %1509
    %1512:ctrl, %1513:phisel = region %1510
    %2115:i32 = phi %1513, %2114
    %2095:i32 = phi %1513, %2094
    %2055:i32 = phi %1513, %2054
    %1679:i32 = phi %1513, %1678
    %1612:i32 = phi %1513, %1611
    %1606:i32 = phi %1513, %1605
    %1599:i32 = phi %1513, %1598
    %1592:i32 = phi %1513, %1591
    %1585:i32 = phi %1513, %1584
    %1578:i32 = phi %1513, %1577
    %1574:ptr = phi %1513, %1573
    %1570:i32 = phi %1513, %1569
    %1566:i32 = phi %1513, %1565
    %1562:ptr = phi %1513, %1561
    %1558:ptr = phi %1513, %1557
    %1514:ptr = phi %1513, %1503
    %1515:ptr = ptroff %1514, %52
    %1516:ctrl, %1517:ptr = load.8 %1512, %1515
    %1518:ptr = ptroff %1517, %52
    %1519:ctrl, %1520:i64 = load.4 %1516, %1518
    %1521:i32 = itrunc %1520
    %1522:i32 = icmp ult %28, %1521
    %1523:i32 = and %1522, %38
    %1524:ctrl, %1525:ctrl = brcond %1519, %1523
    %1526:ctrl, %1527:phisel = region %1524
    %2116:i32 = phi %1527, %2115
    %2096:i32 = phi %1527, %2095
    %2056:i32 = phi %1527, %2055
    %1680:i32 = phi %1527, %1679
    %1613:i32 = phi %1527, %1612
    %1607:i32 = phi %1527, %1606
    %1600:i32 = phi %1527, %1599
    %1593:i32 = phi %1527, %1592
    %1586:i32 = phi %1527, %1585
    %1579:i32 = phi %1527, %1578
    %1575:ptr = phi %1527, %1574
    %1571:i32 = phi %1527, %1570
    %1567:i32 = phi %1527, %1566
    %1563:ptr = phi %1527, %1562
    %1559:ptr = phi %1527, %1558
    %1535:ptr = phi %1527, %1517
    %1537:ptr = ptroff %1535, %52
    %1538:ctrl, %1539:i64 = load.4 %1526, %1537
    %1530:i32 = phi %1527, %28
    %1531:i64 = iext %1530
    %1532:i64 = sfill 32 %1531
    %1540:i32 = icmp ult %1532, %1539
    %1541:ctrl, %1542:ctrl = brcond %1538, %1540
    %1543:ctrl, %1544:phisel = region %1541
    %1547:ctrl, %1548:phisel = region %1542
    %1549:ctrl = call @jit_throw_index_out_of_range %1547
    unreachable %1549
    %1533:i64 = imul %1532, %42
    %1534:i64 = iadd %1533, %63
    %1536:ptr = ptroff %1535, %1534
    %1545:ctrl, %1546:i32 = load.4 %1543, %1536
    %1529:i32 = phi %1527, %1521
    %1528:ptr = phi %1527, %1514
    %1550:ctrl, %1551:phisel = region %1525, %1545
    %2117:i32 = phi %1551, %2115, %2116
    %2097:i32 = phi %1551, %2095, %2096
    %2057:i32 = phi %1551, %2055, %2056
    %1681:i32 = phi %1551, %1679, %1680
    %1614:i32 = phi %1551, %1612, %1613
    %1615:i32 = icmp slt %1614, %28
    %1616:ctrl, %1617:ctrl = brcond %1550, %1615
    %1618:ctrl, %1619:phisel = region %1616
    %2119:i32 = phi %1619, %2117
    %2099:i32 = phi %1619, %2097
    %2059:i32 = phi %1619, %2057
    %1686:i32 = phi %1619, %1681
    %1684:i32 = phi %1619, %1681
    %1631:i32 = phi %1619, %1614
    %1637:ctrl, %1638:phisel = region %1617
    %1639:ctrl, %1640:phisel = region %1637, %1618
    %1641:i32 = phi %1640, %28, %1631
    %2118:i32 = phi %1638, %2117
    %2120:i32 = phi %1640, %2118, %2119
    %2098:i32 = phi %1638, %2097
    %2100:i32 = phi %1640, %2098, %2099
    %2058:i32 = phi %1638, %2057
    %2060:i32 = phi %1640, %2058, %2059
    %1683:i32 = phi %1638, %1681
    %1687:i32 = phi %1640, %1683, %1686
    %1688:i32 = iadd %1687, %1641
    %1682:i32 = phi %1638, %1681
    %1685:i32 = phi %1640, %1682, %1684
    %1664:i32 = phi %1638, %1614
    %1665:i32 = phi %1640, %1664, %1631
    %1608:i32 = phi %1551, %1606, %1607
    %1674:i32 = phi %1638, %1608
    %1636:i32 = phi %1619, %1608
    %1675:i32 = phi %1640, %1674, %1636
    %1601:i32 = phi %1551, %1599, %1600
    %1672:i32 = phi %1638, %1601
    %1635:i32 = phi %1619, %1601
    %1673:i32 = phi %1640, %1672, %1635
    %1689:i32 = icmp slt %1688, %1673
    %1690:ctrl, %1691:ctrl = brcond %1639, %1689
    %1692:ctrl, %1693:phisel = region %1690
    %2122:i32 = phi %1693, %2120
    %2102:i32 = phi %1693, %2100
    %2062:i32 = phi %1693, %2060
    %1711:i32 = phi %1693, %1675
    %1710:i32 = phi %1693, %1673
    %1708:i32 = phi %1693, %1685
    %1705:i32 = phi %1693, %1665
    %1712:ctrl, %1713:phisel = region %1691
    %1714:ctrl, %1715:phisel = region %1712, %1692
    %2121:i32 = phi %1713, %2120
    %2123:i32 = phi %1715, %2121, %2122
    %2101:i32 = phi %1713, %2100
    %2103:i32 = phi %1715, %2101, %2102
    %2061:i32 = phi %1713, %2060
    %2063:i32 = phi %1715, %2061, %2062
    %2021:i32 = phi %1713, %1675
    %2022:i32 = phi %1715, %2021, %1711
    %2007:i32 = phi %1713, %1673
    %2008:i32 = phi %1715, %2007, %1710
    %1982:i32 = phi %1713, %1685
    %1983:i32 = phi %1715, %1982, %1708
    %1940:i32 = phi %1713, %1665
    %1941:i32 = phi %1715, %1940, %1705
    %1722:i32 = phi %1713, %1688
    %1723:i32 = phi %1715, %1722, %1710
    %1594:i32 = phi %1551, %1592, %1593
    %1670:i32 = phi %1638, %1594
    %1634:i32 = phi %1619, %1594
    %1671:i32 = phi %1640, %1670, %1634
    %1993:i32 = phi %1713, %1671
    %1709:i32 = phi %1693, %1671
    %1994:i32 = phi %1715, %1993, %1709
    %1587:i32 = phi %1551, %1585, %1586
    %1668:i32 = phi %1638, %1587
    %1633:i32 = phi %1619, %1587
    %1669:i32 = phi %1640, %1668, %1633
    %1968:i32 = phi %1713, %1669
    %1707:i32 = phi %1693, %1669
    %1969:i32 = phi %1715, %1968, %1707
    %1580:i32 = phi %1551, %1578, %1579
    %1666:i32 = phi %1638, %1580
    %1632:i32 = phi %1619, %1580
    %1667:i32 = phi %1640, %1666, %1632
    %1954:i32 = phi %1713, %1667
    %1706:i32 = phi %1693, %1667
    %1955:i32 = phi %1715, %1954, %1706
    %1576:ptr = phi %1551, %1574, %1575
    %1662:ptr = phi %1638, %1576
    %1630:ptr = phi %1619, %1576
    %1663:ptr = phi %1640, %1662, %1630
    %1926:ptr = phi %1713, %1663
    %1704:ptr = phi %1693, %1663
    %1927:ptr = phi %1715, %1926, %1704
    %1572:i32 = phi %1551, %1570, %1571
    %1660:i32 = phi %1638, %1572
    %1629:i32 = phi %1619, %1572
    %1661:i32 = phi %1640, %1660, %1629
    %1912:i32 = phi %1713, %1661
    %1703:i32 = phi %1693, %1661
    %1913:i32 = phi %1715, %1912, %1703
    %1568:i32 = phi %1551, %1566, %1567
    %1658:i32 = phi %1638, %1568
    %1628:i32 = phi %1619, %1568
    %1659:i32 = phi %1640, %1658, %1628
    %1734:i32 = phi %1713, %1659
    %1702:i32 = phi %1693, %1659
    %1735:i32 = phi %1715, %1734, %1702
    %1564:ptr = phi %1551, %1562, %1563
    %1646:ptr = phi %1638, %1564
    %1622:ptr = phi %1619, %1564
    %1647:ptr = phi %1640, %1646, %1622
    %1720:ptr = phi %1713, %1647
    %1696:ptr = phi %1693, %1647
    %1721:ptr = phi %1715, %1720, %1696
    %1560:ptr = phi %1551, %1558, %1559
    %1644:ptr = phi %1638, %1560
    %1621:ptr = phi %1619, %1560
    %1645:ptr = phi %1640, %1644, %1621
    %1718:ptr = phi %1713, %1645
    %1695:ptr = phi %1693, %1645
    %1719:ptr = phi %1715, %1718, %1695
    %1556:ptr = phi %1551, %1517, %1535
    %1656:ptr = phi %1638, %1556
    %1627:ptr = phi %1619, %1556
    %1657:ptr = phi %1640, %1656, %1627
    %1732:ptr = phi %1713, %1657
    %1701:ptr = phi %1693, %1657
    %1733:ptr = phi %1715, %1732, %1701
    %1555:i32 = phi %1551, %28, %1530
    %1654:i32 = phi %1638, %1555
    %1626:i32 = phi %1619, %1555
    %1655:i32 = phi %1640, %1654, %1626
    %1730:i32 = phi %1713, %1655
    %1700:i32 = phi %1693, %1655
    %1731:i32 = phi %1715, %1730, %1700
    %1554:i32 = phi %1551, %28, %1546
    %1652:i32 = phi %1638, %1554
    %1648:i32 = phi %1638, %1554
    %1625:i32 = phi %1619, %1554
    %1653:i32 = phi %1640, %1652, %1625
    %1728:i32 = phi %1713, %1653
    %1699:i32 = phi %1693, %1653
    %1729:i32 = phi %1715, %1728, %1699
    %1623:i32 = phi %1619, %1554
    %1649:i32 = phi %1640, %1648, %1623
    %1724:i32 = phi %1713, %1649
    %1697:i32 = phi %1693, %1649
    %1725:i32 = phi %1715, %1724, %1697
    %1553:i32 = phi %1551, %1521, %1529
    %1650:i32 = phi %1638, %1553
    %1624:i32 = phi %1619, %1553
    %1651:i32 = phi %1640, %1650, %1624
    %1726:i32 = phi %1713, %1651
    %1698:i32 = phi %1693, %1651
    %1727:i32 = phi %1715, %1726, %1698
    %1856:i32 = phi %1776, %1727, %1855
    %1850:i32 = phi %1803, %1856
    %1851:i32 = phi %1813, %1850
    %1852:i32 = phi %1746, %1851
    %1853:i32 = phi %1763, %1851, %1852
    %1857:i32 = isub %1853, %33
    %1877:i32 = icmp slt %1867, %1857
    %1878:i32 = and %1877, %38
    %1768:ctrl, %1769:ctrl = brcond %1767, %1878
    %1770:ctrl, %1771:phisel = region %1768
    %1773:ctrl, %1774:phisel = region %1769, %1792
    %1775:ctrl, %1776:phisel = region %1714, %1773
    %1777:ptr = phi %1774, %1782, %1783
    %1778:ptr = phi %1776, %1733, %1777
    %1779:ptr = phi %1803, %1778
    %1780:ptr = phi %1813, %1779
    %1781:ptr = phi %1746, %1780
    %1782:ptr = phi %1763, %1780, %1781
    %1783:ptr = phi %1771, %1782
    %1784:ptr = ptroff %1783, %52
    %1785:ctrl, %1786:i64 = load.4 %1770, %1784
    %1787:i32 = icmp ult %1871, %1786
    %1788:ctrl, %1789:ctrl = brcond %1785, %1787
    %1790:ctrl, %1791:phisel = region %1788
    %1792:ctrl, %1793:i32 = load.4 %1790, %1874
    %1794:i32 = phi %1774, %1849, %1793
    %1795:i32 = phi %1776, %1725, %1794
    %1804:i32 = phi %1803, %1795
    %1805:i32 = icmp eq %1804, %28
    %1806:i32 = and %1805, %38
    %1807:ctrl, %1808:ctrl = brcond %1802, %1806
    %1809:ctrl, %1810:phisel = region %1807
    %1812:ctrl, %1813:phisel = region %1808
    %1814:ctrl, %1815:i32 = call @"System.Int32 System.Span`1[System.Int32]::get_Length()" %1812, %6
    %1847:i32 = phi %1813, %1804
    %1738:i32 = phi %1813, %1737
    %1739:i32 = iadd %1738, %33
    %1740:i32 = icmp slt %1739, %1815
    %1741:i32 = icmp eq %1740, %28
    %1742:i32 = and %1741, %38
    %1743:ctrl, %1744:ctrl = brcond %1814, %1742
    %1745:ctrl, %1746:phisel = region %1743
    %1747:ctrl, %1748:i32 = call @"System.Int32 System.Span`1[System.Int32]::get_Length()" %1745, %6
    %1749:i32 = imul %1748, %30
    %1750:i64 = iext %1749
    %1751:i64 = sfill 32 %1750
    %1752:ctrl, %1753:ptr = call @jit_newarr %1747, %64, %1751
    %1754:ptr = ptroff %1753, %52
    %1755:ctrl = store.4 %1752, %1751, %1754
    %1756:ctrl = call @"System.Span`1[System.Int32] System.Span`1[System.Int32]::op_Implicit(System.Int32[])" %1755, %1753, %16
    %1757:ctrl = call @"System.Void System.Span`1[System.Int32]::CopyTo(System.Span`1[System.Int32])" %1756, %6, %16
    %1758:ctrl = call @"System.Span`1[System.Int32] System.Span`1[System.Int32]::op_Implicit(System.Int32[])" %1757, %1753, %17
    %1759:ctrl, %1760:ptr = call @jit_gc_memcpy %1758, %6, %17, %52
    %1848:i32 = phi %1746, %1847
    %1761:i32 = phi %1746, %1739
    %1762:ctrl, %1763:phisel = region %1744, %1759
    %1849:i32 = phi %1763, %1847, %1848
    %1842:i32 = phi %1763, %1840, %1841
    %1843:i32 = phi %1771, %1842
    %1844:i32 = phi %1774, %1842, %1843
    %1845:i32 = phi %1776, %1723, %1844
    %1798:i32 = icmp slt %1797, %1845
    %1799:i32 = and %1798, %38
    %1800:ctrl, %1801:ctrl = brcond %1775, %1799
    %1802:ctrl, %1803:phisel = region %1800
    %2125:i32 = phi %1803, %2124
    %2128:i32 = phi %1813, %2125
    %2129:i32 = phi %1746, %2128
    %2130:i32 = phi %1763, %2128, %2129
    %2131:i32 = phi %1771, %2130
    %2132:i32 = phi %1774, %2130, %2131
    %2124:i32 = phi %1776, %2123, %2132
    %2126:i32 = phi %1810, %2125
    %2105:i32 = phi %1803, %2104
    %2108:i32 = phi %1813, %2105
    %2109:i32 = phi %1746, %2108
    %2110:i32 = phi %1763, %2108, %2109
    %2111:i32 = phi %1771, %2110
    %2112:i32 = phi %1774, %2110, %2111
    %2104:i32 = phi %1776, %2103, %2112
    %2106:i32 = phi %1810, %2105
    %2065:i32 = phi %1803, %2064
    %2068:i32 = phi %1813, %2065
    %2069:i32 = phi %1746, %2068
    %2070:i32 = phi %1763, %2068, %2069
    %2071:i32 = phi %1771, %2070
    %2072:i32 = phi %1774, %2070, %2071
    %2064:i32 = phi %1776, %2063, %2072
    %2066:i32 = phi %1810, %2065
    %2024:i32 = phi %1803, %2023
    %2030:i32 = phi %1813, %2024
    %2031:i32 = phi %1746, %2030
    %2032:i32 = phi %1763, %2030, %2031
    %2033:i32 = phi %1771, %2032
    %2034:i32 = phi %1774, %2032, %2033
    %2023:i32 = phi %1776, %2022, %2034
    %2025:i32 = phi %1810, %2024
    %2010:i32 = phi %1803, %2009
    %2016:i32 = phi %1813, %2010
    %2017:i32 = phi %1746, %2016
    %2018:i32 = phi %1763, %2016, %2017
    %2019:i32 = phi %1771, %2018
    %2020:i32 = phi %1774, %2018, %2019
    %2009:i32 = phi %1776, %2008, %2020
    %2011:i32 = phi %1810, %2010
    %1996:i32 = phi %1803, %1995
    %2002:i32 = phi %1813, %1996
    %2003:i32 = phi %1746, %2002
    %2004:i32 = phi %1763, %2002, %2003
    %2005:i32 = phi %1771, %2004
    %2006:i32 = phi %1774, %2004, %2005
    %1995:i32 = phi %1776, %1994, %2006
    %1997:i32 = phi %1810, %1996
    %1985:i32 = phi %1803, %1984
    %1988:i32 = phi %1813, %1985
    %1989:i32 = phi %1746, %1988
    %1990:i32 = phi %1763, %1988, %1989
    %1991:i32 = phi %1771, %1990
    %1992:i32 = phi %1774, %1990, %1991
    %1984:i32 = phi %1776, %1983, %1992
    %1986:i32 = phi %1810, %1985
    %1971:i32 = phi %1803, %1970
    %1977:i32 = phi %1813, %1971
    %1978:i32 = phi %1746, %1977
    %1979:i32 = phi %1763, %1977, %1978
    %1980:i32 = phi %1771, %1979
    %1981:i32 = phi %1774, %1979, %1980
    %1970:i32 = phi %1776, %1969, %1981
    %1972:i32 = phi %1810, %1971
    %1957:i32 = phi %1803, %1956
    %1963:i32 = phi %1813, %1957
    %1964:i32 = phi %1746, %1963
    %1965:i32 = phi %1763, %1963, %1964
    %1966:i32 = phi %1771, %1965
    %1967:i32 = phi %1774, %1965, %1966
    %1956:i32 = phi %1776, %1955, %1967
    %1958:i32 = phi %1810, %1957
    %1943:i32 = phi %1803, %1942
    %1949:i32 = phi %1813, %1943
    %1950:i32 = phi %1746, %1949
    %1951:i32 = phi %1763, %1949, %1950
    %1952:i32 = phi %1771, %1951
    %1953:i32 = phi %1774, %1951, %1952
    %1942:i32 = phi %1776, %1941, %1953
    %1944:i32 = phi %1810, %1943
    %1929:ptr = phi %1803, %1928
    %1935:ptr = phi %1813, %1929
    %1936:ptr = phi %1746, %1935
    %1937:ptr = phi %1763, %1935, %1936
    %1938:ptr = phi %1771, %1937
    %1939:ptr = phi %1774, %1937, %1938
    %1928:ptr = phi %1776, %1927, %1939
    %1930:ptr = phi %1810, %1929
    %1915:i32 = phi %1803, %1914
    %1921:i32 = phi %1813, %1915
    %1922:i32 = phi %1746, %1921
    %1923:i32 = phi %1763, %1921, %1922
    %1924:i32 = phi %1771, %1923
    %1925:i32 = phi %1774, %1923, %1924
    %1914:i32 = phi %1776, %1913, %1925
    %1916:i32 = phi %1810, %1915
    %1864:i32 = phi %1803, %1876
    %1865:i32 = phi %1813, %1864
    %1866:i32 = phi %1746, %1865
    %1867:i32 = phi %1763, %1865, %1866
    %1868:i32 = phi %1771, %1867
    %1869:i32 = iadd %1868, %33
    %1875:i32 = phi %1774, %1867, %1869
    %1876:i32 = phi %1776, %1731, %1875
    %1870:i64 = iext %1869
    %1871:i64 = sfill 32 %1870
    %1872:i64 = imul %1871, %42
    %1873:i64 = iadd %1872, %63
    %1874:ptr = ptroff %1783, %1873
    %1858:i32 = phi %1803, %1797
    %1859:i32 = phi %1813, %1858
    %1860:i32 = phi %1746, %1859
    %1861:i32 = phi %1763, %1859, %1860
    %1862:i32 = phi %1771, %1861
    %1863:i32 = phi %1774, %1861, %1862
    %1796:i32 = iadd %1863, %1794
    %1797:i32 = phi %1776, %1729, %1796
    %1846:i32 = phi %1803, %1845
    %1840:i32 = phi %1813, %1846
    %1841:i32 = phi %1746, %1840
    %1879:ctrl, %1880:phisel = region %1801, %1809
    %2127:i32 = phi %1880, %2124, %2126
    %2107:i32 = phi %1880, %2104, %2106
    %2067:i32 = phi %1880, %2064, %2066
    %2026:i32 = phi %1880, %2023, %2025
    %2012:i32 = phi %1880, %2009, %2011
    %1998:i32 = phi %1880, %1995, %1997
    %1987:i32 = phi %1880, %1984, %1986
    %1973:i32 = phi %1880, %1970, %1972
    %1959:i32 = phi %1880, %1956, %1958
    %1945:i32 = phi %1880, %1942, %1944
    %1931:ptr = phi %1880, %1928, %1930
    %1917:i32 = phi %1880, %1914, %1916
    %1834:ptr = phi %1763, %1832, %1833
    %1835:ptr = phi %1771, %1834
    %1836:ptr = phi %1774, %1834, %1835
    %1837:ptr = phi %1776, %1721, %1836
    %1838:ptr = phi %1803, %1837
    %1839:ptr = phi %1810, %1838
    %1900:ptr = phi %1880, %1837, %1839
    %1832:ptr = phi %1813, %1838
    %1833:ptr = phi %1746, %1832
    %1826:ptr = phi %1763, %1824, %1825
    %1827:ptr = phi %1771, %1826
    %1828:ptr = phi %1774, %1826, %1827
    %1829:ptr = phi %1776, %1719, %1828
    %1830:ptr = phi %1803, %1829
    %1831:ptr = phi %1810, %1830
    %1888:ptr = phi %1880, %1829, %1831
    %1824:ptr = phi %1813, %1830
    %1825:ptr = phi %1746, %1824
    %1764:i32 = phi %1763, %1739, %1761
    %1772:i32 = phi %1771, %1764
    %1911:i32 = phi %1774, %1764, %1772
    %1736:i32 = phi %1776, %1735, %1911
    %1737:i32 = phi %1803, %1736
    %1811:i32 = phi %1810, %1737
    %1904:i32 = phi %1880, %1736, %1811
    %1765:ctrl, %1766:ptr = call @"System.Int32& System.Span`1[System.Int32]::get_Item(System.Int32)" %1762, %6, %1764
    %1767:ctrl = store.4 %1765, %1861, %1766
    %1908:ctrl, %1909:phisel = region %1789
    %1910:ctrl = call @jit_throw_index_out_of_range %1908
    unreachable %1910
    %1854:i32 = phi %1771, %1853
    %1855:i32 = phi %1774, %1853, %1854
    %1552:ptr = phi %1551, %1514, %1528
    %1642:ptr = phi %1638, %1552
    %1620:ptr = phi %1619, %1552
    %1643:ptr = phi %1640, %1642, %1620
    %1716:ptr = phi %1713, %1643
    %1694:ptr = phi %1693, %1643
    %1717:ptr = phi %1715, %1716, %1694
    %1821:ptr = phi %1776, %1717, %1820
    %1822:ptr = phi %1803, %1821
    %1823:ptr = phi %1810, %1822
    %1885:ptr = phi %1880, %1821, %1823
    %1816:ptr = phi %1813, %1822
    %1817:ptr = phi %1746, %1816
    %1818:ptr = phi %1763, %1816, %1817
    %1819:ptr = phi %1771, %1818
    %1820:ptr = phi %1774, %1818, %1819
    %1881:ctrl, %1882:phisel = region %1511, %1879
    %1883:ctrl, %1884:phisel = region %1500, %1881
    %2133:i32 = phi %1882, %2114, %2127
    %2136:i32 = phi %1884, %2093, %2133
    %2113:i32 = phi %1882, %2094, %2107
    %2134:i32 = phi %1884, %2093, %2113
    %2073:i32 = phi %1882, %2054, %2067
    %2074:i32 = phi %1884, %2053, %2073
    %2035:i32 = phi %1882, %1678, %1987
    %2036:i32 = phi %1884, %1677, %2035
    %2027:i32 = phi %1882, %1605, %2026
    %2028:i32 = phi %1884, %1604, %2027
    %2013:i32 = phi %1882, %1598, %2012
    %2014:i32 = phi %1884, %1597, %2013
    %1999:i32 = phi %1882, %1591, %1998
    %2000:i32 = phi %1884, %1590, %1999
    %1974:i32 = phi %1882, %1584, %1973
    %1975:i32 = phi %1884, %1583, %1974
    %1960:i32 = phi %1882, %1577, %1959
    %1961:i32 = phi %1884, %1497, %1960
    %1946:i32 = phi %1882, %1611, %1945
    %1947:i32 = phi %1884, %1610, %1946
    %1932:ptr = phi %1882, %1573, %1931
    %1933:ptr = phi %1884, %1494, %1932
    %1918:i32 = phi %1882, %1569, %1917
    %1919:i32 = phi %1884, %1491, %1918
    %1905:i32 = phi %1882, %1565, %1904
    %1906:i32 = phi %1884, %51, %1905
    %1901:ptr = phi %1882, %1561, %1900
    %1902:ptr = phi %1884, %1488, %1901
    %1889:ptr = phi %1882, %1557, %1888
    %1890:ptr = phi %1884, %1485, %1889
    %1891:ptr = ptroff %1890, %57
    %1892:ctrl, %1893:i32 = load.1 %1883, %1891
    %1894:ctrl, %1895:ctrl = brcond %1892, %1893
    %1896:ctrl, %1897:phisel = region %1894
    %2137:i32 = phi %1897, %2136
    %2138:ctrl, %2139:ctrl = brcond %1896, %2137
    %2157:ctrl, %2158:phisel = region %2139
    %5729:i32 = phi %2158, %2137
    %2135:i32 = phi %1897, %2134
    %2205:i32 = phi %2158, %2135
    %2075:i32 = phi %1897, %2074
    %2237:i32 = phi %2158, %2075
    %2037:i32 = phi %1897, %2036
    %2221:i32 = phi %2158, %2037
    %2029:i32 = phi %1897, %2028
    %2233:i32 = phi %2158, %2029
    %2015:i32 = phi %1897, %2014
    %2229:i32 = phi %2158, %2015
    %2001:i32 = phi %1897, %2000
    %2225:i32 = phi %2158, %2001
    %1976:i32 = phi %1897, %1975
    %2217:i32 = phi %2158, %1976
    %1962:i32 = phi %1897, %1961
    %2213:i32 = phi %2158, %1962
    %1948:i32 = phi %1897, %1947
    %2209:i32 = phi %2158, %1948
    %1934:ptr = phi %1897, %1933
    %2201:ptr = phi %2158, %1934
    %1920:i32 = phi %1897, %1919
    %2197:i32 = phi %2158, %1920
    %1907:i32 = phi %1897, %1906
    %2193:i32 = phi %2158, %1907
    %1903:ptr = phi %1897, %1902
    %2178:ptr = phi %2158, %1903
    %1899:ptr = phi %1897, %1890
    %2160:ptr = phi %2158, %1899
    %2161:ptr = ptroff %2160, %42
    %2162:ctrl, %2163:i32 = load.4 %2157, %2161
    %2168:i32 = icmp ult %28, %2163
    %2140:ctrl, %2141:phisel = region %1895, %2138
    %2164:ctrl, %2165:phisel = region %2162, %2140
    %2169:i32 = phi %2165, %2168, %28
    %2170:i32 = and %2169, %38
    %2171:ctrl, %2172:ctrl = brcond %2164, %2170
    %2173:ctrl, %2174:phisel = region %2171
    %5730:i32 = phi %2141, %2136, %2137
    %5731:i32 = phi %2165, %5729, %5730
    %5732:i32 = phi %2174, %5731
    %2156:i32 = phi %2141, %2074, %2075
    %2238:i32 = phi %2165, %2237, %2156
    %2239:i32 = phi %2174, %2238
    %2155:i32 = phi %2141, %2028, %2029
    %2234:i32 = phi %2165, %2233, %2155
    %2235:i32 = phi %2174, %2234
    %2154:i32 = phi %2141, %2014, %2015
    %2230:i32 = phi %2165, %2229, %2154
    %2231:i32 = phi %2174, %2230
    %2153:i32 = phi %2141, %2000, %2001
    %2226:i32 = phi %2165, %2225, %2153
    %2227:i32 = phi %2174, %2226
    %2152:i32 = phi %2141, %2036, %2037
    %2222:i32 = phi %2165, %2221, %2152
    %2223:i32 = phi %2174, %2222
    %2151:i32 = phi %2141, %1975, %1976
    %2218:i32 = phi %2165, %2217, %2151
    %2219:i32 = phi %2174, %2218
    %2150:i32 = phi %2141, %1961, %1962
    %2214:i32 = phi %2165, %2213, %2150
    %2215:i32 = phi %2174, %2214
    %2149:i32 = phi %2141, %1947, %1948
    %2210:i32 = phi %2165, %2209, %2149
    %2211:i32 = phi %2174, %2210
    %2148:i32 = phi %2141, %2134, %2135
    %2206:i32 = phi %2165, %2205, %2148
    %2207:i32 = phi %2174, %2206
    %2147:ptr = phi %2141, %1933, %1934
    %2202:ptr = phi %2165, %2201, %2147
    %2203:ptr = phi %2174, %2202
    %2146:i32 = phi %2141, %1919, %1920
    %2198:i32 = phi %2165, %2197, %2146
    %2199:i32 = phi %2174, %2198
    %2145:i32 = phi %2141, %1906, %1907
    %2194:i32 = phi %2165, %2193, %2145
    %2195:i32 = phi %2174, %2194
    %2144:ptr = phi %2141, %1902, %1903
    %2179:ptr = phi %2165, %2178, %2144
    %2180:ptr = phi %2174, %2179
    %2143:ptr = phi %2141, %1890, %1899
    %2167:ptr = phi %2165, %2160, %2143
    %2177:ptr = phi %2174, %2167
    %1886:ptr = phi %1882, %1503, %1885
    %1887:ptr = phi %1884, %1484, %1886
    %1898:ptr = phi %1897, %1887
    %2159:ptr = phi %2158, %1898
    %2142:ptr = phi %2141, %1887, %1898
    %2166:ptr = phi %2165, %2159, %2142
    %2175:ptr = phi %2174, %2166
    %2176:ctrl = call @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NegativeSignTChar[System.Char]()" %2173, %2175, %18
    %2181:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.ReadOnlySpan`1[System.Char])" %2176, %2180, %18
    %2182:ctrl, %2183:phisel = region %2172, %2181
    %2184:ctrl, %2185:ptr = call @jit_gc_memcpy %2182, %19, %5, %52
    %2186:ctrl, %2187:ptr = call @"System.Char& System.Runtime.InteropServices.MemoryMarshal::GetReference[System.Char](System.ReadOnlySpan`1[System.Char])" %2184, %19
    %2188:i64 = ptrtoint %2187
    %2189:ptr = inttoptr %2188
    %5733:i32 = phi %2183, %5731, %5732
    %2240:i32 = phi %2183, %2238, %2239
    %2236:i32 = phi %2183, %2234, %2235
    %2232:i32 = phi %2183, %2230, %2231
    %2228:i32 = phi %2183, %2226, %2227
    %2224:i32 = phi %2183, %2222, %2223
    %2220:i32 = phi %2183, %2218, %2219
    %2216:i32 = phi %2183, %2214, %2215
    %2212:i32 = phi %2183, %2210, %2211
    %2208:i32 = phi %2183, %2206, %2207
    %2204:ptr = phi %2183, %2202, %2203
    %2200:i32 = phi %2183, %2198, %2199
    %2196:i32 = phi %2183, %2194, %2195
    %2192:ptr = phi %2183, %2179, %2180
    %2191:ptr = phi %2183, %2167, %2177
    %2190:ptr = phi %2183, %2166, %2175
    %4192:ptr = phi %4614, %2190, %4191
    %4193:ptr = phi %2519, %4192
    %4194:ptr = phi %3058, %4193
    %4196:ptr = phi %3066, %4194, %4195
    %4199:ptr = phi %3076, %4196
    %4200:ptr = phi %2449, %4199
    %4201:ptr = phi %2618, %4200
    %4202:ptr = phi %2620, %4201
    %4203:ptr = phi %2627, %4202
    %4204:ptr = phi %2629, %4203
    %4205:ptr = phi %2638, %4204
    %4433:ptr = phi %4431, %4205, %4432
    %4539:ptr = phi %2459, %4199, %4433
    %4540:ptr = phi %2775, %4539
    %4541:ptr = phi %2803, %4540
    %4542:ctrl = call @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::PercentSymbolTChar[System.Char]()" %2802, %4541, %22
    %4543:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.ReadOnlySpan`1[System.Char])" %4542, %3722, %22
    %4611:ctrl, %4612:phisel = region %4543, %4010, %3583, %3872, %2364, %3702, %2842, %2294, %4042, %4610, %2563
    %4613:ctrl, %4614:phisel = region %2186, %4611
    %4615:ctrl, %4616:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %4613, %5
    %2264:i32 = phi %4612, %5095, %5120, %5527, %5107, %5115, %2263, %5116, %5651, %5636, %2754, %5657
    %2265:i32 = phi %4614, %2236, %2264
    %2266:i32 = phi %3064, %2265, %5162
    %2267:i32 = phi %3066, %5163, %2266
    %2268:i32 = phi %3076, %2267
    %2269:i32 = phi %2459, %2268, %4511
    %2270:i32 = phi %2712, %2269
    %2271:i32 = phi %2722, %2270
    %2272:i32 = phi %2724, %2271
    %2273:i32 = phi %2884, %5118, %2272
    %2274:i32 = phi %2392, %2273
    %2275:i32 = phi %2966, %2274
    %2276:i32 = phi %3129, %2983, %2275
    %2277:i32 = phi %3150, %2276
    %2278:i32 = phi %3188, %2277, %3171
    %2279:i32 = phi %3212, %3256, %2278
    %2280:i32 = phi %3230, %2279
    %2281:i32 = phi %3271, %2280, %3251
    %2282:i32 = phi %3295, %3328, %2281
    %2283:i32 = phi %3306, %2282
    %2284:i32 = phi %3308, %3148, %3228, %2283
    %2285:i32 = phi %3348, %2284, %5635
    %2286:i32 = phi %3358, %2285
    %2287:i32 = phi %3360, %3386, %2286
    %2288:i32 = phi %3388, %2287
    %2289:i32 = phi %3399, %2288, %3397
    %2290:i32 = phi %2599, %2289
    %2291:i32 = isub %4186, %2290
    %2292:i32 = phi %4188, %2291, %28
    %2293:ctrl = call @"System.Void System.Number::FormatExponent[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Globalization.NumberFormatInfo, System.Int32, System.Char, System.Int32, System.Boolean)" %4187, %4667, %4189, %2292, %5121, %4668, %4670
    %2294:ctrl, %2295:phisel = region %2293, %2997
    %2296:i32 = phi %2295, %5610, %5626
    %2297:i32 = phi %4612, %2808, %5580, %5558, %3949, %5560, %5569, %5570, %2296, %5612, %5581, %5632
    %2298:i32 = phi %4614, %2232, %2297
    %2299:i32 = phi %3064, %2298, %5160
    %2300:i32 = phi %3066, %5161, %2299
    %2301:i32 = phi %3076, %2300
    %2302:i32 = phi %2459, %2301, %4496
    %2303:i32 = phi %2775, %2302
    %2304:i32 = phi %2825, %2303
    %2305:i32 = phi %2827, %2304
    %2306:i32 = phi %2861, %2303, %2305
    %2307:i32 = phi %2470, %2306
    %2308:i32 = icmp sle %2863, %2307
    %2309:ctrl, %2310:ctrl = brcond %2469, %2308
    %2311:ctrl, %2312:phisel = region %2309
    %2313:i32 = phi %2312, %2307
    %2314:ctrl, %2315:phisel = region %2310
    %2316:ctrl, %2317:phisel = region %2314, %2311
    %2318:i32 = phi %2317, %28, %43
    %2319:i32 = and %2318, %29
    %5513:i32 = phi %2315, %2307
    %5514:i32 = phi %2317, %5513, %2313
    %2320:i32 = phi %2315, %2869
    %2321:i32 = phi %2317, %2320, %2870
    %2322:i32 = phi %3559, %2321, %5179
    %2323:i32 = phi %3584, %2322, %5281
    %2324:i32 = phi %4612, %2807, %5459, %2323, %3937, %2367, %5446, %5449, %5506, %5491, %5460, %5512
    %2325:i32 = phi %4614, %2228, %2324
    %2326:i32 = phi %3064, %2325, %5158
    %2327:i32 = phi %3066, %5159, %2326
    %2328:i32 = phi %3076, %2327
    %2329:i32 = phi %2459, %2328, %4481
    %2330:i32 = phi %2775, %2329
    %2331:i32 = phi %2825, %2330
    %2332:i32 = phi %2827, %2331
    %2333:i32 = phi %2853, %2332
    %2334:i32 = phi %2370, %2333
    %2335:i32 = icmp slt %2334, %28
    %2336:ctrl, %2337:ctrl = brcond %2369, %2335
    %2338:ctrl, %2339:phisel = region %2336
    %2340:i32 = phi %2339, %2334
    %2341:ctrl, %2342:phisel = region %2337
    %5440:i32 = phi %2342, %2334
    %2251:i32 = phi %2342, %2250
    %2252:i32 = icmp sle %2251, %5447
    %2253:ctrl, %2254:ctrl = brcond %2341, %2252
    %2255:ctrl, %2256:phisel = region %2253
    %5442:i32 = phi %2256, %5440
    %2257:i32 = phi %2256, %2251
    %2258:ctrl, %2259:phisel = region %2254
    %5658:i32 = phi %2259, %2251
    %5441:i32 = phi %2259, %5440
    %2344:i32 = phi %2259, %2343
    %2346:i32 = phi %3675, %2344, %2345
    %2347:i32 = phi %3677, %2346, %5373
    %2348:i32 = phi %3703, %2347, %3700
    %2349:i32 = phi %4612, %2806, %5386, %5275, %3925, %2366, %2348, %5376, %5433, %5418, %5387, %5439
    %2350:i32 = phi %4614, %2224, %2349
    %2351:i32 = phi %3064, %2350, %5156
    %2352:i32 = phi %3066, %5157, %2351
    %2353:i32 = phi %3076, %2352
    %2354:i32 = phi %2459, %2353, %4455
    %2355:i32 = phi %2775, %2354
    %2356:i32 = phi %2825, %2355
    %2357:i32 = phi %2827, %2356
    %2358:i32 = phi %2853, %2357
    %2359:i32 = icmp ult %28, %2358
    %2360:i32 = or %2359, %4888
    %2361:i32 = and %2360, %38
    %2362:ctrl, %2363:ctrl = brcond %2852, %2361
    %2364:ctrl, %2365:phisel = region %2362
    %2367:i32 = phi %2365, %2333
    %2366:i32 = phi %2365, %2358
    %2369:ctrl, %2370:phisel = region %2363
    %5372:i32 = phi %2370, %2358
    %5373:i32 = phi %2339, %5372
    %2343:i32 = phi %2342, %5372
    %2345:i32 = phi %2256, %2343
    %2371:i32 = phi %2370, %5087
    %2375:i32 = phi %2339, %2371
    %2372:i32 = phi %2342, %2371
    %2374:i32 = phi %2256, %2372
    %2373:i32 = phi %2259, %2372
    %3686:i32 = phi %3675, %2373, %2374
    %2376:i32 = phi %3677, %3686, %2375
    %2377:i32 = phi %3703, %2376, %3699
    %2378:i32 = phi %4612, %5055, %5093, %5271, %5067, %5088, %2377, %5089, %5365, %3327, %2750, %5371
    %2379:i32 = phi %4614, %2220, %2378
    %2380:i32 = phi %3064, %2379, %5154
    %2381:i32 = phi %3066, %5155, %2380
    %2382:i32 = phi %3076, %2381
    %2383:i32 = phi %2459, %2382, %4466
    %2384:i32 = phi %2712, %2383
    %2385:i32 = phi %2722, %2384
    %2386:i32 = phi %2724, %2385
    %2387:i32 = phi %2884, %5091, %2386
    %2388:i32 = and %2387, %38
    %2389:ctrl, %2390:ctrl = brcond %2883, %2388
    %2391:ctrl, %2392:phisel = region %2389
    %2393:ctrl, %2394:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %2391, %5
    %2397:i32 = phi %2392, %2387
    %2396:i32 = phi %2392, %39
    %2395:i32 = phi %2392, %28
    %2398:ctrl, %2399:phisel = region %2390
    %5637:i32 = phi %2399, %2273
    %5351:i32 = phi %2399, %2387
    %2400:i32 = phi %2399, %5314
    %2401:i32 = phi %2998, %2400, %4800
    %2402:i32 = phi %2295, %5342, %2401
    %2403:i32 = phi %4612, %2805, %5312, %5290, %3913, %5292, %5301, %5302, %2402, %5344, %5313, %5350
    %2404:i32 = phi %4614, %2216, %2403
    %2405:i32 = phi %3064, %2404, %5152
    %2406:i32 = phi %3066, %5153, %2405
    %2407:i32 = phi %3076, %2406
    %2408:i32 = phi %2459, %2407, %4453
    %2409:i32 = phi %2775, %2408
    %2410:i32 = phi %2825, %2409
    %2411:i32 = phi %2827, %2410
    %2412:i32 = phi %2861, %2409, %2411
    %2413:i32 = phi %2481, %2412
    %2414:i32 = phi %3552, %2413
    %2415:i32 = phi %3557, %3664, %2414
    %2416:i32 = phi %3559, %2479, %2415
    %2417:i32 = phi %3568, %2416
    %2418:ctrl, %2419:ctrl = brcond %3987, %2417
    %2420:ctrl, %2421:phisel = region %2418
    %5282:i32 = phi %2421, %2417
    %2422:ctrl, %2423:phisel = region %2419, %2503
    %5284:i32 = phi %2423, %2417, %5282
    %2424:i32 = phi %2423, %2500, %2501
    %2425:i32 = phi %2508, %5174, %2424
    %2426:i32 = phi %3039, %2425
    %2427:i32 = icmp eq %2426, %4976
    %2428:i32 = and %2427, %38
    %2429:ctrl, %2430:ctrl = brcond %4974, %2428
    %2431:ctrl, %2432:phisel = region %2429
    %2433:i32 = phi %2432, %2426
    %2434:ctrl, %2435:phisel = region %2430, %4580
    %5272:i32 = phi %2435, %2426, %2433
    %2436:i32 = phi %2435, %5168, %5169
    %2437:i32 = phi %3044, %5167, %2436
    %2438:i32 = phi %3584, %3657, %2437
    %2439:i32 = phi %4612, %2804, %5215, %2438, %3901, %5195, %5204, %5205, %5262, %5247, %5216, %5268
    %2440:i32 = phi %4614, %2212, %2439
    %2441:i32 = phi %3064, %2440, %5150
    %2442:i32 = phi %3066, %5151, %2441
    %2443:i32 = phi %3076, %2442
    %2444:i32 = icmp slt %28, %2443
    %2445:i32 = and %2444, %38
    %2446:ctrl, %2447:ctrl = brcond %3075, %2445
    %2448:ctrl, %2449:phisel = region %2446
    %2456:i32 = phi %2449, %2268
    %2455:i32 = phi %2449, %2301
    %2454:i32 = phi %2449, %2328
    %2453:i32 = phi %2449, %2353
    %2452:i32 = phi %2449, %2382
    %2451:i32 = phi %2449, %2407
    %2450:i32 = phi %2449, %2443
    %2458:ctrl, %2459:phisel = region %2447, %4430
    %2460:i32 = phi %2459, %2443, %4451
    %2461:i32 = phi %2775, %2460
    %2462:i32 = phi %2825, %2461
    %2463:i32 = phi %2827, %2462
    %2464:i32 = phi %2861, %2461, %2463
    %2465:i32 = icmp slt %2464, %28
    %2466:i32 = and %2465, %38
    %2467:ctrl, %2468:ctrl = brcond %2860, %2466
    %2469:ctrl, %2470:phisel = region %2467
    %2476:i32 = phi %2470, %2412
    %2478:i32 = phi %2312, %2476
    %2477:i32 = phi %2315, %2476
    %2479:i32 = phi %2317, %2477, %2478
    %2471:i32 = phi %2470, %2464
    %2472:i32 = iadd %2471, %33
    %2474:i32 = phi %2312, %2472
    %2473:i32 = phi %2315, %2472
    %2475:i32 = phi %2317, %2473, %2474
    %2480:ctrl, %2481:phisel = region %2468
    %5541:i32 = phi %2481, %2306
    %2483:i32 = phi %2481, %2868
    %2484:i32 = phi %3594, %2483
    %2485:i32 = icmp slt %2484, %3665
    %2486:ctrl, %2487:ctrl = brcond %3593, %2485
    %2488:ctrl, %2489:phisel = region %2486
    %2490:i32 = phi %2489, %2484
    %2491:ctrl, %2492:phisel = region %2487
    %2493:ctrl, %2494:phisel = region %2491, %2488
    %2495:i32 = phi %2494, %28, %43
    %5176:i32 = phi %2492, %2484
    %5177:i32 = phi %2494, %5176, %2490
    %2496:i32 = phi %2492, %3665
    %2497:i32 = phi %2494, %2496, %3666
    %2498:i32 = phi %3557, %2497, %3592
    %2499:i32 = phi %3559, %2866, %2498
    %2500:i32 = phi %3568, %2499
    %2501:i32 = phi %2421, %2500
    %2502:i32 = icmp sle %2501, %33
    %2503:ctrl, %2504:ctrl = brcond %2420, %2502
    %2505:ctrl, %2506:phisel = region %2504
    %2507:ctrl, %2508:phisel = region %2505, %2422
    %5283:i32 = phi %2506, %5282
    %5285:i32 = phi %2508, %5283, %5284
    %5174:i32 = phi %2506, %2501
    %2509:i32 = phi %2506, %3650
    %2510:i32 = phi %2508, %2509, %3651
    %2511:i32 = phi %3044, %2510, %3042
    %2512:i32 = phi %3584, %3648, %2511
    %2513:i32 = phi %4612, %2938, %2959, %2512, %3880, %2949, %4721, %2955, %5126, %3324, %2760, %5149
    %2514:i32 = phi %4614, %2208, %2513
    %2515:i32 = icmp sle %4616, %2514
    %2516:ctrl, %2517:ctrl = brcond %4615, %2515
    %2518:ctrl, %2519:phisel = region %2517
    %5162:i32 = phi %2519, %2265
    %5160:i32 = phi %2519, %2298
    %5158:i32 = phi %2519, %2325
    %5156:i32 = phi %2519, %2350
    %5154:i32 = phi %2519, %2379
    %5152:i32 = phi %2519, %2404
    %5150:i32 = phi %2519, %2440
    %2520:i32 = phi %2519, %2514
    %2524:i32 = iadd %2520, %33
    %2521:i64 = iext %2520
    %2522:i64 = sfill 32 %2521
    %2523:i64 = imul %2522, %32
    %3051:i64 = iadd %3050, %2523
    %3052:ptr = inttoptr %3051
    %3053:ctrl, %3054:i32 = load.2 %2518, %3052
    %3067:i32 = and %3054, %29
    %3055:ctrl, %3056:ctrl = brcond %3053, %3054
    %3057:ctrl, %3058:phisel = region %3055
    %5163:i32 = phi %3058, %5162
    %5161:i32 = phi %3058, %5160
    %5159:i32 = phi %3058, %5158
    %5157:i32 = phi %3058, %5156
    %5155:i32 = phi %3058, %5154
    %5153:i32 = phi %3058, %5152
    %5151:i32 = phi %3058, %5150
    %3068:i32 = phi %3058, %3067
    %3069:i32 = icmp eq %3068, %66
    %3070:i32 = icmp eq %3069, %28
    %3062:i32 = phi %3058, %2524
    %3063:ctrl, %3064:phisel = region %2516, %3056
    %3065:ctrl, %3066:phisel = region %3057, %3063
    %3071:i32 = phi %3066, %3070, %28
    %3072:i32 = and %3071, %38
    %3073:ctrl, %3074:ctrl = brcond %3065, %3072
    %3075:ctrl, %3076:phisel = region %3073
    %3077:ctrl, %3078:phisel = region %3074
    %4195:ptr = phi %3064, %4192, %4193
    %2525:i32 = phi %3064, %2514, %2524
    %2526:i32 = phi %3066, %3062, %2525
    %2527:i32 = phi %3076, %2526
    %2528:i32 = phi %2449, %2527
    %2651:i32 = phi %2618, %2528
    %2652:i32 = phi %2620, %2651
    %2653:i32 = phi %2627, %2652
    %2654:i32 = phi %2629, %2653
    %2655:i32 = phi %2638, %2654
    %4449:i32 = phi %4431, %2655, %4448
    %2529:i32 = phi %2459, %2527, %4449
    %2530:i32 = phi %2712, %2529
    %2531:i32 = phi %2718, %2530
    %2532:i32 = icmp sle %2720, %2531
    %2533:ctrl, %2534:ctrl = brcond %2719, %2532
    %2535:ctrl, %2536:phisel = region %2533
    %2537:i32 = phi %2536, %2531
    %2538:ctrl, %2539:phisel = region %2534
    %2540:i32 = phi %2539, %2531
    %2541:i64 = iext %2540
    %2542:i64 = sfill 32 %2541
    %2543:i64 = imul %2542, %32
    %2544:i64 = iadd %4806, %2543
    %2545:ptr = inttoptr %2544
    %2546:ctrl, %2547:i32 = load.2 %2538, %2545
    %2548:ctrl, %2549:phisel = region %2546, %2535
    %2550:i32 = phi %2549, %2540, %2537
    %2551:i32 = icmp ult %28, %2547
    %2552:i32 = phi %2549, %2551, %28
    %2553:i32 = and %2552, %38
    %2554:ctrl, %2555:ctrl = brcond %2548, %2553
    %2556:ctrl, %2557:phisel = region %2554
    %2558:i32 = phi %2557, %2550
    %2562:i32 = iadd %2558, %33
    %2559:i64 = iext %2558
    %2560:i64 = sfill 32 %2559
    %2561:i64 = imul %2560, %32
    %2563:ctrl, %2564:phisel = region %2555, %4816
    %5149:i32 = phi %2564, %2550, %2562
    %2565:ptr = phi %2564, %5147, %5148
    %2566:ptr = phi %4612, %2915, %2936, %4965, %3879, %2926, %4720, %2932, %5143, %5128, %2746, %2565
    %2567:ptr = phi %4614, %2204, %2566
    %2568:ptr = phi %2519, %2567
    %3061:ptr = phi %3058, %2568
    %2569:ptr = phi %3064, %2567, %2568
    %2570:ptr = phi %3066, %3061, %2569
    %2571:ptr = phi %3076, %2570
    %2572:ptr = phi %2449, %2571
    %2645:ptr = phi %2618, %2572
    %2646:ptr = phi %2620, %2645
    %2647:ptr = phi %2627, %2646
    %2648:ptr = phi %2629, %2647
    %2649:ptr = phi %2638, %2648
    %4447:ptr = phi %4431, %2649, %4446
    %2573:ptr = phi %2459, %2571, %4447
    %2574:ptr = phi %2712, %2573
    %2575:ptr = phi %2722, %2574
    %2576:ptr = phi %2724, %2575
    %2577:ptr = phi %2884, %2934, %2576
    %5129:ptr = phi %2399, %2577
    %2578:ptr = phi %2392, %2577
    %2579:ptr = phi %2966, %2578
    %2580:ptr = phi %3129, %2977, %2579
    %2581:ptr = phi %3150, %2580
    %2582:ptr = phi %3188, %2581, %3166
    %2583:ptr = phi %3212, %3201, %2582
    %2584:ptr = phi %3230, %2583
    %2585:ptr = phi %3271, %2584, %3246
    %2586:ptr = phi %3295, %3284, %2585
    %2587:ptr = phi %3306, %2586
    %2588:ptr = phi %3308, %3146, %3226, %2587
    %2589:ptr = phi %3348, %2588, %5127
    %2590:ptr = phi %3358, %2589
    %2591:ptr = phi %3360, %3380, %2590
    %2592:ptr = phi %3388, %2591
    %2593:ptr = phi %3399, %2592, %3396
    %2594:ctrl, %2595:i32 = load.1 %3398, %2593
    %2596:ctrl, %2597:ctrl = brcond %2594, %2595
    %2598:ctrl, %2599:phisel = region %2596
    %2600:ptr = phi %2599, %2593
    %2601:ctrl, %2602:phisel = region %2597
    %5633:i32 = phi %2602, %2289
    %5122:ptr = phi %2602, %2593
    %2603:i32 = phi %2602, %3410
    %2604:i32 = phi %4188, %3411, %2603
    %5121:i32 = and %2604, %29
    %2605:i32 = phi %2295, %2604, %5052
    %2606:i32 = phi %4612, %2890, %2905, %4963, %3878, %2895, %4719, %2901, %2605, %3319, %2767, %2773
    %2607:i32 = phi %4614, %2200, %2606
    %2608:i32 = phi %3064, %2607, %3067
    %2609:i32 = phi %3066, %3068, %2608
    %2610:i32 = phi %3076, %2609
    %2611:i32 = phi %2449, %2610
    %2612:i32 = and %2611, %29
    %2613:i32 = and %2612, %29
    %2614:i32 = icmp eq %2613, %37
    %2615:ctrl, %2616:ctrl = brcond %2448, %2614
    %2617:ctrl, %2618:phisel = region %2616
    %2619:ctrl, %2620:phisel = region %2617
    %2693:i32 = phi %2618, %2456
    %2694:i32 = phi %2620, %2693
    %2687:i32 = phi %2618, %2455
    %2688:i32 = phi %2620, %2687
    %2681:i32 = phi %2618, %2454
    %2682:i32 = phi %2620, %2681
    %2675:i32 = phi %2618, %2453
    %2676:i32 = phi %2620, %2675
    %2669:i32 = phi %2618, %2452
    %2670:i32 = phi %2620, %2669
    %2663:i32 = phi %2618, %2451
    %2664:i32 = phi %2620, %2663
    %2657:i32 = phi %2618, %2450
    %2658:i32 = phi %2620, %2657
    %2639:i32 = phi %2618, %2611
    %2640:i32 = phi %2620, %2639
    %2621:i32 = phi %2618, %2613
    %2622:i32 = phi %2620, %2621
    %2623:i32 = icmp eq %2622, %36
    %2624:ctrl, %2625:ctrl = brcond %2619, %2623
    %2626:ctrl, %2627:phisel = region %2625
    %2628:ctrl, %2629:phisel = region %2626
    %2695:i32 = phi %2627, %2694
    %2696:i32 = phi %2629, %2695
    %2689:i32 = phi %2627, %2688
    %2690:i32 = phi %2629, %2689
    %2683:i32 = phi %2627, %2682
    %2684:i32 = phi %2629, %2683
    %2677:i32 = phi %2627, %2676
    %2678:i32 = phi %2629, %2677
    %2671:i32 = phi %2627, %2670
    %2672:i32 = phi %2629, %2671
    %2665:i32 = phi %2627, %2664
    %2666:i32 = phi %2629, %2665
    %2659:i32 = phi %2627, %2658
    %2660:i32 = phi %2629, %2659
    %2641:i32 = phi %2627, %2640
    %2642:i32 = phi %2629, %2641
    %2630:i32 = phi %2627, %2622
    %2631:i32 = phi %2629, %2630
    %2632:i32 = icmp eq %2631, %43
    %2633:ctrl, %2634:ctrl = brcond %2628, %2632
    %2635:ctrl, %2636:phisel = region %2615, %2624, %2633
    %4206:ptr = phi %2636, %4200, %4202, %4204
    %2698:i32 = phi %2636, %2456, %2694, %2696
    %2692:i32 = phi %2636, %2455, %2688, %2690
    %2686:i32 = phi %2636, %2454, %2682, %2684
    %2680:i32 = phi %2636, %2453, %2676, %2678
    %2674:i32 = phi %2636, %2452, %2670, %2672
    %2668:i32 = phi %2636, %2451, %2664, %2666
    %2662:i32 = phi %2636, %2450, %2658, %2660
    %2656:i32 = phi %2636, %2528, %2652, %2654
    %2650:ptr = phi %2636, %2572, %2646, %2648
    %2644:i32 = phi %2636, %2611, %2640, %2642
    %2637:ctrl, %2638:phisel = region %2634
    %2697:i32 = phi %2638, %2696
    %2691:i32 = phi %2638, %2690
    %2685:i32 = phi %2638, %2684
    %2679:i32 = phi %2638, %2678
    %2673:i32 = phi %2638, %2672
    %2667:i32 = phi %2638, %2666
    %2661:i32 = phi %2638, %2660
    %2643:i32 = phi %2638, %2642
    %4445:i32 = phi %4431, %2643, %4444
    %2705:i32 = phi %2459, %2610, %4445
    %2706:i32 = and %2705, %29
    %2707:i32 = and %2706, %29
    %2708:i32 = icmp ult %60, %2707
    %2709:ctrl, %2710:ctrl = brcond %2458, %2708
    %2711:ctrl, %2712:phisel = region %2709
    %5574:i32 = phi %2712, %2302
    %5453:i32 = phi %2712, %2329
    %5380:i32 = phi %2712, %2354
    %5306:i32 = phi %2712, %2408
    %5209:i32 = phi %2712, %2460
    %4601:ptr = phi %2712, %4539
    %2761:i32 = phi %2712, %2705
    %2713:i32 = phi %2712, %2707
    %2714:i32 = icmp eq %2713, %59
    %2715:ctrl, %2716:ctrl = brcond %2711, %2714
    %2717:ctrl, %2718:phisel = region %2715
    %2719:ctrl, %2720:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %2717, %5
    %5652:i32 = phi %2718, %2270
    %5654:i32 = phi %2536, %5652
    %5653:i32 = phi %2539, %5652
    %5655:i32 = phi %2549, %5653, %5654
    %5656:i32 = phi %2557, %5655
    %5657:i32 = phi %2564, %5655, %5656
    %5627:i32 = phi %2718, %5574
    %5629:i32 = phi %2536, %5627
    %5628:i32 = phi %2539, %5627
    %5630:i32 = phi %2549, %5628, %5629
    %5631:i32 = phi %2557, %5630
    %5632:i32 = phi %2564, %5630, %5631
    %5507:i32 = phi %2718, %5453
    %5509:i32 = phi %2536, %5507
    %5508:i32 = phi %2539, %5507
    %5510:i32 = phi %2549, %5508, %5509
    %5511:i32 = phi %2557, %5510
    %5512:i32 = phi %2564, %5510, %5511
    %5434:i32 = phi %2718, %5380
    %5436:i32 = phi %2536, %5434
    %5435:i32 = phi %2539, %5434
    %5437:i32 = phi %2549, %5435, %5436
    %5438:i32 = phi %2557, %5437
    %5439:i32 = phi %2564, %5437, %5438
    %5366:i32 = phi %2718, %2384
    %5368:i32 = phi %2536, %5366
    %5367:i32 = phi %2539, %5366
    %5369:i32 = phi %2549, %5367, %5368
    %5370:i32 = phi %2557, %5369
    %5371:i32 = phi %2564, %5369, %5370
    %5345:i32 = phi %2718, %5306
    %5347:i32 = phi %2536, %5345
    %5346:i32 = phi %2539, %5345
    %5348:i32 = phi %2549, %5346, %5347
    %5349:i32 = phi %2557, %5348
    %5350:i32 = phi %2564, %5348, %5349
    %5263:i32 = phi %2718, %5209
    %5265:i32 = phi %2536, %5263
    %5264:i32 = phi %2539, %5263
    %5266:i32 = phi %2549, %5264, %5265
    %5267:i32 = phi %2557, %5266
    %5268:i32 = phi %2564, %5266, %5267
    %5144:ptr = phi %2718, %2574
    %5146:ptr = phi %2536, %5144
    %5145:ptr = phi %2539, %5144
    %5147:ptr = phi %2549, %5145, %5146
    %5148:ptr = phi %2557, %5147
    %4661:ptr = phi %2718, %4601
    %4663:ptr = phi %2536, %4661
    %4662:ptr = phi %2539, %4661
    %4664:ptr = phi %2549, %4662, %4663
    %4665:ptr = phi %2557, %4664
    %4666:ptr = phi %2564, %4664, %4665
    %2768:i32 = phi %2718, %2761
    %2770:i32 = phi %2536, %2768
    %2769:i32 = phi %2539, %2768
    %2771:i32 = phi %2549, %2769, %2770
    %2772:i32 = phi %2557, %2771
    %2773:i32 = phi %2564, %2771, %2772
    %2721:ctrl, %2722:phisel = region %2716
    %2723:ctrl, %2724:phisel = region %2721
    %5575:i32 = phi %2722, %5574
    %5576:i32 = phi %2724, %5575
    %5454:i32 = phi %2722, %5453
    %5455:i32 = phi %2724, %5454
    %5381:i32 = phi %2722, %5380
    %5382:i32 = phi %2724, %5381
    %5307:i32 = phi %2722, %5306
    %5308:i32 = phi %2724, %5307
    %5210:i32 = phi %2722, %5209
    %5211:i32 = phi %2724, %5210
    %4602:ptr = phi %2722, %4601
    %4603:ptr = phi %2724, %4602
    %2762:i32 = phi %2722, %2761
    %2763:i32 = phi %2724, %2762
    %2755:i32 = phi %2722, %2530
    %2756:i32 = phi %2724, %2755
    %2725:i32 = phi %2722, %2713
    %2726:i32 = phi %2724, %2725
    %2727:i32 = icmp eq %2726, %58
    %2728:ctrl, %2729:ctrl = brcond %2723, %2727
    %2730:ctrl, %2731:phisel = region %2729
    %2732:ctrl, %2733:phisel = region %2730
    %5577:i32 = phi %2731, %5576
    %5578:i32 = phi %2733, %5577
    %5456:i32 = phi %2731, %5455
    %5457:i32 = phi %2733, %5456
    %5383:i32 = phi %2731, %5382
    %5384:i32 = phi %2733, %5383
    %5309:i32 = phi %2731, %5308
    %5310:i32 = phi %2733, %5309
    %5212:i32 = phi %2731, %5211
    %5213:i32 = phi %2733, %5212
    %4604:ptr = phi %2731, %4603
    %4605:ptr = phi %2733, %4604
    %2764:i32 = phi %2731, %2763
    %2765:i32 = phi %2733, %2764
    %2757:i32 = phi %2731, %2756
    %2758:i32 = phi %2733, %2757
    %2751:i32 = phi %2731, %2272
    %2752:i32 = phi %2733, %2751
    %2747:i32 = phi %2731, %2386
    %2748:i32 = phi %2733, %2747
    %2743:ptr = phi %2731, %2576
    %2744:ptr = phi %2733, %2743
    %2734:i32 = phi %2731, %2726
    %2735:i32 = phi %2733, %2734
    %2736:i32 = icmp eq %2735, %41
    %2737:ctrl, %2738:ctrl = brcond %2732, %2736
    %2739:ctrl, %2740:phisel = region %2737
    %5581:i32 = phi %2740, %5578
    %5460:i32 = phi %2740, %5457
    %5387:i32 = phi %2740, %5384
    %5313:i32 = phi %2740, %5310
    %5216:i32 = phi %2740, %5213
    %4608:ptr = phi %2740, %4605
    %4609:ctrl = call @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::PerMilleSymbolTChar[System.Char]()" %2739, %4608, %25
    %2767:i32 = phi %2740, %2765
    %2760:i32 = phi %2740, %2758
    %2754:i32 = phi %2740, %2752
    %2750:i32 = phi %2740, %2748
    %2746:ptr = phi %2740, %2744
    %2741:ctrl, %2742:phisel = region %2738
    %5579:i32 = phi %2742, %5578
    %5458:i32 = phi %2742, %5457
    %5385:i32 = phi %2742, %5384
    %5311:i32 = phi %2742, %5310
    %5214:i32 = phi %2742, %5213
    %4606:ptr = phi %2742, %4605
    %2766:i32 = phi %2742, %2765
    %2759:i32 = phi %2742, %2758
    %2753:i32 = phi %2742, %2752
    %2749:i32 = phi %2742, %2748
    %2745:ptr = phi %2742, %2744
    %2774:ctrl, %2775:phisel = region %2710
    %5094:i32 = phi %2775, %2269
    %5054:i32 = phi %2775, %2383
    %2937:i32 = phi %2775, %2529
    %2914:ptr = phi %2775, %2573
    %2889:i32 = phi %2775, %2705
    %2776:i32 = phi %2775, %2707
    %2777:i32 = isub %2776, %47
    %2783:i32 = icmp ult %2777, %62
    %2784:ctrl, %2785:ctrl = brcond %2774, %2783
    %2786:ctrl, %2787:phisel = region %2784
    %2824:ctrl, %2825:phisel = region %2785
    %2826:ctrl, %2827:phisel = region %2824
    %5109:i32 = phi %2825, %5094
    %5110:i32 = phi %2827, %5109
    %5069:i32 = phi %2825, %5054
    %5070:i32 = phi %2827, %5069
    %4557:ptr = phi %2825, %4540
    %4558:ptr = phi %2827, %4557
    %2940:i32 = phi %2825, %2937
    %2941:i32 = phi %2827, %2940
    %2917:ptr = phi %2825, %2914
    %2918:ptr = phi %2827, %2917
    %2892:i32 = phi %2825, %2889
    %2893:i32 = phi %2827, %2892
    %2828:i32 = phi %2825, %2776
    %2829:i32 = phi %2827, %2828
    %2830:i32 = isub %2829, %50
    %2835:i32 = icmp ult %2830, %61
    %2836:ctrl, %2837:ctrl = brcond %2826, %2835
    %2838:ctrl, %2839:phisel = region %2836
    %2874:ctrl, %2875:phisel = region %2837
    %2876:ctrl, %2877:phisel = region %2874
    %5571:i32 = phi %2875, %2305
    %5572:i32 = phi %2877, %5571
    %5450:i32 = phi %2875, %2332
    %5451:i32 = phi %2877, %5450
    %5377:i32 = phi %2875, %2357
    %5378:i32 = phi %2877, %5377
    %5303:i32 = phi %2875, %2411
    %5304:i32 = phi %2877, %5303
    %5206:i32 = phi %2875, %2463
    %5207:i32 = phi %2877, %5206
    %5117:i32 = phi %2875, %5110
    %5118:i32 = phi %2877, %5117
    %5090:i32 = phi %2875, %5070
    %5091:i32 = phi %2877, %5090
    %4598:ptr = phi %2875, %4558
    %4599:ptr = phi %2877, %4598
    %2956:i32 = phi %2875, %2941
    %2957:i32 = phi %2877, %2956
    %2933:ptr = phi %2875, %2918
    %2934:ptr = phi %2877, %2933
    %2902:i32 = phi %2875, %2893
    %2903:i32 = phi %2877, %2902
    %2878:i32 = phi %2875, %2829
    %2879:i32 = phi %2877, %2878
    %2880:i32 = icmp eq %2879, %60
    %2881:ctrl, %2882:ctrl = brcond %2876, %2880
    %2883:ctrl, %2884:phisel = region %2881, %2728
    %5582:i32 = phi %2884, %5572, %5576
    %5613:i32 = phi %2399, %5582
    %5583:i32 = phi %2392, %5582
    %5461:i32 = phi %2884, %5451, %5455
    %5492:i32 = phi %2399, %5461
    %5462:i32 = phi %2392, %5461
    %5388:i32 = phi %2884, %5378, %5382
    %5419:i32 = phi %2399, %5388
    %5389:i32 = phi %2392, %5388
    %5314:i32 = phi %2884, %5304, %5308
    %5315:i32 = phi %2392, %5314
    %5217:i32 = phi %2884, %5207, %5211
    %5248:i32 = phi %2399, %5217
    %5218:i32 = phi %2392, %5217
    %4617:ptr = phi %2884, %4599, %4603
    %4647:ptr = phi %2399, %4617
    %4618:ptr = phi %2392, %4617
    %2960:i32 = phi %2884, %2957, %2756
    %2984:i32 = phi %2399, %2960
    %2961:i32 = phi %2392, %2960
    %2962:i32 = icmp sle %2394, %2961
    %2963:ctrl, %2964:ctrl = brcond %2393, %2962
    %2965:ctrl, %2966:phisel = region %2963
    %5585:i32 = phi %2966, %5583
    %5464:i32 = phi %2966, %5462
    %5391:i32 = phi %2966, %5389
    %5317:i32 = phi %2966, %5315
    %5220:i32 = phi %2966, %5218
    %4620:ptr = phi %2966, %4618
    %2971:i32 = phi %2966, %2397
    %2970:i32 = phi %2966, %2961
    %2968:i32 = phi %2966, %2396
    %2967:i32 = phi %2966, %2395
    %2972:ctrl, %2973:phisel = region %2964
    %5584:i32 = phi %2973, %5583
    %5463:i32 = phi %2973, %5462
    %5390:i32 = phi %2973, %5389
    %5316:i32 = phi %2973, %5315
    %5219:i32 = phi %2973, %5218
    %4619:ptr = phi %2973, %4618
    %2983:i32 = phi %2973, %2274
    %2982:i32 = phi %2973, %2397
    %2978:i32 = phi %2973, %2961
    %2979:i64 = iext %2978
    %2980:i64 = sfill 32 %2979
    %2981:i64 = imul %2980, %32
    %2977:ptr = phi %2973, %2578
    %2975:i32 = phi %2973, %2396
    %2974:i32 = phi %2973, %2395
    %2907:i32 = phi %2884, %2903, %2763
    %2909:i32 = phi %2399, %2907
    %2910:i32 = and %2909, %29
    %2911:ctrl, %2912:i32 = call @"System.Char System.Char::System.IUtfChar<System.Char>.CastFrom(System.Char)" %2398, %2910
    %2913:i32 = and %2912, %29
    %2908:i32 = phi %2392, %2907
    %2976:i32 = phi %2973, %2908
    %2969:i32 = phi %2966, %2908
    %2885:ctrl, %2886:phisel = region %2882
    %5573:i32 = phi %2886, %5572
    %5452:i32 = phi %2886, %5451
    %5379:i32 = phi %2886, %5378
    %5305:i32 = phi %2886, %5304
    %5208:i32 = phi %2886, %5207
    %5119:i32 = phi %2886, %5118
    %5092:i32 = phi %2886, %5091
    %4600:ptr = phi %2886, %4599
    %2958:i32 = phi %2886, %2957
    %2935:ptr = phi %2886, %2934
    %2904:i32 = phi %2886, %2903
    %2834:i32 = icmp eq %2830, %28
    %2840:ctrl, %2841:ctrl = brcond %2838, %2834
    %2842:ctrl, %2843:phisel = region %2840
    %5570:i32 = phi %2843, %2305
    %5449:i32 = phi %2843, %2332
    %5376:i32 = phi %2843, %2357
    %5302:i32 = phi %2843, %2411
    %5205:i32 = phi %2843, %2463
    %5116:i32 = phi %2843, %5110
    %5089:i32 = phi %2843, %5070
    %4597:ptr = phi %2843, %4558
    %2955:i32 = phi %2843, %2941
    %2932:ptr = phi %2843, %2918
    %2901:i32 = phi %2843, %2893
    %2844:ctrl, %2845:phisel = region %2841
    %2833:i32 = icmp eq %2830, %33
    %2846:ctrl, %2847:ctrl = brcond %2844, %2833
    %2848:ctrl, %2849:phisel = region %2847
    %2832:i32 = icmp eq %2830, %30
    %2850:ctrl, %2851:ctrl = brcond %2848, %2832
    %2852:ctrl, %2853:phisel = region %2850
    %5559:i32 = phi %2853, %2305
    %5561:i32 = phi %2370, %5559
    %5566:i32 = phi %2339, %5561
    %5562:i32 = phi %2342, %5561
    %5564:i32 = phi %2256, %5562
    %5563:i32 = phi %2259, %5562
    %5560:i32 = phi %2365, %5559
    %5291:i32 = phi %2853, %2411
    %5293:i32 = phi %2370, %5291
    %5298:i32 = phi %2339, %5293
    %5294:i32 = phi %2342, %5293
    %5296:i32 = phi %2256, %5294
    %5295:i32 = phi %2259, %5294
    %5292:i32 = phi %2365, %5291
    %5194:i32 = phi %2853, %2463
    %5196:i32 = phi %2370, %5194
    %5201:i32 = phi %2339, %5196
    %5197:i32 = phi %2342, %5196
    %5199:i32 = phi %2256, %5197
    %5198:i32 = phi %2259, %5197
    %5195:i32 = phi %2365, %5194
    %5114:i32 = phi %2853, %5110
    %5374:i32 = phi %2370, %5114
    %5447:i32 = phi %2342, %5374
    %5448:i32 = phi %2256, %5447
    %5375:i32 = phi %2339, %5374
    %5115:i32 = phi %2365, %5114
    %5087:i32 = phi %2853, %5070
    %5088:i32 = phi %2365, %5087
    %4584:ptr = phi %2853, %4558
    %4586:ptr = phi %2370, %4584
    %4591:ptr = phi %2339, %4586
    %4587:ptr = phi %2342, %4586
    %4589:ptr = phi %2256, %4587
    %4588:ptr = phi %2259, %4587
    %4585:ptr = phi %2365, %4584
    %2948:i32 = phi %2853, %2941
    %2950:i32 = phi %2370, %2948
    %2954:i32 = phi %2339, %2950
    %2951:i32 = phi %2342, %2950
    %2953:i32 = phi %2256, %2951
    %2952:i32 = phi %2259, %2951
    %2949:i32 = phi %2365, %2948
    %2925:ptr = phi %2853, %2918
    %2927:ptr = phi %2370, %2925
    %2931:ptr = phi %2339, %2927
    %2928:ptr = phi %2342, %2927
    %2930:ptr = phi %2256, %2928
    %2929:ptr = phi %2259, %2928
    %2926:ptr = phi %2365, %2925
    %2894:i32 = phi %2853, %2893
    %2896:i32 = phi %2370, %2894
    %2900:i32 = phi %2339, %2896
    %2897:i32 = phi %2342, %2896
    %2899:i32 = phi %2256, %2897
    %2898:i32 = phi %2259, %2897
    %2895:i32 = phi %2365, %2894
    %2854:ctrl, %2855:phisel = region %2851
    %2831:i32 = icmp eq %2830, %48
    %2856:ctrl, %2857:ctrl = brcond %2854, %2831
    %2858:ctrl, %2859:phisel = region %2857
    %2782:i32 = icmp eq %2777, %28
    %2788:ctrl, %2789:ctrl = brcond %2786, %2782
    %2790:ctrl, %2791:phisel = region %2789
    %2781:i32 = icmp eq %2777, %33
    %2792:ctrl, %2793:ctrl = brcond %2790, %2781
    %2860:ctrl, %2861:phisel = region %2792, %2858
    %5111:i32 = phi %2861, %5094, %5110
    %5180:i32 = phi %2481, %5111
    %5112:i32 = phi %2470, %5111
    %5515:i32 = phi %2315, %5112
    %5113:i32 = phi %2312, %5112
    %5516:i32 = phi %2317, %5515, %5113
    %5071:i32 = phi %2861, %5054, %5070
    %5076:i32 = phi %2481, %5071
    %5072:i32 = phi %2470, %5071
    %5074:i32 = phi %2312, %5072
    %5073:i32 = phi %2315, %5072
    %5075:i32 = phi %2317, %5073, %5074
    %4559:ptr = phi %2861, %4540, %4558
    %4564:ptr = phi %2481, %4559
    %4560:ptr = phi %2470, %4559
    %4562:ptr = phi %2312, %4560
    %4561:ptr = phi %2315, %4560
    %4563:ptr = phi %2317, %4561, %4562
    %2942:i32 = phi %2861, %2937, %2941
    %2947:i32 = phi %2481, %2942
    %2943:i32 = phi %2470, %2942
    %2945:i32 = phi %2312, %2943
    %2944:i32 = phi %2315, %2943
    %2946:i32 = phi %2317, %2944, %2945
    %2919:ptr = phi %2861, %2914, %2918
    %2924:ptr = phi %2481, %2919
    %2920:ptr = phi %2470, %2919
    %2922:ptr = phi %2312, %2920
    %2921:ptr = phi %2315, %2920
    %2923:ptr = phi %2317, %2921, %2922
    %2868:i32 = phi %2861, %2330, %2332
    %2869:i32 = phi %2470, %2868
    %2870:i32 = phi %2312, %2869
    %2862:i32 = phi %2861, %2355, %2357
    %2867:i32 = phi %2481, %2862
    %2863:i32 = phi %2470, %2862
    %2865:i32 = phi %2312, %2863
    %2864:i32 = phi %2315, %2863
    %2866:i32 = phi %2317, %2864, %2865
    %2794:ctrl, %2795:phisel = region %2793
    %2780:i32 = icmp eq %2777, %30
    %2796:ctrl, %2797:ctrl = brcond %2794, %2780
    %2798:ctrl, %2799:phisel = region %2797
    %2779:i32 = icmp eq %2777, %48
    %2800:ctrl, %2801:ctrl = brcond %2798, %2779
    %2802:ctrl, %2803:phisel = region %2800
    %5095:i32 = phi %2803, %5094
    %5055:i32 = phi %2803, %5054
    %2938:i32 = phi %2803, %2937
    %2915:ptr = phi %2803, %2914
    %2890:i32 = phi %2803, %2889
    %2808:i32 = phi %2803, %2303
    %2807:i32 = phi %2803, %2330
    %2806:i32 = phi %2803, %2355
    %2805:i32 = phi %2803, %2409
    %2804:i32 = phi %2803, %2461
    %2810:ctrl, %2811:phisel = region %2801
    %2778:i32 = icmp eq %2777, %46
    %2812:ctrl, %2813:ctrl = brcond %2810, %2778
    %2887:ctrl, %2888:phisel = region %2796, %2812, %2846, %2856, %2885, %2741
    %5580:i32 = phi %2888, %2303, %2303, %2305, %2305, %5573, %5579
    %5459:i32 = phi %2888, %2330, %2330, %2332, %2332, %5452, %5458
    %5386:i32 = phi %2888, %2355, %2355, %2357, %2357, %5379, %5385
    %5312:i32 = phi %2888, %2409, %2409, %2411, %2411, %5305, %5311
    %5215:i32 = phi %2888, %2461, %2461, %2463, %2463, %5208, %5214
    %5120:i32 = phi %2888, %5094, %5094, %5110, %5110, %5119, %2753
    %5093:i32 = phi %2888, %5054, %5054, %5070, %5070, %5092, %2749
    %4607:ptr = phi %2888, %4540, %4540, %4558, %4558, %4600, %4606
    %2959:i32 = phi %2888, %2937, %2937, %2941, %2941, %2958, %2759
    %2936:ptr = phi %2888, %2914, %2914, %2918, %2918, %2935, %2745
    %2905:i32 = phi %2888, %2889, %2889, %2893, %2893, %2904, %2766
    %2906:i32 = and %2905, %29
    %2814:ctrl, %2815:phisel = region %2813
    %2816:ctrl, %2817:phisel = region %2788, %2814
    %5096:i32 = phi %2817, %5094, %5094
    %5056:i32 = phi %2817, %5054, %5054
    %4544:ptr = phi %2817, %4540, %4540
    %2939:i32 = phi %2817, %2937, %2937
    %2916:ptr = phi %2817, %2914, %2914
    %2891:i32 = phi %2817, %2889, %2889
    %3762:i32 = phi %3730, %2891, %3761
    %3763:i32 = phi %3738, %3762
    %3764:i32 = phi %3751, %3763
    %3765:i32 = icmp eq %3781, %3764
    %3766:i32 = icmp eq %3765, %28
    %3767:i32 = phi %3783, %3766, %28
    %3768:i32 = and %3767, %38
    %3769:ctrl, %3770:ctrl = brcond %3782, %3768
    %3771:ctrl, %3772:phisel = region %3769
    %3800:ctrl, %3801:phisel = region %3770
    %3802:ctrl, %3803:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %3800, %5
    %3804:ptr = phi %3801, %3726
    %3824:ptr = phi %3823, %3804
    %3850:ptr = phi %3849, %3833, %3824
    %3864:ptr = phi %3863, %3850
    %3874:ptr = phi %3873, %3850, %3864
    %3705:ptr = phi %4612, %3722, %4009, %3988, %3874, %3990, %3704, %3999, %4708, %4041, %4011, %4717
    %3706:ptr = phi %4614, %2192, %3705
    %3707:ptr = phi %2519, %3706
    %3709:ptr = phi %3064, %3706, %3707
    %3708:ptr = phi %3058, %3707
    %3710:ptr = phi %3066, %3708, %3709
    %3712:ptr = phi %3076, %3710
    %3713:ptr = phi %2449, %3712
    %3714:ptr = phi %2618, %3713
    %3715:ptr = phi %2620, %3714
    %3716:ptr = phi %2627, %3715
    %3717:ptr = phi %2629, %3716
    %3719:ptr = phi %2636, %3713, %3715, %3717
    %3718:ptr = phi %2638, %3717
    %4437:ptr = phi %4431, %3718, %4436
    %3720:ptr = phi %2459, %3712, %4437
    %4003:ptr = phi %2712, %3720
    %4712:ptr = phi %2718, %4003
    %4714:ptr = phi %2536, %4712
    %4713:ptr = phi %2539, %4712
    %4715:ptr = phi %2549, %4713, %4714
    %4716:ptr = phi %2557, %4715
    %4717:ptr = phi %2564, %4715, %4716
    %4004:ptr = phi %2722, %4003
    %4005:ptr = phi %2724, %4004
    %4006:ptr = phi %2731, %4005
    %4007:ptr = phi %2733, %4006
    %4011:ptr = phi %2740, %4007
    %4610:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.ReadOnlySpan`1[System.Char])" %4609, %4011, %25
    %4008:ptr = phi %2742, %4007
    %3721:ptr = phi %2775, %3720
    %3963:ptr = phi %2825, %3721
    %3964:ptr = phi %2827, %3963
    %4000:ptr = phi %2875, %3964
    %4001:ptr = phi %2877, %4000
    %4012:ptr = phi %2884, %4001, %4005
    %4043:ptr = phi %2399, %4012
    %4709:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.Char)" %2911, %4043, %2913
    %4710:ctrl, %4711:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %4709, %5
    %2985:i32 = icmp slt %2984, %4711
    %2986:i32 = and %2985, %38
    %2987:ctrl, %2988:ctrl = brcond %4710, %2986
    %2989:ctrl, %2990:phisel = region %2987
    %5638:i32 = phi %2990, %5637
    %5614:i32 = phi %2990, %5613
    %5493:i32 = phi %2990, %5492
    %5420:i32 = phi %2990, %5419
    %5352:i32 = phi %2990, %5351
    %5249:i32 = phi %2990, %5248
    %5130:ptr = phi %2990, %5129
    %4648:ptr = phi %2990, %4647
    %2996:i32 = phi %2990, %2400
    %2992:i32 = phi %2990, %2984
    %2993:i64 = iext %2992
    %2994:i64 = sfill 32 %2993
    %2995:i64 = imul %2994, %32
    %2991:i32 = phi %2990, %2909
    %4044:ptr = phi %2990, %4043
    %4013:ptr = phi %2392, %4012
    %4015:ptr = phi %2966, %4013
    %4014:ptr = phi %2973, %4013
    %4002:ptr = phi %2886, %4001
    %4009:ptr = phi %2888, %3721, %3721, %3964, %3964, %4002, %4008
    %4010:ctrl = call @"System.Void System.Number::AppendUnknownChar[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Char)" %2887, %4009, %2906
    %3999:ptr = phi %2843, %3964
    %3989:ptr = phi %2853, %3964
    %3991:ptr = phi %2370, %3989
    %3996:ptr = phi %2339, %3991
    %3992:ptr = phi %2342, %3991
    %3994:ptr = phi %2256, %3992
    %3993:ptr = phi %2259, %3992
    %3990:ptr = phi %2365, %3989
    %3965:ptr = phi %2861, %3721, %3964
    %3970:ptr = phi %2481, %3965
    %3966:ptr = phi %2470, %3965
    %3968:ptr = phi %2312, %3966
    %3967:ptr = phi %2315, %3966
    %3969:ptr = phi %2317, %3967, %3968
    %3723:ptr = phi %2817, %3721, %3721
    %3724:ptr = phi %3730, %3723, %3727
    %3725:ptr = phi %3758, %3724, %3739
    %3726:ptr = phi %3783, %3752, %3725
    %3727:ptr = phi %3772, %3726
    %3728:ctrl = call @"System.Void System.Number::AppendUnknownChar[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Char)" %3887, %3727, %3889
    %3729:ctrl, %3730:phisel = region %2816, %3728
    %3731:ctrl, %3732:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %3729, %5
    %3733:i32 = phi %3730, %2939, %3890
    %3734:i32 = icmp sle %3732, %3733
    %3735:ctrl, %3736:ctrl = brcond %3731, %3734
    %3737:ctrl, %3738:phisel = region %3736
    %3740:i32 = phi %3738, %3733
    %3741:i64 = iext %3740
    %3742:i64 = sfill 32 %3741
    %3743:i64 = imul %3742, %32
    %3744:i64 = iadd %3790, %3743
    %3745:ptr = inttoptr %3744
    %3746:ctrl, %3747:i32 = load.2 %3737, %3745
    %3748:ctrl, %3749:ctrl = brcond %3746, %3747
    %3750:ctrl, %3751:phisel = region %3748
    %3753:i32 = phi %3751, %3740
    %3754:i64 = iext %3753
    %3755:i64 = sfill 32 %3754
    %3756:i64 = imul %3755, %32
    %3757:ctrl, %3758:phisel = region %3735, %3749
    %3816:i32 = phi %3758, %3733, %3740
    %3789:ptr = phi %3758, %3786, %3787
    %3784:ptr = phi %3783, %3788, %3789
    %3805:ptr = phi %3801, %3784
    %3825:ptr = phi %3823, %3805
    %3851:ptr = phi %3849, %3834, %3825
    %3865:ptr = phi %3863, %3851
    %3875:ptr = phi %3873, %3851, %3865
    %3521:ptr = phi %4612, %3537, %4738, %3610, %3875, %3668, %4727, %4728, %3520, %4770, %4739, %4788
    %3522:ptr = phi %4614, %2204, %3521
    %3523:ptr = phi %2519, %3522
    %3525:ptr = phi %3064, %3522, %3523
    %3524:ptr = phi %3058, %3523
    %3526:ptr = phi %3066, %3524, %3525
    %3527:ptr = phi %3076, %3526
    %3528:ptr = phi %2449, %3527
    %3529:ptr = phi %2618, %3528
    %3530:ptr = phi %2620, %3529
    %3531:ptr = phi %2627, %3530
    %3532:ptr = phi %2629, %3531
    %3534:ptr = phi %2636, %3528, %3530, %3532
    %3533:ptr = phi %2638, %3532
    %4439:ptr = phi %4431, %3533, %4438
    %3535:ptr = phi %2459, %3527, %4439
    %4732:ptr = phi %2712, %3535
    %4783:ptr = phi %2718, %4732
    %4785:ptr = phi %2536, %4783
    %4784:ptr = phi %2539, %4783
    %4786:ptr = phi %2549, %4784, %4785
    %4787:ptr = phi %2557, %4786
    %4788:ptr = phi %2564, %4786, %4787
    %4733:ptr = phi %2722, %4732
    %4734:ptr = phi %2724, %4733
    %4735:ptr = phi %2731, %4734
    %4736:ptr = phi %2733, %4735
    %4739:ptr = phi %2740, %4736
    %4737:ptr = phi %2742, %4736
    %3536:ptr = phi %2775, %3535
    %3539:ptr = phi %2825, %3536
    %3540:ptr = phi %2827, %3539
    %4729:ptr = phi %2875, %3540
    %4730:ptr = phi %2877, %4729
    %4740:ptr = phi %2884, %4730, %4734
    %4771:ptr = phi %2399, %4740
    %4772:ptr = phi %2990, %4771
    %4741:ptr = phi %2392, %4740
    %4743:ptr = phi %2966, %4741
    %4742:ptr = phi %2973, %4741
    %4731:ptr = phi %2886, %4730
    %4738:ptr = phi %2888, %3536, %3536, %3540, %3540, %4731, %4737
    %4728:ptr = phi %2843, %3540
    %3667:ptr = phi %2853, %3540
    %3669:ptr = phi %2370, %3667
    %4724:ptr = phi %2339, %3669
    %3670:ptr = phi %2342, %3669
    %4722:ptr = phi %2256, %3670
    %3671:ptr = phi %2259, %3670
    %3672:ctrl, %3673:i32 = load.1 %2258, %3671
    %3674:ctrl, %3675:phisel = region %3672, %2255
    %3676:ctrl, %3677:phisel = region %3674, %2338
    %5659:i32 = phi %3675, %5658, %2257
    %5565:i32 = phi %3675, %5563, %5564
    %5567:i32 = phi %3677, %5565, %5566
    %5443:i32 = phi %3675, %5441, %5442
    %5444:i32 = phi %3677, %5443, %2340
    %5297:i32 = phi %3675, %5295, %5296
    %5299:i32 = phi %3677, %5297, %5298
    %5200:i32 = phi %3675, %5198, %5199
    %5202:i32 = phi %3677, %5200, %5201
    %4723:ptr = phi %3675, %3671, %4722
    %4725:ptr = phi %3677, %4723, %4724
    %4590:ptr = phi %3675, %4588, %4589
    %4592:ptr = phi %3677, %4590, %4591
    %3995:ptr = phi %3675, %3993, %3994
    %3997:ptr = phi %3677, %3995, %3996
    %3684:i32 = phi %3675, %2952, %2953
    %3685:i32 = phi %3677, %3684, %2954
    %3682:ptr = phi %3675, %2929, %2930
    %3683:ptr = phi %3677, %3682, %2931
    %3680:i32 = phi %3675, %2898, %2899
    %3681:i32 = phi %3677, %3680, %2900
    %3687:i32 = icmp ult %28, %3673
    %3688:i32 = phi %3675, %3687, %28
    %3689:i32 = phi %3677, %3688, %33
    %3690:i32 = and %3689, %38
    %3691:ctrl, %3692:ctrl = brcond %3676, %3690
    %3693:ctrl, %3694:phisel = region %3691
    %5568:i32 = phi %3694, %5567
    %5445:i32 = phi %3694, %5444
    %5300:i32 = phi %3694, %5299
    %5203:i32 = phi %3694, %5202
    %4726:ptr = phi %3694, %4725
    %4593:ptr = phi %3694, %4592
    %4594:ctrl = call @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NumberDecimalSeparatorTChar[System.Char]()" %3693, %4593, %24
    %3998:ptr = phi %3694, %3997
    %4595:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.ReadOnlySpan`1[System.Char])" %4594, %3998, %24
    %3700:i32 = phi %3694, %2347
    %3699:i32 = phi %3694, %2376
    %3698:i32 = phi %3694, %3685
    %3697:ptr = phi %3694, %3683
    %3696:i32 = phi %3694, %3681
    %3702:ctrl, %3703:phisel = region %3692, %4595
    %5569:i32 = phi %3703, %5567, %5568
    %5446:i32 = phi %3703, %5444, %5445
    %5301:i32 = phi %3703, %5299, %5300
    %5204:i32 = phi %3703, %5202, %5203
    %4727:ptr = phi %3703, %4725, %4726
    %4721:i32 = phi %3703, %3685, %3698
    %4720:ptr = phi %3703, %3683, %3697
    %4719:i32 = phi %3703, %3681, %3696
    %4596:ptr = phi %3703, %4592, %4593
    %3704:ptr = phi %3703, %3997, %3998
    %3668:ptr = phi %2365, %3667
    %3541:ptr = phi %2861, %3536, %3540
    %3546:ptr = phi %2481, %3541
    %3547:ctrl, %3548:i32 = load.1 %2480, %3546
    %3549:ctrl, %3550:ctrl = brcond %3547, %3548
    %3551:ctrl, %3552:phisel = region %3549
    %5546:i32 = phi %3552, %5541
    %5185:i32 = phi %3552, %5180
    %5178:i32 = phi %3552, %2483
    %5081:i32 = phi %3552, %5076
    %4569:ptr = phi %3552, %4564
    %3975:ptr = phi %3552, %3970
    %3592:i32 = phi %3552, %2867
    %3590:i32 = phi %3552, %2947
    %3589:ptr = phi %3552, %2924
    %3553:ptr = phi %3552, %3546
    %3585:i64 = ptrtoint %3553
    %3586:i64 = iadd %3585, %35
    %3587:ptr = inttoptr %3586
    %3554:ctrl, %3555:i32 = load.1 %3551, %3553
    %3556:ctrl, %3557:phisel = region %2493, %3554
    %3558:ctrl, %3559:phisel = region %2316, %3556
    %5179:i32 = phi %3557, %5177, %5178
    %3560:i32 = phi %3557, %2495, %3555
    %3561:i32 = and %3560, %29
    %3562:i32 = phi %3559, %2319, %3561
    %3563:i32 = icmp ult %28, %3562
    %3564:i32 = and %3563, %38
    %3565:ctrl, %3566:ctrl = brcond %3558, %3564
    %3567:ctrl, %3568:phisel = region %3565
    %3581:i32 = phi %3568, %2322
    %3582:i32 = phi %2421, %3581
    %5276:i32 = phi %2423, %3581, %3582
    %5175:i32 = phi %2506, %3582
    %5277:i32 = phi %2508, %5175, %5276
    %3569:i32 = phi %3568, %3562
    %3577:i32 = and %3569, %29
    %3578:ctrl, %3579:i32 = call @"System.Char System.Char::System.IUtfChar<System.Char>.CastFrom(System.Char)" %3567, %3577
    %3580:i32 = and %3579, %29
    %3570:i32 = phi %2421, %3569
    %3572:i32 = phi %2423, %3569, %3570
    %3571:i32 = phi %2506, %3570
    %3573:i32 = phi %2508, %3571, %3572
    %3593:ctrl, %3594:phisel = region %3550
    %5542:i32 = phi %3594, %5541
    %5544:i32 = phi %2489, %5542
    %5543:i32 = phi %2492, %5542
    %5545:i32 = phi %2494, %5543, %5544
    %5547:i32 = phi %3557, %5545, %5546
    %5548:i32 = phi %3559, %5514, %5547
    %5549:i32 = phi %3568, %5548
    %5550:i32 = phi %2421, %5549
    %5552:i32 = phi %2423, %5549, %5550
    %5551:i32 = phi %2506, %5550
    %5553:i32 = phi %2508, %5551, %5552
    %5181:i32 = phi %3594, %5180
    %5183:i32 = phi %2489, %5181
    %5182:i32 = phi %2492, %5181
    %5184:i32 = phi %2494, %5182, %5183
    %5186:i32 = phi %3557, %5184, %5185
    %5517:i32 = phi %3559, %5516, %5186
    %5518:i32 = phi %3568, %5517
    %5519:i32 = phi %2421, %5518
    %5521:i32 = phi %2423, %5518, %5519
    %5520:i32 = phi %2506, %5519
    %5522:i32 = phi %2508, %5520, %5521
    %5077:i32 = phi %3594, %5076
    %5079:i32 = phi %2489, %5077
    %5078:i32 = phi %2492, %5077
    %5080:i32 = phi %2494, %5078, %5079
    %5082:i32 = phi %3557, %5080, %5081
    %5083:i32 = phi %3559, %5075, %5082
    %5084:i32 = phi %3568, %5083
    %5085:i32 = phi %2421, %5084
    %5170:i32 = phi %2506, %5085
    %5086:i32 = phi %2423, %5084, %5085
    %5171:i32 = phi %2508, %5170, %5086
    %4565:ptr = phi %3594, %4564
    %4567:ptr = phi %2489, %4565
    %4566:ptr = phi %2492, %4565
    %4568:ptr = phi %2494, %4566, %4567
    %4570:ptr = phi %3557, %4568, %4569
    %4571:ptr = phi %3559, %4563, %4570
    %4572:ptr = phi %3568, %4571
    %4573:ptr = phi %2421, %4572
    %4575:ptr = phi %2423, %4572, %4573
    %4574:ptr = phi %2506, %4573
    %4576:ptr = phi %2508, %4574, %4575
    %3971:ptr = phi %3594, %3970
    %3973:ptr = phi %2489, %3971
    %3972:ptr = phi %2492, %3971
    %3974:ptr = phi %2494, %3972, %3973
    %3976:ptr = phi %3557, %3974, %3975
    %3977:ptr = phi %3559, %3969, %3976
    %3978:ptr = phi %3568, %3977
    %3987:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.Char)" %3578, %3978, %3580
    %3979:ptr = phi %2421, %3978
    %3981:ptr = phi %2423, %3978, %3979
    %3980:ptr = phi %2506, %3979
    %3982:ptr = phi %2508, %3980, %3981
    %3665:i32 = phi %3594, %2867
    %3666:i32 = phi %2489, %3665
    %3661:i32 = phi %3594, %2413
    %3663:i32 = phi %2489, %3661
    %3662:i32 = phi %2492, %3661
    %3664:i32 = phi %2494, %3662, %3663
    %3643:i32 = phi %3594, %2947
    %3645:i32 = phi %2489, %3643
    %3644:i32 = phi %2492, %3643
    %3646:i32 = phi %2494, %3644, %3645
    %3647:i32 = phi %3557, %3646, %3590
    %3648:i32 = phi %3559, %2946, %3647
    %3649:i32 = phi %3568, %3648
    %3650:i32 = phi %2421, %3649
    %3651:i32 = phi %2423, %3649, %3650
    %3629:ptr = phi %3594, %2924
    %3631:ptr = phi %2489, %3629
    %3630:ptr = phi %2492, %3629
    %3632:ptr = phi %2494, %3630, %3631
    %3633:ptr = phi %3557, %3632, %3589
    %3634:ptr = phi %3559, %2923, %3633
    %3635:ptr = phi %3568, %3634
    %3636:ptr = phi %2421, %3635
    %3638:ptr = phi %2423, %3635, %3636
    %3637:ptr = phi %2506, %3636
    %3639:ptr = phi %2508, %3637, %3638
    %3611:ptr = phi %3594, %3100
    %3613:ptr = phi %2489, %3611
    %3612:ptr = phi %2492, %3611
    %3614:ptr = phi %2494, %3612, %3613
    %3615:ptr = phi %3557, %3614, %3588
    %3616:ptr = phi %3559, %3099, %3615
    %3617:ptr = phi %3568, %3616
    %3618:ptr = phi %2421, %3617
    %3620:ptr = phi %2423, %3617, %3618
    %3619:ptr = phi %2506, %3618
    %3621:ptr = phi %2508, %3619, %3620
    %3046:ptr = phi %3584, %3616, %3045
    %3047:ptr = phi %4612, %3091, %3118, %3046, %3876, %3102, %4718, %3108, %4803, %3424, %3119, %4817
    %3048:ptr = phi %4614, %2189, %3047
    %3049:ptr = phi %2519, %3048
    %3079:ptr = phi %3064, %3048, %3049
    %3059:ptr = phi %3058, %3049
    %3080:ptr = phi %3066, %3059, %3079
    %3081:ptr = phi %3076, %3080
    %3082:ptr = phi %2449, %3081
    %3083:ptr = phi %2618, %3082
    %3084:ptr = phi %2620, %3083
    %3085:ptr = phi %2627, %3084
    %3086:ptr = phi %2629, %3085
    %3088:ptr = phi %2636, %3082, %3084, %3086
    %3087:ptr = phi %2638, %3086
    %4441:ptr = phi %4431, %3087, %4440
    %3089:ptr = phi %2459, %3081, %4441
    %3112:ptr = phi %2712, %3089
    %4804:ptr = phi %2718, %3112
    %4807:ptr = phi %2536, %4804
    %4805:ptr = phi %2539, %4804
    %4808:ptr = phi %2549, %4805, %4807
    %4809:ptr = phi %2557, %4808
    %4817:ptr = phi %2564, %4808, %4809
    %4810:i64 = ptrtoint %4809
    %4811:i64 = iadd %4810, %2561
    %4812:ptr = inttoptr %4811
    %4813:ctrl, %4814:i32 = load.2 %2556, %4812
    %4815:i32 = and %4814, %29
    %4816:ctrl = call @"System.Void System.Number::AppendUnknownChar[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Char)" %4813, %4716, %4815
    %4806:i64 = ptrtoint %4805
    %3113:ptr = phi %2722, %3112
    %3114:ptr = phi %2724, %3113
    %3115:ptr = phi %2731, %3114
    %3116:ptr = phi %2733, %3115
    %3119:ptr = phi %2740, %3116
    %3117:ptr = phi %2742, %3116
    %3090:ptr = phi %2775, %3089
    %3093:ptr = phi %2825, %3090
    %3094:ptr = phi %2827, %3093
    %3109:ptr = phi %2875, %3094
    %3110:ptr = phi %2877, %3109
    %3120:ptr = phi %2884, %3110, %3114
    %3425:ptr = phi %2399, %3120
    %3426:ptr = phi %2990, %3425
    %3427:i64 = ptrtoint %3426
    %3428:i64 = iadd %3427, %2995
    %3429:ptr = inttoptr %3428
    %3430:ctrl, %3431:i32 = load.2 %2989, %3429
    %3432:i32 = icmp eq %3431, %45
    %3433:ctrl, %3434:ctrl = brcond %3430, %3432
    %3435:ctrl, %3436:phisel = region %3433
    %5640:i32 = phi %3436, %5638
    %5616:i32 = phi %3436, %5614
    %5495:i32 = phi %3436, %5493
    %5422:i32 = phi %3436, %5420
    %5354:i32 = phi %3436, %5352
    %5251:i32 = phi %3436, %5249
    %5132:ptr = phi %3436, %5130
    %4774:ptr = phi %3436, %4772
    %4650:ptr = phi %3436, %4648
    %4046:ptr = phi %3436, %4044
    %3440:i32 = phi %3436, %2996
    %3439:i32 = phi %3436, %2992
    %3438:i32 = phi %3436, %2991
    %3437:ptr = phi %3436, %3426
    %3441:ctrl, %3442:phisel = region %3434
    %5639:i32 = phi %3442, %5638
    %5615:i32 = phi %3442, %5614
    %5494:i32 = phi %3442, %5493
    %5421:i32 = phi %3442, %5420
    %5353:i32 = phi %3442, %5352
    %5250:i32 = phi %3442, %5249
    %5131:ptr = phi %3442, %5130
    %4792:i32 = phi %3442, %2996
    %4773:ptr = phi %3442, %4772
    %4649:ptr = phi %3442, %4648
    %4045:ptr = phi %3442, %4044
    %3446:i32 = phi %3442, %2992
    %3447:i64 = iext %3446
    %3448:i64 = sfill 32 %3447
    %3449:i64 = imul %3448, %32
    %3445:i32 = phi %3442, %2991
    %3443:ptr = phi %3442, %3426
    %3444:i64 = ptrtoint %3443
    %3450:i64 = iadd %3444, %3449
    %3451:ptr = inttoptr %3450
    %3452:ctrl, %3453:i32 = load.2 %3441, %3451
    %3454:ctrl, %3455:phisel = region %3452, %3435
    %5641:i32 = phi %3455, %5639, %5640
    %5617:i32 = phi %3455, %5615, %5616
    %5496:i32 = phi %3455, %5494, %5495
    %5423:i32 = phi %3455, %5421, %5422
    %5355:i32 = phi %3455, %5353, %5354
    %5252:i32 = phi %3455, %5250, %5251
    %5133:ptr = phi %3455, %5131, %5132
    %4793:i32 = phi %3455, %4792, %3440
    %4775:ptr = phi %3455, %4773, %4774
    %4651:ptr = phi %3455, %4649, %4650
    %4047:ptr = phi %3455, %4045, %4046
    %3458:i32 = phi %3455, %3446, %3439
    %3457:i32 = phi %3455, %3445, %3438
    %3456:ptr = phi %3455, %3443, %3437
    %3459:i32 = icmp eq %3453, %44
    %3460:i32 = phi %3455, %3459, %33
    %3461:i32 = and %3460, %38
    %3462:ctrl, %3463:ctrl = brcond %3454, %3461
    %3464:ctrl, %3465:phisel = region %3462
    %5642:i32 = phi %3465, %5641
    %5618:i32 = phi %3465, %5617
    %5497:i32 = phi %3465, %5496
    %5424:i32 = phi %3465, %5423
    %5356:i32 = phi %3465, %5355
    %5253:i32 = phi %3465, %5252
    %5134:ptr = phi %3465, %5133
    %4794:i32 = phi %3465, %4793
    %4776:ptr = phi %3465, %4775
    %4652:ptr = phi %3465, %4651
    %4048:ptr = phi %3465, %4047
    %3469:i32 = phi %3465, %3458
    %3478:i32 = iadd %3469, %33
    %3470:i64 = iext %3469
    %3471:i64 = sfill 32 %3470
    %3472:i64 = imul %3471, %32
    %3468:i32 = phi %3465, %3457
    %3466:ptr = phi %3465, %3456
    %3467:i64 = ptrtoint %3466
    %3473:i64 = iadd %3467, %3472
    %3474:ptr = inttoptr %3473
    %3475:ctrl, %3476:i32 = load.2 %3464, %3474
    %3477:i32 = and %3476, %29
    %4049:ctrl = call @"System.Void System.Number::AppendUnknownChar[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Char)" %3475, %4048, %3477
    %3479:ctrl, %3480:phisel = region %3463, %4049
    %5643:i32 = phi %3480, %5641, %5642
    %5619:i32 = phi %3480, %5617, %5618
    %5498:i32 = phi %3480, %5496, %5497
    %5425:i32 = phi %3480, %5423, %5424
    %5357:i32 = phi %3480, %5355, %5356
    %5254:i32 = phi %3480, %5252, %5253
    %5135:ptr = phi %3480, %5133, %5134
    %4795:i32 = phi %3480, %4793, %4794
    %4777:ptr = phi %3480, %4775, %4776
    %4653:ptr = phi %3480, %4651, %4652
    %4050:ptr = phi %3480, %4047, %4048
    %3483:i32 = phi %3480, %3458, %3478
    %3482:i32 = phi %3480, %3457, %3468
    %3481:ptr = phi %3480, %3456, %3466
    %4690:ptr = phi %4059, %3481, %4695
    %4691:ptr = phi %3492, %4690
    %4692:i64 = ptrtoint %4691
    %3497:i64 = iadd %4692, %3496
    %3498:ptr = inttoptr %3497
    %3499:ctrl, %3500:i32 = load.2 %3491, %3498
    %3504:i32 = icmp eq %3500, %43
    %3505:i32 = phi %3502, %3504, %28
    %3506:i32 = and %3505, %38
    %3507:ctrl, %3508:ctrl = brcond %3501, %3506
    %3509:ctrl, %3510:phisel = region %3507
    %3511:i32 = phi %3510, %3503
    %3515:i32 = iadd %3511, %33
    %3512:i64 = iext %3511
    %3513:i64 = sfill 32 %3512
    %3514:i64 = imul %3513, %32
    %4697:i64 = iadd %4696, %3514
    %4698:ptr = inttoptr %4697
    %4699:ctrl, %4700:i32 = load.2 %3509, %4698
    %4701:i32 = and %4700, %29
    %4057:ctrl = call @"System.Void System.Number::AppendUnknownChar[System.Char](System.Collections.Generic.ValueListBuilder`1&, System.Char)" %4699, %4056, %4701
    %4058:ctrl, %4059:phisel = region %3479, %4057
    %4060:ctrl, %4061:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %4058, %5
    %3484:i32 = phi %4059, %3483, %3515
    %3485:i32 = icmp sle %4061, %3484
    %3486:ctrl, %3487:ctrl = brcond %4060, %3485
    %3488:ctrl, %3489:phisel = region %3486
    %3501:ctrl, %3502:phisel = region %3499, %3488
    %4693:ptr = phi %3489, %4690
    %4694:ptr = phi %3502, %4691, %4693
    %4695:ptr = phi %3510, %4694
    %4696:i64 = ptrtoint %4695
    %3490:i32 = phi %3489, %3484
    %3491:ctrl, %3492:phisel = region %3487
    %5645:i32 = phi %3492, %5644
    %5647:i32 = phi %3502, %5645, %5646
    %5649:i32 = phi %3510, %5647
    %5644:i32 = phi %4059, %5643, %5649
    %5646:i32 = phi %3489, %5644
    %5621:i32 = phi %3492, %5620
    %5623:i32 = phi %3502, %5621, %5622
    %5625:i32 = phi %3510, %5623
    %5620:i32 = phi %4059, %5619, %5625
    %5622:i32 = phi %3489, %5620
    %5500:i32 = phi %3492, %5499
    %5502:i32 = phi %3502, %5500, %5501
    %5504:i32 = phi %3510, %5502
    %5499:i32 = phi %4059, %5498, %5504
    %5501:i32 = phi %3489, %5499
    %5427:i32 = phi %3492, %5426
    %5429:i32 = phi %3502, %5427, %5428
    %5431:i32 = phi %3510, %5429
    %5426:i32 = phi %4059, %5425, %5431
    %5428:i32 = phi %3489, %5426
    %5359:i32 = phi %3492, %5358
    %5361:i32 = phi %3502, %5359, %5360
    %5363:i32 = phi %3510, %5361
    %5358:i32 = phi %4059, %5357, %5363
    %5360:i32 = phi %3489, %5358
    %5256:i32 = phi %3492, %5255
    %5258:i32 = phi %3502, %5256, %5257
    %5260:i32 = phi %3510, %5258
    %5255:i32 = phi %4059, %5254, %5260
    %5257:i32 = phi %3489, %5255
    %5137:ptr = phi %3492, %5136
    %5139:ptr = phi %3502, %5137, %5138
    %5141:ptr = phi %3510, %5139
    %5136:ptr = phi %4059, %5135, %5141
    %5138:ptr = phi %3489, %5136
    %4797:i32 = phi %3492, %4796
    %4799:i32 = phi %3502, %4797, %4798
    %4801:i32 = phi %3510, %4799
    %4796:i32 = phi %4059, %4795, %4801
    %4798:i32 = phi %3489, %4796
    %4779:ptr = phi %3492, %4778
    %4781:ptr = phi %3502, %4779, %4780
    %4782:ptr = phi %3510, %4781
    %4778:ptr = phi %4059, %4777, %4782
    %4780:ptr = phi %3489, %4778
    %4703:i32 = phi %3492, %4702
    %4705:i32 = phi %3502, %4703, %4704
    %4706:i32 = phi %3510, %4705
    %4702:i32 = phi %4059, %3482, %4706
    %4704:i32 = phi %3489, %4702
    %4655:ptr = phi %3492, %4654
    %4657:ptr = phi %3502, %4655, %4656
    %4659:ptr = phi %3510, %4657
    %4654:ptr = phi %4059, %4653, %4659
    %4656:ptr = phi %3489, %4654
    %4052:ptr = phi %3492, %4051
    %4054:ptr = phi %3502, %4052, %4053
    %4056:ptr = phi %3510, %4054
    %4051:ptr = phi %4059, %4050, %4056
    %4053:ptr = phi %3489, %4051
    %3493:i32 = phi %3492, %3484
    %3503:i32 = phi %3502, %3493, %3490
    %3494:i64 = iext %3493
    %3495:i64 = sfill 32 %3494
    %3496:i64 = imul %3495, %32
    %3516:ctrl, %3517:phisel = region %3508
    %2997:ctrl, %2998:phisel = region %2988, %3516
    %5648:i32 = phi %3517, %5647
    %5650:i32 = phi %2998, %5637, %5648
    %5624:i32 = phi %3517, %5623
    %5626:i32 = phi %2998, %5613, %5624
    %5503:i32 = phi %3517, %5502
    %5505:i32 = phi %2998, %5492, %5503
    %5430:i32 = phi %3517, %5429
    %5432:i32 = phi %2998, %5419, %5430
    %5362:i32 = phi %3517, %5361
    %5364:i32 = phi %2998, %5351, %5362
    %5365:i32 = phi %2295, %39, %5364
    %5259:i32 = phi %3517, %5258
    %5261:i32 = phi %2998, %5248, %5259
    %5140:ptr = phi %3517, %5139
    %5142:ptr = phi %2998, %5129, %5140
    %4800:i32 = phi %3517, %4799
    %4791:i32 = phi %3517, %3503
    %5053:i32 = phi %2998, %2984, %4791
    %4790:i32 = phi %3517, %4705
    %5052:i32 = phi %2998, %2909, %4790
    %4789:ptr = phi %3517, %4694
    %4802:ptr = phi %2998, %3425, %4789
    %4658:ptr = phi %3517, %4657
    %4660:ptr = phi %2998, %4647, %4658
    %4055:ptr = phi %3517, %4054
    %4707:ptr = phi %2998, %4043, %4055
    %3518:ptr = phi %3517, %4781
    %3519:ptr = phi %2998, %4771, %3518
    %3121:ptr = phi %2392, %3120
    %3174:ptr = phi %2966, %3121
    %3122:ptr = phi %2973, %3121
    %3123:i64 = ptrtoint %3122
    %3124:i64 = iadd %3123, %2981
    %3125:ptr = inttoptr %3124
    %3126:ctrl, %3127:i32 = load.2 %2972, %3125
    %3128:ctrl, %3129:phisel = region %3126, %2965
    %5586:i32 = phi %3129, %5584, %5585
    %5465:i32 = phi %3129, %5463, %5464
    %5392:i32 = phi %3129, %5390, %5391
    %5318:i32 = phi %3129, %5316, %5317
    %5221:i32 = phi %3129, %5219, %5220
    %4744:ptr = phi %3129, %4742, %4743
    %4621:ptr = phi %3129, %4619, %4620
    %4016:ptr = phi %3129, %4014, %4015
    %3175:ptr = phi %3129, %3122, %3174
    %3134:i32 = phi %3129, %2982, %2971
    %3133:i32 = phi %3129, %2978, %2970
    %3132:i32 = phi %3129, %2976, %2969
    %3131:i32 = phi %3129, %2975, %2968
    %3130:i32 = phi %3129, %2974, %2967
    %3135:i32 = icmp eq %3127, %43
    %3136:i32 = phi %3129, %3135, %28
    %3137:i32 = and %3136, %38
    %3138:ctrl, %3139:ctrl = brcond %3128, %3137
    %3140:ctrl, %3141:phisel = region %3138
    %5587:i32 = phi %3141, %5586
    %5466:i32 = phi %3141, %5465
    %5393:i32 = phi %3141, %5392
    %5319:i32 = phi %3141, %5318
    %5222:i32 = phi %3141, %5221
    %4745:ptr = phi %3141, %4744
    %4622:ptr = phi %3141, %4621
    %4017:ptr = phi %3141, %4016
    %3176:ptr = phi %3141, %3175
    %3148:i32 = phi %3141, %2276
    %3147:i32 = phi %3141, %3133
    %3146:ptr = phi %3141, %2580
    %3145:i32 = phi %3141, %3132
    %3144:i32 = phi %3141, %3131
    %3142:i32 = phi %3141, %3130
    %3143:i32 = iadd %3142, %33
    %3149:ctrl, %3150:phisel = region %3139
    %3151:ctrl, %3152:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %3149, %5
    %5588:i32 = phi %3150, %5586
    %5467:i32 = phi %3150, %5465
    %5394:i32 = phi %3150, %5392
    %5320:i32 = phi %3150, %5318
    %5223:i32 = phi %3150, %5221
    %4746:ptr = phi %3150, %4744
    %4623:ptr = phi %3150, %4621
    %4018:ptr = phi %3150, %4016
    %3177:ptr = phi %3150, %3175
    %3172:i32 = phi %3150, %3134
    %3156:i32 = phi %3150, %3133
    %3157:i32 = iadd %3156, %33
    %3158:i32 = icmp sle %3152, %3157
    %3159:ctrl, %3160:ctrl = brcond %3151, %3158
    %3161:ctrl, %3162:phisel = region %3160
    %5589:i32 = phi %3162, %5588
    %5468:i32 = phi %3162, %5467
    %5395:i32 = phi %3162, %5394
    %5321:i32 = phi %3162, %5320
    %5224:i32 = phi %3162, %5223
    %4747:ptr = phi %3162, %4746
    %4624:ptr = phi %3162, %4623
    %4019:ptr = phi %3162, %4018
    %3178:ptr = phi %3162, %3177
    %3179:i64 = ptrtoint %3178
    %3173:i32 = phi %3162, %3172
    %3171:i32 = phi %3162, %2277
    %3167:i32 = phi %3162, %3156
    %3168:i64 = iext %3167
    %3169:i64 = sfill 32 %3168
    %3170:i64 = imul %3169, %32
    %3180:i64 = iadd %3179, %3170
    %3181:ptr = inttoptr %3180
    %3182:ctrl, %3183:i32 = load.2 %3161, %3181
    %3184:i32 = icmp ne %3183, %45
    %3185:ctrl, %3186:ctrl = brcond %3182, %3184
    %3187:ctrl, %3188:phisel = region %3159, %3185
    %5591:i32 = phi %3188, %5588, %5589
    %5470:i32 = phi %3188, %5467, %5468
    %5397:i32 = phi %3188, %5394, %5395
    %5323:i32 = phi %3188, %5320, %5321
    %5226:i32 = phi %3188, %5223, %5224
    %4749:ptr = phi %3188, %4746, %4747
    %4626:ptr = phi %3188, %4623, %4624
    %4021:ptr = phi %3188, %4018, %4019
    %3257:ptr = phi %3188, %3177, %3178
    %3193:i32 = phi %3188, %3172, %3173
    %3192:i32 = phi %3188, %3156, %3167
    %3194:ctrl, %3195:phisel = region %3186
    %5590:i32 = phi %3195, %5589
    %5469:i32 = phi %3195, %5468
    %5396:i32 = phi %3195, %5395
    %5322:i32 = phi %3195, %5321
    %5225:i32 = phi %3195, %5224
    %4748:ptr = phi %3195, %4747
    %4625:ptr = phi %3195, %4624
    %4020:ptr = phi %3195, %4019
    %3256:i32 = phi %3195, %3171
    %3252:i32 = phi %3195, %3173
    %3202:i32 = phi %3195, %3167
    %3203:i32 = iadd %3202, %33
    %3204:i64 = iext %3203
    %3205:i64 = sfill 32 %3204
    %3206:i64 = imul %3205, %32
    %3198:ptr = phi %3195, %3178
    %3199:i64 = ptrtoint %3198
    %3207:i64 = iadd %3199, %3206
    %3208:ptr = inttoptr %3207
    %3209:ctrl, %3210:i32 = load.2 %3194, %3208
    %3211:ctrl, %3212:phisel = region %3209, %3187
    %5592:i32 = phi %3212, %5590, %5591
    %5471:i32 = phi %3212, %5469, %5470
    %5398:i32 = phi %3212, %5396, %5397
    %5324:i32 = phi %3212, %5322, %5323
    %5227:i32 = phi %3212, %5225, %5226
    %4750:ptr = phi %3212, %4748, %4749
    %4627:ptr = phi %3212, %4625, %4626
    %4022:ptr = phi %3212, %4020, %4021
    %3258:ptr = phi %3212, %3198, %3257
    %3253:i32 = phi %3212, %3252, %3193
    %3216:i32 = phi %3212, %3202, %3192
    %3217:i32 = icmp eq %3210, %43
    %3218:i32 = phi %3212, %3217, %28
    %3219:i32 = and %3218, %38
    %3220:ctrl, %3221:ctrl = brcond %3211, %3219
    %3222:ctrl, %3223:phisel = region %3220
    %5593:i32 = phi %3223, %5592
    %5472:i32 = phi %3223, %5471
    %5399:i32 = phi %3223, %5398
    %5325:i32 = phi %3223, %5324
    %5228:i32 = phi %3223, %5227
    %4751:ptr = phi %3223, %4750
    %4628:ptr = phi %3223, %4627
    %4023:ptr = phi %3223, %4022
    %3259:ptr = phi %3223, %3258
    %3228:i32 = phi %3223, %2279
    %3227:i32 = phi %3223, %3216
    %3226:ptr = phi %3223, %2583
    %3229:ctrl, %3230:phisel = region %3221
    %3231:ctrl, %3232:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %3229, %5
    %5594:i32 = phi %3230, %5592
    %5473:i32 = phi %3230, %5471
    %5400:i32 = phi %3230, %5398
    %5326:i32 = phi %3230, %5324
    %5229:i32 = phi %3230, %5227
    %4752:ptr = phi %3230, %4750
    %4629:ptr = phi %3230, %4627
    %4024:ptr = phi %3230, %4022
    %3260:ptr = phi %3230, %3258
    %3254:i32 = phi %3230, %3253
    %3236:i32 = phi %3230, %3216
    %3237:i32 = iadd %3236, %33
    %3238:i32 = icmp sle %3232, %3237
    %3239:ctrl, %3240:ctrl = brcond %3231, %3238
    %3241:ctrl, %3242:phisel = region %3240
    %5595:i32 = phi %3242, %5594
    %5474:i32 = phi %3242, %5473
    %5401:i32 = phi %3242, %5400
    %5327:i32 = phi %3242, %5326
    %5230:i32 = phi %3242, %5229
    %4753:ptr = phi %3242, %4752
    %4630:ptr = phi %3242, %4629
    %4025:ptr = phi %3242, %4024
    %3261:ptr = phi %3242, %3260
    %3262:i64 = ptrtoint %3261
    %3255:i32 = phi %3242, %3254
    %3251:i32 = phi %3242, %2280
    %3247:i32 = phi %3242, %3236
    %3248:i64 = iext %3247
    %3249:i64 = sfill 32 %3248
    %3250:i64 = imul %3249, %32
    %3263:i64 = iadd %3262, %3250
    %3264:ptr = inttoptr %3263
    %3265:ctrl, %3266:i32 = load.2 %3241, %3264
    %3267:i32 = icmp ne %3266, %44
    %3268:ctrl, %3269:ctrl = brcond %3265, %3267
    %3270:ctrl, %3271:phisel = region %3239, %3268
    %5597:i32 = phi %3271, %5594, %5595
    %5476:i32 = phi %3271, %5473, %5474
    %5403:i32 = phi %3271, %5400, %5401
    %5329:i32 = phi %3271, %5326, %5327
    %5232:i32 = phi %3271, %5229, %5230
    %4755:ptr = phi %3271, %4752, %4753
    %4632:ptr = phi %3271, %4629, %4630
    %4027:ptr = phi %3271, %4024, %4025
    %3329:ptr = phi %3271, %3260, %3261
    %3276:i32 = phi %3271, %3254, %3255
    %3275:i32 = phi %3271, %3236, %3247
    %3277:ctrl, %3278:phisel = region %3269
    %5596:i32 = phi %3278, %5595
    %5475:i32 = phi %3278, %5474
    %5402:i32 = phi %3278, %5401
    %5328:i32 = phi %3278, %5327
    %5231:i32 = phi %3278, %5230
    %4754:ptr = phi %3278, %4753
    %4631:ptr = phi %3278, %4630
    %4026:ptr = phi %3278, %4025
    %3328:i32 = phi %3278, %3251
    %3325:i32 = phi %3278, %3255
    %3285:i32 = phi %3278, %3247
    %3286:i32 = iadd %3285, %33
    %3287:i64 = iext %3286
    %3288:i64 = sfill 32 %3287
    %3289:i64 = imul %3288, %32
    %3281:ptr = phi %3278, %3261
    %3282:i64 = ptrtoint %3281
    %3290:i64 = iadd %3282, %3289
    %3291:ptr = inttoptr %3290
    %3292:ctrl, %3293:i32 = load.2 %3277, %3291
    %3294:ctrl, %3295:phisel = region %3292, %3270
    %5598:i32 = phi %3295, %5596, %5597
    %5477:i32 = phi %3295, %5475, %5476
    %5404:i32 = phi %3295, %5402, %5403
    %5330:i32 = phi %3295, %5328, %5329
    %5233:i32 = phi %3295, %5231, %5232
    %4756:ptr = phi %3295, %4754, %4755
    %4633:ptr = phi %3295, %4631, %4632
    %4028:ptr = phi %3295, %4026, %4027
    %3330:ptr = phi %3295, %3281, %3329
    %3326:i32 = phi %3295, %3325, %3276
    %3299:i32 = phi %3295, %3285, %3275
    %3300:i32 = icmp eq %3293, %43
    %3301:i32 = phi %3295, %3300, %28
    %3302:i32 = and %3301, %38
    %3303:ctrl, %3304:ctrl = brcond %3294, %3302
    %3305:ctrl, %3306:phisel = region %3303
    %3307:ctrl, %3308:phisel = region %3140, %3222, %3305
    %5599:i32 = phi %3306, %5598
    %5600:i32 = phi %3308, %5587, %5593, %5599
    %5478:i32 = phi %3306, %5477
    %5479:i32 = phi %3308, %5466, %5472, %5478
    %5405:i32 = phi %3306, %5404
    %5406:i32 = phi %3308, %5393, %5399, %5405
    %5331:i32 = phi %3306, %5330
    %5332:i32 = phi %3308, %5319, %5325, %5331
    %5234:i32 = phi %3306, %5233
    %5235:i32 = phi %3308, %5222, %5228, %5234
    %4757:ptr = phi %3306, %4756
    %4758:ptr = phi %3308, %4745, %4751, %4757
    %4634:ptr = phi %3306, %4633
    %4635:ptr = phi %3308, %4622, %4628, %4634
    %4029:ptr = phi %3306, %4028
    %4030:ptr = phi %3308, %4017, %4023, %4029
    %3331:ptr = phi %3306, %3330
    %3332:ptr = phi %3308, %3176, %3259, %3331
    %3315:i32 = phi %3306, %3299
    %3316:i32 = phi %3308, %3147, %3227, %3315
    %3352:i32 = phi %3348, %3316, %3351
    %3353:i32 = iadd %3352, %33
    %3354:i32 = icmp sle %3350, %3353
    %3355:ctrl, %3356:ctrl = brcond %3349, %3354
    %3357:ctrl, %3358:phisel = region %3355
    %3361:i32 = phi %3358, %3353
    %3362:ctrl, %3363:phisel = region %3356
    %3386:i32 = phi %3363, %2285
    %3381:i32 = phi %3363, %3353
    %3383:i64 = iext %3381
    %3384:i64 = sfill 32 %3383
    %3385:i64 = imul %3384, %32
    %3380:ptr = phi %3363, %2589
    %3334:ptr = phi %3363, %3333
    %3335:i64 = ptrtoint %3334
    %3336:i64 = iadd %3335, %3385
    %3337:ptr = inttoptr %3336
    %3338:ctrl, %3339:i32 = load.2 %3362, %3337
    %3359:ctrl, %3360:phisel = region %3338, %3357
    %3382:i32 = phi %3360, %3381, %3361
    %3340:i32 = icmp eq %3339, %43
    %3341:i32 = phi %3360, %3340, %28
    %3342:i32 = and %3341, %38
    %3343:ctrl, %3344:ctrl = brcond %3359, %3342
    %3345:ctrl, %3346:phisel = region %3343
    %3347:ctrl, %3348:phisel = region %3307, %3345
    %3349:ctrl, %3350:i32 = call @"System.Int32 System.ReadOnlySpan`1[System.Char]::get_Length()" %3347, %5
    %5635:i32 = phi %3346, %2287
    %5611:i32 = phi %3346, %5604
    %5601:i32 = phi %3348, %5600, %5611
    %5603:i32 = phi %3358, %5601
    %5602:i32 = phi %3363, %5601
    %5604:i32 = phi %3360, %5602, %5603
    %5490:i32 = phi %3346, %5483
    %5480:i32 = phi %3348, %5479, %5490
    %5482:i32 = phi %3358, %5480
    %5481:i32 = phi %3363, %5480
    %5483:i32 = phi %3360, %5481, %5482
    %5417:i32 = phi %3346, %5410
    %5407:i32 = phi %3348, %5406, %5417
    %5409:i32 = phi %3358, %5407
    %5408:i32 = phi %3363, %5407
    %5410:i32 = phi %3360, %5408, %5409
    %5343:i32 = phi %3346, %5336
    %5333:i32 = phi %3348, %5332, %5343
    %5335:i32 = phi %3358, %5333
    %5334:i32 = phi %3363, %5333
    %5336:i32 = phi %3360, %5334, %5335
    %5246:i32 = phi %3346, %5239
    %5236:i32 = phi %3348, %5235, %5246
    %5238:i32 = phi %3358, %5236
    %5237:i32 = phi %3363, %5236
    %5239:i32 = phi %3360, %5237, %5238
    %5127:ptr = phi %3346, %2591
    %4769:ptr = phi %3346, %4762
    %4759:ptr = phi %3348, %4758, %4769
    %4761:ptr = phi %3358, %4759
    %4760:ptr = phi %3363, %4759
    %4762:ptr = phi %3360, %4760, %4761
    %4645:ptr = phi %3346, %4639
    %4636:ptr = phi %3348, %4635, %4645
    %4638:ptr = phi %3358, %4636
    %4637:ptr = phi %3363, %4636
    %4639:ptr = phi %3360, %4637, %4638
    %4040:ptr = phi %3346, %4034
    %4031:ptr = phi %3348, %4030, %4040
    %4033:ptr = phi %3358, %4031
    %4032:ptr = phi %3363, %4031
    %4034:ptr = phi %3360, %4032, %4033
    %3423:ptr = phi %3346, %3417
    %3333:ptr = phi %3348, %3332, %3423
    %3416:ptr = phi %3358, %3333
    %3417:ptr = phi %3360, %3334, %3416
    %3351:i32 = phi %3346, %3382
    %3387:ctrl, %3388:phisel = region %3344
    %5605:i32 = phi %3388, %5604
    %5484:i32 = phi %3388, %5483
    %5411:i32 = phi %3388, %5410
    %5337:i32 = phi %3388, %5336
    %5240:i32 = phi %3388, %5239
    %4763:ptr = phi %3388, %4762
    %4640:ptr = phi %3388, %4639
    %4035:ptr = phi %3388, %4034
    %3418:ptr = phi %3388, %3417
    %3412:i32 = phi %3388, %3382
    %3317:ctrl, %3318:phisel = region %3304
    %5636:i32 = phi %3318, %2282
    %5612:i32 = phi %3318, %5598
    %5491:i32 = phi %3318, %5477
    %5418:i32 = phi %3318, %5404
    %5344:i32 = phi %3318, %5330
    %5247:i32 = phi %3318, %5233
    %5128:ptr = phi %3318, %2586
    %4770:ptr = phi %3318, %4756
    %4646:ptr = phi %3318, %4633
    %4041:ptr = phi %3318, %4028
    %3424:ptr = phi %3318, %3330
    %3327:i32 = phi %3318, %3326
    %3324:i32 = phi %3318, %3299
    %3246:ptr = phi %3242, %2584
    %3284:ptr = phi %3278, %3246
    %3166:ptr = phi %3162, %2581
    %3201:ptr = phi %3195, %3166
    %3155:i32 = phi %3150, %3132
    %3165:i32 = phi %3162, %3155
    %3200:i32 = phi %3195, %3165
    %3191:i32 = phi %3188, %3155, %3165
    %3215:i32 = phi %3212, %3200, %3191
    %3235:i32 = phi %3230, %3215
    %3245:i32 = phi %3242, %3235
    %3283:i32 = phi %3278, %3245
    %3274:i32 = phi %3271, %3235, %3245
    %3298:i32 = phi %3295, %3283, %3274
    %3319:i32 = phi %3318, %3298
    %3320:i32 = and %3319, %29
    %3321:ctrl, %3322:i32 = call @"System.Char System.Char::System.IUtfChar<System.Char>.CastFrom(System.Char)" %3317, %3320
    %3323:i32 = and %3322, %29
    %4042:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.Char)" %3321, %4041, %3323
    %3313:i32 = phi %3306, %3298
    %3225:i32 = phi %3223, %3215
    %3314:i32 = phi %3308, %3145, %3225, %3313
    %3378:i32 = phi %3348, %3314, %3377
    %3379:i32 = phi %3358, %3378
    %3375:i32 = phi %3363, %3378
    %3376:i32 = phi %3360, %3375, %3379
    %3408:i32 = phi %3388, %3376
    %3377:i32 = phi %3346, %3376
    %3154:i32 = phi %3150, %3131
    %3164:i32 = phi %3162, %3154
    %3197:i32 = phi %3195, %3164
    %3190:i32 = phi %3188, %3154, %3164
    %3214:i32 = phi %3212, %3197, %3190
    %3234:i32 = phi %3230, %3214
    %3244:i32 = phi %3242, %3234
    %3280:i32 = phi %3278, %3244
    %3273:i32 = phi %3271, %3234, %3244
    %3297:i32 = phi %3295, %3280, %3273
    %3311:i32 = phi %3306, %3297
    %3312:i32 = phi %3308, %3144, %40, %3311
    %3373:i32 = phi %3348, %3312, %3372
    %3374:i32 = phi %3358, %3373
    %3370:i32 = phi %3363, %3373
    %3371:i32 = phi %3360, %3370, %3374
    %3403:i32 = phi %3388, %3371
    %3372:i32 = phi %3346, %3371
    %3153:i32 = phi %3150, %3130
    %3163:i32 = phi %3162, %3153
    %3196:i32 = phi %3195, %3163
    %3189:i32 = phi %3188, %3153, %3163
    %3213:i32 = phi %3212, %3196, %3189
    %3233:i32 = phi %3230, %3213
    %3243:i32 = phi %3242, %3233
    %3279:i32 = phi %3278, %3243
    %3272:i32 = phi %3271, %3233, %3243
    %3296:i32 = phi %3295, %3279, %3272
    %3309:i32 = phi %3306, %3296
    %3224:i32 = phi %3223, %3213
    %3310:i32 = phi %3308, %3143, %3224, %3309
    %3368:i32 = phi %3348, %3310, %3367
    %3369:i32 = phi %3358, %3368
    %3364:i32 = phi %3363, %3368
    %3365:i32 = phi %3360, %3364, %3369
    %3389:i32 = phi %3388, %3365
    %3390:i32 = icmp slt %65, %3389
    %3391:i32 = and %3390, %38
    %3392:ctrl, %3393:ctrl = brcond %3387, %3391
    %3394:ctrl, %3395:phisel = region %3392
    %5606:i32 = phi %3395, %5605
    %5485:i32 = phi %3395, %5484
    %5412:i32 = phi %3395, %5411
    %5338:i32 = phi %3395, %5337
    %5241:i32 = phi %3395, %5240
    %4764:ptr = phi %3395, %4763
    %4641:ptr = phi %3395, %4640
    %4036:ptr = phi %3395, %4035
    %3419:ptr = phi %3395, %3418
    %3413:i32 = phi %3395, %3412
    %3409:i32 = phi %3395, %3408
    %3404:i32 = phi %3395, %3403
    %3397:i32 = phi %3395, %2288
    %3396:ptr = phi %3395, %2592
    %3398:ctrl, %3399:phisel = region %3393, %3394
    %5607:i32 = phi %3399, %5605, %5606
    %5609:i32 = phi %2602, %5607
    %5608:i32 = phi %2599, %5607
    %5486:i32 = phi %3399, %5484, %5485
    %5488:i32 = phi %2602, %5486
    %5487:i32 = phi %2599, %5486
    %5413:i32 = phi %3399, %5411, %5412
    %5415:i32 = phi %2602, %5413
    %5414:i32 = phi %2599, %5413
    %5339:i32 = phi %3399, %5337, %5338
    %5341:i32 = phi %2602, %5339
    %5340:i32 = phi %2599, %5339
    %5242:i32 = phi %3399, %5240, %5241
    %5244:i32 = phi %2602, %5242
    %5243:i32 = phi %2599, %5242
    %4765:ptr = phi %3399, %4763, %4764
    %4767:ptr = phi %2602, %4765
    %4766:ptr = phi %2599, %4765
    %4642:ptr = phi %3399, %4640, %4641
    %4644:ptr = phi %2602, %4642
    %4643:ptr = phi %2599, %4642
    %4037:ptr = phi %3399, %4035, %4036
    %4039:ptr = phi %2602, %4037
    %4038:ptr = phi %2599, %4037
    %3420:ptr = phi %3399, %3418, %3419
    %3422:ptr = phi %2602, %3420
    %3421:ptr = phi %2599, %3420
    %3414:i32 = phi %3399, %3412, %3413
    %5124:i32 = phi %2602, %3414
    %3415:i32 = phi %2599, %3414
    %3410:i32 = phi %3399, %3408, %3409
    %3411:i32 = phi %2599, %3410
    %3405:i32 = phi %3399, %3403, %3404
    %3407:i32 = phi %2602, %3405
    %3406:i32 = phi %2599, %3405
    %3400:i32 = phi %3399, %3389, %65
    %3402:i32 = phi %2602, %3400
    %3401:i32 = phi %2599, %3400
    %3366:i32 = phi %3346, %3365
    %3367:i32 = iadd %3366, %33
    %3111:ptr = phi %2886, %3110
    %3118:ptr = phi %2888, %3090, %3090, %3094, %3094, %3111, %3117
    %3108:ptr = phi %2843, %3094
    %3101:ptr = phi %2853, %3094
    %3103:ptr = phi %2370, %3101
    %3107:ptr = phi %2339, %3103
    %3104:ptr = phi %2342, %3103
    %3106:ptr = phi %2256, %3104
    %3105:ptr = phi %2259, %3104
    %3678:ptr = phi %3675, %3105, %3106
    %3679:ptr = phi %3677, %3678, %3107
    %3695:ptr = phi %3694, %3679
    %4718:ptr = phi %3703, %3679, %3695
    %3102:ptr = phi %2365, %3101
    %3095:ptr = phi %2861, %3090, %3094
    %3100:ptr = phi %2481, %3095
    %3588:ptr = phi %3552, %3100
    %3096:ptr = phi %2470, %3095
    %3098:ptr = phi %2312, %3096
    %3097:ptr = phi %2315, %3096
    %3099:ptr = phi %2317, %3097, %3098
    %3092:ptr = phi %2817, %3090, %3090
    %3774:ptr = phi %3730, %3092, %3773
    %3775:ptr = phi %3738, %3774
    %3791:ptr = phi %3758, %3774, %3775
    %3790:i64 = ptrtoint %3775
    %3776:ptr = phi %3751, %3775
    %3777:i64 = ptrtoint %3776
    %3778:i64 = iadd %3777, %3756
    %3779:ptr = inttoptr %3778
    %3780:ctrl, %3781:i32 = load.2 %3750, %3779
    %3782:ctrl, %3783:phisel = region %3780, %3757
    %5101:i32 = phi %3783, %5099, %5100
    %5108:i32 = phi %3772, %5101
    %5097:i32 = phi %3730, %5096, %5108
    %5098:i32 = phi %3738, %5097
    %5100:i32 = phi %3758, %5097, %5098
    %5099:i32 = phi %3751, %5098
    %5102:i32 = phi %3801, %5101
    %5061:i32 = phi %3783, %5059, %5060
    %5068:i32 = phi %3772, %5061
    %5057:i32 = phi %3730, %5056, %5068
    %5058:i32 = phi %3738, %5057
    %5060:i32 = phi %3758, %5057, %5058
    %5059:i32 = phi %3751, %5058
    %5062:i32 = phi %3801, %5061
    %4549:ptr = phi %3783, %4547, %4548
    %4556:ptr = phi %3772, %4549
    %4545:ptr = phi %3730, %4544, %4556
    %4546:ptr = phi %3738, %4545
    %4548:ptr = phi %3758, %4545, %4546
    %4547:ptr = phi %3751, %4546
    %4550:ptr = phi %3801, %4549
    %3817:i32 = phi %3783, %3753, %3816
    %3881:i32 = phi %3772, %3817
    %3890:i32 = iadd %3881, %33
    %3882:i64 = iext %3881
    %3883:i64 = sfill 32 %3882
    %3884:i64 = imul %3883, %32
    %3818:i32 = phi %3801, %3817
    %3819:i32 = icmp sle %3803, %3818
    %3820:ctrl, %3821:ctrl = brcond %3802, %3819
    %3822:ctrl, %3823:phisel = region %3820
    %5104:i32 = phi %3823, %5102
    %5064:i32 = phi %3823, %5062
    %4552:ptr = phi %3823, %4550
    %3830:i32 = phi %3823, %3818
    %3831:ctrl, %3832:phisel = region %3821
    %5103:i32 = phi %3832, %5102
    %5063:i32 = phi %3832, %5062
    %4551:ptr = phi %3832, %4550
    %3840:i32 = phi %3832, %3818
    %3841:i64 = iext %3840
    %3842:i64 = sfill 32 %3841
    %3843:i64 = imul %3842, %32
    %3834:ptr = phi %3832, %3805
    %3833:ptr = phi %3832, %3804
    %3810:ptr = phi %3783, %3815, %3809
    %3812:ptr = phi %3772, %3810
    %3813:ptr = phi %3730, %2916, %3812
    %3814:ptr = phi %3738, %3813
    %3815:ptr = phi %3751, %3814
    %3809:ptr = phi %3758, %3813, %3814
    %3811:ptr = phi %3801, %3810
    %3839:ptr = phi %3832, %3811
    %3829:ptr = phi %3823, %3811
    %3792:ptr = phi %3783, %3776, %3791
    %3806:ptr = phi %3801, %3792
    %3835:ptr = phi %3832, %3806
    %3836:i64 = ptrtoint %3835
    %3844:i64 = iadd %3836, %3843
    %3845:ptr = inttoptr %3844
    %3846:ctrl, %3847:i32 = load.2 %3831, %3845
    %3848:ctrl, %3849:phisel = region %3846, %3822
    %5105:i32 = phi %3849, %5103, %5104
    %5065:i32 = phi %3849, %5063, %5064
    %4553:ptr = phi %3849, %4551, %4552
    %3856:i32 = phi %3849, %3840, %3830
    %3855:ptr = phi %3849, %3839, %3829
    %3857:i32 = icmp ult %28, %3847
    %3858:i32 = phi %3849, %3857, %28
    %3859:i32 = and %3858, %38
    %3860:ctrl, %3861:ctrl = brcond %3848, %3859
    %3862:ctrl, %3863:phisel = region %3860
    %5106:i32 = phi %3863, %5105
    %5066:i32 = phi %3863, %5065
    %4554:ptr = phi %3863, %4553
    %3870:i32 = phi %3863, %3856
    %3871:i32 = iadd %3870, %33
    %3869:ptr = phi %3863, %3855
    %3872:ctrl, %3873:phisel = region %3861, %3862
    %5107:i32 = phi %3873, %5105, %5106
    %5067:i32 = phi %3873, %5065, %5066
    %4555:ptr = phi %3873, %4553, %4554
    %3880:i32 = phi %3873, %3856, %3871
    %3879:ptr = phi %3873, %3855, %3869
    %3877:i32 = phi %3873, %3853, %3867
    %3001:i32 = phi %4612, %3016, %5000, %4978, %3877, %4980, %4989, %4990, %3000, %5032, %5001, %5051
    %3002:i32 = phi %4614, %2196, %3001
    %3003:i32 = phi %2519, %3002
    %3060:i32 = phi %3058, %3003
    %3004:i32 = phi %3064, %3002, %3003
    %3005:i32 = phi %3066, %3060, %3004
    %3006:i32 = phi %3076, %3005
    %3007:i32 = phi %2449, %3006
    %3008:i32 = phi %2618, %3007
    %3009:i32 = phi %2620, %3008
    %3010:i32 = phi %2627, %3009
    %3011:i32 = phi %2629, %3010
    %3013:i32 = phi %2636, %3007, %3009, %3011
    %4382:i32 = phi %4289, %3013, %4381
    %4270:i32 = phi %4269, %4382
    %4271:i32 = phi %4298, %4270
    %4272:i32 = phi %4308, %4351, %4271
    %4273:i32 = phi %4245, %4272
    %4274:i32 = phi %4252, %4273
    %4275:i32 = icmp slt %4274, %28
    %4276:i32 = icmp eq %4275, %28
    %4277:i32 = phi %4258, %4276, %28
    %4278:i32 = and %4277, %38
    %4279:ctrl, %4280:ctrl = brcond %4257, %4278
    %4281:ctrl, %4282:phisel = region %4279
    %4286:ctrl, %4287:phisel = region %4280, %4217
    %4288:ctrl, %4289:phisel = region %2635, %4286
    %4220:i32 = phi %4287, %4227, %4219
    %4221:i32 = isub %4220, %33
    %4222:i32 = phi %4289, %2680, %4221
    %4223:i32 = phi %4269, %4222
    %4224:i32 = phi %4298, %4223
    %4225:i32 = phi %4308, %4353, %4224
    %4226:i32 = phi %4256, %4225, %4247
    %4227:i32 = phi %4258, %4254, %4226
    %4228:i32 = phi %4282, %4227
    %4229:i32 = icmp eq %4228, %4380
    %4230:i32 = and %4229, %38
    %4231:ctrl, %4232:ctrl = brcond %4378, %4230
    %4233:ctrl, %4234:phisel = region %4231
    %4476:i32 = phi %4234, %4228
    %4217:ctrl, %4218:phisel = region %4232, %4216
    %4236:i32 = phi %4218, %4460, %4235
    %4237:i32 = phi %4287, %4459, %4236
    %4238:i32 = phi %4289, %2668, %4237
    %4239:i32 = phi %4269, %4238
    %4240:i32 = phi %4298, %4239
    %4241:i32 = phi %4308, %4352, %4240
    %4242:ctrl, %4243:ctrl = brcond %4356, %4241
    %4244:ctrl, %4245:phisel = region %4242
    %4456:i32 = phi %4245, %4241
    %4247:i32 = phi %4245, %4225
    %4248:i32 = icmp sle %4247, %33
    %4249:ctrl, %4250:ctrl = brcond %4244, %4248
    %4251:ctrl, %4252:phisel = region %4250
    %4457:i32 = phi %4252, %4456
    %4254:i32 = phi %4252, %4247
    %4255:ctrl, %4256:phisel = region %4243, %4249
    %4257:ctrl, %4258:phisel = region %4251, %4255
    %4458:i32 = phi %4256, %4241, %4456
    %4459:i32 = phi %4258, %4457, %4458
    %4460:i32 = phi %4282, %4459
    %4235:i32 = phi %4234, %4460
    %4370:i32 = phi %4256, %4272, %4273
    %4371:i32 = phi %4258, %4274, %4370
    %4372:i32 = phi %4282, %4371
    %4376:ctrl, %4377:ptr = call @"System.Int32& System.Span`1[System.Int32]::get_Item(System.Int32)" %4281, %6, %4372
    %4378:ctrl, %4379:i32 = load.4 %4376, %4377
    %4380:i32 = iadd %4379, %33
    %4373:i32 = phi %4234, %4372
    %4374:i32 = isub %4373, %33
    %4375:i32 = phi %4218, %4372, %4374
    %4381:i32 = phi %4287, %4371, %4375
    %4259:i32 = phi %4256, %4425, %4426
    %4260:i32 = phi %4258, %4427, %4259
    %4283:i32 = phi %4282, %4260
    %4284:i32 = phi %4234, %4283
    %4285:i32 = phi %4218, %4283, %4284
    %4261:i32 = phi %4287, %4260, %4285
    %4262:i32 = isub %4261, %33
    %4263:i32 = phi %4289, %2662, %4262
    %4264:i32 = icmp slt %28, %4263
    %4265:i32 = and %4264, %38
    %4266:ctrl, %4267:ctrl = brcond %4288, %4265
    %4268:ctrl, %4269:phisel = region %4266
    %4422:i32 = phi %4269, %4263
    %4292:ptr = phi %4269, %4291
    %4293:ctrl, %4294:i32 = load.1 %4268, %4292
    %4295:ctrl, %4296:ctrl = brcond %4293, %4294
    %4297:ctrl, %4298:phisel = region %4295
    %4424:i32 = phi %4298, %4422
    %4299:ptr = phi %4298, %4292
    %4302:i64 = ptrtoint %4299
    %4303:i64 = iadd %4302, %35
    %4304:ptr = inttoptr %4303
    %4300:ctrl, %4301:i32 = load.1 %4297, %4299
    %4305:ctrl, %4306:phisel = region %4296
    %4307:ctrl, %4308:phisel = region %4305, %4300
    %4309:i32 = phi %4308, %43, %4301
    %4310:i32 = and %4309, %29
    %4311:ctrl, %4312:i32 = call @"System.Char System.Char::System.IUtfChar<System.Char>.CastFrom(System.Char)" %4307, %4310
    %4313:i32 = and %4312, %29
    %4513:i32 = phi %4306, %4512
    %4515:i32 = phi %4308, %4513, %4514
    %4516:i32 = phi %4245, %4515
    %4518:i32 = phi %4256, %4515, %4516
    %4517:i32 = phi %4252, %4516
    %4519:i32 = phi %4258, %4517, %4518
    %4520:i32 = phi %4282, %4519
    %4521:i32 = phi %4234, %4520
    %4507:i32 = phi %4218, %4520, %4521
    %4508:i32 = phi %4287, %4519, %4507
    %4509:i32 = phi %4289, %2698, %4508
    %4512:i32 = phi %4269, %4509
    %4514:i32 = phi %4298, %4512
    %4498:i32 = phi %4306, %4497
    %4500:i32 = phi %4308, %4498, %4499
    %4501:i32 = phi %4245, %4500
    %4503:i32 = phi %4256, %4500, %4501
    %4502:i32 = phi %4252, %4501
    %4504:i32 = phi %4258, %4502, %4503
    %4505:i32 = phi %4282, %4504
    %4506:i32 = phi %4234, %4505
    %4492:i32 = phi %4218, %4505, %4506
    %4493:i32 = phi %4287, %4504, %4492
    %4494:i32 = phi %4289, %2692, %4493
    %4497:i32 = phi %4269, %4494
    %4499:i32 = phi %4298, %4497
    %4483:i32 = phi %4306, %4482
    %4485:i32 = phi %4308, %4483, %4484
    %4486:i32 = phi %4245, %4485
    %4488:i32 = phi %4256, %4485, %4486
    %4487:i32 = phi %4252, %4486
    %4489:i32 = phi %4258, %4487, %4488
    %4490:i32 = phi %4282, %4489
    %4491:i32 = phi %4234, %4490
    %4477:i32 = phi %4218, %4490, %4491
    %4478:i32 = phi %4287, %4489, %4477
    %4479:i32 = phi %4289, %2686, %4478
    %4482:i32 = phi %4269, %4479
    %4484:i32 = phi %4298, %4482
    %4468:i32 = phi %4306, %4467
    %4470:i32 = phi %4308, %4468, %4469
    %4471:i32 = phi %4245, %4470
    %4473:i32 = phi %4256, %4470, %4471
    %4472:i32 = phi %4252, %4471
    %4474:i32 = phi %4258, %4472, %4473
    %4475:i32 = phi %4282, %4474
    %4461:i32 = phi %4234, %4475
    %4462:i32 = phi %4218, %4475, %4461
    %4463:i32 = phi %4287, %4474, %4462
    %4464:i32 = phi %4289, %2674, %4463
    %4467:i32 = phi %4269, %4464
    %4469:i32 = phi %4298, %4467
    %4423:i32 = phi %4306, %4422
    %4425:i32 = phi %4308, %4423, %4424
    %4426:i32 = phi %4245, %4425
    %4427:i32 = phi %4252, %4426
    %4410:i32 = phi %4306, %4409
    %4412:i32 = phi %4308, %4410, %4411
    %4413:i32 = phi %4245, %4412
    %4415:i32 = phi %4256, %4412, %4413
    %4414:i32 = phi %4252, %4413
    %4416:i32 = phi %4258, %4414, %4415
    %4417:i32 = phi %4282, %4416
    %4418:i32 = phi %4234, %4417
    %4419:i32 = phi %4218, %4417, %4418
    %4420:i32 = phi %4287, %4416, %4419
    %4421:i32 = phi %4289, %2656, %4420
    %4409:i32 = phi %4269, %4421
    %4411:i32 = phi %4298, %4409
    %4397:ptr = phi %4306, %4396
    %4399:ptr = phi %4308, %4397, %4398
    %4400:ptr = phi %4245, %4399
    %4402:ptr = phi %4256, %4399, %4400
    %4401:ptr = phi %4252, %4400
    %4403:ptr = phi %4258, %4401, %4402
    %4404:ptr = phi %4282, %4403
    %4405:ptr = phi %4234, %4404
    %4406:ptr = phi %4218, %4404, %4405
    %4407:ptr = phi %4287, %4403, %4406
    %4408:ptr = phi %4289, %2650, %4407
    %4396:ptr = phi %4269, %4408
    %4398:ptr = phi %4298, %4396
    %4384:i32 = phi %4306, %4383
    %4386:i32 = phi %4308, %4384, %4385
    %4387:i32 = phi %4245, %4386
    %4389:i32 = phi %4256, %4386, %4387
    %4388:i32 = phi %4252, %4387
    %4390:i32 = phi %4258, %4388, %4389
    %4391:i32 = phi %4282, %4390
    %4392:i32 = phi %4234, %4391
    %4393:i32 = phi %4218, %4391, %4392
    %4394:i32 = phi %4287, %4390, %4393
    %4395:i32 = phi %4289, %2644, %4394
    %4383:i32 = phi %4269, %4395
    %4385:i32 = phi %4298, %4383
    %4360:ptr = phi %4306, %4359
    %4362:ptr = phi %4308, %4360, %4361
    %4363:ptr = phi %4245, %4362
    %4365:ptr = phi %4256, %4362, %4363
    %4364:ptr = phi %4252, %4363
    %4366:ptr = phi %4258, %4364, %4365
    %4367:ptr = phi %4282, %4366
    %4368:ptr = phi %4234, %4367
    %4369:ptr = phi %4218, %4367, %4368
    %4357:ptr = phi %4287, %4366, %4369
    %4358:ptr = phi %4289, %3088, %4357
    %4359:ptr = phi %4269, %4358
    %4361:ptr = phi %4298, %4359
    %4353:i32 = phi %4306, %4223
    %4352:i32 = phi %4306, %4239
    %4351:i32 = phi %4306, %4270
    %4342:ptr = phi %4306, %4292
    %4343:ptr = phi %4308, %4342, %4304
    %4344:ptr = phi %4245, %4343
    %4346:ptr = phi %4256, %4343, %4344
    %4345:ptr = phi %4252, %4344
    %4347:ptr = phi %4258, %4345, %4346
    %4348:ptr = phi %4282, %4347
    %4349:ptr = phi %4234, %4348
    %4350:ptr = phi %4218, %4348, %4349
    %4290:ptr = phi %4287, %4347, %4350
    %4291:ptr = phi %4289, %3534, %4290
    %4328:ptr = phi %4306, %4339
    %4329:ptr = phi %4308, %4328, %4340
    %4330:ptr = phi %4245, %4329
    %4332:ptr = phi %4256, %4329, %4330
    %4331:ptr = phi %4252, %4330
    %4333:ptr = phi %4258, %4331, %4332
    %4334:ptr = phi %4282, %4333
    %4335:ptr = phi %4234, %4334
    %4336:ptr = phi %4218, %4334, %4335
    %4337:ptr = phi %4287, %4333, %4336
    %4338:ptr = phi %4289, %3719, %4337
    %4339:ptr = phi %4269, %4338
    %4354:ptr = phi %4306, %4339
    %4341:ptr = phi %4298, %4339
    %4355:ptr = phi %4308, %4354, %4341
    %4356:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.Char)" %4311, %4355, %4313
    %4340:ptr = phi %4298, %4339
    %4428:ctrl, %4429:phisel = region %4267
    %4430:ctrl, %4431:phisel = region %2637, %4428
    %4510:i32 = phi %4429, %4509
    %4511:i32 = phi %4431, %2697, %4510
    %4495:i32 = phi %4429, %4494
    %4496:i32 = phi %4431, %2691, %4495
    %4480:i32 = phi %4429, %4479
    %4481:i32 = phi %4431, %2685, %4480
    %4465:i32 = phi %4429, %4464
    %4466:i32 = phi %4431, %2673, %4465
    %4454:i32 = phi %4429, %4222
    %4455:i32 = phi %4431, %2679, %4454
    %4452:i32 = phi %4429, %4238
    %4453:i32 = phi %4431, %2667, %4452
    %4450:i32 = phi %4429, %4263
    %4451:i32 = phi %4431, %2661, %4450
    %4448:i32 = phi %4429, %4421
    %4446:ptr = phi %4429, %4408
    %4444:i32 = phi %4429, %4395
    %4442:i32 = phi %4429, %4382
    %4440:ptr = phi %4429, %4358
    %4438:ptr = phi %4429, %4291
    %4436:ptr = phi %4429, %4338
    %4211:ptr = phi %4256, %4210, %4246
    %4212:ptr = phi %4258, %4253, %4211
    %4213:ptr = phi %4282, %4212
    %4214:ptr = phi %4234, %4213
    %4537:ptr = phi %4218, %4213, %4214
    %4538:ptr = phi %4287, %4212, %4537
    %4207:ptr = phi %4289, %4206, %4538
    %4432:ptr = phi %4429, %4207
    %4208:ptr = phi %4269, %4207
    %4314:ptr = phi %4306, %4208
    %4209:ptr = phi %4298, %4208
    %4210:ptr = phi %4308, %4314, %4209
    %4246:ptr = phi %4245, %4210
    %4253:ptr = phi %4252, %4246
    %4215:ctrl = call @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NumberGroupSeparatorTChar[System.Char]()" %4233, %4214, %21
    %4216:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.ReadOnlySpan`1[System.Char])" %4215, %4335, %21
    %4219:i32 = phi %4218, %4228, %4476
    %3012:i32 = phi %2638, %3011
    %4443:i32 = phi %4431, %3012, %4442
    %3014:i32 = phi %2459, %3006, %4443
    %4994:i32 = phi %2712, %3014
    %5046:i32 = phi %2718, %4994
    %5048:i32 = phi %2536, %5046
    %5047:i32 = phi %2539, %5046
    %5049:i32 = phi %2549, %5047, %5048
    %5050:i32 = phi %2557, %5049
    %5051:i32 = phi %2564, %5049, %5050
    %4995:i32 = phi %2722, %4994
    %4996:i32 = phi %2724, %4995
    %4997:i32 = phi %2731, %4996
    %4998:i32 = phi %2733, %4997
    %5001:i32 = phi %2740, %4998
    %4999:i32 = phi %2742, %4998
    %3015:i32 = phi %2775, %3014
    %3018:i32 = phi %2825, %3015
    %3019:i32 = phi %2827, %3018
    %4991:i32 = phi %2875, %3019
    %4992:i32 = phi %2877, %4991
    %5002:i32 = phi %2884, %4992, %4996
    %5033:i32 = phi %2399, %5002
    %5034:i32 = phi %2990, %5033
    %5036:i32 = phi %3436, %5034
    %5035:i32 = phi %3442, %5034
    %5037:i32 = phi %3455, %5035, %5036
    %5038:i32 = phi %3465, %5037
    %5039:i32 = phi %3480, %5037, %5038
    %5040:i32 = phi %4059, %5039, %5045
    %5042:i32 = phi %3489, %5040
    %5041:i32 = phi %3492, %5040
    %5043:i32 = phi %3502, %5041, %5042
    %5045:i32 = phi %3510, %5043
    %5044:i32 = phi %3517, %5043
    %2999:i32 = phi %2998, %5033, %5044
    %5003:i32 = phi %2392, %5002
    %5005:i32 = phi %2966, %5003
    %5004:i32 = phi %2973, %5003
    %5006:i32 = phi %3129, %5004, %5005
    %5008:i32 = phi %3150, %5006
    %5009:i32 = phi %3162, %5008
    %5011:i32 = phi %3188, %5008, %5009
    %5010:i32 = phi %3195, %5009
    %5012:i32 = phi %3212, %5010, %5011
    %5014:i32 = phi %3230, %5012
    %5015:i32 = phi %3242, %5014
    %5017:i32 = phi %3271, %5014, %5015
    %5016:i32 = phi %3278, %5015
    %5018:i32 = phi %3295, %5016, %5017
    %5032:i32 = phi %3318, %5018
    %5019:i32 = phi %3306, %5018
    %5013:i32 = phi %3223, %5012
    %5007:i32 = phi %3141, %5006
    %5020:i32 = phi %3308, %5007, %5013, %5019
    %5021:i32 = phi %3348, %5020, %5031
    %5023:i32 = phi %3358, %5021
    %5022:i32 = phi %3363, %5021
    %5024:i32 = phi %3360, %5022, %5023
    %5031:i32 = phi %3346, %5024
    %5025:i32 = phi %3388, %5024
    %5026:i32 = phi %3395, %5025
    %5027:i32 = phi %3399, %5025, %5026
    %5029:i32 = phi %2602, %5027
    %5028:i32 = phi %2599, %5027
    %4993:i32 = phi %2886, %4992
    %5000:i32 = phi %2888, %3015, %3015, %3019, %3019, %4993, %4999
    %4990:i32 = phi %2843, %3019
    %4979:i32 = phi %2853, %3019
    %4981:i32 = phi %2370, %4979
    %4986:i32 = phi %2339, %4981
    %4982:i32 = phi %2342, %4981
    %4984:i32 = phi %2256, %4982
    %4983:i32 = phi %2259, %4982
    %4985:i32 = phi %3675, %4983, %4984
    %4987:i32 = phi %3677, %4985, %4986
    %4988:i32 = phi %3694, %4987
    %4989:i32 = phi %3703, %4987, %4988
    %4980:i32 = phi %2365, %4979
    %3020:i32 = phi %2861, %3015, %3019
    %3025:i32 = phi %2481, %3020
    %3625:i32 = phi %3594, %3025
    %3627:i32 = phi %2489, %3625
    %3626:i32 = phi %2492, %3625
    %3628:i32 = phi %2494, %3626, %3627
    %3026:i32 = phi %3552, %3025
    %3027:i32 = phi %3557, %3628, %3026
    %3021:i32 = phi %2470, %3020
    %3023:i32 = phi %2312, %3021
    %3022:i32 = phi %2315, %3021
    %3024:i32 = phi %2317, %3022, %3023
    %3028:i32 = phi %3559, %3024, %3027
    %3029:i32 = phi %3568, %3028
    %3030:i32 = phi %2421, %3029
    %4966:i32 = phi %2423, %3029, %3030
    %3031:i32 = phi %2506, %3030
    %4967:i32 = phi %2508, %3031, %4966
    %3032:i32 = icmp slt %3031, %28
    %3033:i32 = icmp eq %3032, %28
    %3034:i32 = phi %2508, %3033, %28
    %3035:i32 = and %3034, %38
    %3036:ctrl, %3037:ctrl = brcond %2507, %3035
    %3038:ctrl, %3039:phisel = region %3036
    %5554:i32 = phi %3039, %5553
    %5555:i32 = phi %2432, %5554
    %5556:i32 = phi %2435, %5554, %5555
    %5523:i32 = phi %3039, %5522
    %5524:i32 = phi %2432, %5523
    %5525:i32 = phi %2435, %5523, %5524
    %5286:i32 = phi %3039, %5285
    %5287:i32 = phi %2432, %5286
    %5288:i32 = phi %2435, %5286, %5287
    %5278:i32 = phi %3039, %5277
    %5279:i32 = phi %2432, %5278
    %5280:i32 = phi %2435, %5278, %5279
    %5172:i32 = phi %3039, %5171
    %5173:i32 = phi %2432, %5172
    %5269:i32 = phi %2435, %5172, %5173
    %4968:i32 = phi %3039, %4967
    %4972:ctrl, %4973:ptr = call @"System.Int32& System.Span`1[System.Int32]::get_Item(System.Int32)" %3038, %6, %4968
    %4974:ctrl, %4975:i32 = load.4 %4972, %4973
    %4976:i32 = iadd %4975, %33
    %4969:i32 = phi %2432, %4968
    %4970:i32 = isub %4969, %33
    %4971:i32 = phi %2435, %4968, %4970
    %4577:ptr = phi %3039, %4576
    %4578:ptr = phi %2432, %4577
    %4581:ptr = phi %2435, %4577, %4578
    %4579:ctrl = call @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NumberGroupSeparatorTChar[System.Char]()" %2431, %4578, %23
    %3983:ptr = phi %3039, %3982
    %3984:ptr = phi %2432, %3983
    %4580:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Append(System.ReadOnlySpan`1[System.Char])" %4579, %3984, %23
    %3985:ptr = phi %2435, %3983, %3984
    %3640:ptr = phi %3039, %3639
    %3641:ptr = phi %2432, %3640
    %3642:ptr = phi %2435, %3640, %3641
    %3622:ptr = phi %3039, %3621
    %3623:ptr = phi %2432, %3622
    %3624:ptr = phi %2435, %3622, %3623
    %3574:i32 = phi %3039, %3573
    %3575:i32 = phi %2432, %3574
    %3576:i32 = phi %2435, %3574, %3575
    %3040:i32 = phi %3039, %2510
    %3041:i32 = phi %2432, %3040
    %3042:i32 = phi %2435, %3040, %3041
    %3043:ctrl, %3044:phisel = region %3037, %2434
    %3583:ctrl, %3584:phisel = region %3566, %3043
    %5557:i32 = phi %3044, %5553, %5556
    %5558:i32 = phi %3584, %5548, %5557
    %5526:i32 = phi %3044, %5522, %5525
    %5527:i32 = phi %3584, %5517, %5526
    %5289:i32 = phi %3044, %5285, %5288
    %5290:i32 = phi %3584, %2416, %5289
    %5281:i32 = phi %3044, %5277, %5280
    %5273:i32 = phi %3044, %2425, %5272
    %5274:i32 = phi %3584, %2499, %5273
    %5275:i32 = isub %5274, %33
    %5270:i32 = phi %3044, %5171, %5269
    %5271:i32 = phi %3584, %5083, %5270
    %4977:i32 = phi %3044, %4967, %4971
    %4978:i32 = phi %3584, %3028, %4977
    %4964:ptr = phi %3044, %3639, %3642
    %4965:ptr = phi %3584, %3634, %4964
    %4962:i32 = phi %3044, %3573, %3576
    %4963:i32 = phi %3584, %3562, %4962
    %4582:ptr = phi %3044, %4576, %4581
    %4583:ptr = phi %3584, %4571, %4582
    %4132:ptr = phi %3044, %4128, %4131
    %4133:ptr = phi %3584, %4123, %4132
    %4069:ptr = phi %4612, %4095, %4155, %4133, %4107, %4135, %4144, %4145, %4068, %4675, %4156, %4688
    %4070:ptr = phi %4614, %2191, %4069
    %4071:ptr = phi %2519, %4070
    %4073:ptr = phi %3064, %4070, %4071
    %4072:ptr = phi %3058, %4071
    %4074:ptr = phi %3066, %4072, %4073
    %4085:ptr = phi %3076, %4074
    %4086:ptr = phi %2449, %4085
    %4087:ptr = phi %2618, %4086
    %4088:ptr = phi %2620, %4087
    %4089:ptr = phi %2627, %4088
    %4090:ptr = phi %2629, %4089
    %4092:ptr = phi %2636, %4086, %4088, %4090
    %4325:ptr = phi %4289, %4092, %4324
    %4434:ptr = phi %4429, %4325
    %4326:ptr = phi %4269, %4325
    %4327:ptr = phi %4298, %4326
    %4315:ptr = phi %4306, %4326
    %4316:ptr = phi %4308, %4315, %4327
    %4317:ptr = phi %4245, %4316
    %4319:ptr = phi %4256, %4316, %4317
    %4318:ptr = phi %4252, %4317
    %4320:ptr = phi %4258, %4318, %4319
    %4321:ptr = phi %4282, %4320
    %4322:ptr = phi %4234, %4321
    %4323:ptr = phi %4218, %4321, %4322
    %4324:ptr = phi %4287, %4320, %4323
    %4091:ptr = phi %2638, %4090
    %4435:ptr = phi %4431, %4091, %4434
    %4093:ptr = phi %2459, %4085, %4435
    %4149:ptr = phi %2712, %4093
    %4683:ptr = phi %2718, %4149
    %4685:ptr = phi %2536, %4683
    %4684:ptr = phi %2539, %4683
    %4686:ptr = phi %2549, %4684, %4685
    %4687:ptr = phi %2557, %4686
    %4688:ptr = phi %2564, %4686, %4687
    %4150:ptr = phi %2722, %4149
    %4151:ptr = phi %2724, %4150
    %4152:ptr = phi %2731, %4151
    %4153:ptr = phi %2733, %4152
    %4156:ptr = phi %2740, %4153
    %4154:ptr = phi %2742, %4153
    %4094:ptr = phi %2775, %4093
    %4109:ptr = phi %2825, %4094
    %4110:ptr = phi %2827, %4109
    %4146:ptr = phi %2875, %4110
    %4147:ptr = phi %2877, %4146
    %4157:ptr = phi %2884, %4147, %4151
    %4676:ptr = phi %2399, %4157
    %4677:ptr = phi %2990, %4676
    %4679:ptr = phi %3436, %4677
    %4678:ptr = phi %3442, %4677
    %4680:ptr = phi %3455, %4678, %4679
    %4681:ptr = phi %3465, %4680
    %4682:ptr = phi %3480, %4680, %4681
    %4062:ptr = phi %4059, %4682, %4689
    %4064:ptr = phi %3489, %4062
    %4063:ptr = phi %3492, %4062
    %4065:ptr = phi %3502, %4063, %4064
    %4689:ptr = phi %3510, %4065
    %4066:ptr = phi %3517, %4065
    %4067:ptr = phi %2998, %4676, %4066
    %4158:ptr = phi %2392, %4157
    %4160:ptr = phi %2966, %4158
    %4159:ptr = phi %2973, %4158
    %4161:ptr = phi %3129, %4159, %4160
    %4163:ptr = phi %3150, %4161
    %4164:ptr = phi %3162, %4163
    %4166:ptr = phi %3188, %4163, %4164
    %4165:ptr = phi %3195, %4164
    %4167:ptr = phi %3212, %4165, %4166
    %4169:ptr = phi %3230, %4167
    %4170:ptr = phi %3242, %4169
    %4172:ptr = phi %3271, %4169, %4170
    %4171:ptr = phi %3278, %4170
    %4173:ptr = phi %3295, %4171, %4172
    %4675:ptr = phi %3318, %4173
    %4174:ptr = phi %3306, %4173
    %4168:ptr = phi %3223, %4167
    %4162:ptr = phi %3141, %4161
    %4175:ptr = phi %3308, %4162, %4168, %4174
    %4176:ptr = phi %3348, %4175, %4674
    %4178:ptr = phi %3358, %4176
    %4177:ptr = phi %3363, %4176
    %4179:ptr = phi %3360, %4177, %4178
    %4674:ptr = phi %3346, %4179
    %4180:ptr = phi %3388, %4179
    %4181:ptr = phi %3395, %4180
    %4182:ptr = phi %3399, %4180, %4181
    %4672:ptr = phi %2602, %4182
    %4183:ptr = phi %2599, %4182
    %4184:ptr = ptroff %4183, %42
    %4185:ctrl, %4186:i32 = load.4 %2598, %4184
    %4187:ctrl, %4188:phisel = region %4185, %2601
    %5895:i32 = phi %4188, %5893, %5894
    %5912:i32 = phi %2295, %5895, %5911
    %5919:i32 = phi %4612, %5805, %5865, %5843, %5817, %5845, %5854, %5855, %5912, %5897, %5866, %5918
    %5734:i32 = phi %4614, %5733, %5919
    %5735:i32 = phi %2519, %5734
    %5737:i32 = phi %3064, %5734, %5735
    %5736:i32 = phi %3058, %5735
    %5738:i32 = phi %3066, %5736, %5737
    %5780:i32 = phi %3076, %5738
    %5781:i32 = phi %2449, %5780
    %5782:i32 = phi %2618, %5781
    %5783:i32 = phi %2620, %5782
    %5784:i32 = phi %2627, %5783
    %5785:i32 = phi %2629, %5784
    %5787:i32 = phi %2636, %5781, %5783, %5785
    %5788:i32 = phi %4289, %5787, %5802
    %5791:i32 = phi %4269, %5788
    %5793:i32 = phi %4298, %5791
    %5792:i32 = phi %4306, %5791
    %5794:i32 = phi %4308, %5792, %5793
    %5795:i32 = phi %4245, %5794
    %5797:i32 = phi %4256, %5794, %5795
    %5796:i32 = phi %4252, %5795
    %5798:i32 = phi %4258, %5796, %5797
    %5799:i32 = phi %4282, %5798
    %5800:i32 = phi %4234, %5799
    %5801:i32 = phi %4218, %5799, %5800
    %5802:i32 = phi %4287, %5798, %5801
    %5789:i32 = phi %4429, %5788
    %5786:i32 = phi %2638, %5785
    %5790:i32 = phi %4431, %5786, %5789
    %5803:i32 = phi %2459, %5780, %5790
    %5859:i32 = phi %2712, %5803
    %5913:i32 = phi %2718, %5859
    %5915:i32 = phi %2536, %5913
    %5914:i32 = phi %2539, %5913
    %5916:i32 = phi %2549, %5914, %5915
    %5917:i32 = phi %2557, %5916
    %5918:i32 = phi %2564, %5916, %5917
    %5860:i32 = phi %2722, %5859
    %5861:i32 = phi %2724, %5860
    %5862:i32 = phi %2731, %5861
    %5863:i32 = phi %2733, %5862
    %5866:i32 = phi %2740, %5863
    %5864:i32 = phi %2742, %5863
    %5804:i32 = phi %2775, %5803
    %5819:i32 = phi %2825, %5804
    %5820:i32 = phi %2827, %5819
    %5856:i32 = phi %2875, %5820
    %5857:i32 = phi %2877, %5856
    %5867:i32 = phi %2884, %5857, %5861
    %5898:i32 = phi %2399, %5867
    %5899:i32 = phi %2990, %5898
    %5901:i32 = phi %3436, %5899
    %5900:i32 = phi %3442, %5899
    %5902:i32 = phi %3455, %5900, %5901
    %5903:i32 = phi %3465, %5902
    %5904:i32 = phi %3480, %5902, %5903
    %5905:i32 = phi %4059, %5904, %5910
    %5907:i32 = phi %3489, %5905
    %5906:i32 = phi %3492, %5905
    %5908:i32 = phi %3502, %5906, %5907
    %5910:i32 = phi %3510, %5908
    %5909:i32 = phi %3517, %5908
    %5911:i32 = phi %2998, %5898, %5909
    %5868:i32 = phi %2392, %5867
    %5870:i32 = phi %2966, %5868
    %5869:i32 = phi %2973, %5868
    %5871:i32 = phi %3129, %5869, %5870
    %5873:i32 = phi %3150, %5871
    %5874:i32 = phi %3162, %5873
    %5876:i32 = phi %3188, %5873, %5874
    %5875:i32 = phi %3195, %5874
    %5877:i32 = phi %3212, %5875, %5876
    %5879:i32 = phi %3230, %5877
    %5880:i32 = phi %3242, %5879
    %5882:i32 = phi %3271, %5879, %5880
    %5881:i32 = phi %3278, %5880
    %5883:i32 = phi %3295, %5881, %5882
    %5897:i32 = phi %3318, %5883
    %5884:i32 = phi %3306, %5883
    %5878:i32 = phi %3223, %5877
    %5872:i32 = phi %3141, %5871
    %5885:i32 = phi %3308, %5872, %5878, %5884
    %5886:i32 = phi %3348, %5885, %5896
    %5888:i32 = phi %3358, %5886
    %5887:i32 = phi %3363, %5886
    %5889:i32 = phi %3360, %5887, %5888
    %5896:i32 = phi %3346, %5889
    %5890:i32 = phi %3388, %5889
    %5891:i32 = phi %3395, %5890
    %5892:i32 = phi %3399, %5890, %5891
    %5894:i32 = phi %2602, %5892
    %5893:i32 = phi %2599, %5892
    %5858:i32 = phi %2886, %5857
    %5865:i32 = phi %2888, %5804, %5804, %5820, %5820, %5858, %5864
    %5855:i32 = phi %2843, %5820
    %5844:i32 = phi %2853, %5820
    %5846:i32 = phi %2370, %5844
    %5851:i32 = phi %2339, %5846
    %5847:i32 = phi %2342, %5846
    %5849:i32 = phi %2256, %5847
    %5848:i32 = phi %2259, %5847
    %5850:i32 = phi %3675, %5848, %5849
    %5852:i32 = phi %3677, %5850, %5851
    %5853:i32 = phi %3694, %5852
    %5854:i32 = phi %3703, %5852, %5853
    %5845:i32 = phi %2365, %5844
    %5821:i32 = phi %2861, %5804, %5820
    %5826:i32 = phi %2481, %5821
    %5831:i32 = phi %3552, %5826
    %5827:i32 = phi %3594, %5826
    %5829:i32 = phi %2489, %5827
    %5828:i32 = phi %2492, %5827
    %5830:i32 = phi %2494, %5828, %5829
    %5832:i32 = phi %3557, %5830, %5831
    %5822:i32 = phi %2470, %5821
    %5824:i32 = phi %2312, %5822
    %5823:i32 = phi %2315, %5822
    %5825:i32 = phi %2317, %5823, %5824
    %5833:i32 = phi %3559, %5825, %5832
    %5834:i32 = phi %3568, %5833
    %5835:i32 = phi %2421, %5834
    %5837:i32 = phi %2423, %5834, %5835
    %5836:i32 = phi %2506, %5835
    %5838:i32 = phi %2508, %5836, %5837
    %5839:i32 = phi %3039, %5838
    %5840:i32 = phi %2432, %5839
    %5841:i32 = phi %2435, %5839, %5840
    %5842:i32 = phi %3044, %5838, %5841
    %5843:i32 = phi %3584, %5833, %5842
    %5806:i32 = phi %2817, %5804, %5804
    %5807:i32 = phi %3730, %5806, %5818
    %5808:i32 = phi %3738, %5807
    %5810:i32 = phi %3758, %5807, %5808
    %5809:i32 = phi %3751, %5808
    %5811:i32 = phi %3783, %5809, %5810
    %5818:i32 = phi %3772, %5811
    %5812:i32 = phi %3801, %5811
    %5814:i32 = phi %3823, %5812
    %5813:i32 = phi %3832, %5812
    %5815:i32 = phi %3849, %5813, %5814
    %5816:i32 = phi %3863, %5815
    %5817:i32 = phi %3873, %5815, %5816
    %5805:i32 = phi %2803, %5804
    %5739:i32 = phi %3078, %5738
    %5634:i32 = phi %4188, %2290, %5633
    %5651:i32 = phi %2295, %5634, %5650
    %5610:i32 = phi %4188, %5608, %5609
    %5489:i32 = phi %4188, %5487, %5488
    %5506:i32 = phi %2295, %5489, %5505
    %5416:i32 = phi %4188, %5414, %5415
    %5433:i32 = phi %2295, %5416, %5432
    %5342:i32 = phi %4188, %5340, %5341
    %5245:i32 = phi %4188, %5243, %5244
    %5262:i32 = phi %2295, %5245, %5261
    %5125:i32 = phi %4188, %3415, %5124
    %5126:i32 = phi %2295, %5125, %5053
    %5123:ptr = phi %4188, %2600, %5122
    %5143:ptr = phi %2295, %5123, %5142
    %5030:i32 = phi %4188, %5028, %5029
    %3000:i32 = phi %2295, %5030, %2999
    %4938:i32 = phi %4188, %4936, %4937
    %4955:i32 = phi %2295, %4938, %4954
    %4820:i32 = phi %4612, %4851, %4908, %4819, %4863, %4889, %4897, %4898, %4955, %4940, %4909, %4961
    %4821:i32 = phi %4614, %39, %4820
    %4822:i32 = phi %2519, %4821
    %4824:i32 = phi %3064, %4821, %4822
    %4823:i32 = phi %3058, %4822
    %4825:i32 = phi %3066, %4823, %4824
    %4826:i32 = phi %3076, %4825
    %4827:i32 = phi %2449, %4826
    %4828:i32 = phi %2618, %4827
    %4829:i32 = phi %2620, %4828
    %4830:i32 = phi %2627, %4829
    %4831:i32 = phi %2629, %4830
    %4833:i32 = phi %2636, %4827, %4829, %4831
    %4834:i32 = phi %4289, %4833, %4848
    %4837:i32 = phi %4269, %4834
    %4839:i32 = phi %4298, %4837
    %4838:i32 = phi %4306, %4837
    %4840:i32 = phi %4308, %4838, %4839
    %4841:i32 = phi %4245, %4840
    %4843:i32 = phi %4256, %4840, %4841
    %4842:i32 = phi %4252, %4841
    %4844:i32 = phi %4258, %4842, %4843
    %4845:i32 = phi %4282, %4844
    %4846:i32 = phi %4234, %4845
    %4847:i32 = phi %4218, %4845, %4846
    %4848:i32 = phi %4287, %4844, %4847
    %4835:i32 = phi %4429, %4834
    %4832:i32 = phi %2638, %4831
    %4836:i32 = phi %4431, %4832, %4835
    %4849:i32 = phi %2459, %4826, %4836
    %4902:i32 = phi %2712, %4849
    %4956:i32 = phi %2718, %4902
    %4958:i32 = phi %2536, %4956
    %4957:i32 = phi %2539, %4956
    %4959:i32 = phi %2549, %4957, %4958
    %4960:i32 = phi %2557, %4959
    %4961:i32 = phi %2564, %4959, %4960
    %4903:i32 = phi %2722, %4902
    %4904:i32 = phi %2724, %4903
    %4905:i32 = phi %2731, %4904
    %4906:i32 = phi %2733, %4905
    %4909:i32 = phi %2740, %4906
    %4907:i32 = phi %2742, %4906
    %4850:i32 = phi %2775, %4849
    %4865:i32 = phi %2825, %4850
    %4866:i32 = phi %2827, %4865
    %4899:i32 = phi %2875, %4866
    %4900:i32 = phi %2877, %4899
    %4910:i32 = phi %2884, %4900, %4904
    %4941:i32 = phi %2399, %4910
    %4942:i32 = phi %2990, %4941
    %4944:i32 = phi %3436, %4942
    %4943:i32 = phi %3442, %4942
    %4945:i32 = phi %3455, %4943, %4944
    %4946:i32 = phi %3465, %4945
    %4947:i32 = phi %3480, %4945, %4946
    %4948:i32 = phi %4059, %4947, %4953
    %4950:i32 = phi %3489, %4948
    %4949:i32 = phi %3492, %4948
    %4951:i32 = phi %3502, %4949, %4950
    %4953:i32 = phi %3510, %4951
    %4952:i32 = phi %3517, %4951
    %4954:i32 = phi %2998, %4941, %4952
    %4911:i32 = phi %2392, %4910
    %4913:i32 = phi %2966, %4911
    %4912:i32 = phi %2973, %4911
    %4914:i32 = phi %3129, %4912, %4913
    %4916:i32 = phi %3150, %4914
    %4917:i32 = phi %3162, %4916
    %4919:i32 = phi %3188, %4916, %4917
    %4918:i32 = phi %3195, %4917
    %4920:i32 = phi %3212, %4918, %4919
    %4922:i32 = phi %3230, %4920
    %4923:i32 = phi %3242, %4922
    %4925:i32 = phi %3271, %4922, %4923
    %4924:i32 = phi %3278, %4923
    %4926:i32 = phi %3295, %4924, %4925
    %4940:i32 = phi %3318, %4926
    %4927:i32 = phi %3306, %4926
    %4921:i32 = phi %3223, %4920
    %4915:i32 = phi %3141, %4914
    %4928:i32 = phi %3308, %4915, %4921, %4927
    %4929:i32 = phi %3348, %4928, %4939
    %4931:i32 = phi %3358, %4929
    %4930:i32 = phi %3363, %4929
    %4932:i32 = phi %3360, %4930, %4931
    %4939:i32 = phi %3346, %4932
    %4933:i32 = phi %3388, %4932
    %4934:i32 = phi %3395, %4933
    %4935:i32 = phi %3399, %4933, %4934
    %4937:i32 = phi %2602, %4935
    %4936:i32 = phi %2599, %4935
    %4901:i32 = phi %2886, %4900
    %4908:i32 = phi %2888, %4850, %4850, %4866, %4866, %4901, %4907
    %4898:i32 = phi %2843, %4866
    %4888:i32 = phi %2853, %4866
    %4890:i32 = phi %2370, %4888
    %4895:i32 = phi %2339, %4890
    %4891:i32 = phi %2342, %4890
    %4893:i32 = phi %2256, %4891
    %4892:i32 = phi %2259, %4891
    %4894:i32 = phi %3675, %4892, %4893
    %4896:i32 = phi %3677, %4894, %4895
    %4897:i32 = phi %3703, %4896, %40
    %4889:i32 = phi %2365, %4888
    %4867:i32 = phi %2861, %4850, %4866
    %4872:i32 = phi %2481, %4867
    %4877:i32 = phi %3552, %4872
    %4873:i32 = phi %3594, %4872
    %4875:i32 = phi %2489, %4873
    %4874:i32 = phi %2492, %4873
    %4876:i32 = phi %2494, %4874, %4875
    %4878:i32 = phi %3557, %4876, %4877
    %4868:i32 = phi %2470, %4867
    %4870:i32 = phi %2312, %4868
    %4869:i32 = phi %2315, %4868
    %4871:i32 = phi %2317, %4869, %4870
    %4879:i32 = phi %3559, %4871, %4878
    %4880:i32 = phi %3568, %4879
    %4881:i32 = phi %2421, %4880
    %4883:i32 = phi %2423, %4880, %4881
    %4882:i32 = phi %2506, %4881
    %4884:i32 = phi %2508, %4882, %4883
    %4885:i32 = phi %3039, %4884
    %4886:i32 = phi %2432, %4885
    %4887:i32 = phi %2435, %4885, %4886
    %4818:i32 = phi %3044, %4884, %4887
    %4819:i32 = phi %3584, %4879, %4818
    %4852:i32 = phi %2817, %4850, %4850
    %4853:i32 = phi %3730, %4852, %4864
    %4854:i32 = phi %3738, %4853
    %4856:i32 = phi %3758, %4853, %4854
    %4855:i32 = phi %3751, %4854
    %4857:i32 = phi %3783, %4855, %4856
    %4864:i32 = phi %3772, %4857
    %4858:i32 = phi %3801, %4857
    %4860:i32 = phi %3823, %4858
    %4859:i32 = phi %3832, %4858
    %4861:i32 = phi %3849, %4859, %4860
    %4862:i32 = phi %3863, %4861
    %4863:i32 = phi %3873, %4861, %4862
    %4851:i32 = phi %2803, %4850
    %4768:ptr = phi %4188, %4766, %4767
    %3520:ptr = phi %2295, %4768, %3519
    %4673:ptr = phi %4188, %4183, %4672
    %4068:ptr = phi %2295, %4673, %4067
    %4671:ptr = phi %4188, %3421, %3422
    %4803:ptr = phi %2295, %4671, %4802
    %4669:i32 = phi %4188, %3406, %3407
    %4670:i32 = and %4669, %38
    %4668:i32 = phi %4188, %3401, %3402
    %4667:ptr = phi %4188, %4038, %4039
    %4708:ptr = phi %2295, %4667, %4707
    %4189:ptr = phi %4188, %4643, %4644
    %4190:ptr = phi %2295, %4189, %4660
    %4148:ptr = phi %2886, %4147
    %4155:ptr = phi %2888, %4094, %4094, %4110, %4110, %4148, %4154
    %4145:ptr = phi %2843, %4110
    %4134:ptr = phi %2853, %4110
    %4136:ptr = phi %2370, %4134
    %4141:ptr = phi %2339, %4136
    %4137:ptr = phi %2342, %4136
    %4139:ptr = phi %2256, %4137
    %4138:ptr = phi %2259, %4137
    %4140:ptr = phi %3675, %4138, %4139
    %4142:ptr = phi %3677, %4140, %4141
    %4143:ptr = phi %3694, %4142
    %4144:ptr = phi %3703, %4142, %4143
    %4135:ptr = phi %2365, %4134
    %4111:ptr = phi %2861, %4094, %4110
    %4116:ptr = phi %2481, %4111
    %4121:ptr = phi %3552, %4116
    %4117:ptr = phi %3594, %4116
    %4119:ptr = phi %2489, %4117
    %4118:ptr = phi %2492, %4117
    %4120:ptr = phi %2494, %4118, %4119
    %4122:ptr = phi %3557, %4120, %4121
    %4112:ptr = phi %2470, %4111
    %4114:ptr = phi %2312, %4112
    %4113:ptr = phi %2315, %4112
    %4115:ptr = phi %2317, %4113, %4114
    %4123:ptr = phi %3559, %4115, %4122
    %4124:ptr = phi %3568, %4123
    %4125:ptr = phi %2421, %4124
    %4127:ptr = phi %2423, %4124, %4125
    %4126:ptr = phi %2506, %4125
    %4128:ptr = phi %2508, %4126, %4127
    %4129:ptr = phi %3039, %4128
    %4130:ptr = phi %2432, %4129
    %4131:ptr = phi %2435, %4129, %4130
    %4096:ptr = phi %2817, %4094, %4094
    %4097:ptr = phi %3730, %4096, %4108
    %4098:ptr = phi %3738, %4097
    %4100:ptr = phi %3758, %4097, %4098
    %4099:ptr = phi %3751, %4098
    %4101:ptr = phi %3783, %4099, %4100
    %4108:ptr = phi %3772, %4101
    %4102:ptr = phi %3801, %4101
    %4104:ptr = phi %3823, %4102
    %4103:ptr = phi %3832, %4102
    %4105:ptr = phi %3849, %4103, %4104
    %4106:ptr = phi %3863, %4105
    %4107:ptr = phi %3873, %4105, %4106
    %4095:ptr = phi %2803, %4094
    %4075:ptr = phi %3078, %4074
    %4076:ptr = ptroff %4075, %57
    %4077:ctrl, %4078:i32 = load.1 %3077, %4076
    %4079:ctrl, %4080:ctrl = brcond %4077, %4078
    %4081:ctrl, %4082:phisel = region %4079
    %5740:i32 = phi %4082, %5739
    %5741:ctrl, %5742:ctrl = brcond %4081, %5740
    %5743:ctrl, %5744:phisel = region %5742
    %4083:ptr = phi %4082, %4075
    %5746:ptr = phi %5744, %4083
    %5747:ptr = ptroff %5746, %42
    %5748:ctrl, %5749:i32 = load.4 %5743, %5747
    %5750:ctrl, %5751:ctrl = brcond %5748, %5749
    %5755:ctrl, %5756:phisel = region %5751
    %5752:ctrl, %5753:phisel = region %4080, %5741, %5750
    %3986:ptr = phi %3044, %3982, %3985
    %3988:ptr = phi %3584, %3977, %3986
    %3045:ptr = phi %3044, %3621, %3624
    %3017:i32 = phi %2817, %3015, %3015
    %3795:i32 = phi %3730, %3017, %3794
    %3796:i32 = phi %3738, %3795
    %3798:i32 = phi %3758, %3795, %3796
    %3797:i32 = phi %3751, %3796
    %3799:i32 = phi %3783, %3797, %3798
    %3807:i32 = phi %3801, %3799
    %3837:i32 = phi %3832, %3807
    %3827:i32 = phi %3823, %3807
    %3853:i32 = phi %3849, %3837, %3827
    %3867:i32 = phi %3863, %3853
    %3794:i32 = phi %3772, %3799
    %3016:i32 = phi %2803, %3015
    %3826:ptr = phi %3823, %3806
    %3852:ptr = phi %3849, %3835, %3826
    %3866:ptr = phi %3863, %3852
    %3876:ptr = phi %3873, %3852, %3866
    %3773:ptr = phi %3772, %3792
    %3793:i64 = ptrtoint %3773
    %3885:i64 = iadd %3793, %3884
    %3886:ptr = inttoptr %3885
    %3887:ctrl, %3888:i32 = load.2 %3771, %3886
    %3889:i32 = and %3888, %29
    %3091:ptr = phi %2803, %3090
    %3050:i64 = ptrtoint %3049
    %3595:ptr = phi %3594, %3546
    %3597:ptr = phi %2489, %3595
    %3596:ptr = phi %2492, %3595
    %3598:ptr = phi %2494, %3596, %3597
    %3599:ptr = phi %3557, %3598, %3587
    %3542:ptr = phi %2470, %3541
    %3544:ptr = phi %2312, %3542
    %3543:ptr = phi %2315, %3542
    %3545:ptr = phi %2317, %3543, %3544
    %3600:ptr = phi %3559, %3545, %3599
    %3601:ptr = phi %3568, %3600
    %3602:ptr = phi %2421, %3601
    %3604:ptr = phi %2423, %3601, %3602
    %3603:ptr = phi %2506, %3602
    %3605:ptr = phi %2508, %3603, %3604
    %3606:ptr = phi %3039, %3605
    %3607:ptr = phi %2432, %3606
    %3608:ptr = phi %2435, %3606, %3607
    %3609:ptr = phi %3044, %3605, %3608
    %3610:ptr = phi %3584, %3600, %3609
    %3538:ptr = phi %2817, %3536, %3536
    %3537:ptr = phi %2803, %3536
    %3785:ptr = phi %3772, %3784
    %3786:ptr = phi %3730, %3538, %3785
    %3787:ptr = phi %3738, %3786
    %3788:ptr = phi %3751, %3787
    %3739:ptr = phi %3738, %3724
    %3752:ptr = phi %3751, %3739
    %3722:ptr = phi %2803, %3721
    %3711:ptr = phi %3078, %3710
    %4084:ptr = phi %4082, %3711
    %5758:ptr = phi %5744, %4084
    %5774:ptr = phi %5753, %3711, %4084, %5758
    %5759:ptr = phi %5756, %5758
    %5760:ctrl, %5761:i32 = call @"System.Int32 System.Collections.Generic.ValueListBuilder`1[System.Char]::get_Length()" %5755, %5759
    %5762:ctrl, %5763:phisel = region %5760, %5752
    %5775:ptr = phi %5763, %5759, %5774
    %5765:i32 = icmp slt %28, %5761
    %5766:i32 = phi %5763, %5765, %28
    %5767:i32 = and %5766, %38
    %5768:ctrl, %5769:ctrl = brcond %5762, %5767
    %5770:ctrl, %5771:phisel = region %5768
    %5776:ptr = phi %5771, %5775
    %3759:i32 = phi %3758, %3762, %3763
    %3760:i32 = phi %3783, %3764, %3759
    %3808:i32 = phi %3801, %3760
    %3838:i32 = phi %3832, %3808
    %3828:i32 = phi %3823, %3808
    %3854:i32 = phi %3849, %3838, %3828
    %3868:i32 = phi %3863, %3854
    %3878:i32 = phi %3873, %3854, %3868
    %3761:i32 = phi %3772, %3760
    %2822:i32 = phi %2817, %2303, %2303
    %3939:i32 = phi %3730, %2822, %3950
    %3940:i32 = phi %3738, %3939
    %3942:i32 = phi %3758, %3939, %3940
    %3941:i32 = phi %3751, %3940
    %3943:i32 = phi %3783, %3941, %3942
    %3950:i32 = phi %3772, %3943
    %3944:i32 = phi %3801, %3943
    %3946:i32 = phi %3823, %3944
    %3945:i32 = phi %3832, %3944
    %3947:i32 = phi %3849, %3945, %3946
    %3948:i32 = phi %3863, %3947
    %3949:i32 = phi %3873, %3947, %3948
    %2821:i32 = phi %2817, %2330, %2330
    %3927:i32 = phi %3730, %2821, %3938
    %3928:i32 = phi %3738, %3927
    %3930:i32 = phi %3758, %3927, %3928
    %3929:i32 = phi %3751, %3928
    %3931:i32 = phi %3783, %3929, %3930
    %3938:i32 = phi %3772, %3931
    %3932:i32 = phi %3801, %3931
    %3934:i32 = phi %3823, %3932
    %3933:i32 = phi %3832, %3932
    %3935:i32 = phi %3849, %3933, %3934
    %3936:i32 = phi %3863, %3935
    %3937:i32 = phi %3873, %3935, %3936
    %2820:i32 = phi %2817, %2355, %2355
    %3915:i32 = phi %3730, %2820, %3926
    %3916:i32 = phi %3738, %3915
    %3918:i32 = phi %3758, %3915, %3916
    %3917:i32 = phi %3751, %3916
    %3919:i32 = phi %3783, %3917, %3918
    %3926:i32 = phi %3772, %3919
    %3920:i32 = phi %3801, %3919
    %3922:i32 = phi %3823, %3920
    %3921:i32 = phi %3832, %3920
    %3923:i32 = phi %3849, %3921, %3922
    %3924:i32 = phi %3863, %3923
    %3925:i32 = phi %3873, %3923, %3924
    %2819:i32 = phi %2817, %2409, %2409
    %3903:i32 = phi %3730, %2819, %3914
    %3904:i32 = phi %3738, %3903
    %3906:i32 = phi %3758, %3903, %3904
    %3905:i32 = phi %3751, %3904
    %3907:i32 = phi %3783, %3905, %3906
    %3914:i32 = phi %3772, %3907
    %3908:i32 = phi %3801, %3907
    %3910:i32 = phi %3823, %3908
    %3909:i32 = phi %3832, %3908
    %3911:i32 = phi %3849, %3909, %3910
    %3912:i32 = phi %3863, %3911
    %3913:i32 = phi %3873, %3911, %3912
    %2818:i32 = phi %2817, %2461, %2461
    %3891:i32 = phi %3730, %2818, %3902
    %3892:i32 = phi %3738, %3891
    %3894:i32 = phi %3758, %3891, %3892
    %3893:i32 = phi %3751, %3892
    %3895:i32 = phi %3783, %3893, %3894
    %3902:i32 = phi %3772, %3895
    %3896:i32 = phi %3801, %3895
    %3898:i32 = phi %3823, %3896
    %3897:i32 = phi %3832, %3896
    %3899:i32 = phi %3849, %3897, %3898
    %3900:i32 = phi %3863, %3899
    %3901:i32 = phi %3873, %3899, %3900
    %2482:i32 = phi %2481, %2464
    %3652:i32 = phi %3594, %2482
    %3654:i32 = phi %2489, %3652
    %3653:i32 = phi %2492, %3652
    %3655:i32 = phi %2494, %3653, %3654
    %3591:i32 = phi %3552, %2482
    %3656:i32 = phi %3557, %3655, %3591
    %3657:i32 = phi %3559, %2475, %3656
    %3658:i32 = phi %3568, %3657
    %3659:i32 = phi %2421, %3658
    %5166:i32 = phi %2506, %3659
    %3660:i32 = phi %2423, %3658, %3659
    %5167:i32 = phi %2508, %5166, %3660
    %5168:i32 = phi %3039, %5167
    %5169:i32 = phi %2432, %5168
    %2250:i32 = phi %2370, %2249
    %5660:i32 = phi %2339, %2250
    %5661:i32 = phi %3677, %5659, %5660
    %5662:i32 = phi %3694, %5661
    %5663:i32 = phi %3703, %5661, %5662
    %5728:i32 = phi %4612, %2809, %5674, %5540, %3961, %2368, %5663, %5664, %5721, %5706, %5675, %5727
    %2241:i32 = phi %4614, %2240, %5728
    %5164:i32 = phi %2519, %2241
    %5165:i32 = phi %3058, %5164
    %2242:i32 = phi %3064, %2241, %5164
    %2243:i32 = phi %3066, %5165, %2242
    %2244:i32 = phi %3076, %2243
    %2457:i32 = phi %2449, %2244
    %2699:i32 = phi %2618, %2457
    %2700:i32 = phi %2620, %2699
    %2701:i32 = phi %2627, %2700
    %2702:i32 = phi %2629, %2701
    %2704:i32 = phi %2636, %2457, %2700, %2702
    %4524:i32 = phi %4289, %2704, %4523
    %4527:i32 = phi %4269, %4524
    %4529:i32 = phi %4298, %4527
    %4528:i32 = phi %4306, %4527
    %4530:i32 = phi %4308, %4528, %4529
    %4531:i32 = phi %4245, %4530
    %4533:i32 = phi %4256, %4530, %4531
    %4532:i32 = phi %4252, %4531
    %4534:i32 = phi %4258, %4532, %4533
    %4535:i32 = phi %4282, %4534
    %4536:i32 = phi %4234, %4535
    %4522:i32 = phi %4218, %4535, %4536
    %4523:i32 = phi %4287, %4534, %4522
    %4525:i32 = phi %4429, %4524
    %2703:i32 = phi %2638, %2702
    %4526:i32 = phi %4431, %2703, %4525
    %2245:i32 = phi %2459, %2244, %4526
    %5668:i32 = phi %2712, %2245
    %5722:i32 = phi %2718, %5668
    %5724:i32 = phi %2536, %5722
    %5723:i32 = phi %2539, %5722
    %5725:i32 = phi %2549, %5723, %5724
    %5726:i32 = phi %2557, %5725
    %5727:i32 = phi %2564, %5725, %5726
    %5669:i32 = phi %2722, %5668
    %5670:i32 = phi %2724, %5669
    %5671:i32 = phi %2731, %5670
    %5672:i32 = phi %2733, %5671
    %5675:i32 = phi %2740, %5672
    %5673:i32 = phi %2742, %5672
    %2246:i32 = phi %2775, %2245
    %2823:i32 = phi %2817, %2246, %2246
    %3951:i32 = phi %3730, %2823, %3962
    %3952:i32 = phi %3738, %3951
    %3954:i32 = phi %3758, %3951, %3952
    %3953:i32 = phi %3751, %3952
    %3955:i32 = phi %3783, %3953, %3954
    %3962:i32 = phi %3772, %3955
    %3956:i32 = phi %3801, %3955
    %3958:i32 = phi %3823, %3956
    %3957:i32 = phi %3832, %3956
    %3959:i32 = phi %3849, %3957, %3958
    %3960:i32 = phi %3863, %3959
    %3961:i32 = phi %3873, %3959, %3960
    %2809:i32 = phi %2803, %2246
    %2247:i32 = phi %2825, %2246
    %2248:i32 = phi %2827, %2247
    %5665:i32 = phi %2875, %2248
    %5666:i32 = phi %2877, %5665
    %5676:i32 = phi %2884, %5666, %5670
    %5707:i32 = phi %2399, %5676
    %5708:i32 = phi %2990, %5707
    %5710:i32 = phi %3436, %5708
    %5709:i32 = phi %3442, %5708
    %5711:i32 = phi %3455, %5709, %5710
    %5712:i32 = phi %3465, %5711
    %5713:i32 = phi %3480, %5711, %5712
    %5714:i32 = phi %4059, %5713, %5719
    %5716:i32 = phi %3489, %5714
    %5715:i32 = phi %3492, %5714
    %5717:i32 = phi %3502, %5715, %5716
    %5719:i32 = phi %3510, %5717
    %5718:i32 = phi %3517, %5717
    %5720:i32 = phi %2998, %5707, %5718
    %5677:i32 = phi %2392, %5676
    %5679:i32 = phi %2966, %5677
    %5678:i32 = phi %2973, %5677
    %5680:i32 = phi %3129, %5678, %5679
    %5682:i32 = phi %3150, %5680
    %5683:i32 = phi %3162, %5682
    %5685:i32 = phi %3188, %5682, %5683
    %5684:i32 = phi %3195, %5683
    %5686:i32 = phi %3212, %5684, %5685
    %5688:i32 = phi %3230, %5686
    %5689:i32 = phi %3242, %5688
    %5691:i32 = phi %3271, %5688, %5689
    %5690:i32 = phi %3278, %5689
    %5692:i32 = phi %3295, %5690, %5691
    %5706:i32 = phi %3318, %5692
    %5693:i32 = phi %3306, %5692
    %5687:i32 = phi %3223, %5686
    %5681:i32 = phi %3141, %5680
    %5694:i32 = phi %3308, %5681, %5687, %5693
    %5695:i32 = phi %3348, %5694, %5705
    %5697:i32 = phi %3358, %5695
    %5696:i32 = phi %3363, %5695
    %5698:i32 = phi %3360, %5696, %5697
    %5705:i32 = phi %3346, %5698
    %5699:i32 = phi %3388, %5698
    %5700:i32 = phi %3395, %5699
    %5701:i32 = phi %3399, %5699, %5700
    %5703:i32 = phi %2602, %5701
    %5702:i32 = phi %2599, %5701
    %5704:i32 = phi %4188, %5702, %5703
    %5721:i32 = phi %2295, %5704, %5720
    %5667:i32 = phi %2886, %5666
    %5674:i32 = phi %2888, %2246, %2246, %2248, %2248, %5667, %5673
    %5664:i32 = phi %2843, %2248
    %2871:i32 = phi %2861, %2246, %2248
    %5187:i32 = phi %2481, %2871
    %5192:i32 = phi %3552, %5187
    %5188:i32 = phi %3594, %5187
    %5190:i32 = phi %2489, %5188
    %5189:i32 = phi %2492, %5188
    %5191:i32 = phi %2494, %5189, %5190
    %5193:i32 = phi %3557, %5191, %5192
    %2872:i32 = phi %2470, %2871
    %5528:i32 = phi %2315, %2872
    %2873:i32 = phi %2312, %2872
    %5529:i32 = phi %2317, %5528, %2873
    %5530:i32 = phi %3559, %5529, %5193
    %5531:i32 = phi %3568, %5530
    %5532:i32 = phi %2421, %5531
    %5534:i32 = phi %2423, %5531, %5532
    %5533:i32 = phi %2506, %5532
    %5535:i32 = phi %2508, %5533, %5534
    %5536:i32 = phi %3039, %5535
    %5537:i32 = phi %2432, %5536
    %5538:i32 = phi %2435, %5536, %5537
    %5539:i32 = phi %3044, %5535, %5538
    %5540:i32 = phi %3584, %5530, %5539
    %2249:i32 = phi %2853, %2248
    %2368:i32 = phi %2365, %2249
    %2260:i32 = phi %2259, %5447
    %2261:i32 = phi %3675, %2260, %5448
    %2262:i32 = phi %3677, %2261, %5375
    %3701:i32 = phi %3694, %2262
    %2263:i32 = phi %3703, %2262, %3701
    %4191:ptr = phi %4612, %4541, %4607, %4583, %4555, %4585, %4596, %4597, %4190, %4646, %4608, %4666
    %4197:ptr = phi %3078, %4196
    %4198:ptr = phi %4082, %4197
    %5745:ptr = phi %5744, %4198
    %5757:ptr = phi %5756, %5745
    %5754:ptr = phi %5753, %4197, %4198, %5745
    %5764:ptr = phi %5763, %5757, %5754
    %5772:ptr = phi %5771, %5764
    %5773:ctrl = call @"System.ReadOnlySpan`1[System.Char] System.Globalization.NumberFormatInfo::NegativeSignTChar[System.Char]()" %5770, %5772, %20
    %5777:ctrl = call @"System.Void System.Collections.Generic.ValueListBuilder`1[System.Char]::Insert(System.Int32, System.ReadOnlySpan`1[System.Char])" %5773, %5776, %28, %20
    %5778:ctrl, %5779:phisel = region %5769, %5777
    return %5778
    %988:ptr = phi %160, %987
}
