# run: codegen

func @fcmp64_ole_i32:i32(f64, f64) {
    # check: function `fcmp64_ole_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 66 0f 2e c8                     ucomisd xmm1, xmm0
    # nextln: 00000a: 0f 93 c0                        setae al
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:f64, %2:f64 = entry
    %3:i32 = fcmp ole %1, %2
    return %0, %3
}

func @fcmp64_ole_i64:i64(f64, f64) {
    # check: function `fcmp64_ole_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 66 0f 2e c8                     ucomisd xmm1, xmm0
    # nextln: 00000a: 0f 93 c0                        setae al
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:f64, %2:f64 = entry
    %3:i64 = fcmp ole %1, %2
    return %0, %3
}

func @fcmp32_ole_i32:i32(f32, f32) {
    # check: function `fcmp32_ole_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 0f 2e c8                        ucomiss xmm1, xmm0
    # nextln: 000009: 0f 93 c0                        setae al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:f32, %2:f32 = entry
    %3:i32 = fcmp ole %1, %2
    return %0, %3
}

func @fcmp32_ole_i64:i64(f32, f32) {
    # check: function `fcmp32_ole_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 33 c0                           xor eax, eax
    # nextln: 000006: 0f 2e c8                        ucomiss xmm1, xmm0
    # nextln: 000009: 0f 93 c0                        setae al
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:f32, %2:f32 = entry
    %3:i64 = fcmp ole %1, %2
    return %0, %3
}
