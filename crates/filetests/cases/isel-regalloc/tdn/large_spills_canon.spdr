# run: isel-regalloc

extfunc @gc_new:ptr(ptr, i64)
extfunc @"System.Boolean Tests.Bool_No_Op::simple_func_bool()":i32()
extfunc @throw_index_out_of_range_exception()
extfunc @"System.Void Tests.Bool_No_Op::.ctor()"(ptr)

func @"System.Int32 Tests.Bool_No_Op::Sub_Funclet_0()":i32() {
    # check: function `System.Int32 Tests.Bool_No_Op::Sub_Funclet_0()`:
    # nextln: clobbers: rax, rbx, rcx, rdx, rdi, rsi, r8, r9, r10, r11, r12, r13, r14
    # nextln: frame: size 37, align 8
    # nextln:     !0: 0
    # nextln:     !1: 24
    # nextln:     !2: 8
    # nextln:     !3: 28
    # nextln:     !4: 16
    # nextln:     !5: 36
    # nextln:     !6: 32
    # nextln:       block0:
    # nextln: 0000:     $$rbx = MovRI64(106721347401152)
    # nextln: 0003:     $$rdi = MovRI64(106721347409152)
    # nextln: 0004:     $$r14 = MovRmS32(3)
    # nextln: 0005:     $$r13 = MovRmS32(1)
    # nextln: 0006:     $$rax = MovRmS32(0)
    # nextln: 0007:     $$rcx = MovRmS32(0)
    # nextln: 0008:     MovStackR(!1, S32) $$rax
    # nextln: 0009:     MovStackR(!6, S32) $$rax
    # nextln: 0010:     MovStackR(!3, S32) $$rax
    # nextln: 0011:     MovStackR(!5, S8) $$rax
    # nextln: 0012:     MovStackR(!4, S64) $$rcx
    # nextln: 0013:     MovStackR(!2, S64) $$rcx
    # nextln: 0014:     MovStackR(!0, S64) $$rcx
    # nextln: 0015:     MovStackR(!1, S32) $$rax
    # nextln: 0016:     MovStackR(!6, S32) $$rax
    # nextln: 0017:     MovStackR(!3, S32) $$r13
    # nextln: 0018:     MovStackR(!5, S8) $$r13
    # nextln: 0019:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = MovRmS32(35)
    # nextln: 0020:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$r12 = $$rax
    # nextln: 0021:     $$rax = FuncAddrAbs(External(extfunc3))
    # nextln:           $$rdi = $$r12
    # nextln: 0022:     CallRm $$rax, $$rdi
    # nextln: 0023:     MovStackR(!4, S64) $$r12
    # nextln: 0024:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = MovRmS32(51)
    # nextln:           $$rdi = $$rbx
    # nextln: 0025:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rcx = $$rax
    # nextln: 0026:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0027:     MovMR(S32) $$rcx, $$r14
    # nextln: 0028:     MovStackR(!2, S64) $$rax
    # nextln: 0029:     $$rax = FuncAddrAbs(External(extfunc0))
    # nextln:           $$rsi = MovRmS32(51)
    # nextln:           $$rdi = $$rbx
    # nextln: 0030:     $$rax = CallRm $$rax, $$rdi, $$rsi
    # nextln:           $$rcx = $$rax
    # nextln: 0031:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0032:     MovMR(S32) $$rcx, $$r14
    # nextln: 0033:     MovStackR(!0, S64) $$rax
    # nextln: 0034:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0035:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0036:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0037:     AluRRm(S64, Test) $$rcx, $$rcx
    # nextln: 0038:     Jumpcc(G, block1, block2)
    # nextln:       block1:
    # nextln: 0039:     $$rax = AluRmI(S64, Add, 40) $$rax
    # nextln: 0040:     MovMR(S8) $$rax, $$r13
    # nextln: 0041:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0042:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0043:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0044:     AluRmI(S64, Cmp, 1) $$rcx
    # nextln: 0045:     Jumpcc(G, block3, block4)
    # nextln:       block3:
    # nextln: 0046:     $$rax = AluRmI(S64, Add, 41) $$rax
    # nextln: 0047:     MovMR(S8) $$rax, $$r13
    # nextln: 0048:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0049:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0050:     $$rcx = MovRM(S32) $$rcx
    # nextln: 0051:     AluRmI(S64, Cmp, 2) $$rcx
    # nextln: 0052:     Jumpcc(G, block5, block6)
    # nextln:       block5:
    # nextln: 0053:     $$rax = AluRmI(S64, Add, 42) $$rax
    # nextln: 0054:     MovMR(S8) $$rax, $$r13
    # nextln: 0055:     $$rcx = MovRI64(105690555221008)
    # nextln: 0056:     $$rdx = MovRI64(105690555220976)
    # nextln: 0057:     $$rbx = MovRI64(105690555220944)
    # nextln: 0058:     MovMR(S8) $$rbx, $$r13
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 0059:     MovMR(S8) $$rdx, $$rax
    # nextln: 0060:     MovMR(S8) $$rcx, $$r13
    # nextln: 0061:     $$rcx = MovRStack(!4, S64)
    # nextln: 0062:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0063:     MovMR(S8) $$rcx, $$r13
    # nextln: 0064:     $$rcx = MovRStack(!4, S64)
    # nextln: 0065:     $$rcx = AluRmI(S64, Add, 33) $$rcx
    # nextln: 0066:     MovMR(S8) $$rcx, $$rax
    # nextln: 0067:     $$rax = MovRStack(!4, S64)
    # nextln: 0068:     $$rax = AluRmI(S64, Add, 34) $$rax
    # nextln: 0069:     MovMR(S8) $$rax, $$r13
    # nextln: 0070:     $$rax = MovRStack(!1, S32)
    # nextln: 0071:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0072:     MovStackR(!1, S32) $$rax
    # nextln: 0073:     $$rax = MovRStack(!1, S32)
    # nextln: 0074:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0075:     MovStackR(!1, S32) $$rax
    # nextln: 0076:     $$rax = MovRStack(!1, S32)
    # nextln: 0077:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0078:     MovStackR(!1, S32) $$rax
    # nextln: 0079:     $$rax = MovRStack(!1, S32)
    # nextln: 0080:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0081:     MovStackR(!1, S32) $$rax
    # nextln: 0082:     $$rax = MovRStack(!1, S32)
    # nextln: 0083:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0084:     MovStackR(!1, S32) $$rax
    # nextln: 0085:     $$rax = MovRStack(!1, S32)
    # nextln: 0086:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0087:     MovStackR(!1, S32) $$rax
    # nextln: 0088:     $$rax = MovRStack(!1, S32)
    # nextln: 0089:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0090:     MovStackR(!1, S32) $$rax
    # nextln: 0091:     $$rax = MovRStack(!1, S32)
    # nextln: 0092:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0093:     MovStackR(!1, S32) $$rax
    # nextln: 0094:     $$rax = MovRStack(!6, S32)
    # nextln: 0095:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0096:     MovStackR(!6, S32) $$rax
    # nextln: 0097:     $$rax = MovRStack(!6, S32)
    # nextln: 0098:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0099:     MovStackR(!6, S32) $$rax
    # nextln: 0100:     $$rax = MovRStack(!6, S32)
    # nextln: 0101:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0102:     MovStackR(!6, S32) $$rax
    # nextln: 0103:     $$rax = MovRStack(!6, S32)
    # nextln: 0104:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0105:     MovStackR(!6, S32) $$rax
    # nextln: 0106:     $$rax = MovRStack(!6, S32)
    # nextln: 0107:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0108:     MovStackR(!6, S32) $$rax
    # nextln: 0109:     $$rax = MovRStack(!6, S32)
    # nextln: 0110:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0111:     MovStackR(!6, S32) $$rax
    # nextln: 0112:     $$rax = MovRStack(!6, S32)
    # nextln: 0113:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0114:     MovStackR(!6, S32) $$rax
    # nextln: 0115:     $$rax = MovRStack(!6, S32)
    # nextln: 0116:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0117:     MovStackR(!6, S32) $$rax
    # nextln: 0118:     $$rax = MovRStack(!5, S8)
    # nextln: 0119:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0120:     Jumpcc(Ne, block7, block8)
    # nextln:       block7:
    # nextln: 0121:     $$rax = MovRStack(!1, S32)
    # nextln: 0122:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0123:     MovStackR(!1, S32) $$rax
    # nextln: 0124:     Jump(block9)
    # nextln:       block8:
    # nextln: 0125:     $$rax = MovRStack(!6, S32)
    # nextln: 0126:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0127:     MovStackR(!6, S32) $$rax
    # nextln: 0128:     Jump(block9)
    # nextln:       block9:
    # nextln: 0129:     $$rax = MovRStack(!5, S8)
    # nextln: 0130:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0131:     Jumpcc(Ne, block10, block11)
    # nextln:       block10:
    # nextln: 0132:     $$rax = MovRStack(!1, S32)
    # nextln: 0133:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0134:     MovStackR(!1, S32) $$rax
    # nextln: 0135:     Jump(block12)
    # nextln:       block11:
    # nextln: 0136:     $$rax = MovRStack(!6, S32)
    # nextln: 0137:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0138:     MovStackR(!6, S32) $$rax
    # nextln: 0139:     Jump(block12)
    # nextln:       block12:
    # nextln: 0140:     $$rax = MovRStack(!5, S8)
    # nextln: 0141:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0142:     Jumpcc(Ne, block13, block14)
    # nextln:       block13:
    # nextln: 0143:     $$rax = MovRStack(!1, S32)
    # nextln: 0144:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0145:     MovStackR(!1, S32) $$rax
    # nextln: 0146:     Jump(block15)
    # nextln:       block14:
    # nextln: 0147:     $$rax = MovRStack(!6, S32)
    # nextln: 0148:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0149:     MovStackR(!6, S32) $$rax
    # nextln: 0150:     Jump(block15)
    # nextln:       block15:
    # nextln: 0151:     $$rax = MovRStack(!5, S8)
    # nextln: 0152:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0153:     Jumpcc(Ne, block16, block17)
    # nextln:       block16:
    # nextln: 0154:     $$rax = MovRStack(!1, S32)
    # nextln: 0155:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0156:     MovStackR(!1, S32) $$rax
    # nextln: 0157:     Jump(block18)
    # nextln:       block17:
    # nextln: 0158:     $$rax = MovRStack(!6, S32)
    # nextln: 0159:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0160:     MovStackR(!6, S32) $$rax
    # nextln: 0161:     Jump(block18)
    # nextln:       block18:
    # nextln: 0162:     $$rax = MovRStack(!5, S8)
    # nextln: 0163:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0164:     Jumpcc(Ne, block19, block20)
    # nextln:       block19:
    # nextln: 0165:     $$rax = MovRStack(!1, S32)
    # nextln: 0166:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0167:     MovStackR(!1, S32) $$rax
    # nextln: 0168:     Jump(block21)
    # nextln:       block20:
    # nextln: 0169:     $$rax = MovRStack(!6, S32)
    # nextln: 0170:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0171:     MovStackR(!6, S32) $$rax
    # nextln: 0172:     Jump(block21)
    # nextln:       block21:
    # nextln: 0173:     $$rax = MovRStack(!5, S8)
    # nextln: 0174:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0175:     Jumpcc(Ne, block22, block23)
    # nextln:       block22:
    # nextln: 0176:     $$rax = MovRStack(!1, S32)
    # nextln: 0177:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0178:     MovStackR(!1, S32) $$rax
    # nextln: 0179:     Jump(block24)
    # nextln:       block23:
    # nextln: 0180:     $$rax = MovRStack(!6, S32)
    # nextln: 0181:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0182:     MovStackR(!6, S32) $$rax
    # nextln: 0183:     Jump(block24)
    # nextln:       block24:
    # nextln: 0184:     $$rax = MovRStack(!5, S8)
    # nextln: 0185:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0186:     Jumpcc(Ne, block25, block26)
    # nextln:       block25:
    # nextln: 0187:     $$rax = MovRStack(!1, S32)
    # nextln: 0188:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0189:     MovStackR(!1, S32) $$rax
    # nextln: 0190:     Jump(block27)
    # nextln:       block26:
    # nextln: 0191:     $$rax = MovRStack(!6, S32)
    # nextln: 0192:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0193:     MovStackR(!6, S32) $$rax
    # nextln: 0194:     Jump(block27)
    # nextln:       block27:
    # nextln: 0195:     $$rax = MovRStack(!5, S8)
    # nextln: 0196:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0197:     Jumpcc(Ne, block28, block29)
    # nextln:       block28:
    # nextln: 0198:     $$rax = MovRStack(!1, S32)
    # nextln: 0199:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0200:     MovStackR(!1, S32) $$rax
    # nextln: 0201:     Jump(block30)
    # nextln:       block29:
    # nextln: 0202:     $$rax = MovRStack(!6, S32)
    # nextln: 0203:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0204:     MovStackR(!6, S32) $$rax
    # nextln: 0205:     Jump(block30)
    # nextln:       block30:
    # nextln: 0206:     $$rax = MovRM(S8) $$rbx
    # nextln: 0207:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0208:     Jumpcc(Ne, block31, block32)
    # nextln:       block31:
    # nextln: 0209:     $$rax = MovRStack(!1, S32)
    # nextln: 0210:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0211:     MovStackR(!1, S32) $$rax
    # nextln: 0212:     Jump(block33)
    # nextln:       block32:
    # nextln: 0213:     $$rax = MovRStack(!6, S32)
    # nextln: 0214:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0215:     MovStackR(!6, S32) $$rax
    # nextln: 0216:     Jump(block33)
    # nextln:       block33:
    # nextln: 0217:     $$rax = MovRM(S8) $$rbx
    # nextln: 0218:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0219:     Jumpcc(Ne, block34, block35)
    # nextln:       block34:
    # nextln: 0220:     $$rax = MovRStack(!1, S32)
    # nextln: 0221:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0222:     MovStackR(!1, S32) $$rax
    # nextln: 0223:     Jump(block36)
    # nextln:       block35:
    # nextln: 0224:     $$rax = MovRStack(!6, S32)
    # nextln: 0225:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0226:     MovStackR(!6, S32) $$rax
    # nextln: 0227:     Jump(block36)
    # nextln:       block36:
    # nextln: 0228:     $$rax = MovRM(S8) $$rbx
    # nextln: 0229:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0230:     Jumpcc(Ne, block37, block38)
    # nextln:       block37:
    # nextln: 0231:     $$rax = MovRStack(!1, S32)
    # nextln: 0232:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0233:     MovStackR(!1, S32) $$rax
    # nextln: 0234:     Jump(block39)
    # nextln:       block38:
    # nextln: 0235:     $$rax = MovRStack(!6, S32)
    # nextln: 0236:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0237:     MovStackR(!6, S32) $$rax
    # nextln: 0238:     Jump(block39)
    # nextln:       block39:
    # nextln: 0239:     $$rax = MovRM(S8) $$rbx
    # nextln: 0240:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0241:     Jumpcc(Ne, block40, block41)
    # nextln:       block40:
    # nextln: 0242:     $$rax = MovRStack(!1, S32)
    # nextln: 0243:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0244:     MovStackR(!1, S32) $$rax
    # nextln: 0245:     Jump(block42)
    # nextln:       block41:
    # nextln: 0246:     $$rax = MovRStack(!6, S32)
    # nextln: 0247:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0248:     MovStackR(!6, S32) $$rax
    # nextln: 0249:     Jump(block42)
    # nextln:       block42:
    # nextln: 0250:     $$rax = MovRM(S8) $$rbx
    # nextln: 0251:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0252:     Jumpcc(Ne, block43, block44)
    # nextln:       block43:
    # nextln: 0253:     $$rax = MovRStack(!1, S32)
    # nextln: 0254:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0255:     MovStackR(!1, S32) $$rax
    # nextln: 0256:     Jump(block45)
    # nextln:       block44:
    # nextln: 0257:     $$rax = MovRStack(!6, S32)
    # nextln: 0258:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0259:     MovStackR(!6, S32) $$rax
    # nextln: 0260:     Jump(block45)
    # nextln:       block45:
    # nextln: 0261:     $$rax = MovRM(S8) $$rbx
    # nextln: 0262:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0263:     Jumpcc(Ne, block46, block47)
    # nextln:       block46:
    # nextln: 0264:     $$rax = MovRStack(!1, S32)
    # nextln: 0265:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0266:     MovStackR(!1, S32) $$rax
    # nextln: 0267:     Jump(block48)
    # nextln:       block47:
    # nextln: 0268:     $$rax = MovRStack(!6, S32)
    # nextln: 0269:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0270:     MovStackR(!6, S32) $$rax
    # nextln: 0271:     Jump(block48)
    # nextln:       block48:
    # nextln: 0272:     $$rax = MovRM(S8) $$rbx
    # nextln: 0273:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0274:     Jumpcc(Ne, block49, block50)
    # nextln:       block49:
    # nextln: 0275:     $$rax = MovRStack(!1, S32)
    # nextln: 0276:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0277:     MovStackR(!1, S32) $$rax
    # nextln: 0278:     Jump(block51)
    # nextln:       block50:
    # nextln: 0279:     $$rax = MovRStack(!6, S32)
    # nextln: 0280:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0281:     MovStackR(!6, S32) $$rax
    # nextln: 0282:     Jump(block51)
    # nextln:       block51:
    # nextln: 0283:     $$rax = MovRM(S8) $$rbx
    # nextln: 0284:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0285:     Jumpcc(Ne, block52, block53)
    # nextln:       block52:
    # nextln: 0286:     $$rax = MovRStack(!1, S32)
    # nextln: 0287:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0288:     MovStackR(!1, S32) $$rax
    # nextln: 0289:     Jump(block54)
    # nextln:       block53:
    # nextln: 0290:     $$rax = MovRStack(!6, S32)
    # nextln: 0291:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0292:     MovStackR(!6, S32) $$rax
    # nextln: 0293:     Jump(block54)
    # nextln:       block54:
    # nextln: 0294:     $$rax = MovRStack(!4, S64)
    # nextln: 0295:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0296:     $$rax = MovRM(S8) $$rax
    # nextln: 0297:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0298:     Jumpcc(Ne, block55, block56)
    # nextln:       block55:
    # nextln: 0299:     $$rax = MovRStack(!1, S32)
    # nextln: 0300:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0301:     MovStackR(!1, S32) $$rax
    # nextln: 0302:     Jump(block57)
    # nextln:       block56:
    # nextln: 0303:     $$rax = MovRStack(!6, S32)
    # nextln: 0304:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0305:     MovStackR(!6, S32) $$rax
    # nextln: 0306:     Jump(block57)
    # nextln:       block57:
    # nextln: 0307:     $$rax = MovRStack(!4, S64)
    # nextln: 0308:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0309:     $$rax = MovRM(S8) $$rax
    # nextln: 0310:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0311:     Jumpcc(Ne, block58, block59)
    # nextln:       block58:
    # nextln: 0312:     $$rax = MovRStack(!1, S32)
    # nextln: 0313:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0314:     MovStackR(!1, S32) $$rax
    # nextln: 0315:     Jump(block60)
    # nextln:       block59:
    # nextln: 0316:     $$rax = MovRStack(!6, S32)
    # nextln: 0317:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0318:     MovStackR(!6, S32) $$rax
    # nextln: 0319:     Jump(block60)
    # nextln:       block60:
    # nextln: 0320:     $$rax = MovRStack(!4, S64)
    # nextln: 0321:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0322:     $$rax = MovRM(S8) $$rax
    # nextln: 0323:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0324:     Jumpcc(Ne, block61, block62)
    # nextln:       block61:
    # nextln: 0325:     $$rax = MovRStack(!1, S32)
    # nextln: 0326:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0327:     MovStackR(!1, S32) $$rax
    # nextln: 0328:     Jump(block63)
    # nextln:       block62:
    # nextln: 0329:     $$rax = MovRStack(!6, S32)
    # nextln: 0330:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0331:     MovStackR(!6, S32) $$rax
    # nextln: 0332:     Jump(block63)
    # nextln:       block63:
    # nextln: 0333:     $$rax = MovRStack(!4, S64)
    # nextln: 0334:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0335:     $$rax = MovRM(S8) $$rax
    # nextln: 0336:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0337:     Jumpcc(Ne, block64, block65)
    # nextln:       block64:
    # nextln: 0338:     $$rax = MovRStack(!1, S32)
    # nextln: 0339:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0340:     MovStackR(!1, S32) $$rax
    # nextln: 0341:     Jump(block66)
    # nextln:       block65:
    # nextln: 0342:     $$rax = MovRStack(!6, S32)
    # nextln: 0343:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0344:     MovStackR(!6, S32) $$rax
    # nextln: 0345:     Jump(block66)
    # nextln:       block66:
    # nextln: 0346:     $$rax = MovRStack(!4, S64)
    # nextln: 0347:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0348:     $$rax = MovRM(S8) $$rax
    # nextln: 0349:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0350:     Jumpcc(Ne, block67, block68)
    # nextln:       block67:
    # nextln: 0351:     $$rax = MovRStack(!1, S32)
    # nextln: 0352:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0353:     MovStackR(!1, S32) $$rax
    # nextln: 0354:     Jump(block69)
    # nextln:       block68:
    # nextln: 0355:     $$rax = MovRStack(!6, S32)
    # nextln: 0356:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0357:     MovStackR(!6, S32) $$rax
    # nextln: 0358:     Jump(block69)
    # nextln:       block69:
    # nextln: 0359:     $$rax = MovRStack(!4, S64)
    # nextln: 0360:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0361:     $$rax = MovRM(S8) $$rax
    # nextln: 0362:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0363:     Jumpcc(Ne, block70, block71)
    # nextln:       block70:
    # nextln: 0364:     $$rax = MovRStack(!1, S32)
    # nextln: 0365:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0366:     MovStackR(!1, S32) $$rax
    # nextln: 0367:     Jump(block72)
    # nextln:       block71:
    # nextln: 0368:     $$rax = MovRStack(!6, S32)
    # nextln: 0369:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0370:     MovStackR(!6, S32) $$rax
    # nextln: 0371:     Jump(block72)
    # nextln:       block72:
    # nextln: 0372:     $$rax = MovRStack(!4, S64)
    # nextln: 0373:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0374:     $$rax = MovRM(S8) $$rax
    # nextln: 0375:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0376:     Jumpcc(Ne, block73, block74)
    # nextln:       block73:
    # nextln: 0377:     $$rax = MovRStack(!1, S32)
    # nextln: 0378:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0379:     MovStackR(!1, S32) $$rax
    # nextln: 0380:     Jump(block75)
    # nextln:       block74:
    # nextln: 0381:     $$rax = MovRStack(!6, S32)
    # nextln: 0382:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0383:     MovStackR(!6, S32) $$rax
    # nextln: 0384:     Jump(block75)
    # nextln:       block75:
    # nextln: 0385:     $$rax = MovRStack(!4, S64)
    # nextln: 0386:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0387:     $$rax = MovRM(S8) $$rax
    # nextln: 0388:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0389:     Jumpcc(Ne, block76, block77)
    # nextln:       block76:
    # nextln: 0390:     $$rax = MovRStack(!1, S32)
    # nextln: 0391:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0392:     MovStackR(!1, S32) $$rax
    # nextln: 0393:     Jump(block78)
    # nextln:       block77:
    # nextln: 0394:     $$rax = MovRStack(!6, S32)
    # nextln: 0395:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0396:     MovStackR(!6, S32) $$rax
    # nextln: 0397:     Jump(block78)
    # nextln:       block78:
    # nextln: 0398:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0399:     $$rax = CallRm $$rax
    # nextln: 0400:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0401:     Jumpcc(Ne, block79, block80)
    # nextln:       block79:
    # nextln: 0402:     $$rax = MovRStack(!1, S32)
    # nextln: 0403:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0404:     MovStackR(!1, S32) $$rax
    # nextln: 0405:     Jump(block81)
    # nextln:       block80:
    # nextln: 0406:     $$rax = MovRStack(!6, S32)
    # nextln: 0407:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0408:     MovStackR(!6, S32) $$rax
    # nextln: 0409:     Jump(block81)
    # nextln:       block81:
    # nextln: 0410:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0411:     $$rax = CallRm $$rax
    # nextln: 0412:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0413:     Jumpcc(Ne, block82, block83)
    # nextln:       block82:
    # nextln: 0414:     $$rax = MovRStack(!1, S32)
    # nextln: 0415:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0416:     MovStackR(!1, S32) $$rax
    # nextln: 0417:     Jump(block84)
    # nextln:       block83:
    # nextln: 0418:     $$rax = MovRStack(!6, S32)
    # nextln: 0419:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0420:     MovStackR(!6, S32) $$rax
    # nextln: 0421:     Jump(block84)
    # nextln:       block84:
    # nextln: 0422:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0423:     $$rax = CallRm $$rax
    # nextln: 0424:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0425:     Jumpcc(Ne, block85, block86)
    # nextln:       block85:
    # nextln: 0426:     $$rax = MovRStack(!1, S32)
    # nextln: 0427:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0428:     MovStackR(!1, S32) $$rax
    # nextln: 0429:     Jump(block87)
    # nextln:       block86:
    # nextln: 0430:     $$rax = MovRStack(!6, S32)
    # nextln: 0431:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0432:     MovStackR(!6, S32) $$rax
    # nextln: 0433:     Jump(block87)
    # nextln:       block87:
    # nextln: 0434:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0435:     $$rax = CallRm $$rax
    # nextln: 0436:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0437:     Jumpcc(Ne, block88, block89)
    # nextln:       block88:
    # nextln: 0438:     $$rax = MovRStack(!1, S32)
    # nextln: 0439:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0440:     MovStackR(!1, S32) $$rax
    # nextln: 0441:     Jump(block90)
    # nextln:       block89:
    # nextln: 0442:     $$rax = MovRStack(!6, S32)
    # nextln: 0443:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0444:     MovStackR(!6, S32) $$rax
    # nextln: 0445:     Jump(block90)
    # nextln:       block90:
    # nextln: 0446:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0447:     $$rax = CallRm $$rax
    # nextln: 0448:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0449:     Jumpcc(Ne, block91, block92)
    # nextln:       block91:
    # nextln: 0450:     $$rax = MovRStack(!1, S32)
    # nextln: 0451:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0452:     MovStackR(!1, S32) $$rax
    # nextln: 0453:     Jump(block93)
    # nextln:       block92:
    # nextln: 0454:     $$rax = MovRStack(!6, S32)
    # nextln: 0455:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0456:     MovStackR(!6, S32) $$rax
    # nextln: 0457:     Jump(block93)
    # nextln:       block93:
    # nextln: 0458:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0459:     $$rax = CallRm $$rax
    # nextln: 0460:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0461:     Jumpcc(Ne, block94, block95)
    # nextln:       block94:
    # nextln: 0462:     $$rax = MovRStack(!1, S32)
    # nextln: 0463:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0464:     MovStackR(!1, S32) $$rax
    # nextln: 0465:     Jump(block96)
    # nextln:       block95:
    # nextln: 0466:     $$rax = MovRStack(!6, S32)
    # nextln: 0467:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0468:     MovStackR(!6, S32) $$rax
    # nextln: 0469:     Jump(block96)
    # nextln:       block96:
    # nextln: 0470:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0471:     $$rax = CallRm $$rax
    # nextln: 0472:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0473:     Jumpcc(Ne, block97, block98)
    # nextln:       block97:
    # nextln: 0474:     $$rax = MovRStack(!1, S32)
    # nextln: 0475:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0476:     MovStackR(!1, S32) $$rax
    # nextln: 0477:     Jump(block99)
    # nextln:       block98:
    # nextln: 0478:     $$rax = MovRStack(!6, S32)
    # nextln: 0479:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0480:     MovStackR(!6, S32) $$rax
    # nextln: 0481:     Jump(block99)
    # nextln:       block99:
    # nextln: 0482:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0483:     $$rax = CallRm $$rax
    # nextln: 0484:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0485:     Jumpcc(Ne, block100, block101)
    # nextln:       block100:
    # nextln: 0486:     $$rax = MovRStack(!1, S32)
    # nextln: 0487:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0488:     MovStackR(!1, S32) $$rax
    # nextln: 0489:     Jump(block102)
    # nextln:       block101:
    # nextln: 0490:     $$rax = MovRStack(!6, S32)
    # nextln: 0491:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0492:     MovStackR(!6, S32) $$rax
    # nextln: 0493:     Jump(block102)
    # nextln:       block102:
    # nextln: 0494:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0495:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0496:     $$rdx = MovRStack(!3, S32)
    # nextln: 0497:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0498:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0499:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0500:     Jumpcc(L, block103, block104)
    # nextln:       block103:
    # nextln: 0501:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0502:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0503:     $$rax = MovRM(S8) $$rax
    # nextln: 0504:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0505:     Jumpcc(Ne, block105, block106)
    # nextln:       block105:
    # nextln: 0506:     $$rax = MovRStack(!1, S32)
    # nextln: 0507:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0508:     MovStackR(!1, S32) $$rax
    # nextln: 0509:     Jump(block107)
    # nextln:       block106:
    # nextln: 0510:     $$rax = MovRStack(!6, S32)
    # nextln: 0511:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0512:     MovStackR(!6, S32) $$rax
    # nextln: 0513:     Jump(block107)
    # nextln:       block107:
    # nextln: 0514:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0515:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0516:     $$rdx = MovRStack(!3, S32)
    # nextln: 0517:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0518:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0519:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0520:     Jumpcc(L, block108, block109)
    # nextln:       block108:
    # nextln: 0521:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0522:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0523:     $$rax = MovRM(S8) $$rax
    # nextln: 0524:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0525:     Jumpcc(Ne, block110, block111)
    # nextln:       block110:
    # nextln: 0526:     $$rax = MovRStack(!1, S32)
    # nextln: 0527:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0528:     MovStackR(!1, S32) $$rax
    # nextln: 0529:     Jump(block112)
    # nextln:       block111:
    # nextln: 0530:     $$rax = MovRStack(!6, S32)
    # nextln: 0531:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0532:     MovStackR(!6, S32) $$rax
    # nextln: 0533:     Jump(block112)
    # nextln:       block112:
    # nextln: 0534:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0535:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0536:     $$rdi = MovRStack(!3, S32)
    # nextln: 0537:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0538:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0539:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0540:     Jumpcc(L, block113, block114)
    # nextln:       block113:
    # nextln: 0541:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0542:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0543:     $$rax = MovRM(S8) $$rax
    # nextln: 0544:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0545:     Jumpcc(Ne, block115, block116)
    # nextln:       block115:
    # nextln: 0546:     $$rax = MovRStack(!1, S32)
    # nextln: 0547:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0548:     MovStackR(!1, S32) $$rax
    # nextln: 0549:     Jump(block117)
    # nextln:       block116:
    # nextln: 0550:     $$rax = MovRStack(!6, S32)
    # nextln: 0551:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0552:     MovStackR(!6, S32) $$rax
    # nextln: 0553:     Jump(block117)
    # nextln:       block117:
    # nextln: 0554:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0555:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0556:     $$rdi = MovRStack(!3, S32)
    # nextln: 0557:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0558:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0559:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0560:     Jumpcc(L, block118, block119)
    # nextln:       block118:
    # nextln: 0561:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0562:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0563:     $$rax = MovRM(S8) $$rax
    # nextln: 0564:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0565:     Jumpcc(Ne, block120, block121)
    # nextln:       block120:
    # nextln: 0566:     $$rax = MovRStack(!1, S32)
    # nextln: 0567:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0568:     MovStackR(!1, S32) $$rax
    # nextln: 0569:     Jump(block122)
    # nextln:       block121:
    # nextln: 0570:     $$rax = MovRStack(!6, S32)
    # nextln: 0571:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0572:     MovStackR(!6, S32) $$rax
    # nextln: 0573:     Jump(block122)
    # nextln:       block122:
    # nextln: 0574:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0575:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0576:     $$rdx = MovRStack(!3, S32)
    # nextln: 0577:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0578:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0579:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0580:     Jumpcc(L, block123, block124)
    # nextln:       block123:
    # nextln: 0581:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0582:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0583:     $$rax = MovRM(S8) $$rax
    # nextln: 0584:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0585:     Jumpcc(Ne, block125, block126)
    # nextln:       block125:
    # nextln: 0586:     $$rax = MovRStack(!1, S32)
    # nextln: 0587:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0588:     MovStackR(!1, S32) $$rax
    # nextln: 0589:     Jump(block127)
    # nextln:       block126:
    # nextln: 0590:     $$rax = MovRStack(!6, S32)
    # nextln: 0591:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0592:     MovStackR(!6, S32) $$rax
    # nextln: 0593:     Jump(block127)
    # nextln:       block127:
    # nextln: 0594:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0595:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0596:     $$rdi = MovRStack(!3, S32)
    # nextln: 0597:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0598:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0599:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0600:     Jumpcc(L, block128, block129)
    # nextln:       block128:
    # nextln: 0601:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0602:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0603:     $$rax = MovRM(S8) $$rax
    # nextln: 0604:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0605:     Jumpcc(Ne, block130, block131)
    # nextln:       block130:
    # nextln: 0606:     $$rax = MovRStack(!1, S32)
    # nextln: 0607:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0608:     MovStackR(!1, S32) $$rax
    # nextln: 0609:     Jump(block132)
    # nextln:       block131:
    # nextln: 0610:     $$rax = MovRStack(!6, S32)
    # nextln: 0611:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0612:     MovStackR(!6, S32) $$rax
    # nextln: 0613:     Jump(block132)
    # nextln:       block132:
    # nextln: 0614:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0615:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0616:     $$rdx = MovRStack(!3, S32)
    # nextln: 0617:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0618:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0619:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0620:     Jumpcc(L, block133, block134)
    # nextln:       block133:
    # nextln: 0621:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0622:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0623:     $$rax = MovRM(S8) $$rax
    # nextln: 0624:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0625:     Jumpcc(Ne, block135, block136)
    # nextln:       block135:
    # nextln: 0626:     $$rax = MovRStack(!1, S32)
    # nextln: 0627:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0628:     MovStackR(!1, S32) $$rax
    # nextln: 0629:     Jump(block137)
    # nextln:       block136:
    # nextln: 0630:     $$rax = MovRStack(!6, S32)
    # nextln: 0631:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0632:     MovStackR(!6, S32) $$rax
    # nextln: 0633:     Jump(block137)
    # nextln:       block137:
    # nextln: 0634:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0635:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0636:     $$rdi = MovRStack(!3, S32)
    # nextln: 0637:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0638:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0639:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0640:     Jumpcc(L, block138, block139)
    # nextln:       block138:
    # nextln: 0641:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0642:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0643:     $$rax = MovRM(S8) $$rax
    # nextln: 0644:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0645:     Jumpcc(Ne, block140, block141)
    # nextln:       block140:
    # nextln: 0646:     $$rax = MovRStack(!1, S32)
    # nextln: 0647:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0648:     MovStackR(!1, S32) $$rax
    # nextln: 0649:     Jump(block142)
    # nextln:       block141:
    # nextln: 0650:     $$rax = MovRStack(!6, S32)
    # nextln: 0651:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0652:     MovStackR(!6, S32) $$rax
    # nextln: 0653:     Jump(block142)
    # nextln:       block142:
    # nextln: 0654:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0655:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0656:     $$rdi = MovRStack(!3, S32)
    # nextln: 0657:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0658:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0659:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0660:     Jumpcc(L, block143, block144)
    # nextln:       block143:
    # nextln: 0661:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0662:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0663:     $$rax = MovRM(S8) $$rax
    # nextln: 0664:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0665:     Jumpcc(Ne, block145, block146)
    # nextln:       block145:
    # nextln: 0666:     $$rax = MovRStack(!1, S32)
    # nextln: 0667:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0668:     MovStackR(!1, S32) $$rax
    # nextln: 0669:     Jump(block147)
    # nextln:       block146:
    # nextln: 0670:     $$rax = MovRStack(!6, S32)
    # nextln: 0671:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0672:     MovStackR(!6, S32) $$rax
    # nextln: 0673:     Jump(block147)
    # nextln:       block147:
    # nextln: 0674:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0675:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0676:     $$rdx = MovRStack(!3, S32)
    # nextln: 0677:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0678:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0679:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0680:     Jumpcc(L, block148, block149)
    # nextln:       block148:
    # nextln: 0681:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0682:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0683:     $$rax = MovRM(S8) $$rax
    # nextln: 0684:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0685:     Jumpcc(Ne, block150, block151)
    # nextln:       block150:
    # nextln: 0686:     $$rax = MovRStack(!1, S32)
    # nextln: 0687:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0688:     MovStackR(!1, S32) $$rax
    # nextln: 0689:     Jump(block152)
    # nextln:       block151:
    # nextln: 0690:     $$rax = MovRStack(!6, S32)
    # nextln: 0691:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0692:     MovStackR(!6, S32) $$rax
    # nextln: 0693:     Jump(block152)
    # nextln:       block152:
    # nextln: 0694:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0695:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0696:     $$rdi = MovRStack(!3, S32)
    # nextln: 0697:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0698:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0699:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0700:     Jumpcc(L, block153, block154)
    # nextln:       block153:
    # nextln: 0701:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0702:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0703:     $$rax = MovRM(S8) $$rax
    # nextln: 0704:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0705:     Jumpcc(Ne, block155, block156)
    # nextln:       block155:
    # nextln: 0706:     $$rax = MovRStack(!1, S32)
    # nextln: 0707:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0708:     MovStackR(!1, S32) $$rax
    # nextln: 0709:     Jump(block157)
    # nextln:       block156:
    # nextln: 0710:     $$rax = MovRStack(!6, S32)
    # nextln: 0711:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0712:     MovStackR(!6, S32) $$rax
    # nextln: 0713:     Jump(block157)
    # nextln:       block157:
    # nextln: 0714:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0715:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0716:     $$rdi = MovRStack(!3, S32)
    # nextln: 0717:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0718:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0719:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0720:     Jumpcc(L, block158, block159)
    # nextln:       block158:
    # nextln: 0721:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0722:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0723:     $$rax = MovRM(S8) $$rax
    # nextln: 0724:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0725:     Jumpcc(Ne, block160, block161)
    # nextln:       block160:
    # nextln: 0726:     $$rax = MovRStack(!1, S32)
    # nextln: 0727:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0728:     MovStackR(!1, S32) $$rax
    # nextln: 0729:     Jump(block162)
    # nextln:       block161:
    # nextln: 0730:     $$rax = MovRStack(!6, S32)
    # nextln: 0731:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0732:     MovStackR(!6, S32) $$rax
    # nextln: 0733:     Jump(block162)
    # nextln:       block162:
    # nextln: 0734:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0735:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0736:     $$rdx = MovRStack(!3, S32)
    # nextln: 0737:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0738:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0739:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0740:     Jumpcc(L, block163, block164)
    # nextln:       block163:
    # nextln: 0741:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0742:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0743:     $$rax = MovRM(S8) $$rax
    # nextln: 0744:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0745:     Jumpcc(Ne, block165, block166)
    # nextln:       block165:
    # nextln: 0746:     $$rax = MovRStack(!1, S32)
    # nextln: 0747:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0748:     MovStackR(!1, S32) $$rax
    # nextln: 0749:     Jump(block167)
    # nextln:       block166:
    # nextln: 0750:     $$rax = MovRStack(!6, S32)
    # nextln: 0751:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0752:     MovStackR(!6, S32) $$rax
    # nextln: 0753:     Jump(block167)
    # nextln:       block167:
    # nextln: 0754:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0755:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0756:     $$rdx = MovRStack(!3, S32)
    # nextln: 0757:     $$rdi = MovRM(S32) $$rcx
    # nextln: 0758:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 0759:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 0760:     Jumpcc(L, block168, block169)
    # nextln:       block168:
    # nextln: 0761:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0762:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0763:     $$rax = MovRM(S8) $$rax
    # nextln: 0764:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0765:     Jumpcc(Ne, block170, block171)
    # nextln:       block170:
    # nextln: 0766:     $$rax = MovRStack(!1, S32)
    # nextln: 0767:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0768:     MovStackR(!1, S32) $$rax
    # nextln: 0769:     Jump(block172)
    # nextln:       block171:
    # nextln: 0770:     $$rax = MovRStack(!6, S32)
    # nextln: 0771:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0772:     MovStackR(!6, S32) $$rax
    # nextln: 0773:     Jump(block172)
    # nextln:       block172:
    # nextln: 0774:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0775:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0776:     $$rdi = MovRStack(!3, S32)
    # nextln: 0777:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0778:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0779:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0780:     Jumpcc(L, block173, block174)
    # nextln:       block173:
    # nextln: 0781:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0782:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0783:     $$rax = MovRM(S8) $$rax
    # nextln: 0784:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0785:     Jumpcc(Ne, block175, block176)
    # nextln:       block175:
    # nextln: 0786:     $$rax = MovRStack(!1, S32)
    # nextln: 0787:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0788:     MovStackR(!1, S32) $$rax
    # nextln: 0789:     Jump(block177)
    # nextln:       block176:
    # nextln: 0790:     $$rax = MovRStack(!6, S32)
    # nextln: 0791:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0792:     MovStackR(!6, S32) $$rax
    # nextln: 0793:     Jump(block177)
    # nextln:       block177:
    # nextln: 0794:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0795:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0796:     $$rdi = MovRStack(!3, S32)
    # nextln: 0797:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0798:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0799:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0800:     Jumpcc(L, block178, block179)
    # nextln:       block178:
    # nextln: 0801:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0802:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0803:     $$rax = MovRM(S8) $$rax
    # nextln: 0804:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0805:     Jumpcc(Ne, block180, block181)
    # nextln:       block180:
    # nextln: 0806:     $$rax = MovRStack(!1, S32)
    # nextln: 0807:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0808:     MovStackR(!1, S32) $$rax
    # nextln: 0809:     Jump(block182)
    # nextln:       block181:
    # nextln: 0810:     $$rax = MovRStack(!6, S32)
    # nextln: 0811:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0812:     MovStackR(!6, S32) $$rax
    # nextln: 0813:     Jump(block182)
    # nextln:       block182:
    # nextln: 0814:     $$rax = MovRStack(!1, S32)
    # nextln: 0815:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0816:     MovStackR(!1, S32) $$rax
    # nextln: 0817:     $$rax = MovRStack(!6, S32)
    # nextln: 0818:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0819:     MovStackR(!6, S32) $$rax
    # nextln: 0820:     $$rax = MovRStack(!5, S8)
    # nextln: 0821:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0822:     Jumpcc(Ne, block183, block184)
    # nextln:       block183:
    # nextln: 0823:     $$rax = MovRStack(!1, S32)
    # nextln: 0824:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0825:     MovStackR(!1, S32) $$rax
    # nextln: 0826:     Jump(block185)
    # nextln:       block184:
    # nextln: 0827:     $$rax = MovRStack(!6, S32)
    # nextln: 0828:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0829:     MovStackR(!6, S32) $$rax
    # nextln: 0830:     Jump(block185)
    # nextln:       block185:
    # nextln: 0831:     $$rax = MovRM(S8) $$rbx
    # nextln: 0832:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0833:     Jumpcc(Ne, block186, block187)
    # nextln:       block186:
    # nextln: 0834:     $$rax = MovRStack(!1, S32)
    # nextln: 0835:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0836:     MovStackR(!1, S32) $$rax
    # nextln: 0837:     Jump(block188)
    # nextln:       block187:
    # nextln: 0838:     $$rax = MovRStack(!6, S32)
    # nextln: 0839:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0840:     MovStackR(!6, S32) $$rax
    # nextln: 0841:     Jump(block188)
    # nextln:       block188:
    # nextln: 0842:     $$rax = MovRStack(!4, S64)
    # nextln: 0843:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0844:     $$rax = MovRM(S8) $$rax
    # nextln: 0845:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0846:     Jumpcc(Ne, block189, block190)
    # nextln:       block189:
    # nextln: 0847:     $$rax = MovRStack(!1, S32)
    # nextln: 0848:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0849:     MovStackR(!1, S32) $$rax
    # nextln: 0850:     Jump(block191)
    # nextln:       block190:
    # nextln: 0851:     $$rax = MovRStack(!6, S32)
    # nextln: 0852:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0853:     MovStackR(!6, S32) $$rax
    # nextln: 0854:     Jump(block191)
    # nextln:       block191:
    # nextln: 0855:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0856:     $$rax = CallRm $$rax
    # nextln: 0857:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0858:     Jumpcc(Ne, block192, block193)
    # nextln:       block192:
    # nextln: 0859:     $$rax = MovRStack(!1, S32)
    # nextln: 0860:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0861:     MovStackR(!1, S32) $$rax
    # nextln: 0862:     Jump(block194)
    # nextln:       block193:
    # nextln: 0863:     $$rax = MovRStack(!6, S32)
    # nextln: 0864:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0865:     MovStackR(!6, S32) $$rax
    # nextln: 0866:     Jump(block194)
    # nextln:       block194:
    # nextln: 0867:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0868:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0869:     $$rdi = MovRStack(!3, S32)
    # nextln: 0870:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0871:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0872:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0873:     Jumpcc(L, block195, block196)
    # nextln:       block195:
    # nextln: 0874:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0875:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0876:     $$rax = MovRM(S8) $$rax
    # nextln: 0877:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0878:     Jumpcc(Ne, block197, block198)
    # nextln:       block197:
    # nextln: 0879:     $$rax = MovRStack(!1, S32)
    # nextln: 0880:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0881:     MovStackR(!1, S32) $$rax
    # nextln: 0882:     Jump(block199)
    # nextln:       block198:
    # nextln: 0883:     $$rax = MovRStack(!6, S32)
    # nextln: 0884:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0885:     MovStackR(!6, S32) $$rax
    # nextln: 0886:     Jump(block199)
    # nextln:       block199:
    # nextln: 0887:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0888:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0889:     $$rdi = MovRStack(!3, S32)
    # nextln: 0890:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0891:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0892:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0893:     Jumpcc(L, block200, block201)
    # nextln:       block200:
    # nextln: 0894:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0895:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0896:     $$rax = MovRM(S8) $$rax
    # nextln: 0897:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0898:     Jumpcc(Ne, block202, block203)
    # nextln:       block202:
    # nextln: 0899:     $$rax = MovRStack(!1, S32)
    # nextln: 0900:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0901:     MovStackR(!1, S32) $$rax
    # nextln: 0902:     Jump(block204)
    # nextln:       block203:
    # nextln: 0903:     $$rax = MovRStack(!6, S32)
    # nextln: 0904:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0905:     MovStackR(!6, S32) $$rax
    # nextln: 0906:     Jump(block204)
    # nextln:       block204:
    # nextln: 0907:     $$rax = MovRStack(!1, S32)
    # nextln: 0908:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0909:     MovStackR(!1, S32) $$rax
    # nextln: 0910:     $$rax = MovRStack(!6, S32)
    # nextln: 0911:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0912:     MovStackR(!6, S32) $$rax
    # nextln: 0913:     $$rax = MovRStack(!5, S8)
    # nextln: 0914:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0915:     Jumpcc(Ne, block205, block206)
    # nextln:       block205:
    # nextln: 0916:     $$rax = MovRStack(!1, S32)
    # nextln: 0917:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0918:     MovStackR(!1, S32) $$rax
    # nextln: 0919:     Jump(block207)
    # nextln:       block206:
    # nextln: 0920:     $$rax = MovRStack(!6, S32)
    # nextln: 0921:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0922:     MovStackR(!6, S32) $$rax
    # nextln: 0923:     Jump(block207)
    # nextln:       block207:
    # nextln: 0924:     $$rax = MovRM(S8) $$rbx
    # nextln: 0925:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0926:     Jumpcc(Ne, block208, block209)
    # nextln:       block208:
    # nextln: 0927:     $$rax = MovRStack(!1, S32)
    # nextln: 0928:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0929:     MovStackR(!1, S32) $$rax
    # nextln: 0930:     Jump(block210)
    # nextln:       block209:
    # nextln: 0931:     $$rax = MovRStack(!6, S32)
    # nextln: 0932:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0933:     MovStackR(!6, S32) $$rax
    # nextln: 0934:     Jump(block210)
    # nextln:       block210:
    # nextln: 0935:     $$rax = MovRStack(!4, S64)
    # nextln: 0936:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 0937:     $$rax = MovRM(S8) $$rax
    # nextln: 0938:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0939:     Jumpcc(Ne, block211, block212)
    # nextln:       block211:
    # nextln: 0940:     $$rax = MovRStack(!1, S32)
    # nextln: 0941:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0942:     MovStackR(!1, S32) $$rax
    # nextln: 0943:     Jump(block213)
    # nextln:       block212:
    # nextln: 0944:     $$rax = MovRStack(!6, S32)
    # nextln: 0945:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0946:     MovStackR(!6, S32) $$rax
    # nextln: 0947:     Jump(block213)
    # nextln:       block213:
    # nextln: 0948:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 0949:     $$rax = CallRm $$rax
    # nextln: 0950:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0951:     Jumpcc(Ne, block214, block215)
    # nextln:       block214:
    # nextln: 0952:     $$rax = MovRStack(!1, S32)
    # nextln: 0953:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0954:     MovStackR(!1, S32) $$rax
    # nextln: 0955:     Jump(block216)
    # nextln:       block215:
    # nextln: 0956:     $$rax = MovRStack(!6, S32)
    # nextln: 0957:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0958:     MovStackR(!6, S32) $$rax
    # nextln: 0959:     Jump(block216)
    # nextln:       block216:
    # nextln: 0960:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0961:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0962:     $$rdi = MovRStack(!3, S32)
    # nextln: 0963:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0964:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0965:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0966:     Jumpcc(L, block217, block218)
    # nextln:       block217:
    # nextln: 0967:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0968:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0969:     $$rax = MovRM(S8) $$rax
    # nextln: 0970:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0971:     Jumpcc(Ne, block219, block220)
    # nextln:       block219:
    # nextln: 0972:     $$rax = MovRStack(!1, S32)
    # nextln: 0973:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0974:     MovStackR(!1, S32) $$rax
    # nextln: 0975:     Jump(block221)
    # nextln:       block220:
    # nextln: 0976:     $$rax = MovRStack(!6, S32)
    # nextln: 0977:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0978:     MovStackR(!6, S32) $$rax
    # nextln: 0979:     Jump(block221)
    # nextln:       block221:
    # nextln: 0980:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 0981:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 0982:     $$rdi = MovRStack(!3, S32)
    # nextln: 0983:     $$rdx = MovRM(S32) $$rcx
    # nextln: 0984:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 0985:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 0986:     Jumpcc(L, block222, block223)
    # nextln:       block222:
    # nextln: 0987:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 0988:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 0989:     $$rax = MovRM(S8) $$rax
    # nextln: 0990:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0991:     Jumpcc(Ne, block224, block225)
    # nextln:       block224:
    # nextln: 0992:     $$rax = MovRStack(!1, S32)
    # nextln: 0993:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0994:     MovStackR(!1, S32) $$rax
    # nextln: 0995:     Jump(block226)
    # nextln:       block225:
    # nextln: 0996:     $$rax = MovRStack(!6, S32)
    # nextln: 0997:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 0998:     MovStackR(!6, S32) $$rax
    # nextln: 0999:     Jump(block226)
    # nextln:       block226:
    # nextln: 1000:     $$rax = MovRStack(!1, S32)
    # nextln: 1001:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1002:     MovStackR(!1, S32) $$rax
    # nextln: 1003:     $$rax = MovRStack(!6, S32)
    # nextln: 1004:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1005:     MovStackR(!6, S32) $$rax
    # nextln: 1006:     $$rax = MovRStack(!5, S8)
    # nextln: 1007:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1008:     Jumpcc(Ne, block227, block228)
    # nextln:       block227:
    # nextln: 1009:     $$rax = MovRStack(!1, S32)
    # nextln: 1010:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1011:     MovStackR(!1, S32) $$rax
    # nextln: 1012:     Jump(block229)
    # nextln:       block228:
    # nextln: 1013:     $$rax = MovRStack(!6, S32)
    # nextln: 1014:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1015:     MovStackR(!6, S32) $$rax
    # nextln: 1016:     Jump(block229)
    # nextln:       block229:
    # nextln: 1017:     $$rax = MovRM(S8) $$rbx
    # nextln: 1018:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1019:     Jumpcc(Ne, block230, block231)
    # nextln:       block230:
    # nextln: 1020:     $$rax = MovRStack(!1, S32)
    # nextln: 1021:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1022:     MovStackR(!1, S32) $$rax
    # nextln: 1023:     Jump(block232)
    # nextln:       block231:
    # nextln: 1024:     $$rax = MovRStack(!6, S32)
    # nextln: 1025:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1026:     MovStackR(!6, S32) $$rax
    # nextln: 1027:     Jump(block232)
    # nextln:       block232:
    # nextln: 1028:     $$rax = MovRStack(!4, S64)
    # nextln: 1029:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1030:     $$rax = MovRM(S8) $$rax
    # nextln: 1031:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1032:     Jumpcc(Ne, block233, block234)
    # nextln:       block233:
    # nextln: 1033:     $$rax = MovRStack(!1, S32)
    # nextln: 1034:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1035:     MovStackR(!1, S32) $$rax
    # nextln: 1036:     Jump(block235)
    # nextln:       block234:
    # nextln: 1037:     $$rax = MovRStack(!6, S32)
    # nextln: 1038:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1039:     MovStackR(!6, S32) $$rax
    # nextln: 1040:     Jump(block235)
    # nextln:       block235:
    # nextln: 1041:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1042:     $$rax = CallRm $$rax
    # nextln: 1043:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1044:     Jumpcc(Ne, block236, block237)
    # nextln:       block236:
    # nextln: 1045:     $$rax = MovRStack(!1, S32)
    # nextln: 1046:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1047:     MovStackR(!1, S32) $$rax
    # nextln: 1048:     Jump(block238)
    # nextln:       block237:
    # nextln: 1049:     $$rax = MovRStack(!6, S32)
    # nextln: 1050:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1051:     MovStackR(!6, S32) $$rax
    # nextln: 1052:     Jump(block238)
    # nextln:       block238:
    # nextln: 1053:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1054:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1055:     $$rdi = MovRStack(!3, S32)
    # nextln: 1056:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1057:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1058:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1059:     Jumpcc(L, block239, block240)
    # nextln:       block239:
    # nextln: 1060:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1061:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1062:     $$rax = MovRM(S8) $$rax
    # nextln: 1063:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1064:     Jumpcc(Ne, block241, block242)
    # nextln:       block241:
    # nextln: 1065:     $$rax = MovRStack(!1, S32)
    # nextln: 1066:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1067:     MovStackR(!1, S32) $$rax
    # nextln: 1068:     Jump(block243)
    # nextln:       block242:
    # nextln: 1069:     $$rax = MovRStack(!6, S32)
    # nextln: 1070:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1071:     MovStackR(!6, S32) $$rax
    # nextln: 1072:     Jump(block243)
    # nextln:       block243:
    # nextln: 1073:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1074:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1075:     $$rdi = MovRStack(!3, S32)
    # nextln: 1076:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1077:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1078:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1079:     Jumpcc(L, block244, block245)
    # nextln:       block244:
    # nextln: 1080:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1081:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1082:     $$rax = MovRM(S8) $$rax
    # nextln: 1083:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1084:     Jumpcc(Ne, block246, block247)
    # nextln:       block246:
    # nextln: 1085:     $$rax = MovRStack(!1, S32)
    # nextln: 1086:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1087:     MovStackR(!1, S32) $$rax
    # nextln: 1088:     Jump(block248)
    # nextln:       block247:
    # nextln: 1089:     $$rax = MovRStack(!6, S32)
    # nextln: 1090:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1091:     MovStackR(!6, S32) $$rax
    # nextln: 1092:     Jump(block248)
    # nextln:       block248:
    # nextln: 1093:     $$rax = MovRStack(!1, S32)
    # nextln: 1094:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1095:     MovStackR(!1, S32) $$rax
    # nextln: 1096:     $$rax = MovRStack(!6, S32)
    # nextln: 1097:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1098:     MovStackR(!6, S32) $$rax
    # nextln: 1099:     $$rax = MovRStack(!5, S8)
    # nextln: 1100:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1101:     Jumpcc(Ne, block249, block250)
    # nextln:       block249:
    # nextln: 1102:     $$rax = MovRStack(!1, S32)
    # nextln: 1103:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1104:     MovStackR(!1, S32) $$rax
    # nextln: 1105:     Jump(block251)
    # nextln:       block250:
    # nextln: 1106:     $$rax = MovRStack(!6, S32)
    # nextln: 1107:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1108:     MovStackR(!6, S32) $$rax
    # nextln: 1109:     Jump(block251)
    # nextln:       block251:
    # nextln: 1110:     $$rax = MovRM(S8) $$rbx
    # nextln: 1111:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1112:     Jumpcc(Ne, block252, block253)
    # nextln:       block252:
    # nextln: 1113:     $$rax = MovRStack(!1, S32)
    # nextln: 1114:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1115:     MovStackR(!1, S32) $$rax
    # nextln: 1116:     Jump(block254)
    # nextln:       block253:
    # nextln: 1117:     $$rax = MovRStack(!6, S32)
    # nextln: 1118:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1119:     MovStackR(!6, S32) $$rax
    # nextln: 1120:     Jump(block254)
    # nextln:       block254:
    # nextln: 1121:     $$rax = MovRStack(!4, S64)
    # nextln: 1122:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1123:     $$rax = MovRM(S8) $$rax
    # nextln: 1124:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1125:     Jumpcc(Ne, block255, block256)
    # nextln:       block255:
    # nextln: 1126:     $$rax = MovRStack(!1, S32)
    # nextln: 1127:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1128:     MovStackR(!1, S32) $$rax
    # nextln: 1129:     Jump(block257)
    # nextln:       block256:
    # nextln: 1130:     $$rax = MovRStack(!6, S32)
    # nextln: 1131:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1132:     MovStackR(!6, S32) $$rax
    # nextln: 1133:     Jump(block257)
    # nextln:       block257:
    # nextln: 1134:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1135:     $$rax = CallRm $$rax
    # nextln: 1136:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1137:     Jumpcc(Ne, block258, block259)
    # nextln:       block258:
    # nextln: 1138:     $$rax = MovRStack(!1, S32)
    # nextln: 1139:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1140:     MovStackR(!1, S32) $$rax
    # nextln: 1141:     Jump(block260)
    # nextln:       block259:
    # nextln: 1142:     $$rax = MovRStack(!6, S32)
    # nextln: 1143:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1144:     MovStackR(!6, S32) $$rax
    # nextln: 1145:     Jump(block260)
    # nextln:       block260:
    # nextln: 1146:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1147:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1148:     $$rdx = MovRStack(!3, S32)
    # nextln: 1149:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1150:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1151:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1152:     Jumpcc(L, block261, block262)
    # nextln:       block261:
    # nextln: 1153:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1154:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1155:     $$rax = MovRM(S8) $$rax
    # nextln: 1156:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1157:     Jumpcc(Ne, block263, block264)
    # nextln:       block263:
    # nextln: 1158:     $$rax = MovRStack(!1, S32)
    # nextln: 1159:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1160:     MovStackR(!1, S32) $$rax
    # nextln: 1161:     Jump(block265)
    # nextln:       block264:
    # nextln: 1162:     $$rax = MovRStack(!6, S32)
    # nextln: 1163:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1164:     MovStackR(!6, S32) $$rax
    # nextln: 1165:     Jump(block265)
    # nextln:       block265:
    # nextln: 1166:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1167:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1168:     $$rdi = MovRStack(!3, S32)
    # nextln: 1169:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1170:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1171:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1172:     Jumpcc(L, block266, block267)
    # nextln:       block266:
    # nextln: 1173:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1174:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1175:     $$rax = MovRM(S8) $$rax
    # nextln: 1176:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1177:     Jumpcc(Ne, block268, block269)
    # nextln:       block268:
    # nextln: 1178:     $$rax = MovRStack(!1, S32)
    # nextln: 1179:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1180:     MovStackR(!1, S32) $$rax
    # nextln: 1181:     Jump(block270)
    # nextln:       block269:
    # nextln: 1182:     $$rax = MovRStack(!6, S32)
    # nextln: 1183:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1184:     MovStackR(!6, S32) $$rax
    # nextln: 1185:     Jump(block270)
    # nextln:       block270:
    # nextln: 1186:     $$rax = MovRStack(!1, S32)
    # nextln: 1187:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1188:     MovStackR(!1, S32) $$rax
    # nextln: 1189:     $$rax = MovRStack(!6, S32)
    # nextln: 1190:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1191:     MovStackR(!6, S32) $$rax
    # nextln: 1192:     $$rax = MovRStack(!5, S8)
    # nextln: 1193:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1194:     Jumpcc(Ne, block271, block272)
    # nextln:       block271:
    # nextln: 1195:     $$rax = MovRStack(!1, S32)
    # nextln: 1196:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1197:     MovStackR(!1, S32) $$rax
    # nextln: 1198:     Jump(block273)
    # nextln:       block272:
    # nextln: 1199:     $$rax = MovRStack(!6, S32)
    # nextln: 1200:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1201:     MovStackR(!6, S32) $$rax
    # nextln: 1202:     Jump(block273)
    # nextln:       block273:
    # nextln: 1203:     $$rax = MovRM(S8) $$rbx
    # nextln: 1204:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1205:     Jumpcc(Ne, block274, block275)
    # nextln:       block274:
    # nextln: 1206:     $$rax = MovRStack(!1, S32)
    # nextln: 1207:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1208:     MovStackR(!1, S32) $$rax
    # nextln: 1209:     Jump(block276)
    # nextln:       block275:
    # nextln: 1210:     $$rax = MovRStack(!6, S32)
    # nextln: 1211:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1212:     MovStackR(!6, S32) $$rax
    # nextln: 1213:     Jump(block276)
    # nextln:       block276:
    # nextln: 1214:     $$rax = MovRStack(!4, S64)
    # nextln: 1215:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1216:     $$rax = MovRM(S8) $$rax
    # nextln: 1217:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1218:     Jumpcc(Ne, block277, block278)
    # nextln:       block277:
    # nextln: 1219:     $$rax = MovRStack(!1, S32)
    # nextln: 1220:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1221:     MovStackR(!1, S32) $$rax
    # nextln: 1222:     Jump(block279)
    # nextln:       block278:
    # nextln: 1223:     $$rax = MovRStack(!6, S32)
    # nextln: 1224:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1225:     MovStackR(!6, S32) $$rax
    # nextln: 1226:     Jump(block279)
    # nextln:       block279:
    # nextln: 1227:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1228:     $$rax = CallRm $$rax
    # nextln: 1229:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1230:     Jumpcc(Ne, block280, block281)
    # nextln:       block280:
    # nextln: 1231:     $$rax = MovRStack(!1, S32)
    # nextln: 1232:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1233:     MovStackR(!1, S32) $$rax
    # nextln: 1234:     Jump(block282)
    # nextln:       block281:
    # nextln: 1235:     $$rax = MovRStack(!6, S32)
    # nextln: 1236:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1237:     MovStackR(!6, S32) $$rax
    # nextln: 1238:     Jump(block282)
    # nextln:       block282:
    # nextln: 1239:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1240:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1241:     $$rdi = MovRStack(!3, S32)
    # nextln: 1242:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1243:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1244:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1245:     Jumpcc(L, block283, block284)
    # nextln:       block283:
    # nextln: 1246:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1247:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1248:     $$rax = MovRM(S8) $$rax
    # nextln: 1249:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1250:     Jumpcc(Ne, block285, block286)
    # nextln:       block285:
    # nextln: 1251:     $$rax = MovRStack(!1, S32)
    # nextln: 1252:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1253:     MovStackR(!1, S32) $$rax
    # nextln: 1254:     Jump(block287)
    # nextln:       block286:
    # nextln: 1255:     $$rax = MovRStack(!6, S32)
    # nextln: 1256:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1257:     MovStackR(!6, S32) $$rax
    # nextln: 1258:     Jump(block287)
    # nextln:       block287:
    # nextln: 1259:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1260:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1261:     $$rdx = MovRStack(!3, S32)
    # nextln: 1262:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1263:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1264:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1265:     Jumpcc(L, block288, block289)
    # nextln:       block288:
    # nextln: 1266:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1267:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1268:     $$rax = MovRM(S8) $$rax
    # nextln: 1269:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1270:     Jumpcc(Ne, block290, block291)
    # nextln:       block290:
    # nextln: 1271:     $$rax = MovRStack(!1, S32)
    # nextln: 1272:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1273:     MovStackR(!1, S32) $$rax
    # nextln: 1274:     Jump(block292)
    # nextln:       block291:
    # nextln: 1275:     $$rax = MovRStack(!6, S32)
    # nextln: 1276:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1277:     MovStackR(!6, S32) $$rax
    # nextln: 1278:     Jump(block292)
    # nextln:       block292:
    # nextln: 1279:     $$rax = MovRStack(!1, S32)
    # nextln: 1280:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1281:     MovStackR(!1, S32) $$rax
    # nextln: 1282:     $$rax = MovRStack(!6, S32)
    # nextln: 1283:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1284:     MovStackR(!6, S32) $$rax
    # nextln: 1285:     $$rax = MovRStack(!5, S8)
    # nextln: 1286:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1287:     Jumpcc(Ne, block293, block294)
    # nextln:       block293:
    # nextln: 1288:     $$rax = MovRStack(!1, S32)
    # nextln: 1289:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1290:     MovStackR(!1, S32) $$rax
    # nextln: 1291:     Jump(block295)
    # nextln:       block294:
    # nextln: 1292:     $$rax = MovRStack(!6, S32)
    # nextln: 1293:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1294:     MovStackR(!6, S32) $$rax
    # nextln: 1295:     Jump(block295)
    # nextln:       block295:
    # nextln: 1296:     $$rax = MovRM(S8) $$rbx
    # nextln: 1297:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1298:     Jumpcc(Ne, block296, block297)
    # nextln:       block296:
    # nextln: 1299:     $$rax = MovRStack(!1, S32)
    # nextln: 1300:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1301:     MovStackR(!1, S32) $$rax
    # nextln: 1302:     Jump(block298)
    # nextln:       block297:
    # nextln: 1303:     $$rax = MovRStack(!6, S32)
    # nextln: 1304:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1305:     MovStackR(!6, S32) $$rax
    # nextln: 1306:     Jump(block298)
    # nextln:       block298:
    # nextln: 1307:     $$rax = MovRStack(!4, S64)
    # nextln: 1308:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1309:     $$rax = MovRM(S8) $$rax
    # nextln: 1310:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1311:     Jumpcc(Ne, block299, block300)
    # nextln:       block299:
    # nextln: 1312:     $$rax = MovRStack(!1, S32)
    # nextln: 1313:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1314:     MovStackR(!1, S32) $$rax
    # nextln: 1315:     Jump(block301)
    # nextln:       block300:
    # nextln: 1316:     $$rax = MovRStack(!6, S32)
    # nextln: 1317:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1318:     MovStackR(!6, S32) $$rax
    # nextln: 1319:     Jump(block301)
    # nextln:       block301:
    # nextln: 1320:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1321:     $$rax = CallRm $$rax
    # nextln: 1322:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1323:     Jumpcc(Ne, block302, block303)
    # nextln:       block302:
    # nextln: 1324:     $$rax = MovRStack(!1, S32)
    # nextln: 1325:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1326:     MovStackR(!1, S32) $$rax
    # nextln: 1327:     Jump(block304)
    # nextln:       block303:
    # nextln: 1328:     $$rax = MovRStack(!6, S32)
    # nextln: 1329:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1330:     MovStackR(!6, S32) $$rax
    # nextln: 1331:     Jump(block304)
    # nextln:       block304:
    # nextln: 1332:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1333:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1334:     $$rdi = MovRStack(!3, S32)
    # nextln: 1335:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1336:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1337:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1338:     Jumpcc(L, block305, block306)
    # nextln:       block305:
    # nextln: 1339:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1340:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1341:     $$rax = MovRM(S8) $$rax
    # nextln: 1342:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1343:     Jumpcc(Ne, block307, block308)
    # nextln:       block307:
    # nextln: 1344:     $$rax = MovRStack(!1, S32)
    # nextln: 1345:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1346:     MovStackR(!1, S32) $$rax
    # nextln: 1347:     Jump(block309)
    # nextln:       block308:
    # nextln: 1348:     $$rax = MovRStack(!6, S32)
    # nextln: 1349:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1350:     MovStackR(!6, S32) $$rax
    # nextln: 1351:     Jump(block309)
    # nextln:       block309:
    # nextln: 1352:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1353:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1354:     $$rdi = MovRStack(!3, S32)
    # nextln: 1355:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1356:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1357:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1358:     Jumpcc(L, block310, block311)
    # nextln:       block310:
    # nextln: 1359:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1360:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1361:     $$rax = MovRM(S8) $$rax
    # nextln: 1362:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1363:     Jumpcc(Ne, block312, block313)
    # nextln:       block312:
    # nextln: 1364:     $$rax = MovRStack(!1, S32)
    # nextln: 1365:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1366:     MovStackR(!1, S32) $$rax
    # nextln: 1367:     Jump(block314)
    # nextln:       block313:
    # nextln: 1368:     $$rax = MovRStack(!6, S32)
    # nextln: 1369:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1370:     MovStackR(!6, S32) $$rax
    # nextln: 1371:     Jump(block314)
    # nextln:       block314:
    # nextln: 1372:     $$rax = MovRStack(!1, S32)
    # nextln: 1373:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1374:     MovStackR(!1, S32) $$rax
    # nextln: 1375:     $$rax = MovRStack(!6, S32)
    # nextln: 1376:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1377:     MovStackR(!6, S32) $$rax
    # nextln: 1378:     $$rax = MovRStack(!5, S8)
    # nextln: 1379:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1380:     Jumpcc(Ne, block315, block316)
    # nextln:       block315:
    # nextln: 1381:     $$rax = MovRStack(!1, S32)
    # nextln: 1382:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1383:     MovStackR(!1, S32) $$rax
    # nextln: 1384:     Jump(block317)
    # nextln:       block316:
    # nextln: 1385:     $$rax = MovRStack(!6, S32)
    # nextln: 1386:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1387:     MovStackR(!6, S32) $$rax
    # nextln: 1388:     Jump(block317)
    # nextln:       block317:
    # nextln: 1389:     $$rax = MovRM(S8) $$rbx
    # nextln: 1390:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1391:     Jumpcc(Ne, block318, block319)
    # nextln:       block318:
    # nextln: 1392:     $$rax = MovRStack(!1, S32)
    # nextln: 1393:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1394:     MovStackR(!1, S32) $$rax
    # nextln: 1395:     Jump(block320)
    # nextln:       block319:
    # nextln: 1396:     $$rax = MovRStack(!6, S32)
    # nextln: 1397:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1398:     MovStackR(!6, S32) $$rax
    # nextln: 1399:     Jump(block320)
    # nextln:       block320:
    # nextln: 1400:     $$rax = MovRStack(!4, S64)
    # nextln: 1401:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1402:     $$rax = MovRM(S8) $$rax
    # nextln: 1403:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1404:     Jumpcc(Ne, block321, block322)
    # nextln:       block321:
    # nextln: 1405:     $$rax = MovRStack(!1, S32)
    # nextln: 1406:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1407:     MovStackR(!1, S32) $$rax
    # nextln: 1408:     Jump(block323)
    # nextln:       block322:
    # nextln: 1409:     $$rax = MovRStack(!6, S32)
    # nextln: 1410:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1411:     MovStackR(!6, S32) $$rax
    # nextln: 1412:     Jump(block323)
    # nextln:       block323:
    # nextln: 1413:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1414:     $$rax = CallRm $$rax
    # nextln: 1415:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1416:     Jumpcc(Ne, block324, block325)
    # nextln:       block324:
    # nextln: 1417:     $$rax = MovRStack(!1, S32)
    # nextln: 1418:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1419:     MovStackR(!1, S32) $$rax
    # nextln: 1420:     Jump(block326)
    # nextln:       block325:
    # nextln: 1421:     $$rax = MovRStack(!6, S32)
    # nextln: 1422:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1423:     MovStackR(!6, S32) $$rax
    # nextln: 1424:     Jump(block326)
    # nextln:       block326:
    # nextln: 1425:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1426:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1427:     $$rdx = MovRStack(!3, S32)
    # nextln: 1428:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1429:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1430:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1431:     Jumpcc(L, block327, block328)
    # nextln:       block327:
    # nextln: 1432:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1433:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1434:     $$rax = MovRM(S8) $$rax
    # nextln: 1435:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1436:     Jumpcc(Ne, block329, block330)
    # nextln:       block329:
    # nextln: 1437:     $$rax = MovRStack(!1, S32)
    # nextln: 1438:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1439:     MovStackR(!1, S32) $$rax
    # nextln: 1440:     Jump(block331)
    # nextln:       block330:
    # nextln: 1441:     $$rax = MovRStack(!6, S32)
    # nextln: 1442:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1443:     MovStackR(!6, S32) $$rax
    # nextln: 1444:     Jump(block331)
    # nextln:       block331:
    # nextln: 1445:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1446:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1447:     $$rdi = MovRStack(!3, S32)
    # nextln: 1448:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1449:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1450:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1451:     Jumpcc(L, block332, block333)
    # nextln:       block332:
    # nextln: 1452:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1453:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1454:     $$rax = MovRM(S8) $$rax
    # nextln: 1455:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1456:     Jumpcc(Ne, block334, block335)
    # nextln:       block334:
    # nextln: 1457:     $$rax = MovRStack(!1, S32)
    # nextln: 1458:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1459:     MovStackR(!1, S32) $$rax
    # nextln: 1460:     Jump(block336)
    # nextln:       block335:
    # nextln: 1461:     $$rax = MovRStack(!6, S32)
    # nextln: 1462:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1463:     MovStackR(!6, S32) $$rax
    # nextln: 1464:     Jump(block336)
    # nextln:       block336:
    # nextln: 1465:     $$rax = MovRStack(!1, S32)
    # nextln: 1466:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1467:     MovStackR(!1, S32) $$rax
    # nextln: 1468:     $$rax = MovRStack(!6, S32)
    # nextln: 1469:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1470:     MovStackR(!6, S32) $$rax
    # nextln: 1471:     $$rax = MovRStack(!5, S8)
    # nextln: 1472:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1473:     Jumpcc(Ne, block337, block338)
    # nextln:       block337:
    # nextln: 1474:     $$rax = MovRStack(!1, S32)
    # nextln: 1475:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1476:     MovStackR(!1, S32) $$rax
    # nextln: 1477:     Jump(block339)
    # nextln:       block338:
    # nextln: 1478:     $$rax = MovRStack(!6, S32)
    # nextln: 1479:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1480:     MovStackR(!6, S32) $$rax
    # nextln: 1481:     Jump(block339)
    # nextln:       block339:
    # nextln: 1482:     $$rax = MovRM(S8) $$rbx
    # nextln: 1483:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1484:     Jumpcc(Ne, block340, block341)
    # nextln:       block340:
    # nextln: 1485:     $$rax = MovRStack(!1, S32)
    # nextln: 1486:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1487:     MovStackR(!1, S32) $$rax
    # nextln: 1488:     Jump(block342)
    # nextln:       block341:
    # nextln: 1489:     $$rax = MovRStack(!6, S32)
    # nextln: 1490:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1491:     MovStackR(!6, S32) $$rax
    # nextln: 1492:     Jump(block342)
    # nextln:       block342:
    # nextln: 1493:     $$rax = MovRStack(!4, S64)
    # nextln: 1494:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1495:     $$rax = MovRM(S8) $$rax
    # nextln: 1496:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1497:     Jumpcc(Ne, block343, block344)
    # nextln:       block343:
    # nextln: 1498:     $$rax = MovRStack(!1, S32)
    # nextln: 1499:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1500:     MovStackR(!1, S32) $$rax
    # nextln: 1501:     Jump(block345)
    # nextln:       block344:
    # nextln: 1502:     $$rax = MovRStack(!6, S32)
    # nextln: 1503:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1504:     MovStackR(!6, S32) $$rax
    # nextln: 1505:     Jump(block345)
    # nextln:       block345:
    # nextln: 1506:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1507:     $$rax = CallRm $$rax
    # nextln: 1508:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1509:     Jumpcc(Ne, block346, block347)
    # nextln:       block346:
    # nextln: 1510:     $$rax = MovRStack(!1, S32)
    # nextln: 1511:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1512:     MovStackR(!1, S32) $$rax
    # nextln: 1513:     Jump(block348)
    # nextln:       block347:
    # nextln: 1514:     $$rax = MovRStack(!6, S32)
    # nextln: 1515:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1516:     MovStackR(!6, S32) $$rax
    # nextln: 1517:     Jump(block348)
    # nextln:       block348:
    # nextln: 1518:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1519:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1520:     $$rdi = MovRStack(!3, S32)
    # nextln: 1521:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1522:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1523:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1524:     Jumpcc(L, block349, block350)
    # nextln:       block349:
    # nextln: 1525:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1526:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1527:     $$rax = MovRM(S8) $$rax
    # nextln: 1528:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1529:     Jumpcc(Ne, block351, block352)
    # nextln:       block351:
    # nextln: 1530:     $$rax = MovRStack(!1, S32)
    # nextln: 1531:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1532:     MovStackR(!1, S32) $$rax
    # nextln: 1533:     Jump(block353)
    # nextln:       block352:
    # nextln: 1534:     $$rax = MovRStack(!6, S32)
    # nextln: 1535:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1536:     MovStackR(!6, S32) $$rax
    # nextln: 1537:     Jump(block353)
    # nextln:       block353:
    # nextln: 1538:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1539:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1540:     $$rdi = MovRStack(!3, S32)
    # nextln: 1541:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1542:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1543:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1544:     Jumpcc(L, block354, block355)
    # nextln:       block354:
    # nextln: 1545:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1546:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1547:     $$rax = MovRM(S8) $$rax
    # nextln: 1548:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1549:     Jumpcc(Ne, block356, block357)
    # nextln:       block356:
    # nextln: 1550:     $$rax = MovRStack(!1, S32)
    # nextln: 1551:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1552:     MovStackR(!1, S32) $$rax
    # nextln: 1553:     Jump(block358)
    # nextln:       block357:
    # nextln: 1554:     $$rax = MovRStack(!6, S32)
    # nextln: 1555:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1556:     MovStackR(!6, S32) $$rax
    # nextln: 1557:     Jump(block358)
    # nextln:       block358:
    # nextln: 1558:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1559:     Jumpcc(Ne, block359, block361)
    # nextln:       block359:
    # nextln: 1560:     Jump(block360)
    # nextln:       block361:
    # nextln: 1561:     Jump(block360)
    # nextln:       block360:
    # nextln: 1562:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1563:     Jumpcc(Ne, block362, block363)
    # nextln:       block362:
    # nextln: 1564:     $$rax = MovRStack(!1, S32)
    # nextln: 1565:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1566:     MovStackR(!1, S32) $$rax
    # nextln: 1567:     Jump(block364)
    # nextln:       block363:
    # nextln: 1568:     $$rax = MovRStack(!6, S32)
    # nextln: 1569:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1570:     MovStackR(!6, S32) $$rax
    # nextln: 1571:     Jump(block364)
    # nextln:       block364:
    # nextln: 1572:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1573:     Jumpcc(Ne, block365, block366)
    # nextln:       block365:
    # nextln: 1574:     $$rax = MovRStack(!1, S32)
    # nextln: 1575:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1576:     MovStackR(!1, S32) $$rax
    # nextln: 1577:     Jump(block367)
    # nextln:       block366:
    # nextln: 1578:     $$rax = MovRStack(!6, S32)
    # nextln: 1579:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1580:     MovStackR(!6, S32) $$rax
    # nextln: 1581:     Jump(block367)
    # nextln:       block367:
    # nextln: 1582:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1583:     Jumpcc(Ne, block368, block370)
    # nextln:       block368:
    # nextln:           $$rax = $$r13
    # nextln: 1584:     Jump(block369)
    # nextln:       block370:
    # nextln: 1585:     $$rax = MovRStack(!5, S8)
    # nextln: 1586:     Jump(block369)
    # nextln:       block369:
    # nextln: 1587:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1588:     Jumpcc(Ne, block371, block372)
    # nextln:       block371:
    # nextln: 1589:     $$rax = MovRStack(!1, S32)
    # nextln: 1590:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1591:     MovStackR(!1, S32) $$rax
    # nextln: 1592:     Jump(block373)
    # nextln:       block372:
    # nextln: 1593:     $$rax = MovRStack(!6, S32)
    # nextln: 1594:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1595:     MovStackR(!6, S32) $$rax
    # nextln: 1596:     Jump(block373)
    # nextln:       block373:
    # nextln: 1597:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1598:     Jumpcc(Ne, block374, block376)
    # nextln:       block374:
    # nextln:           $$rax = $$r13
    # nextln: 1599:     Jump(block375)
    # nextln:       block376:
    # nextln: 1600:     $$rax = MovRM(S8) $$rbx
    # nextln: 1601:     Jump(block375)
    # nextln:       block375:
    # nextln: 1602:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1603:     Jumpcc(Ne, block377, block378)
    # nextln:       block377:
    # nextln: 1604:     $$rax = MovRStack(!1, S32)
    # nextln: 1605:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1606:     MovStackR(!1, S32) $$rax
    # nextln: 1607:     Jump(block379)
    # nextln:       block378:
    # nextln: 1608:     $$rax = MovRStack(!6, S32)
    # nextln: 1609:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1610:     MovStackR(!6, S32) $$rax
    # nextln: 1611:     Jump(block379)
    # nextln:       block379:
    # nextln: 1612:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1613:     Jumpcc(Ne, block380, block382)
    # nextln:       block380:
    # nextln:           $$rax = $$r13
    # nextln: 1614:     Jump(block381)
    # nextln:       block382:
    # nextln: 1615:     $$rax = MovRStack(!4, S64)
    # nextln: 1616:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1617:     $$rax = MovRM(S8) $$rax
    # nextln: 1618:     Jump(block381)
    # nextln:       block381:
    # nextln: 1619:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1620:     Jumpcc(Ne, block383, block384)
    # nextln:       block383:
    # nextln: 1621:     $$rax = MovRStack(!1, S32)
    # nextln: 1622:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1623:     MovStackR(!1, S32) $$rax
    # nextln: 1624:     Jump(block385)
    # nextln:       block384:
    # nextln: 1625:     $$rax = MovRStack(!6, S32)
    # nextln: 1626:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1627:     MovStackR(!6, S32) $$rax
    # nextln: 1628:     Jump(block385)
    # nextln:       block385:
    # nextln: 1629:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1630:     Jumpcc(Ne, block386, block388)
    # nextln:       block386:
    # nextln:           $$rax = $$r13
    # nextln: 1631:     Jump(block387)
    # nextln:       block388:
    # nextln: 1632:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1633:     $$rax = CallRm $$rax
    # nextln: 1634:     Jump(block387)
    # nextln:       block387:
    # nextln: 1635:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1636:     Jumpcc(Ne, block389, block390)
    # nextln:       block389:
    # nextln: 1637:     $$rax = MovRStack(!1, S32)
    # nextln: 1638:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1639:     MovStackR(!1, S32) $$rax
    # nextln: 1640:     Jump(block391)
    # nextln:       block390:
    # nextln: 1641:     $$rax = MovRStack(!6, S32)
    # nextln: 1642:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1643:     MovStackR(!6, S32) $$rax
    # nextln: 1644:     Jump(block391)
    # nextln:       block391:
    # nextln: 1645:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1646:     Jumpcc(Ne, block392, block394)
    # nextln:       block392:
    # nextln:           $$rax = $$r13
    # nextln: 1647:     Jump(block393)
    # nextln:       block394:
    # nextln: 1648:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1649:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1650:     $$rdx = MovRStack(!3, S32)
    # nextln: 1651:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1652:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1653:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1654:     Jumpcc(L, block395, block396)
    # nextln:       block395:
    # nextln: 1655:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1656:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1657:     $$rax = MovRM(S8) $$rax
    # nextln: 1658:     Jump(block393)
    # nextln:       block393:
    # nextln: 1659:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1660:     Jumpcc(Ne, block397, block398)
    # nextln:       block397:
    # nextln: 1661:     $$rax = MovRStack(!1, S32)
    # nextln: 1662:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1663:     MovStackR(!1, S32) $$rax
    # nextln: 1664:     Jump(block399)
    # nextln:       block398:
    # nextln: 1665:     $$rax = MovRStack(!6, S32)
    # nextln: 1666:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1667:     MovStackR(!6, S32) $$rax
    # nextln: 1668:     Jump(block399)
    # nextln:       block399:
    # nextln: 1669:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1670:     Jumpcc(Ne, block400, block402)
    # nextln:       block400:
    # nextln:           $$rax = $$r13
    # nextln: 1671:     Jump(block401)
    # nextln:       block402:
    # nextln: 1672:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1673:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1674:     $$rdx = MovRStack(!3, S32)
    # nextln: 1675:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1676:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1677:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1678:     Jumpcc(L, block403, block404)
    # nextln:       block403:
    # nextln: 1679:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1680:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1681:     $$rax = MovRM(S8) $$rax
    # nextln: 1682:     Jump(block401)
    # nextln:       block401:
    # nextln: 1683:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1684:     Jumpcc(Ne, block405, block406)
    # nextln:       block405:
    # nextln: 1685:     $$rax = MovRStack(!1, S32)
    # nextln: 1686:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1687:     MovStackR(!1, S32) $$rax
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 1688:     Jump(block407)
    # nextln:       block406:
    # nextln: 1689:     $$rax = MovRStack(!6, S32)
    # nextln: 1690:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1691:     MovStackR(!6, S32) $$rax
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 1692:     Jump(block407)
    # nextln:       block407:
    # nextln: 1693:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1694:     Jumpcc(Ne, block408, block409)
    # nextln:       block408:
    # nextln: 1695:     $$rcx = MovRStack(!1, S32)
    # nextln: 1696:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1697:     MovStackR(!1, S32) $$rcx
    # nextln: 1698:     Jump(block410)
    # nextln:       block409:
    # nextln: 1699:     $$rcx = MovRStack(!6, S32)
    # nextln: 1700:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1701:     MovStackR(!6, S32) $$rcx
    # nextln: 1702:     Jump(block410)
    # nextln:       block410:
    # nextln: 1703:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1704:     Jumpcc(Ne, block411, block413)
    # nextln:       block411:
    # nextln: 1705:     Jump(block412)
    # nextln:       block413:
    # nextln: 1706:     Jump(block412)
    # nextln:       block412:
    # nextln: 1707:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1708:     Jumpcc(Ne, block414, block415)
    # nextln:       block414:
    # nextln: 1709:     $$rcx = MovRStack(!1, S32)
    # nextln: 1710:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1711:     MovStackR(!1, S32) $$rcx
    # nextln: 1712:     Jump(block416)
    # nextln:       block415:
    # nextln: 1713:     $$rcx = MovRStack(!6, S32)
    # nextln: 1714:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1715:     MovStackR(!6, S32) $$rcx
    # nextln: 1716:     Jump(block416)
    # nextln:       block416:
    # nextln: 1717:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1718:     Jumpcc(Ne, block417, block419)
    # nextln:       block417:
    # nextln:           $$rcx = $$rax
    # nextln: 1719:     Jump(block418)
    # nextln:       block419:
    # nextln: 1720:     $$rcx = MovRStack(!5, S8)
    # nextln: 1721:     Jump(block418)
    # nextln:       block418:
    # nextln: 1722:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1723:     Jumpcc(Ne, block420, block421)
    # nextln:       block420:
    # nextln: 1724:     $$rcx = MovRStack(!1, S32)
    # nextln: 1725:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1726:     MovStackR(!1, S32) $$rcx
    # nextln: 1727:     Jump(block422)
    # nextln:       block421:
    # nextln: 1728:     $$rcx = MovRStack(!6, S32)
    # nextln: 1729:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1730:     MovStackR(!6, S32) $$rcx
    # nextln: 1731:     Jump(block422)
    # nextln:       block422:
    # nextln: 1732:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1733:     Jumpcc(Ne, block423, block425)
    # nextln:       block423:
    # nextln:           $$rcx = $$rax
    # nextln: 1734:     Jump(block424)
    # nextln:       block425:
    # nextln: 1735:     $$rcx = MovRM(S8) $$rbx
    # nextln: 1736:     Jump(block424)
    # nextln:       block424:
    # nextln: 1737:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1738:     Jumpcc(Ne, block426, block427)
    # nextln:       block426:
    # nextln: 1739:     $$rcx = MovRStack(!1, S32)
    # nextln: 1740:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1741:     MovStackR(!1, S32) $$rcx
    # nextln: 1742:     Jump(block428)
    # nextln:       block427:
    # nextln: 1743:     $$rcx = MovRStack(!6, S32)
    # nextln: 1744:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1745:     MovStackR(!6, S32) $$rcx
    # nextln: 1746:     Jump(block428)
    # nextln:       block428:
    # nextln: 1747:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1748:     Jumpcc(Ne, block429, block431)
    # nextln:       block429:
    # nextln:           $$rcx = $$rax
    # nextln: 1749:     Jump(block430)
    # nextln:       block431:
    # nextln: 1750:     $$rcx = MovRStack(!4, S64)
    # nextln: 1751:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1752:     $$rcx = MovRM(S8) $$rcx
    # nextln: 1753:     Jump(block430)
    # nextln:       block430:
    # nextln: 1754:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 1755:     Jumpcc(Ne, block432, block433)
    # nextln:       block432:
    # nextln: 1756:     $$rcx = MovRStack(!1, S32)
    # nextln: 1757:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1758:     MovStackR(!1, S32) $$rcx
    # nextln: 1759:     Jump(block434)
    # nextln:       block433:
    # nextln: 1760:     $$rcx = MovRStack(!6, S32)
    # nextln: 1761:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 1762:     MovStackR(!6, S32) $$rcx
    # nextln: 1763:     Jump(block434)
    # nextln:       block434:
    # nextln: 1764:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1765:     Jumpcc(Ne, block435, block437)
    # nextln:       block435:
    # nextln: 1766:     Jump(block436)
    # nextln:       block437:
    # nextln: 1767:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1768:     $$rax = CallRm $$rax
    # nextln: 1769:     Jump(block436)
    # nextln:       block436:
    # nextln: 1770:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1771:     Jumpcc(Ne, block438, block439)
    # nextln:       block438:
    # nextln: 1772:     $$rax = MovRStack(!1, S32)
    # nextln: 1773:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1774:     MovStackR(!1, S32) $$rax
    # nextln: 1775:     Jump(block440)
    # nextln:       block439:
    # nextln: 1776:     $$rax = MovRStack(!6, S32)
    # nextln: 1777:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1778:     MovStackR(!6, S32) $$rax
    # nextln: 1779:     Jump(block440)
    # nextln:       block440:
    # nextln: 1780:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1781:     Jumpcc(Ne, block441, block443)
    # nextln:       block441:
    # nextln:           $$r12 = MovRmS32(0)
    # nextln:           $$rax = $$r12
    # nextln: 1782:     Jump(block442)
    # nextln:       block443:
    # nextln:           $$r12 = MovRmS32(0)
    # nextln: 1783:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1784:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1785:     $$rdx = MovRStack(!3, S32)
    # nextln: 1786:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1787:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1788:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1789:     Jumpcc(L, block444, block445)
    # nextln:       block444:
    # nextln: 1790:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1791:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1792:     $$rax = MovRM(S8) $$rax
    # nextln: 1793:     Jump(block442)
    # nextln:       block442:
    # nextln: 1794:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1795:     Jumpcc(Ne, block446, block447)
    # nextln:       block446:
    # nextln: 1796:     $$rax = MovRStack(!1, S32)
    # nextln: 1797:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1798:     MovStackR(!1, S32) $$rax
    # nextln: 1799:     Jump(block448)
    # nextln:       block447:
    # nextln: 1800:     $$rax = MovRStack(!6, S32)
    # nextln: 1801:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1802:     MovStackR(!6, S32) $$rax
    # nextln: 1803:     Jump(block448)
    # nextln:       block448:
    # nextln: 1804:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1805:     Jumpcc(Ne, block449, block451)
    # nextln:       block449:
    # nextln:           $$rax = $$r12
    # nextln: 1806:     Jump(block450)
    # nextln:       block451:
    # nextln: 1807:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1808:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1809:     $$rdi = MovRStack(!3, S32)
    # nextln: 1810:     $$rdx = MovRM(S32) $$rcx
    # nextln: 1811:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 1812:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 1813:     Jumpcc(L, block452, block453)
    # nextln:       block452:
    # nextln: 1814:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1815:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1816:     $$rax = MovRM(S8) $$rax
    # nextln: 1817:     Jump(block450)
    # nextln:       block450:
    # nextln: 1818:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1819:     Jumpcc(Ne, block454, block455)
    # nextln:       block454:
    # nextln: 1820:     $$rax = MovRStack(!1, S32)
    # nextln: 1821:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1822:     MovStackR(!1, S32) $$rax
    # nextln: 1823:     Jump(block456)
    # nextln:       block455:
    # nextln: 1824:     $$rax = MovRStack(!6, S32)
    # nextln: 1825:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1826:     MovStackR(!6, S32) $$rax
    # nextln: 1827:     Jump(block456)
    # nextln:       block456:
    # nextln: 1828:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1829:     Jumpcc(Ne, block457, block458)
    # nextln:       block457:
    # nextln: 1830:     $$rax = MovRStack(!5, S8)
    # nextln: 1831:     Jump(block459)
    # nextln:       block458:
    # nextln:           $$rax = $$r13
    # nextln: 1832:     Jump(block459)
    # nextln:       block459:
    # nextln: 1833:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1834:     Jumpcc(Ne, block460, block461)
    # nextln:       block460:
    # nextln: 1835:     $$rax = MovRStack(!1, S32)
    # nextln: 1836:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1837:     MovStackR(!1, S32) $$rax
    # nextln: 1838:     Jump(block462)
    # nextln:       block461:
    # nextln: 1839:     $$rax = MovRStack(!6, S32)
    # nextln: 1840:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1841:     MovStackR(!6, S32) $$rax
    # nextln: 1842:     Jump(block462)
    # nextln:       block462:
    # nextln: 1843:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1844:     Jumpcc(Ne, block463, block464)
    # nextln:       block463:
    # nextln: 1845:     $$rax = MovRStack(!5, S8)
    # nextln: 1846:     Jump(block465)
    # nextln:       block464:
    # nextln:           $$rax = $$r12
    # nextln: 1847:     Jump(block465)
    # nextln:       block465:
    # nextln: 1848:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1849:     Jumpcc(Ne, block466, block467)
    # nextln:       block466:
    # nextln: 1850:     $$rax = MovRStack(!1, S32)
    # nextln: 1851:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1852:     MovStackR(!1, S32) $$rax
    # nextln: 1853:     Jump(block468)
    # nextln:       block467:
    # nextln: 1854:     $$rax = MovRStack(!6, S32)
    # nextln: 1855:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1856:     MovStackR(!6, S32) $$rax
    # nextln: 1857:     Jump(block468)
    # nextln:       block468:
    # nextln: 1858:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1859:     Jumpcc(Ne, block469, block470)
    # nextln:       block469:
    # nextln: 1860:     $$rax = MovRStack(!5, S8)
    # nextln: 1861:     Jump(block471)
    # nextln:       block470:
    # nextln: 1862:     $$rax = MovRStack(!5, S8)
    # nextln: 1863:     Jump(block471)
    # nextln:       block471:
    # nextln: 1864:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1865:     Jumpcc(Ne, block472, block473)
    # nextln:       block472:
    # nextln: 1866:     $$rax = MovRStack(!1, S32)
    # nextln: 1867:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1868:     MovStackR(!1, S32) $$rax
    # nextln: 1869:     Jump(block474)
    # nextln:       block473:
    # nextln: 1870:     $$rax = MovRStack(!6, S32)
    # nextln: 1871:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1872:     MovStackR(!6, S32) $$rax
    # nextln: 1873:     Jump(block474)
    # nextln:       block474:
    # nextln: 1874:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1875:     Jumpcc(Ne, block475, block476)
    # nextln:       block475:
    # nextln: 1876:     $$rax = MovRStack(!5, S8)
    # nextln: 1877:     Jump(block477)
    # nextln:       block476:
    # nextln: 1878:     $$rax = MovRM(S8) $$rbx
    # nextln: 1879:     Jump(block477)
    # nextln:       block477:
    # nextln: 1880:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1881:     Jumpcc(Ne, block478, block479)
    # nextln:       block478:
    # nextln: 1882:     $$rax = MovRStack(!1, S32)
    # nextln: 1883:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1884:     MovStackR(!1, S32) $$rax
    # nextln: 1885:     Jump(block480)
    # nextln:       block479:
    # nextln: 1886:     $$rax = MovRStack(!6, S32)
    # nextln: 1887:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1888:     MovStackR(!6, S32) $$rax
    # nextln: 1889:     Jump(block480)
    # nextln:       block480:
    # nextln: 1890:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1891:     Jumpcc(Ne, block481, block482)
    # nextln:       block481:
    # nextln: 1892:     $$rax = MovRStack(!5, S8)
    # nextln: 1893:     Jump(block483)
    # nextln:       block482:
    # nextln: 1894:     $$rax = MovRStack(!4, S64)
    # nextln: 1895:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 1896:     $$rax = MovRM(S8) $$rax
    # nextln: 1897:     Jump(block483)
    # nextln:       block483:
    # nextln: 1898:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1899:     Jumpcc(Ne, block484, block485)
    # nextln:       block484:
    # nextln: 1900:     $$rax = MovRStack(!1, S32)
    # nextln: 1901:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1902:     MovStackR(!1, S32) $$rax
    # nextln: 1903:     Jump(block486)
    # nextln:       block485:
    # nextln: 1904:     $$rax = MovRStack(!6, S32)
    # nextln: 1905:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1906:     MovStackR(!6, S32) $$rax
    # nextln: 1907:     Jump(block486)
    # nextln:       block486:
    # nextln: 1908:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1909:     Jumpcc(Ne, block487, block488)
    # nextln:       block487:
    # nextln: 1910:     $$rax = MovRStack(!5, S8)
    # nextln: 1911:     Jump(block489)
    # nextln:       block488:
    # nextln: 1912:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 1913:     $$rax = CallRm $$rax
    # nextln: 1914:     Jump(block489)
    # nextln:       block489:
    # nextln: 1915:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1916:     Jumpcc(Ne, block490, block491)
    # nextln:       block490:
    # nextln: 1917:     $$rax = MovRStack(!1, S32)
    # nextln: 1918:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1919:     MovStackR(!1, S32) $$rax
    # nextln: 1920:     Jump(block492)
    # nextln:       block491:
    # nextln: 1921:     $$rax = MovRStack(!6, S32)
    # nextln: 1922:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1923:     MovStackR(!6, S32) $$rax
    # nextln: 1924:     Jump(block492)
    # nextln:       block492:
    # nextln: 1925:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1926:     Jumpcc(Ne, block493, block494)
    # nextln:       block493:
    # nextln: 1927:     $$rax = MovRStack(!5, S8)
    # nextln: 1928:     Jump(block497)
    # nextln:       block494:
    # nextln: 1929:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1930:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1931:     $$rdx = MovRStack(!3, S32)
    # nextln: 1932:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1933:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1934:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1935:     Jumpcc(L, block495, block496)
    # nextln:       block495:
    # nextln: 1936:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1937:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1938:     $$rax = MovRM(S8) $$rax
    # nextln: 1939:     Jump(block497)
    # nextln:       block497:
    # nextln: 1940:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1941:     Jumpcc(Ne, block498, block499)
    # nextln:       block498:
    # nextln: 1942:     $$rax = MovRStack(!1, S32)
    # nextln: 1943:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1944:     MovStackR(!1, S32) $$rax
    # nextln: 1945:     Jump(block500)
    # nextln:       block499:
    # nextln: 1946:     $$rax = MovRStack(!6, S32)
    # nextln: 1947:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1948:     MovStackR(!6, S32) $$rax
    # nextln: 1949:     Jump(block500)
    # nextln:       block500:
    # nextln: 1950:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1951:     Jumpcc(Ne, block501, block502)
    # nextln:       block501:
    # nextln: 1952:     $$rax = MovRStack(!5, S8)
    # nextln: 1953:     Jump(block505)
    # nextln:       block502:
    # nextln: 1954:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 1955:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 1956:     $$rdx = MovRStack(!3, S32)
    # nextln: 1957:     $$rdi = MovRM(S32) $$rcx
    # nextln: 1958:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 1959:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 1960:     Jumpcc(L, block503, block504)
    # nextln:       block503:
    # nextln: 1961:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 1962:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 1963:     $$rax = MovRM(S8) $$rax
    # nextln: 1964:     Jump(block505)
    # nextln:       block505:
    # nextln: 1965:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1966:     Jumpcc(Ne, block506, block507)
    # nextln:       block506:
    # nextln: 1967:     $$rax = MovRStack(!1, S32)
    # nextln: 1968:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1969:     MovStackR(!1, S32) $$rax
    # nextln: 1970:     Jump(block508)
    # nextln:       block507:
    # nextln: 1971:     $$rax = MovRStack(!6, S32)
    # nextln: 1972:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1973:     MovStackR(!6, S32) $$rax
    # nextln: 1974:     Jump(block508)
    # nextln:       block508:
    # nextln: 1975:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1976:     Jumpcc(Ne, block509, block510)
    # nextln:       block509:
    # nextln: 1977:     $$rax = MovRM(S8) $$rbx
    # nextln: 1978:     Jump(block511)
    # nextln:       block510:
    # nextln:           $$rax = $$r13
    # nextln: 1979:     Jump(block511)
    # nextln:       block511:
    # nextln: 1980:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1981:     Jumpcc(Ne, block512, block513)
    # nextln:       block512:
    # nextln: 1982:     $$rax = MovRStack(!1, S32)
    # nextln: 1983:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1984:     MovStackR(!1, S32) $$rax
    # nextln: 1985:     Jump(block514)
    # nextln:       block513:
    # nextln: 1986:     $$rax = MovRStack(!6, S32)
    # nextln: 1987:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1988:     MovStackR(!6, S32) $$rax
    # nextln: 1989:     Jump(block514)
    # nextln:       block514:
    # nextln: 1990:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 1991:     Jumpcc(Ne, block515, block516)
    # nextln:       block515:
    # nextln: 1992:     $$rax = MovRM(S8) $$rbx
    # nextln: 1993:     Jump(block517)
    # nextln:       block516:
    # nextln:           $$rax = $$r12
    # nextln: 1994:     Jump(block517)
    # nextln:       block517:
    # nextln: 1995:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 1996:     Jumpcc(Ne, block518, block519)
    # nextln:       block518:
    # nextln: 1997:     $$rax = MovRStack(!1, S32)
    # nextln: 1998:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 1999:     MovStackR(!1, S32) $$rax
    # nextln: 2000:     Jump(block520)
    # nextln:       block519:
    # nextln: 2001:     $$rax = MovRStack(!6, S32)
    # nextln: 2002:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2003:     MovStackR(!6, S32) $$rax
    # nextln: 2004:     Jump(block520)
    # nextln:       block520:
    # nextln: 2005:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2006:     Jumpcc(Ne, block521, block522)
    # nextln:       block521:
    # nextln: 2007:     $$rax = MovRM(S8) $$rbx
    # nextln: 2008:     Jump(block523)
    # nextln:       block522:
    # nextln: 2009:     $$rax = MovRStack(!5, S8)
    # nextln: 2010:     Jump(block523)
    # nextln:       block523:
    # nextln: 2011:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2012:     Jumpcc(Ne, block524, block525)
    # nextln:       block524:
    # nextln: 2013:     $$rax = MovRStack(!1, S32)
    # nextln: 2014:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2015:     MovStackR(!1, S32) $$rax
    # nextln: 2016:     Jump(block526)
    # nextln:       block525:
    # nextln: 2017:     $$rax = MovRStack(!6, S32)
    # nextln: 2018:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2019:     MovStackR(!6, S32) $$rax
    # nextln: 2020:     Jump(block526)
    # nextln:       block526:
    # nextln: 2021:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2022:     Jumpcc(Ne, block527, block528)
    # nextln:       block527:
    # nextln: 2023:     $$rax = MovRM(S8) $$rbx
    # nextln: 2024:     Jump(block529)
    # nextln:       block528:
    # nextln: 2025:     $$rax = MovRM(S8) $$rbx
    # nextln: 2026:     Jump(block529)
    # nextln:       block529:
    # nextln: 2027:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2028:     Jumpcc(Ne, block530, block531)
    # nextln:       block530:
    # nextln: 2029:     $$rax = MovRStack(!1, S32)
    # nextln: 2030:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2031:     MovStackR(!1, S32) $$rax
    # nextln: 2032:     Jump(block532)
    # nextln:       block531:
    # nextln: 2033:     $$rax = MovRStack(!6, S32)
    # nextln: 2034:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2035:     MovStackR(!6, S32) $$rax
    # nextln: 2036:     Jump(block532)
    # nextln:       block532:
    # nextln: 2037:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2038:     Jumpcc(Ne, block533, block534)
    # nextln:       block533:
    # nextln: 2039:     $$rax = MovRM(S8) $$rbx
    # nextln: 2040:     Jump(block535)
    # nextln:       block534:
    # nextln: 2041:     $$rax = MovRStack(!4, S64)
    # nextln: 2042:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2043:     $$rax = MovRM(S8) $$rax
    # nextln: 2044:     Jump(block535)
    # nextln:       block535:
    # nextln: 2045:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2046:     Jumpcc(Ne, block536, block537)
    # nextln:       block536:
    # nextln: 2047:     $$rax = MovRStack(!1, S32)
    # nextln: 2048:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2049:     MovStackR(!1, S32) $$rax
    # nextln: 2050:     Jump(block538)
    # nextln:       block537:
    # nextln: 2051:     $$rax = MovRStack(!6, S32)
    # nextln: 2052:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2053:     MovStackR(!6, S32) $$rax
    # nextln: 2054:     Jump(block538)
    # nextln:       block538:
    # nextln: 2055:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2056:     Jumpcc(Ne, block539, block540)
    # nextln:       block539:
    # nextln: 2057:     $$rax = MovRM(S8) $$rbx
    # nextln: 2058:     Jump(block541)
    # nextln:       block540:
    # nextln: 2059:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2060:     $$rax = CallRm $$rax
    # nextln: 2061:     Jump(block541)
    # nextln:       block541:
    # nextln: 2062:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2063:     Jumpcc(Ne, block542, block543)
    # nextln:       block542:
    # nextln: 2064:     $$rax = MovRStack(!1, S32)
    # nextln: 2065:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2066:     MovStackR(!1, S32) $$rax
    # nextln: 2067:     Jump(block544)
    # nextln:       block543:
    # nextln: 2068:     $$rax = MovRStack(!6, S32)
    # nextln: 2069:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2070:     MovStackR(!6, S32) $$rax
    # nextln: 2071:     Jump(block544)
    # nextln:       block544:
    # nextln: 2072:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2073:     Jumpcc(Ne, block545, block546)
    # nextln:       block545:
    # nextln: 2074:     $$rax = MovRM(S8) $$rbx
    # nextln: 2075:     Jump(block549)
    # nextln:       block546:
    # nextln: 2076:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2077:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2078:     $$rdx = MovRStack(!3, S32)
    # nextln: 2079:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2080:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2081:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2082:     Jumpcc(L, block547, block548)
    # nextln:       block547:
    # nextln: 2083:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2084:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2085:     $$rax = MovRM(S8) $$rax
    # nextln: 2086:     Jump(block549)
    # nextln:       block549:
    # nextln: 2087:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2088:     Jumpcc(Ne, block550, block551)
    # nextln:       block550:
    # nextln: 2089:     $$rax = MovRStack(!1, S32)
    # nextln: 2090:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2091:     MovStackR(!1, S32) $$rax
    # nextln: 2092:     Jump(block552)
    # nextln:       block551:
    # nextln: 2093:     $$rax = MovRStack(!6, S32)
    # nextln: 2094:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2095:     MovStackR(!6, S32) $$rax
    # nextln: 2096:     Jump(block552)
    # nextln:       block552:
    # nextln: 2097:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2098:     Jumpcc(Ne, block553, block554)
    # nextln:       block553:
    # nextln: 2099:     $$rax = MovRM(S8) $$rbx
    # nextln: 2100:     Jump(block557)
    # nextln:       block554:
    # nextln: 2101:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2102:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2103:     $$rdi = MovRStack(!3, S32)
    # nextln: 2104:     $$rdx = MovRM(S32) $$rcx
    # nextln: 2105:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 2106:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 2107:     Jumpcc(L, block555, block556)
    # nextln:       block555:
    # nextln: 2108:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2109:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2110:     $$rax = MovRM(S8) $$rax
    # nextln: 2111:     Jump(block557)
    # nextln:       block557:
    # nextln: 2112:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2113:     Jumpcc(Ne, block558, block559)
    # nextln:       block558:
    # nextln: 2114:     $$rax = MovRStack(!1, S32)
    # nextln: 2115:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2116:     MovStackR(!1, S32) $$rax
    # nextln: 2117:     Jump(block560)
    # nextln:       block559:
    # nextln: 2118:     $$rax = MovRStack(!6, S32)
    # nextln: 2119:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2120:     MovStackR(!6, S32) $$rax
    # nextln: 2121:     Jump(block560)
    # nextln:       block560:
    # nextln: 2122:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2123:     Jumpcc(Ne, block561, block562)
    # nextln:       block561:
    # nextln: 2124:     $$rax = MovRStack(!4, S64)
    # nextln: 2125:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2126:     $$rax = MovRM(S8) $$rax
    # nextln: 2127:     Jump(block563)
    # nextln:       block562:
    # nextln:           $$rax = $$r13
    # nextln: 2128:     Jump(block563)
    # nextln:       block563:
    # nextln: 2129:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2130:     Jumpcc(Ne, block564, block565)
    # nextln:       block564:
    # nextln: 2131:     $$rax = MovRStack(!1, S32)
    # nextln: 2132:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2133:     MovStackR(!1, S32) $$rax
    # nextln: 2134:     Jump(block566)
    # nextln:       block565:
    # nextln: 2135:     $$rax = MovRStack(!6, S32)
    # nextln: 2136:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2137:     MovStackR(!6, S32) $$rax
    # nextln: 2138:     Jump(block566)
    # nextln:       block566:
    # nextln: 2139:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2140:     Jumpcc(Ne, block567, block568)
    # nextln:       block567:
    # nextln: 2141:     $$rax = MovRStack(!4, S64)
    # nextln: 2142:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2143:     $$rax = MovRM(S8) $$rax
    # nextln: 2144:     Jump(block569)
    # nextln:       block568:
    # nextln:           $$rax = $$r12
    # nextln: 2145:     Jump(block569)
    # nextln:       block569:
    # nextln: 2146:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2147:     Jumpcc(Ne, block570, block571)
    # nextln:       block570:
    # nextln: 2148:     $$rax = MovRStack(!1, S32)
    # nextln: 2149:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2150:     MovStackR(!1, S32) $$rax
    # nextln: 2151:     Jump(block572)
    # nextln:       block571:
    # nextln: 2152:     $$rax = MovRStack(!6, S32)
    # nextln: 2153:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2154:     MovStackR(!6, S32) $$rax
    # nextln: 2155:     Jump(block572)
    # nextln:       block572:
    # nextln: 2156:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2157:     Jumpcc(Ne, block573, block574)
    # nextln:       block573:
    # nextln: 2158:     $$rax = MovRStack(!4, S64)
    # nextln: 2159:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2160:     $$rax = MovRM(S8) $$rax
    # nextln: 2161:     Jump(block575)
    # nextln:       block574:
    # nextln: 2162:     $$rax = MovRStack(!5, S8)
    # nextln: 2163:     Jump(block575)
    # nextln:       block575:
    # nextln: 2164:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2165:     Jumpcc(Ne, block576, block577)
    # nextln:       block576:
    # nextln: 2166:     $$rax = MovRStack(!1, S32)
    # nextln: 2167:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2168:     MovStackR(!1, S32) $$rax
    # nextln: 2169:     Jump(block578)
    # nextln:       block577:
    # nextln: 2170:     $$rax = MovRStack(!6, S32)
    # nextln: 2171:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2172:     MovStackR(!6, S32) $$rax
    # nextln: 2173:     Jump(block578)
    # nextln:       block578:
    # nextln: 2174:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2175:     Jumpcc(Ne, block579, block580)
    # nextln:       block579:
    # nextln: 2176:     $$rax = MovRStack(!4, S64)
    # nextln: 2177:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2178:     $$rax = MovRM(S8) $$rax
    # nextln: 2179:     Jump(block581)
    # nextln:       block580:
    # nextln: 2180:     $$rax = MovRM(S8) $$rbx
    # nextln: 2181:     Jump(block581)
    # nextln:       block581:
    # nextln: 2182:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2183:     Jumpcc(Ne, block582, block583)
    # nextln:       block582:
    # nextln: 2184:     $$rax = MovRStack(!1, S32)
    # nextln: 2185:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2186:     MovStackR(!1, S32) $$rax
    # nextln: 2187:     Jump(block584)
    # nextln:       block583:
    # nextln: 2188:     $$rax = MovRStack(!6, S32)
    # nextln: 2189:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2190:     MovStackR(!6, S32) $$rax
    # nextln: 2191:     Jump(block584)
    # nextln:       block584:
    # nextln: 2192:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2193:     Jumpcc(Ne, block585, block586)
    # nextln:       block585:
    # nextln: 2194:     $$rax = MovRStack(!4, S64)
    # nextln: 2195:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2196:     $$rax = MovRM(S8) $$rax
    # nextln: 2197:     Jump(block587)
    # nextln:       block586:
    # nextln: 2198:     $$rax = MovRStack(!4, S64)
    # nextln: 2199:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2200:     $$rax = MovRM(S8) $$rax
    # nextln: 2201:     Jump(block587)
    # nextln:       block587:
    # nextln: 2202:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2203:     Jumpcc(Ne, block588, block589)
    # nextln:       block588:
    # nextln: 2204:     $$rax = MovRStack(!1, S32)
    # nextln: 2205:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2206:     MovStackR(!1, S32) $$rax
    # nextln: 2207:     Jump(block590)
    # nextln:       block589:
    # nextln: 2208:     $$rax = MovRStack(!6, S32)
    # nextln: 2209:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2210:     MovStackR(!6, S32) $$rax
    # nextln: 2211:     Jump(block590)
    # nextln:       block590:
    # nextln: 2212:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2213:     Jumpcc(Ne, block591, block592)
    # nextln:       block591:
    # nextln: 2214:     $$rax = MovRStack(!4, S64)
    # nextln: 2215:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2216:     $$rax = MovRM(S8) $$rax
    # nextln: 2217:     Jump(block593)
    # nextln:       block592:
    # nextln: 2218:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2219:     $$rax = CallRm $$rax
    # nextln: 2220:     Jump(block593)
    # nextln:       block593:
    # nextln: 2221:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2222:     Jumpcc(Ne, block594, block595)
    # nextln:       block594:
    # nextln: 2223:     $$rax = MovRStack(!1, S32)
    # nextln: 2224:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2225:     MovStackR(!1, S32) $$rax
    # nextln: 2226:     Jump(block596)
    # nextln:       block595:
    # nextln: 2227:     $$rax = MovRStack(!6, S32)
    # nextln: 2228:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2229:     MovStackR(!6, S32) $$rax
    # nextln: 2230:     Jump(block596)
    # nextln:       block596:
    # nextln: 2231:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2232:     Jumpcc(Ne, block597, block598)
    # nextln:       block597:
    # nextln: 2233:     $$rax = MovRStack(!4, S64)
    # nextln: 2234:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2235:     $$rax = MovRM(S8) $$rax
    # nextln: 2236:     Jump(block601)
    # nextln:       block598:
    # nextln: 2237:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2238:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2239:     $$rdx = MovRStack(!3, S32)
    # nextln: 2240:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2241:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2242:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2243:     Jumpcc(L, block599, block600)
    # nextln:       block599:
    # nextln: 2244:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2245:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2246:     $$rax = MovRM(S8) $$rax
    # nextln: 2247:     Jump(block601)
    # nextln:       block601:
    # nextln: 2248:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2249:     Jumpcc(Ne, block602, block603)
    # nextln:       block602:
    # nextln: 2250:     $$rax = MovRStack(!1, S32)
    # nextln: 2251:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2252:     MovStackR(!1, S32) $$rax
    # nextln: 2253:     Jump(block604)
    # nextln:       block603:
    # nextln: 2254:     $$rax = MovRStack(!6, S32)
    # nextln: 2255:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2256:     MovStackR(!6, S32) $$rax
    # nextln: 2257:     Jump(block604)
    # nextln:       block604:
    # nextln: 2258:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2259:     Jumpcc(Ne, block605, block606)
    # nextln:       block605:
    # nextln: 2260:     $$rax = MovRStack(!4, S64)
    # nextln: 2261:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2262:     $$rax = MovRM(S8) $$rax
    # nextln: 2263:     Jump(block609)
    # nextln:       block606:
    # nextln: 2264:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2265:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2266:     $$rdx = MovRStack(!3, S32)
    # nextln: 2267:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2268:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2269:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2270:     Jumpcc(L, block607, block608)
    # nextln:       block607:
    # nextln: 2271:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2272:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2273:     $$rax = MovRM(S8) $$rax
    # nextln: 2274:     Jump(block609)
    # nextln:       block609:
    # nextln: 2275:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2276:     Jumpcc(Ne, block610, block611)
    # nextln:       block610:
    # nextln: 2277:     $$rax = MovRStack(!1, S32)
    # nextln: 2278:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2279:     MovStackR(!1, S32) $$rax
    # nextln: 2280:     Jump(block612)
    # nextln:       block611:
    # nextln: 2281:     $$rax = MovRStack(!6, S32)
    # nextln: 2282:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2283:     MovStackR(!6, S32) $$rax
    # nextln: 2284:     Jump(block612)
    # nextln:       block612:
    # nextln: 2285:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2286:     Jumpcc(Ne, block613, block614)
    # nextln:       block613:
    # nextln: 2287:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2288:     $$rax = CallRm $$rax
    # nextln: 2289:     Jump(block615)
    # nextln:       block614:
    # nextln:           $$rax = $$r13
    # nextln: 2290:     Jump(block615)
    # nextln:       block615:
    # nextln: 2291:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2292:     Jumpcc(Ne, block616, block617)
    # nextln:       block616:
    # nextln: 2293:     $$rax = MovRStack(!1, S32)
    # nextln: 2294:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2295:     MovStackR(!1, S32) $$rax
    # nextln: 2296:     Jump(block618)
    # nextln:       block617:
    # nextln: 2297:     $$rax = MovRStack(!6, S32)
    # nextln: 2298:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2299:     MovStackR(!6, S32) $$rax
    # nextln: 2300:     Jump(block618)
    # nextln:       block618:
    # nextln: 2301:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2302:     Jumpcc(Ne, block619, block620)
    # nextln:       block619:
    # nextln: 2303:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2304:     $$rax = CallRm $$rax
    # nextln: 2305:     Jump(block621)
    # nextln:       block620:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 2306:     Jump(block621)
    # nextln:       block621:
    # nextln: 2307:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2308:     Jumpcc(Ne, block622, block623)
    # nextln:       block622:
    # nextln: 2309:     $$rax = MovRStack(!1, S32)
    # nextln: 2310:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2311:     MovStackR(!1, S32) $$rax
    # nextln: 2312:     Jump(block624)
    # nextln:       block623:
    # nextln: 2313:     $$rax = MovRStack(!6, S32)
    # nextln: 2314:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2315:     MovStackR(!6, S32) $$rax
    # nextln: 2316:     Jump(block624)
    # nextln:       block624:
    # nextln: 2317:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2318:     Jumpcc(Ne, block625, block626)
    # nextln:       block625:
    # nextln: 2319:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2320:     $$rax = CallRm $$rax
    # nextln: 2321:     Jump(block627)
    # nextln:       block626:
    # nextln: 2322:     $$rax = MovRStack(!5, S8)
    # nextln: 2323:     Jump(block627)
    # nextln:       block627:
    # nextln: 2324:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2325:     Jumpcc(Ne, block628, block629)
    # nextln:       block628:
    # nextln: 2326:     $$rax = MovRStack(!1, S32)
    # nextln: 2327:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2328:     MovStackR(!1, S32) $$rax
    # nextln: 2329:     Jump(block630)
    # nextln:       block629:
    # nextln: 2330:     $$rax = MovRStack(!6, S32)
    # nextln: 2331:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2332:     MovStackR(!6, S32) $$rax
    # nextln: 2333:     Jump(block630)
    # nextln:       block630:
    # nextln: 2334:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2335:     Jumpcc(Ne, block631, block632)
    # nextln:       block631:
    # nextln: 2336:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2337:     $$rax = CallRm $$rax
    # nextln: 2338:     Jump(block633)
    # nextln:       block632:
    # nextln: 2339:     $$rax = MovRM(S8) $$rbx
    # nextln: 2340:     Jump(block633)
    # nextln:       block633:
    # nextln: 2341:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2342:     Jumpcc(Ne, block634, block635)
    # nextln:       block634:
    # nextln: 2343:     $$rax = MovRStack(!1, S32)
    # nextln: 2344:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2345:     MovStackR(!1, S32) $$rax
    # nextln: 2346:     Jump(block636)
    # nextln:       block635:
    # nextln: 2347:     $$rax = MovRStack(!6, S32)
    # nextln: 2348:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2349:     MovStackR(!6, S32) $$rax
    # nextln: 2350:     Jump(block636)
    # nextln:       block636:
    # nextln: 2351:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2352:     Jumpcc(Ne, block637, block638)
    # nextln:       block637:
    # nextln: 2353:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2354:     $$rax = CallRm $$rax
    # nextln: 2355:     Jump(block639)
    # nextln:       block638:
    # nextln: 2356:     $$rax = MovRStack(!4, S64)
    # nextln: 2357:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2358:     $$rax = MovRM(S8) $$rax
    # nextln: 2359:     Jump(block639)
    # nextln:       block639:
    # nextln: 2360:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2361:     Jumpcc(Ne, block640, block641)
    # nextln:       block640:
    # nextln: 2362:     $$rax = MovRStack(!1, S32)
    # nextln: 2363:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2364:     MovStackR(!1, S32) $$rax
    # nextln: 2365:     Jump(block642)
    # nextln:       block641:
    # nextln: 2366:     $$rax = MovRStack(!6, S32)
    # nextln: 2367:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2368:     MovStackR(!6, S32) $$rax
    # nextln: 2369:     Jump(block642)
    # nextln:       block642:
    # nextln: 2370:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2371:     Jumpcc(Ne, block643, block644)
    # nextln:       block643:
    # nextln: 2372:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2373:     $$rax = CallRm $$rax
    # nextln: 2374:     Jump(block645)
    # nextln:       block644:
    # nextln: 2375:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2376:     $$rax = CallRm $$rax
    # nextln: 2377:     Jump(block645)
    # nextln:       block645:
    # nextln: 2378:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2379:     Jumpcc(Ne, block646, block647)
    # nextln:       block646:
    # nextln: 2380:     $$rax = MovRStack(!1, S32)
    # nextln: 2381:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2382:     MovStackR(!1, S32) $$rax
    # nextln: 2383:     Jump(block648)
    # nextln:       block647:
    # nextln: 2384:     $$rax = MovRStack(!6, S32)
    # nextln: 2385:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2386:     MovStackR(!6, S32) $$rax
    # nextln: 2387:     Jump(block648)
    # nextln:       block648:
    # nextln: 2388:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2389:     Jumpcc(Ne, block649, block650)
    # nextln:       block649:
    # nextln: 2390:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2391:     $$rax = CallRm $$rax
    # nextln: 2392:     Jump(block653)
    # nextln:       block650:
    # nextln: 2393:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2394:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2395:     $$rdx = MovRStack(!3, S32)
    # nextln: 2396:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2397:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2398:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2399:     Jumpcc(L, block651, block652)
    # nextln:       block651:
    # nextln: 2400:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2401:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2402:     $$rax = MovRM(S8) $$rax
    # nextln: 2403:     Jump(block653)
    # nextln:       block653:
    # nextln: 2404:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2405:     Jumpcc(Ne, block654, block655)
    # nextln:       block654:
    # nextln: 2406:     $$rax = MovRStack(!1, S32)
    # nextln: 2407:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2408:     MovStackR(!1, S32) $$rax
    # nextln: 2409:     Jump(block656)
    # nextln:       block655:
    # nextln: 2410:     $$rax = MovRStack(!6, S32)
    # nextln: 2411:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2412:     MovStackR(!6, S32) $$rax
    # nextln: 2413:     Jump(block656)
    # nextln:       block656:
    # nextln: 2414:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2415:     Jumpcc(Ne, block657, block658)
    # nextln:       block657:
    # nextln: 2416:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2417:     $$rax = CallRm $$rax
    # nextln: 2418:     Jump(block661)
    # nextln:       block658:
    # nextln: 2419:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2420:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2421:     $$rdx = MovRStack(!3, S32)
    # nextln: 2422:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2423:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2424:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2425:     Jumpcc(L, block659, block660)
    # nextln:       block659:
    # nextln: 2426:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2427:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2428:     $$rax = MovRM(S8) $$rax
    # nextln: 2429:     Jump(block661)
    # nextln:       block661:
    # nextln: 2430:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2431:     Jumpcc(Ne, block662, block663)
    # nextln:       block662:
    # nextln: 2432:     $$rax = MovRStack(!1, S32)
    # nextln: 2433:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2434:     MovStackR(!1, S32) $$rax
    # nextln: 2435:     Jump(block664)
    # nextln:       block663:
    # nextln: 2436:     $$rax = MovRStack(!6, S32)
    # nextln: 2437:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2438:     MovStackR(!6, S32) $$rax
    # nextln: 2439:     Jump(block664)
    # nextln:       block664:
    # nextln: 2440:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2441:     Jumpcc(Ne, block665, block666)
    # nextln:       block665:
    # nextln: 2442:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2443:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2444:     $$rdx = MovRStack(!3, S32)
    # nextln: 2445:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2446:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2447:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2448:     Jumpcc(L, block1241, block1242)
    # nextln:       block1241:
    # nextln: 2449:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2450:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2451:     $$rax = MovRM(S8) $$rax
    # nextln: 2452:     Jump(block667)
    # nextln:       block1242:
    # nextln: 2453:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2454:     CallRm $$rax
    # nextln: 2455:     Ud2
    # nextln:       block666:
    # nextln:           $$rax = $$r13
    # nextln: 2456:     Jump(block667)
    # nextln:       block667:
    # nextln: 2457:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2458:     Jumpcc(Ne, block668, block669)
    # nextln:       block668:
    # nextln: 2459:     $$rax = MovRStack(!1, S32)
    # nextln: 2460:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2461:     MovStackR(!1, S32) $$rax
    # nextln: 2462:     Jump(block670)
    # nextln:       block669:
    # nextln: 2463:     $$rax = MovRStack(!6, S32)
    # nextln: 2464:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2465:     MovStackR(!6, S32) $$rax
    # nextln: 2466:     Jump(block670)
    # nextln:       block670:
    # nextln: 2467:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2468:     Jumpcc(Ne, block671, block672)
    # nextln:       block671:
    # nextln: 2469:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2470:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2471:     $$rdx = MovRStack(!3, S32)
    # nextln: 2472:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2473:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2474:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2475:     Jumpcc(L, block1239, block1240)
    # nextln:       block1239:
    # nextln: 2476:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2477:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2478:     $$rax = MovRM(S8) $$rax
    # nextln: 2479:     Jump(block673)
    # nextln:       block1240:
    # nextln: 2480:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2481:     CallRm $$rax
    # nextln: 2482:     Ud2
    # nextln:       block672:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 2483:     Jump(block673)
    # nextln:       block673:
    # nextln: 2484:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2485:     Jumpcc(Ne, block674, block675)
    # nextln:       block674:
    # nextln: 2486:     $$rax = MovRStack(!1, S32)
    # nextln: 2487:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2488:     MovStackR(!1, S32) $$rax
    # nextln: 2489:     Jump(block676)
    # nextln:       block675:
    # nextln: 2490:     $$rax = MovRStack(!6, S32)
    # nextln: 2491:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2492:     MovStackR(!6, S32) $$rax
    # nextln: 2493:     Jump(block676)
    # nextln:       block676:
    # nextln: 2494:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2495:     Jumpcc(Ne, block677, block678)
    # nextln:       block677:
    # nextln: 2496:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2497:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2498:     $$rdi = MovRStack(!3, S32)
    # nextln: 2499:     $$rdx = MovRM(S32) $$rcx
    # nextln: 2500:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 2501:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 2502:     Jumpcc(L, block1237, block1238)
    # nextln:       block1237:
    # nextln: 2503:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2504:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2505:     $$rax = MovRM(S8) $$rax
    # nextln: 2506:     Jump(block679)
    # nextln:       block1238:
    # nextln: 2507:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2508:     CallRm $$rax
    # nextln: 2509:     Ud2
    # nextln:       block678:
    # nextln: 2510:     $$rax = MovRStack(!5, S8)
    # nextln: 2511:     Jump(block679)
    # nextln:       block679:
    # nextln: 2512:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2513:     Jumpcc(Ne, block680, block681)
    # nextln:       block680:
    # nextln: 2514:     $$rax = MovRStack(!1, S32)
    # nextln: 2515:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2516:     MovStackR(!1, S32) $$rax
    # nextln: 2517:     Jump(block682)
    # nextln:       block681:
    # nextln: 2518:     $$rax = MovRStack(!6, S32)
    # nextln: 2519:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2520:     MovStackR(!6, S32) $$rax
    # nextln: 2521:     Jump(block682)
    # nextln:       block682:
    # nextln: 2522:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2523:     Jumpcc(Ne, block683, block684)
    # nextln:       block683:
    # nextln: 2524:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2525:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2526:     $$rdx = MovRStack(!3, S32)
    # nextln: 2527:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2528:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2529:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2530:     Jumpcc(L, block1235, block1236)
    # nextln:       block1235:
    # nextln: 2531:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2532:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2533:     $$rax = MovRM(S8) $$rax
    # nextln: 2534:     Jump(block685)
    # nextln:       block1236:
    # nextln: 2535:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2536:     CallRm $$rax
    # nextln: 2537:     Ud2
    # nextln:       block684:
    # nextln: 2538:     $$rax = MovRM(S8) $$rbx
    # nextln: 2539:     Jump(block685)
    # nextln:       block685:
    # nextln: 2540:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2541:     Jumpcc(Ne, block686, block687)
    # nextln:       block686:
    # nextln: 2542:     $$rax = MovRStack(!1, S32)
    # nextln: 2543:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2544:     MovStackR(!1, S32) $$rax
    # nextln: 2545:     Jump(block688)
    # nextln:       block687:
    # nextln: 2546:     $$rax = MovRStack(!6, S32)
    # nextln: 2547:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2548:     MovStackR(!6, S32) $$rax
    # nextln: 2549:     Jump(block688)
    # nextln:       block688:
    # nextln: 2550:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2551:     Jumpcc(Ne, block689, block690)
    # nextln:       block689:
    # nextln: 2552:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2553:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2554:     $$rdi = MovRStack(!3, S32)
    # nextln: 2555:     $$rdx = MovRM(S32) $$rcx
    # nextln: 2556:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 2557:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 2558:     Jumpcc(L, block1233, block1234)
    # nextln:       block1233:
    # nextln: 2559:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2560:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2561:     $$rax = MovRM(S8) $$rax
    # nextln: 2562:     Jump(block691)
    # nextln:       block1234:
    # nextln: 2563:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2564:     CallRm $$rax
    # nextln: 2565:     Ud2
    # nextln:       block690:
    # nextln: 2566:     $$rax = MovRStack(!4, S64)
    # nextln: 2567:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2568:     $$rax = MovRM(S8) $$rax
    # nextln: 2569:     Jump(block691)
    # nextln:       block691:
    # nextln: 2570:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2571:     Jumpcc(Ne, block692, block693)
    # nextln:       block692:
    # nextln: 2572:     $$rax = MovRStack(!1, S32)
    # nextln: 2573:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2574:     MovStackR(!1, S32) $$rax
    # nextln: 2575:     Jump(block694)
    # nextln:       block693:
    # nextln: 2576:     $$rax = MovRStack(!6, S32)
    # nextln: 2577:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2578:     MovStackR(!6, S32) $$rax
    # nextln: 2579:     Jump(block694)
    # nextln:       block694:
    # nextln: 2580:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2581:     Jumpcc(Ne, block695, block696)
    # nextln:       block695:
    # nextln: 2582:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2583:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2584:     $$rdx = MovRStack(!3, S32)
    # nextln: 2585:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2586:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2587:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2588:     Jumpcc(L, block1231, block1232)
    # nextln:       block1231:
    # nextln: 2589:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2590:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2591:     $$rax = MovRM(S8) $$rax
    # nextln: 2592:     Jump(block697)
    # nextln:       block1232:
    # nextln: 2593:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2594:     CallRm $$rax
    # nextln: 2595:     Ud2
    # nextln:       block696:
    # nextln: 2596:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2597:     $$rax = CallRm $$rax
    # nextln: 2598:     Jump(block697)
    # nextln:       block697:
    # nextln: 2599:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2600:     Jumpcc(Ne, block698, block699)
    # nextln:       block698:
    # nextln: 2601:     $$rax = MovRStack(!1, S32)
    # nextln: 2602:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2603:     MovStackR(!1, S32) $$rax
    # nextln: 2604:     Jump(block700)
    # nextln:       block699:
    # nextln: 2605:     $$rax = MovRStack(!6, S32)
    # nextln: 2606:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2607:     MovStackR(!6, S32) $$rax
    # nextln: 2608:     Jump(block700)
    # nextln:       block700:
    # nextln: 2609:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2610:     Jumpcc(Ne, block701, block702)
    # nextln:       block701:
    # nextln: 2611:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2612:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2613:     $$rdx = MovRStack(!3, S32)
    # nextln: 2614:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2615:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2616:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2617:     Jumpcc(L, block1229, block1230)
    # nextln:       block1229:
    # nextln: 2618:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2619:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2620:     $$rax = MovRM(S8) $$rax
    # nextln: 2621:     Jump(block705)
    # nextln:       block1230:
    # nextln: 2622:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2623:     CallRm $$rax
    # nextln: 2624:     Ud2
    # nextln:       block702:
    # nextln: 2625:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2626:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2627:     $$rdx = MovRStack(!3, S32)
    # nextln: 2628:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2629:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2630:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2631:     Jumpcc(L, block703, block704)
    # nextln:       block703:
    # nextln: 2632:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2633:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2634:     $$rax = MovRM(S8) $$rax
    # nextln: 2635:     Jump(block705)
    # nextln:       block705:
    # nextln: 2636:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2637:     Jumpcc(Ne, block706, block707)
    # nextln:       block706:
    # nextln: 2638:     $$rax = MovRStack(!1, S32)
    # nextln: 2639:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2640:     MovStackR(!1, S32) $$rax
    # nextln: 2641:     Jump(block708)
    # nextln:       block707:
    # nextln: 2642:     $$rax = MovRStack(!6, S32)
    # nextln: 2643:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2644:     MovStackR(!6, S32) $$rax
    # nextln: 2645:     Jump(block708)
    # nextln:       block708:
    # nextln: 2646:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2647:     Jumpcc(Ne, block709, block710)
    # nextln:       block709:
    # nextln: 2648:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2649:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2650:     $$rdi = MovRStack(!3, S32)
    # nextln: 2651:     $$rdx = MovRM(S32) $$rcx
    # nextln: 2652:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 2653:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 2654:     Jumpcc(L, block1227, block1228)
    # nextln:       block1227:
    # nextln: 2655:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2656:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2657:     $$rax = MovRM(S8) $$rax
    # nextln: 2658:     Jump(block713)
    # nextln:       block1228:
    # nextln: 2659:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2660:     CallRm $$rax
    # nextln: 2661:     Ud2
    # nextln:       block710:
    # nextln: 2662:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2663:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2664:     $$rdi = MovRStack(!3, S32)
    # nextln: 2665:     $$rdx = MovRM(S32) $$rcx
    # nextln: 2666:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 2667:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 2668:     Jumpcc(L, block711, block712)
    # nextln:       block711:
    # nextln: 2669:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2670:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2671:     $$rax = MovRM(S8) $$rax
    # nextln: 2672:     Jump(block713)
    # nextln:       block713:
    # nextln: 2673:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2674:     Jumpcc(Ne, block714, block715)
    # nextln:       block714:
    # nextln: 2675:     $$rax = MovRStack(!1, S32)
    # nextln: 2676:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2677:     MovStackR(!1, S32) $$rax
    # nextln: 2678:     Jump(block716)
    # nextln:       block715:
    # nextln: 2679:     $$rax = MovRStack(!6, S32)
    # nextln: 2680:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2681:     MovStackR(!6, S32) $$rax
    # nextln: 2682:     Jump(block716)
    # nextln:       block716:
    # nextln: 2683:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2684:     Jumpcc(Ne, block717, block718)
    # nextln:       block717:
    # nextln: 2685:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2686:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2687:     $$rdx = MovRStack(!3, S32)
    # nextln: 2688:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2689:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2690:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2691:     Jumpcc(L, block1225, block1226)
    # nextln:       block1225:
    # nextln: 2692:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2693:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2694:     $$rax = MovRM(S8) $$rax
    # nextln: 2695:     Jump(block719)
    # nextln:       block1226:
    # nextln: 2696:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2697:     CallRm $$rax
    # nextln: 2698:     Ud2
    # nextln:       block718:
    # nextln:           $$rax = $$r13
    # nextln: 2699:     Jump(block719)
    # nextln:       block719:
    # nextln: 2700:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2701:     Jumpcc(Ne, block720, block721)
    # nextln:       block720:
    # nextln: 2702:     $$rax = MovRStack(!1, S32)
    # nextln: 2703:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2704:     MovStackR(!1, S32) $$rax
    # nextln: 2705:     Jump(block722)
    # nextln:       block721:
    # nextln: 2706:     $$rax = MovRStack(!6, S32)
    # nextln: 2707:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2708:     MovStackR(!6, S32) $$rax
    # nextln: 2709:     Jump(block722)
    # nextln:       block722:
    # nextln: 2710:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2711:     Jumpcc(Ne, block723, block724)
    # nextln:       block723:
    # nextln: 2712:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2713:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2714:     $$rdx = MovRStack(!3, S32)
    # nextln: 2715:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2716:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2717:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2718:     Jumpcc(L, block1223, block1224)
    # nextln:       block1223:
    # nextln: 2719:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2720:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2721:     $$rax = MovRM(S8) $$rax
    # nextln: 2722:     Jump(block725)
    # nextln:       block1224:
    # nextln: 2723:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2724:     CallRm $$rax
    # nextln: 2725:     Ud2
    # nextln:       block724:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 2726:     Jump(block725)
    # nextln:       block725:
    # nextln: 2727:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2728:     Jumpcc(Ne, block726, block727)
    # nextln:       block726:
    # nextln: 2729:     $$rax = MovRStack(!1, S32)
    # nextln: 2730:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2731:     MovStackR(!1, S32) $$rax
    # nextln: 2732:     Jump(block728)
    # nextln:       block727:
    # nextln: 2733:     $$rax = MovRStack(!6, S32)
    # nextln: 2734:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2735:     MovStackR(!6, S32) $$rax
    # nextln: 2736:     Jump(block728)
    # nextln:       block728:
    # nextln: 2737:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2738:     Jumpcc(Ne, block729, block730)
    # nextln:       block729:
    # nextln: 2739:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2740:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2741:     $$rdx = MovRStack(!3, S32)
    # nextln: 2742:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2743:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2744:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2745:     Jumpcc(L, block1221, block1222)
    # nextln:       block1221:
    # nextln: 2746:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2747:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2748:     $$rax = MovRM(S8) $$rax
    # nextln: 2749:     Jump(block731)
    # nextln:       block1222:
    # nextln: 2750:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2751:     CallRm $$rax
    # nextln: 2752:     Ud2
    # nextln:       block730:
    # nextln: 2753:     $$rax = MovRStack(!5, S8)
    # nextln: 2754:     Jump(block731)
    # nextln:       block731:
    # nextln: 2755:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2756:     Jumpcc(Ne, block732, block733)
    # nextln:       block732:
    # nextln: 2757:     $$rax = MovRStack(!1, S32)
    # nextln: 2758:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2759:     MovStackR(!1, S32) $$rax
    # nextln: 2760:     Jump(block734)
    # nextln:       block733:
    # nextln: 2761:     $$rax = MovRStack(!6, S32)
    # nextln: 2762:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2763:     MovStackR(!6, S32) $$rax
    # nextln: 2764:     Jump(block734)
    # nextln:       block734:
    # nextln: 2765:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2766:     Jumpcc(Ne, block735, block736)
    # nextln:       block735:
    # nextln: 2767:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2768:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2769:     $$rdx = MovRStack(!3, S32)
    # nextln: 2770:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2771:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2772:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2773:     Jumpcc(L, block1219, block1220)
    # nextln:       block1219:
    # nextln: 2774:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2775:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2776:     $$rax = MovRM(S8) $$rax
    # nextln: 2777:     Jump(block737)
    # nextln:       block1220:
    # nextln: 2778:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2779:     CallRm $$rax
    # nextln: 2780:     Ud2
    # nextln:       block736:
    # nextln: 2781:     $$rax = MovRM(S8) $$rbx
    # nextln: 2782:     Jump(block737)
    # nextln:       block737:
    # nextln: 2783:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2784:     Jumpcc(Ne, block738, block739)
    # nextln:       block738:
    # nextln: 2785:     $$rax = MovRStack(!1, S32)
    # nextln: 2786:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2787:     MovStackR(!1, S32) $$rax
    # nextln: 2788:     Jump(block740)
    # nextln:       block739:
    # nextln: 2789:     $$rax = MovRStack(!6, S32)
    # nextln: 2790:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2791:     MovStackR(!6, S32) $$rax
    # nextln: 2792:     Jump(block740)
    # nextln:       block740:
    # nextln: 2793:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2794:     Jumpcc(Ne, block741, block742)
    # nextln:       block741:
    # nextln: 2795:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2796:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2797:     $$rdx = MovRStack(!3, S32)
    # nextln: 2798:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2799:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2800:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2801:     Jumpcc(L, block1217, block1218)
    # nextln:       block1217:
    # nextln: 2802:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2803:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2804:     $$rax = MovRM(S8) $$rax
    # nextln: 2805:     Jump(block743)
    # nextln:       block1218:
    # nextln: 2806:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2807:     CallRm $$rax
    # nextln: 2808:     Ud2
    # nextln:       block742:
    # nextln: 2809:     $$rax = MovRStack(!4, S64)
    # nextln: 2810:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 2811:     $$rax = MovRM(S8) $$rax
    # nextln: 2812:     Jump(block743)
    # nextln:       block743:
    # nextln: 2813:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2814:     Jumpcc(Ne, block744, block745)
    # nextln:       block744:
    # nextln: 2815:     $$rax = MovRStack(!1, S32)
    # nextln: 2816:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2817:     MovStackR(!1, S32) $$rax
    # nextln: 2818:     Jump(block746)
    # nextln:       block745:
    # nextln: 2819:     $$rax = MovRStack(!6, S32)
    # nextln: 2820:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2821:     MovStackR(!6, S32) $$rax
    # nextln: 2822:     Jump(block746)
    # nextln:       block746:
    # nextln: 2823:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2824:     Jumpcc(Ne, block747, block748)
    # nextln:       block747:
    # nextln: 2825:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2826:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2827:     $$rdx = MovRStack(!3, S32)
    # nextln: 2828:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2829:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2830:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2831:     Jumpcc(L, block1215, block1216)
    # nextln:       block1215:
    # nextln: 2832:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2833:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2834:     $$rax = MovRM(S8) $$rax
    # nextln: 2835:     Jump(block749)
    # nextln:       block1216:
    # nextln: 2836:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2837:     CallRm $$rax
    # nextln: 2838:     Ud2
    # nextln:       block748:
    # nextln: 2839:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 2840:     $$rax = CallRm $$rax
    # nextln: 2841:     Jump(block749)
    # nextln:       block749:
    # nextln: 2842:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2843:     Jumpcc(Ne, block750, block751)
    # nextln:       block750:
    # nextln: 2844:     $$rax = MovRStack(!1, S32)
    # nextln: 2845:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2846:     MovStackR(!1, S32) $$rax
    # nextln: 2847:     Jump(block752)
    # nextln:       block751:
    # nextln: 2848:     $$rax = MovRStack(!6, S32)
    # nextln: 2849:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2850:     MovStackR(!6, S32) $$rax
    # nextln: 2851:     Jump(block752)
    # nextln:       block752:
    # nextln: 2852:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2853:     Jumpcc(Ne, block753, block754)
    # nextln:       block753:
    # nextln: 2854:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2855:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2856:     $$rdx = MovRStack(!3, S32)
    # nextln: 2857:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2858:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2859:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2860:     Jumpcc(L, block1213, block1214)
    # nextln:       block1213:
    # nextln: 2861:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2862:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2863:     $$rax = MovRM(S8) $$rax
    # nextln: 2864:     Jump(block757)
    # nextln:       block1214:
    # nextln: 2865:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2866:     CallRm $$rax
    # nextln: 2867:     Ud2
    # nextln:       block754:
    # nextln: 2868:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2869:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2870:     $$rdi = MovRStack(!3, S32)
    # nextln: 2871:     $$rdx = MovRM(S32) $$rcx
    # nextln: 2872:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 2873:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 2874:     Jumpcc(L, block755, block756)
    # nextln:       block755:
    # nextln: 2875:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2876:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2877:     $$rax = MovRM(S8) $$rax
    # nextln: 2878:     Jump(block757)
    # nextln:       block757:
    # nextln: 2879:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2880:     Jumpcc(Ne, block758, block759)
    # nextln:       block758:
    # nextln: 2881:     $$rax = MovRStack(!1, S32)
    # nextln: 2882:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2883:     MovStackR(!1, S32) $$rax
    # nextln: 2884:     Jump(block760)
    # nextln:       block759:
    # nextln: 2885:     $$rax = MovRStack(!6, S32)
    # nextln: 2886:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2887:     MovStackR(!6, S32) $$rax
    # nextln: 2888:     Jump(block760)
    # nextln:       block760:
    # nextln: 2889:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2890:     Jumpcc(Ne, block761, block762)
    # nextln:       block761:
    # nextln: 2891:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2892:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2893:     $$rdi = MovRStack(!3, S32)
    # nextln: 2894:     $$rdx = MovRM(S32) $$rcx
    # nextln: 2895:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 2896:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 2897:     Jumpcc(L, block1211, block1212)
    # nextln:       block1211:
    # nextln: 2898:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2899:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2900:     $$rax = MovRM(S8) $$rax
    # nextln: 2901:     Jump(block765)
    # nextln:       block1212:
    # nextln: 2902:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 2903:     CallRm $$rax
    # nextln: 2904:     Ud2
    # nextln:       block762:
    # nextln: 2905:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 2906:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2907:     $$rdx = MovRStack(!3, S32)
    # nextln: 2908:     $$rdi = MovRM(S32) $$rcx
    # nextln: 2909:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 2910:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 2911:     Jumpcc(L, block763, block764)
    # nextln:       block763:
    # nextln: 2912:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 2913:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 2914:     $$rax = MovRM(S8) $$rax
    # nextln: 2915:     Jump(block765)
    # nextln:       block765:
    # nextln: 2916:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2917:     Jumpcc(Ne, block766, block767)
    # nextln:       block766:
    # nextln: 2918:     $$rax = MovRStack(!1, S32)
    # nextln: 2919:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2920:     MovStackR(!1, S32) $$rax
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 2921:     Jump(block768)
    # nextln:       block767:
    # nextln: 2922:     $$rax = MovRStack(!6, S32)
    # nextln: 2923:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 2924:     MovStackR(!6, S32) $$rax
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 2925:     Jump(block768)
    # nextln:       block768:
    # nextln: 2926:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2927:     Jumpcc(Ne, block769, block771)
    # nextln:       block769:
    # nextln: 2928:     Jump(block770)
    # nextln:       block771:
    # nextln: 2929:     Jump(block770)
    # nextln:       block770:
    # nextln: 2930:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 2931:     Jumpcc(Ne, block772, block773)
    # nextln:       block772:
    # nextln: 2932:     $$rcx = MovRStack(!1, S32)
    # nextln: 2933:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2934:     MovStackR(!1, S32) $$rcx
    # nextln: 2935:     Jump(block774)
    # nextln:       block773:
    # nextln: 2936:     $$rcx = MovRStack(!6, S32)
    # nextln: 2937:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2938:     MovStackR(!6, S32) $$rcx
    # nextln: 2939:     Jump(block774)
    # nextln:       block774:
    # nextln: 2940:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2941:     Jumpcc(Ne, block775, block776)
    # nextln:       block775:
    # nextln: 2942:     $$rcx = MovRStack(!1, S32)
    # nextln: 2943:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2944:     MovStackR(!1, S32) $$rcx
    # nextln: 2945:     Jump(block777)
    # nextln:       block776:
    # nextln: 2946:     $$rcx = MovRStack(!6, S32)
    # nextln: 2947:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2948:     MovStackR(!6, S32) $$rcx
    # nextln: 2949:     Jump(block777)
    # nextln:       block777:
    # nextln: 2950:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2951:     Jumpcc(Ne, block778, block780)
    # nextln:       block778:
    # nextln:           $$rcx = $$r13
    # nextln: 2952:     Jump(block779)
    # nextln:       block780:
    # nextln: 2953:     $$rcx = MovRStack(!5, S8)
    # nextln: 2954:     Jump(block779)
    # nextln:       block779:
    # nextln: 2955:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 2956:     Jumpcc(Ne, block781, block782)
    # nextln:       block781:
    # nextln: 2957:     $$rcx = MovRStack(!1, S32)
    # nextln: 2958:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2959:     MovStackR(!1, S32) $$rcx
    # nextln: 2960:     Jump(block783)
    # nextln:       block782:
    # nextln: 2961:     $$rcx = MovRStack(!6, S32)
    # nextln: 2962:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2963:     MovStackR(!6, S32) $$rcx
    # nextln: 2964:     Jump(block783)
    # nextln:       block783:
    # nextln: 2965:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2966:     Jumpcc(Ne, block784, block786)
    # nextln:       block784:
    # nextln:           $$rcx = $$r13
    # nextln: 2967:     Jump(block785)
    # nextln:       block786:
    # nextln: 2968:     $$rcx = MovRM(S8) $$rbx
    # nextln: 2969:     Jump(block785)
    # nextln:       block785:
    # nextln: 2970:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 2971:     Jumpcc(Ne, block787, block788)
    # nextln:       block787:
    # nextln: 2972:     $$rcx = MovRStack(!1, S32)
    # nextln: 2973:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2974:     MovStackR(!1, S32) $$rcx
    # nextln: 2975:     Jump(block789)
    # nextln:       block788:
    # nextln: 2976:     $$rcx = MovRStack(!6, S32)
    # nextln: 2977:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2978:     MovStackR(!6, S32) $$rcx
    # nextln: 2979:     Jump(block789)
    # nextln:       block789:
    # nextln: 2980:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2981:     Jumpcc(Ne, block790, block792)
    # nextln:       block790:
    # nextln:           $$rcx = $$r13
    # nextln: 2982:     Jump(block791)
    # nextln:       block792:
    # nextln: 2983:     $$rcx = MovRStack(!4, S64)
    # nextln: 2984:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 2985:     $$rcx = MovRM(S8) $$rcx
    # nextln: 2986:     Jump(block791)
    # nextln:       block791:
    # nextln: 2987:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 2988:     Jumpcc(Ne, block793, block794)
    # nextln:       block793:
    # nextln: 2989:     $$rcx = MovRStack(!1, S32)
    # nextln: 2990:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2991:     MovStackR(!1, S32) $$rcx
    # nextln: 2992:     Jump(block795)
    # nextln:       block794:
    # nextln: 2993:     $$rcx = MovRStack(!6, S32)
    # nextln: 2994:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 2995:     MovStackR(!6, S32) $$rcx
    # nextln: 2996:     Jump(block795)
    # nextln:       block795:
    # nextln: 2997:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 2998:     Jumpcc(Ne, block796, block798)
    # nextln:       block796:
    # nextln:           $$rax = $$r13
    # nextln: 2999:     Jump(block797)
    # nextln:       block798:
    # nextln: 3000:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3001:     $$rax = CallRm $$rax
    # nextln: 3002:     Jump(block797)
    # nextln:       block797:
    # nextln: 3003:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3004:     Jumpcc(Ne, block799, block800)
    # nextln:       block799:
    # nextln: 3005:     $$rax = MovRStack(!1, S32)
    # nextln: 3006:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3007:     MovStackR(!1, S32) $$rax
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 3008:     Jump(block801)
    # nextln:       block800:
    # nextln: 3009:     $$rax = MovRStack(!6, S32)
    # nextln: 3010:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3011:     MovStackR(!6, S32) $$rax
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 3012:     Jump(block801)
    # nextln:       block801:
    # nextln: 3013:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3014:     Jumpcc(Ne, block802, block804)
    # nextln:       block802:
    # nextln:           $$rcx = $$r13
    # nextln: 3015:     Jump(block803)
    # nextln:       block804:
    # nextln: 3016:     $$rcx = MovRStack(!0, S64)
    # nextln:           $$rdx = $$rcx
    # nextln: 3017:     $$rdx = AluRmI(S64, Add, 32) $$rdx
    # nextln: 3018:     $$rsi = MovRStack(!3, S32)
    # nextln: 3019:     $$rdi = MovRM(S32) $$rdx
    # nextln: 3020:     $$rdx = MovsxRRm(Ext32_64) $$rsi
    # nextln: 3021:     AluRRm(S64, Cmp) $$rdx, $$rdi
    # nextln: 3022:     Jumpcc(L, block805, block806)
    # nextln:       block805:
    # nextln: 3023:     $$rdx = AluRmI(S64, Add, 40) $$rdx
    # nextln: 3024:     $$rcx = AluRRm(S64, Add) $$rcx, $$rdx
    # nextln: 3025:     $$rcx = MovRM(S8) $$rcx
    # nextln: 3026:     Jump(block803)
    # nextln:       block803:
    # nextln: 3027:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 3028:     Jumpcc(Ne, block807, block808)
    # nextln:       block807:
    # nextln: 3029:     $$rcx = MovRStack(!1, S32)
    # nextln: 3030:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3031:     MovStackR(!1, S32) $$rcx
    # nextln: 3032:     Jump(block809)
    # nextln:       block808:
    # nextln: 3033:     $$rcx = MovRStack(!6, S32)
    # nextln: 3034:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3035:     MovStackR(!6, S32) $$rcx
    # nextln: 3036:     Jump(block809)
    # nextln:       block809:
    # nextln: 3037:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3038:     Jumpcc(Ne, block810, block812)
    # nextln:       block810:
    # nextln:           $$rcx = $$r13
    # nextln: 3039:     Jump(block811)
    # nextln:       block812:
    # nextln: 3040:     $$rcx = MovRStack(!2, S64)
    # nextln:           $$rdx = $$rcx
    # nextln: 3041:     $$rdx = AluRmI(S64, Add, 32) $$rdx
    # nextln: 3042:     $$rdi = MovRStack(!3, S32)
    # nextln: 3043:     $$rsi = MovRM(S32) $$rdx
    # nextln: 3044:     $$rdx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 3045:     AluRRm(S64, Cmp) $$rdx, $$rsi
    # nextln: 3046:     Jumpcc(L, block813, block814)
    # nextln:       block813:
    # nextln: 3047:     $$rdx = AluRmI(S64, Add, 40) $$rdx
    # nextln: 3048:     $$rcx = AluRRm(S64, Add) $$rcx, $$rdx
    # nextln: 3049:     $$rcx = MovRM(S8) $$rcx
    # nextln: 3050:     Jump(block811)
    # nextln:       block811:
    # nextln: 3051:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 3052:     Jumpcc(Ne, block815, block816)
    # nextln:       block815:
    # nextln: 3053:     $$rcx = MovRStack(!1, S32)
    # nextln: 3054:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3055:     MovStackR(!1, S32) $$rcx
    # nextln: 3056:     Jump(block817)
    # nextln:       block816:
    # nextln: 3057:     $$rcx = MovRStack(!6, S32)
    # nextln: 3058:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3059:     MovStackR(!6, S32) $$rcx
    # nextln: 3060:     Jump(block817)
    # nextln:       block817:
    # nextln: 3061:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 3062:     Jumpcc(Ne, block818, block819)
    # nextln:       block818:
    # nextln: 3063:     $$rcx = MovRStack(!1, S32)
    # nextln: 3064:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3065:     MovStackR(!1, S32) $$rcx
    # nextln: 3066:     Jump(block820)
    # nextln:       block819:
    # nextln: 3067:     $$rcx = MovRStack(!6, S32)
    # nextln: 3068:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3069:     MovStackR(!6, S32) $$rcx
    # nextln: 3070:     Jump(block820)
    # nextln:       block820:
    # nextln: 3071:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3072:     Jumpcc(Ne, block821, block823)
    # nextln:       block821:
    # nextln: 3073:     Jump(block822)
    # nextln:       block823:
    # nextln: 3074:     Jump(block822)
    # nextln:       block822:
    # nextln: 3075:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3076:     Jumpcc(Ne, block824, block825)
    # nextln:       block824:
    # nextln: 3077:     $$rcx = MovRStack(!1, S32)
    # nextln: 3078:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3079:     MovStackR(!1, S32) $$rcx
    # nextln: 3080:     Jump(block826)
    # nextln:       block825:
    # nextln: 3081:     $$rcx = MovRStack(!6, S32)
    # nextln: 3082:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3083:     MovStackR(!6, S32) $$rcx
    # nextln: 3084:     Jump(block826)
    # nextln:       block826:
    # nextln: 3085:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3086:     Jumpcc(Ne, block827, block829)
    # nextln:       block827:
    # nextln:           $$rcx = $$rax
    # nextln: 3087:     Jump(block828)
    # nextln:       block829:
    # nextln: 3088:     $$rcx = MovRStack(!5, S8)
    # nextln: 3089:     Jump(block828)
    # nextln:       block828:
    # nextln: 3090:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 3091:     Jumpcc(Ne, block830, block831)
    # nextln:       block830:
    # nextln: 3092:     $$rcx = MovRStack(!1, S32)
    # nextln: 3093:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3094:     MovStackR(!1, S32) $$rcx
    # nextln: 3095:     Jump(block832)
    # nextln:       block831:
    # nextln: 3096:     $$rcx = MovRStack(!6, S32)
    # nextln: 3097:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3098:     MovStackR(!6, S32) $$rcx
    # nextln: 3099:     Jump(block832)
    # nextln:       block832:
    # nextln: 3100:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3101:     Jumpcc(Ne, block833, block835)
    # nextln:       block833:
    # nextln:           $$rcx = $$rax
    # nextln: 3102:     Jump(block834)
    # nextln:       block835:
    # nextln: 3103:     $$rcx = MovRM(S8) $$rbx
    # nextln: 3104:     Jump(block834)
    # nextln:       block834:
    # nextln: 3105:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 3106:     Jumpcc(Ne, block836, block837)
    # nextln:       block836:
    # nextln: 3107:     $$rcx = MovRStack(!1, S32)
    # nextln: 3108:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3109:     MovStackR(!1, S32) $$rcx
    # nextln: 3110:     Jump(block838)
    # nextln:       block837:
    # nextln: 3111:     $$rcx = MovRStack(!6, S32)
    # nextln: 3112:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3113:     MovStackR(!6, S32) $$rcx
    # nextln: 3114:     Jump(block838)
    # nextln:       block838:
    # nextln: 3115:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3116:     Jumpcc(Ne, block839, block841)
    # nextln:       block839:
    # nextln:           $$rcx = $$rax
    # nextln: 3117:     Jump(block840)
    # nextln:       block841:
    # nextln: 3118:     $$rcx = MovRStack(!4, S64)
    # nextln: 3119:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3120:     $$rcx = MovRM(S8) $$rcx
    # nextln: 3121:     Jump(block840)
    # nextln:       block840:
    # nextln: 3122:     AluRRm(S32, Test) $$rcx, $$rcx
    # nextln: 3123:     Jumpcc(Ne, block842, block843)
    # nextln:       block842:
    # nextln: 3124:     $$rcx = MovRStack(!1, S32)
    # nextln: 3125:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3126:     MovStackR(!1, S32) $$rcx
    # nextln: 3127:     Jump(block844)
    # nextln:       block843:
    # nextln: 3128:     $$rcx = MovRStack(!6, S32)
    # nextln: 3129:     $$rcx = AluRmI(S32, Add, 1) $$rcx
    # nextln: 3130:     MovStackR(!6, S32) $$rcx
    # nextln: 3131:     Jump(block844)
    # nextln:       block844:
    # nextln: 3132:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3133:     Jumpcc(Ne, block845, block847)
    # nextln:       block845:
    # nextln: 3134:     Jump(block846)
    # nextln:       block847:
    # nextln: 3135:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3136:     $$rax = CallRm $$rax
    # nextln: 3137:     Jump(block846)
    # nextln:       block846:
    # nextln: 3138:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3139:     Jumpcc(Ne, block848, block849)
    # nextln:       block848:
    # nextln: 3140:     $$rax = MovRStack(!1, S32)
    # nextln: 3141:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3142:     MovStackR(!1, S32) $$rax
    # nextln:           $$r12 = MovRmS32(0)
    # nextln: 3143:     Jump(block850)
    # nextln:       block849:
    # nextln: 3144:     $$rax = MovRStack(!6, S32)
    # nextln: 3145:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3146:     MovStackR(!6, S32) $$rax
    # nextln:           $$r12 = MovRmS32(0)
    # nextln: 3147:     Jump(block850)
    # nextln:       block850:
    # nextln: 3148:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3149:     Jumpcc(Ne, block851, block853)
    # nextln:       block851:
    # nextln:           $$rax = $$r12
    # nextln: 3150:     Jump(block852)
    # nextln:       block853:
    # nextln: 3151:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3152:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3153:     $$rdx = MovRStack(!3, S32)
    # nextln: 3154:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3155:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3156:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3157:     Jumpcc(L, block854, block855)
    # nextln:       block854:
    # nextln: 3158:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3159:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3160:     $$rax = MovRM(S8) $$rax
    # nextln: 3161:     Jump(block852)
    # nextln:       block852:
    # nextln: 3162:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3163:     Jumpcc(Ne, block856, block857)
    # nextln:       block856:
    # nextln: 3164:     $$rax = MovRStack(!1, S32)
    # nextln: 3165:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3166:     MovStackR(!1, S32) $$rax
    # nextln: 3167:     Jump(block858)
    # nextln:       block857:
    # nextln: 3168:     $$rax = MovRStack(!6, S32)
    # nextln: 3169:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3170:     MovStackR(!6, S32) $$rax
    # nextln: 3171:     Jump(block858)
    # nextln:       block858:
    # nextln: 3172:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3173:     Jumpcc(Ne, block859, block861)
    # nextln:       block859:
    # nextln:           $$rax = $$r12
    # nextln: 3174:     Jump(block860)
    # nextln:       block861:
    # nextln: 3175:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3176:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3177:     $$rdx = MovRStack(!3, S32)
    # nextln: 3178:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3179:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3180:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3181:     Jumpcc(L, block862, block863)
    # nextln:       block862:
    # nextln: 3182:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3183:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3184:     $$rax = MovRM(S8) $$rax
    # nextln: 3185:     Jump(block860)
    # nextln:       block860:
    # nextln: 3186:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3187:     Jumpcc(Ne, block864, block865)
    # nextln:       block864:
    # nextln: 3188:     $$rax = MovRStack(!1, S32)
    # nextln: 3189:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3190:     MovStackR(!1, S32) $$rax
    # nextln: 3191:     Jump(block866)
    # nextln:       block865:
    # nextln: 3192:     $$rax = MovRStack(!6, S32)
    # nextln: 3193:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3194:     MovStackR(!6, S32) $$rax
    # nextln: 3195:     Jump(block866)
    # nextln:       block866:
    # nextln: 3196:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3197:     Jumpcc(Ne, block867, block868)
    # nextln:       block867:
    # nextln: 3198:     $$rax = MovRStack(!5, S8)
    # nextln: 3199:     Jump(block869)
    # nextln:       block868:
    # nextln:           $$rax = $$r13
    # nextln: 3200:     Jump(block869)
    # nextln:       block869:
    # nextln: 3201:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3202:     Jumpcc(Ne, block870, block871)
    # nextln:       block870:
    # nextln: 3203:     $$rax = MovRStack(!1, S32)
    # nextln: 3204:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3205:     MovStackR(!1, S32) $$rax
    # nextln: 3206:     Jump(block872)
    # nextln:       block871:
    # nextln: 3207:     $$rax = MovRStack(!6, S32)
    # nextln: 3208:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3209:     MovStackR(!6, S32) $$rax
    # nextln: 3210:     Jump(block872)
    # nextln:       block872:
    # nextln: 3211:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3212:     Jumpcc(Ne, block873, block874)
    # nextln:       block873:
    # nextln: 3213:     $$rax = MovRStack(!5, S8)
    # nextln: 3214:     Jump(block875)
    # nextln:       block874:
    # nextln:           $$rax = $$r12
    # nextln: 3215:     Jump(block875)
    # nextln:       block875:
    # nextln: 3216:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3217:     Jumpcc(Ne, block876, block877)
    # nextln:       block876:
    # nextln: 3218:     $$rax = MovRStack(!1, S32)
    # nextln: 3219:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3220:     MovStackR(!1, S32) $$rax
    # nextln: 3221:     Jump(block878)
    # nextln:       block877:
    # nextln: 3222:     $$rax = MovRStack(!6, S32)
    # nextln: 3223:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3224:     MovStackR(!6, S32) $$rax
    # nextln: 3225:     Jump(block878)
    # nextln:       block878:
    # nextln: 3226:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3227:     Jumpcc(Ne, block879, block880)
    # nextln:       block879:
    # nextln: 3228:     $$rax = MovRStack(!5, S8)
    # nextln: 3229:     Jump(block881)
    # nextln:       block880:
    # nextln: 3230:     $$rax = MovRStack(!5, S8)
    # nextln: 3231:     Jump(block881)
    # nextln:       block881:
    # nextln: 3232:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3233:     Jumpcc(Ne, block882, block883)
    # nextln:       block882:
    # nextln: 3234:     $$rax = MovRStack(!1, S32)
    # nextln: 3235:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3236:     MovStackR(!1, S32) $$rax
    # nextln: 3237:     Jump(block884)
    # nextln:       block883:
    # nextln: 3238:     $$rax = MovRStack(!6, S32)
    # nextln: 3239:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3240:     MovStackR(!6, S32) $$rax
    # nextln: 3241:     Jump(block884)
    # nextln:       block884:
    # nextln: 3242:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3243:     Jumpcc(Ne, block885, block886)
    # nextln:       block885:
    # nextln: 3244:     $$rax = MovRStack(!5, S8)
    # nextln: 3245:     Jump(block887)
    # nextln:       block886:
    # nextln: 3246:     $$rax = MovRM(S8) $$rbx
    # nextln: 3247:     Jump(block887)
    # nextln:       block887:
    # nextln: 3248:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3249:     Jumpcc(Ne, block888, block889)
    # nextln:       block888:
    # nextln: 3250:     $$rax = MovRStack(!1, S32)
    # nextln: 3251:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3252:     MovStackR(!1, S32) $$rax
    # nextln: 3253:     Jump(block890)
    # nextln:       block889:
    # nextln: 3254:     $$rax = MovRStack(!6, S32)
    # nextln: 3255:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3256:     MovStackR(!6, S32) $$rax
    # nextln: 3257:     Jump(block890)
    # nextln:       block890:
    # nextln: 3258:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3259:     Jumpcc(Ne, block891, block892)
    # nextln:       block891:
    # nextln: 3260:     $$rax = MovRStack(!5, S8)
    # nextln: 3261:     Jump(block893)
    # nextln:       block892:
    # nextln: 3262:     $$rax = MovRStack(!4, S64)
    # nextln: 3263:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3264:     $$rax = MovRM(S8) $$rax
    # nextln: 3265:     Jump(block893)
    # nextln:       block893:
    # nextln: 3266:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3267:     Jumpcc(Ne, block894, block895)
    # nextln:       block894:
    # nextln: 3268:     $$rax = MovRStack(!1, S32)
    # nextln: 3269:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3270:     MovStackR(!1, S32) $$rax
    # nextln: 3271:     Jump(block896)
    # nextln:       block895:
    # nextln: 3272:     $$rax = MovRStack(!6, S32)
    # nextln: 3273:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3274:     MovStackR(!6, S32) $$rax
    # nextln: 3275:     Jump(block896)
    # nextln:       block896:
    # nextln: 3276:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3277:     Jumpcc(Ne, block897, block898)
    # nextln:       block897:
    # nextln: 3278:     $$rax = MovRStack(!5, S8)
    # nextln: 3279:     Jump(block899)
    # nextln:       block898:
    # nextln: 3280:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3281:     $$rax = CallRm $$rax
    # nextln: 3282:     Jump(block899)
    # nextln:       block899:
    # nextln: 3283:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3284:     Jumpcc(Ne, block900, block901)
    # nextln:       block900:
    # nextln: 3285:     $$rax = MovRStack(!1, S32)
    # nextln: 3286:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3287:     MovStackR(!1, S32) $$rax
    # nextln: 3288:     Jump(block902)
    # nextln:       block901:
    # nextln: 3289:     $$rax = MovRStack(!6, S32)
    # nextln: 3290:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3291:     MovStackR(!6, S32) $$rax
    # nextln: 3292:     Jump(block902)
    # nextln:       block902:
    # nextln: 3293:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3294:     Jumpcc(Ne, block903, block904)
    # nextln:       block903:
    # nextln: 3295:     $$rax = MovRStack(!5, S8)
    # nextln: 3296:     Jump(block907)
    # nextln:       block904:
    # nextln: 3297:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3298:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3299:     $$rdx = MovRStack(!3, S32)
    # nextln: 3300:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3301:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3302:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3303:     Jumpcc(L, block905, block906)
    # nextln:       block905:
    # nextln: 3304:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3305:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3306:     $$rax = MovRM(S8) $$rax
    # nextln: 3307:     Jump(block907)
    # nextln:       block907:
    # nextln: 3308:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3309:     Jumpcc(Ne, block908, block909)
    # nextln:       block908:
    # nextln: 3310:     $$rax = MovRStack(!1, S32)
    # nextln: 3311:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3312:     MovStackR(!1, S32) $$rax
    # nextln: 3313:     Jump(block910)
    # nextln:       block909:
    # nextln: 3314:     $$rax = MovRStack(!6, S32)
    # nextln: 3315:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3316:     MovStackR(!6, S32) $$rax
    # nextln: 3317:     Jump(block910)
    # nextln:       block910:
    # nextln: 3318:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3319:     Jumpcc(Ne, block911, block912)
    # nextln:       block911:
    # nextln: 3320:     $$rax = MovRStack(!5, S8)
    # nextln: 3321:     Jump(block915)
    # nextln:       block912:
    # nextln: 3322:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3323:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3324:     $$rdx = MovRStack(!3, S32)
    # nextln: 3325:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3326:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3327:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3328:     Jumpcc(L, block913, block914)
    # nextln:       block913:
    # nextln: 3329:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3330:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3331:     $$rax = MovRM(S8) $$rax
    # nextln: 3332:     Jump(block915)
    # nextln:       block915:
    # nextln: 3333:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3334:     Jumpcc(Ne, block916, block917)
    # nextln:       block916:
    # nextln: 3335:     $$rax = MovRStack(!1, S32)
    # nextln: 3336:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3337:     MovStackR(!1, S32) $$rax
    # nextln: 3338:     Jump(block918)
    # nextln:       block917:
    # nextln: 3339:     $$rax = MovRStack(!6, S32)
    # nextln: 3340:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3341:     MovStackR(!6, S32) $$rax
    # nextln: 3342:     Jump(block918)
    # nextln:       block918:
    # nextln: 3343:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3344:     Jumpcc(Ne, block919, block920)
    # nextln:       block919:
    # nextln: 3345:     $$rax = MovRM(S8) $$rbx
    # nextln: 3346:     Jump(block921)
    # nextln:       block920:
    # nextln:           $$rax = $$r13
    # nextln: 3347:     Jump(block921)
    # nextln:       block921:
    # nextln: 3348:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3349:     Jumpcc(Ne, block922, block923)
    # nextln:       block922:
    # nextln: 3350:     $$rax = MovRStack(!1, S32)
    # nextln: 3351:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3352:     MovStackR(!1, S32) $$rax
    # nextln: 3353:     Jump(block924)
    # nextln:       block923:
    # nextln: 3354:     $$rax = MovRStack(!6, S32)
    # nextln: 3355:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3356:     MovStackR(!6, S32) $$rax
    # nextln: 3357:     Jump(block924)
    # nextln:       block924:
    # nextln: 3358:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3359:     Jumpcc(Ne, block925, block926)
    # nextln:       block925:
    # nextln: 3360:     $$rax = MovRM(S8) $$rbx
    # nextln: 3361:     Jump(block927)
    # nextln:       block926:
    # nextln:           $$rax = $$r12
    # nextln: 3362:     Jump(block927)
    # nextln:       block927:
    # nextln: 3363:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3364:     Jumpcc(Ne, block928, block929)
    # nextln:       block928:
    # nextln: 3365:     $$rax = MovRStack(!1, S32)
    # nextln: 3366:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3367:     MovStackR(!1, S32) $$rax
    # nextln: 3368:     Jump(block930)
    # nextln:       block929:
    # nextln: 3369:     $$rax = MovRStack(!6, S32)
    # nextln: 3370:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3371:     MovStackR(!6, S32) $$rax
    # nextln: 3372:     Jump(block930)
    # nextln:       block930:
    # nextln: 3373:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3374:     Jumpcc(Ne, block931, block932)
    # nextln:       block931:
    # nextln: 3375:     $$rax = MovRM(S8) $$rbx
    # nextln: 3376:     Jump(block933)
    # nextln:       block932:
    # nextln: 3377:     $$rax = MovRStack(!5, S8)
    # nextln: 3378:     Jump(block933)
    # nextln:       block933:
    # nextln: 3379:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3380:     Jumpcc(Ne, block934, block935)
    # nextln:       block934:
    # nextln: 3381:     $$rax = MovRStack(!1, S32)
    # nextln: 3382:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3383:     MovStackR(!1, S32) $$rax
    # nextln: 3384:     Jump(block936)
    # nextln:       block935:
    # nextln: 3385:     $$rax = MovRStack(!6, S32)
    # nextln: 3386:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3387:     MovStackR(!6, S32) $$rax
    # nextln: 3388:     Jump(block936)
    # nextln:       block936:
    # nextln: 3389:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3390:     Jumpcc(Ne, block937, block938)
    # nextln:       block937:
    # nextln: 3391:     $$rax = MovRM(S8) $$rbx
    # nextln: 3392:     Jump(block939)
    # nextln:       block938:
    # nextln: 3393:     $$rax = MovRM(S8) $$rbx
    # nextln: 3394:     Jump(block939)
    # nextln:       block939:
    # nextln: 3395:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3396:     Jumpcc(Ne, block940, block941)
    # nextln:       block940:
    # nextln: 3397:     $$rax = MovRStack(!1, S32)
    # nextln: 3398:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3399:     MovStackR(!1, S32) $$rax
    # nextln: 3400:     Jump(block942)
    # nextln:       block941:
    # nextln: 3401:     $$rax = MovRStack(!6, S32)
    # nextln: 3402:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3403:     MovStackR(!6, S32) $$rax
    # nextln: 3404:     Jump(block942)
    # nextln:       block942:
    # nextln: 3405:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3406:     Jumpcc(Ne, block943, block944)
    # nextln:       block943:
    # nextln: 3407:     $$rax = MovRM(S8) $$rbx
    # nextln: 3408:     Jump(block945)
    # nextln:       block944:
    # nextln: 3409:     $$rax = MovRStack(!4, S64)
    # nextln: 3410:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3411:     $$rax = MovRM(S8) $$rax
    # nextln: 3412:     Jump(block945)
    # nextln:       block945:
    # nextln: 3413:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3414:     Jumpcc(Ne, block946, block947)
    # nextln:       block946:
    # nextln: 3415:     $$rax = MovRStack(!1, S32)
    # nextln: 3416:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3417:     MovStackR(!1, S32) $$rax
    # nextln: 3418:     Jump(block948)
    # nextln:       block947:
    # nextln: 3419:     $$rax = MovRStack(!6, S32)
    # nextln: 3420:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3421:     MovStackR(!6, S32) $$rax
    # nextln: 3422:     Jump(block948)
    # nextln:       block948:
    # nextln: 3423:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3424:     Jumpcc(Ne, block949, block950)
    # nextln:       block949:
    # nextln: 3425:     $$rax = MovRM(S8) $$rbx
    # nextln: 3426:     Jump(block951)
    # nextln:       block950:
    # nextln: 3427:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3428:     $$rax = CallRm $$rax
    # nextln: 3429:     Jump(block951)
    # nextln:       block951:
    # nextln: 3430:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3431:     Jumpcc(Ne, block952, block953)
    # nextln:       block952:
    # nextln: 3432:     $$rax = MovRStack(!1, S32)
    # nextln: 3433:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3434:     MovStackR(!1, S32) $$rax
    # nextln: 3435:     Jump(block954)
    # nextln:       block953:
    # nextln: 3436:     $$rax = MovRStack(!6, S32)
    # nextln: 3437:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3438:     MovStackR(!6, S32) $$rax
    # nextln: 3439:     Jump(block954)
    # nextln:       block954:
    # nextln: 3440:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3441:     Jumpcc(Ne, block955, block956)
    # nextln:       block955:
    # nextln: 3442:     $$rax = MovRM(S8) $$rbx
    # nextln: 3443:     Jump(block959)
    # nextln:       block956:
    # nextln: 3444:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3445:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3446:     $$rdx = MovRStack(!3, S32)
    # nextln: 3447:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3448:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3449:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3450:     Jumpcc(L, block957, block958)
    # nextln:       block957:
    # nextln: 3451:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3452:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3453:     $$rax = MovRM(S8) $$rax
    # nextln: 3454:     Jump(block959)
    # nextln:       block959:
    # nextln: 3455:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3456:     Jumpcc(Ne, block960, block961)
    # nextln:       block960:
    # nextln: 3457:     $$rax = MovRStack(!1, S32)
    # nextln: 3458:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3459:     MovStackR(!1, S32) $$rax
    # nextln: 3460:     Jump(block962)
    # nextln:       block961:
    # nextln: 3461:     $$rax = MovRStack(!6, S32)
    # nextln: 3462:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3463:     MovStackR(!6, S32) $$rax
    # nextln: 3464:     Jump(block962)
    # nextln:       block962:
    # nextln: 3465:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3466:     Jumpcc(Ne, block963, block964)
    # nextln:       block963:
    # nextln: 3467:     $$rax = MovRM(S8) $$rbx
    # nextln: 3468:     Jump(block967)
    # nextln:       block964:
    # nextln: 3469:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3470:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3471:     $$rdi = MovRStack(!3, S32)
    # nextln: 3472:     $$rdx = MovRM(S32) $$rcx
    # nextln: 3473:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 3474:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 3475:     Jumpcc(L, block965, block966)
    # nextln:       block965:
    # nextln: 3476:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3477:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3478:     $$rax = MovRM(S8) $$rax
    # nextln: 3479:     Jump(block967)
    # nextln:       block967:
    # nextln: 3480:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3481:     Jumpcc(Ne, block968, block969)
    # nextln:       block968:
    # nextln: 3482:     $$rax = MovRStack(!1, S32)
    # nextln: 3483:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3484:     MovStackR(!1, S32) $$rax
    # nextln: 3485:     Jump(block970)
    # nextln:       block969:
    # nextln: 3486:     $$rax = MovRStack(!6, S32)
    # nextln: 3487:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3488:     MovStackR(!6, S32) $$rax
    # nextln: 3489:     Jump(block970)
    # nextln:       block970:
    # nextln: 3490:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3491:     Jumpcc(Ne, block971, block972)
    # nextln:       block971:
    # nextln: 3492:     $$rax = MovRStack(!4, S64)
    # nextln: 3493:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3494:     $$rax = MovRM(S8) $$rax
    # nextln: 3495:     Jump(block973)
    # nextln:       block972:
    # nextln:           $$rax = $$r13
    # nextln: 3496:     Jump(block973)
    # nextln:       block973:
    # nextln: 3497:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3498:     Jumpcc(Ne, block974, block975)
    # nextln:       block974:
    # nextln: 3499:     $$rax = MovRStack(!1, S32)
    # nextln: 3500:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3501:     MovStackR(!1, S32) $$rax
    # nextln: 3502:     Jump(block976)
    # nextln:       block975:
    # nextln: 3503:     $$rax = MovRStack(!6, S32)
    # nextln: 3504:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3505:     MovStackR(!6, S32) $$rax
    # nextln: 3506:     Jump(block976)
    # nextln:       block976:
    # nextln: 3507:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3508:     Jumpcc(Ne, block977, block978)
    # nextln:       block977:
    # nextln: 3509:     $$rax = MovRStack(!4, S64)
    # nextln: 3510:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3511:     $$rax = MovRM(S8) $$rax
    # nextln: 3512:     Jump(block979)
    # nextln:       block978:
    # nextln:           $$rax = $$r12
    # nextln: 3513:     Jump(block979)
    # nextln:       block979:
    # nextln: 3514:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3515:     Jumpcc(Ne, block980, block981)
    # nextln:       block980:
    # nextln: 3516:     $$rax = MovRStack(!1, S32)
    # nextln: 3517:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3518:     MovStackR(!1, S32) $$rax
    # nextln: 3519:     Jump(block982)
    # nextln:       block981:
    # nextln: 3520:     $$rax = MovRStack(!6, S32)
    # nextln: 3521:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3522:     MovStackR(!6, S32) $$rax
    # nextln: 3523:     Jump(block982)
    # nextln:       block982:
    # nextln: 3524:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3525:     Jumpcc(Ne, block983, block984)
    # nextln:       block983:
    # nextln: 3526:     $$rax = MovRStack(!4, S64)
    # nextln: 3527:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3528:     $$rax = MovRM(S8) $$rax
    # nextln: 3529:     Jump(block985)
    # nextln:       block984:
    # nextln: 3530:     $$rax = MovRStack(!5, S8)
    # nextln: 3531:     Jump(block985)
    # nextln:       block985:
    # nextln: 3532:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3533:     Jumpcc(Ne, block986, block987)
    # nextln:       block986:
    # nextln: 3534:     $$rax = MovRStack(!1, S32)
    # nextln: 3535:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3536:     MovStackR(!1, S32) $$rax
    # nextln: 3537:     Jump(block988)
    # nextln:       block987:
    # nextln: 3538:     $$rax = MovRStack(!6, S32)
    # nextln: 3539:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3540:     MovStackR(!6, S32) $$rax
    # nextln: 3541:     Jump(block988)
    # nextln:       block988:
    # nextln: 3542:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3543:     Jumpcc(Ne, block989, block990)
    # nextln:       block989:
    # nextln: 3544:     $$rax = MovRStack(!4, S64)
    # nextln: 3545:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3546:     $$rax = MovRM(S8) $$rax
    # nextln: 3547:     Jump(block991)
    # nextln:       block990:
    # nextln: 3548:     $$rax = MovRM(S8) $$rbx
    # nextln: 3549:     Jump(block991)
    # nextln:       block991:
    # nextln: 3550:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3551:     Jumpcc(Ne, block992, block993)
    # nextln:       block992:
    # nextln: 3552:     $$rax = MovRStack(!1, S32)
    # nextln: 3553:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3554:     MovStackR(!1, S32) $$rax
    # nextln: 3555:     Jump(block994)
    # nextln:       block993:
    # nextln: 3556:     $$rax = MovRStack(!6, S32)
    # nextln: 3557:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3558:     MovStackR(!6, S32) $$rax
    # nextln: 3559:     Jump(block994)
    # nextln:       block994:
    # nextln: 3560:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3561:     Jumpcc(Ne, block995, block996)
    # nextln:       block995:
    # nextln: 3562:     $$rax = MovRStack(!4, S64)
    # nextln: 3563:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3564:     $$rax = MovRM(S8) $$rax
    # nextln: 3565:     Jump(block997)
    # nextln:       block996:
    # nextln: 3566:     $$rax = MovRStack(!4, S64)
    # nextln: 3567:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3568:     $$rax = MovRM(S8) $$rax
    # nextln: 3569:     Jump(block997)
    # nextln:       block997:
    # nextln: 3570:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3571:     Jumpcc(Ne, block998, block999)
    # nextln:       block998:
    # nextln: 3572:     $$rax = MovRStack(!1, S32)
    # nextln: 3573:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3574:     MovStackR(!1, S32) $$rax
    # nextln: 3575:     Jump(block1000)
    # nextln:       block999:
    # nextln: 3576:     $$rax = MovRStack(!6, S32)
    # nextln: 3577:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3578:     MovStackR(!6, S32) $$rax
    # nextln: 3579:     Jump(block1000)
    # nextln:       block1000:
    # nextln: 3580:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3581:     Jumpcc(Ne, block1001, block1002)
    # nextln:       block1001:
    # nextln: 3582:     $$rax = MovRStack(!4, S64)
    # nextln: 3583:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3584:     $$rax = MovRM(S8) $$rax
    # nextln: 3585:     Jump(block1003)
    # nextln:       block1002:
    # nextln: 3586:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3587:     $$rax = CallRm $$rax
    # nextln: 3588:     Jump(block1003)
    # nextln:       block1003:
    # nextln: 3589:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3590:     Jumpcc(Ne, block1004, block1005)
    # nextln:       block1004:
    # nextln: 3591:     $$rax = MovRStack(!1, S32)
    # nextln: 3592:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3593:     MovStackR(!1, S32) $$rax
    # nextln: 3594:     Jump(block1006)
    # nextln:       block1005:
    # nextln: 3595:     $$rax = MovRStack(!6, S32)
    # nextln: 3596:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3597:     MovStackR(!6, S32) $$rax
    # nextln: 3598:     Jump(block1006)
    # nextln:       block1006:
    # nextln: 3599:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3600:     Jumpcc(Ne, block1007, block1008)
    # nextln:       block1007:
    # nextln: 3601:     $$rax = MovRStack(!4, S64)
    # nextln: 3602:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3603:     $$rax = MovRM(S8) $$rax
    # nextln: 3604:     Jump(block1011)
    # nextln:       block1008:
    # nextln: 3605:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3606:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3607:     $$rdx = MovRStack(!3, S32)
    # nextln: 3608:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3609:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3610:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3611:     Jumpcc(L, block1009, block1010)
    # nextln:       block1009:
    # nextln: 3612:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3613:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3614:     $$rax = MovRM(S8) $$rax
    # nextln: 3615:     Jump(block1011)
    # nextln:       block1011:
    # nextln: 3616:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3617:     Jumpcc(Ne, block1012, block1013)
    # nextln:       block1012:
    # nextln: 3618:     $$rax = MovRStack(!1, S32)
    # nextln: 3619:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3620:     MovStackR(!1, S32) $$rax
    # nextln: 3621:     Jump(block1014)
    # nextln:       block1013:
    # nextln: 3622:     $$rax = MovRStack(!6, S32)
    # nextln: 3623:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3624:     MovStackR(!6, S32) $$rax
    # nextln: 3625:     Jump(block1014)
    # nextln:       block1014:
    # nextln: 3626:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3627:     Jumpcc(Ne, block1015, block1016)
    # nextln:       block1015:
    # nextln: 3628:     $$rax = MovRStack(!4, S64)
    # nextln: 3629:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3630:     $$rax = MovRM(S8) $$rax
    # nextln: 3631:     Jump(block1019)
    # nextln:       block1016:
    # nextln: 3632:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3633:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3634:     $$rdx = MovRStack(!3, S32)
    # nextln: 3635:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3636:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3637:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3638:     Jumpcc(L, block1017, block1018)
    # nextln:       block1017:
    # nextln: 3639:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3640:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3641:     $$rax = MovRM(S8) $$rax
    # nextln: 3642:     Jump(block1019)
    # nextln:       block1019:
    # nextln: 3643:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3644:     Jumpcc(Ne, block1020, block1021)
    # nextln:       block1020:
    # nextln: 3645:     $$rax = MovRStack(!1, S32)
    # nextln: 3646:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3647:     MovStackR(!1, S32) $$rax
    # nextln: 3648:     Jump(block1022)
    # nextln:       block1021:
    # nextln: 3649:     $$rax = MovRStack(!6, S32)
    # nextln: 3650:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3651:     MovStackR(!6, S32) $$rax
    # nextln: 3652:     Jump(block1022)
    # nextln:       block1022:
    # nextln: 3653:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3654:     Jumpcc(Ne, block1023, block1024)
    # nextln:       block1023:
    # nextln: 3655:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3656:     $$rax = CallRm $$rax
    # nextln: 3657:     Jump(block1025)
    # nextln:       block1024:
    # nextln:           $$rax = $$r13
    # nextln: 3658:     Jump(block1025)
    # nextln:       block1025:
    # nextln: 3659:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3660:     Jumpcc(Ne, block1026, block1027)
    # nextln:       block1026:
    # nextln: 3661:     $$rax = MovRStack(!1, S32)
    # nextln: 3662:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3663:     MovStackR(!1, S32) $$rax
    # nextln: 3664:     Jump(block1028)
    # nextln:       block1027:
    # nextln: 3665:     $$rax = MovRStack(!6, S32)
    # nextln: 3666:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3667:     MovStackR(!6, S32) $$rax
    # nextln: 3668:     Jump(block1028)
    # nextln:       block1028:
    # nextln: 3669:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3670:     Jumpcc(Ne, block1029, block1030)
    # nextln:       block1029:
    # nextln: 3671:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3672:     $$rax = CallRm $$rax
    # nextln: 3673:     Jump(block1031)
    # nextln:       block1030:
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 3674:     Jump(block1031)
    # nextln:       block1031:
    # nextln: 3675:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3676:     Jumpcc(Ne, block1032, block1033)
    # nextln:       block1032:
    # nextln: 3677:     $$rax = MovRStack(!1, S32)
    # nextln: 3678:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3679:     MovStackR(!1, S32) $$rax
    # nextln:           $$r12 = MovRmS32(0)
    # nextln: 3680:     Jump(block1034)
    # nextln:       block1033:
    # nextln: 3681:     $$rax = MovRStack(!6, S32)
    # nextln: 3682:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3683:     MovStackR(!6, S32) $$rax
    # nextln:           $$r12 = MovRmS32(0)
    # nextln: 3684:     Jump(block1034)
    # nextln:       block1034:
    # nextln: 3685:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3686:     Jumpcc(Ne, block1035, block1036)
    # nextln:       block1035:
    # nextln: 3687:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3688:     $$rax = CallRm $$rax
    # nextln: 3689:     Jump(block1037)
    # nextln:       block1036:
    # nextln: 3690:     $$rax = MovRStack(!5, S8)
    # nextln: 3691:     Jump(block1037)
    # nextln:       block1037:
    # nextln: 3692:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3693:     Jumpcc(Ne, block1038, block1039)
    # nextln:       block1038:
    # nextln: 3694:     $$rax = MovRStack(!1, S32)
    # nextln: 3695:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3696:     MovStackR(!1, S32) $$rax
    # nextln: 3697:     Jump(block1040)
    # nextln:       block1039:
    # nextln: 3698:     $$rax = MovRStack(!6, S32)
    # nextln: 3699:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3700:     MovStackR(!6, S32) $$rax
    # nextln: 3701:     Jump(block1040)
    # nextln:       block1040:
    # nextln: 3702:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3703:     Jumpcc(Ne, block1041, block1042)
    # nextln:       block1041:
    # nextln: 3704:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3705:     $$rax = CallRm $$rax
    # nextln: 3706:     Jump(block1043)
    # nextln:       block1042:
    # nextln: 3707:     $$rax = MovRM(S8) $$rbx
    # nextln: 3708:     Jump(block1043)
    # nextln:       block1043:
    # nextln: 3709:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3710:     Jumpcc(Ne, block1044, block1045)
    # nextln:       block1044:
    # nextln: 3711:     $$rax = MovRStack(!1, S32)
    # nextln: 3712:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3713:     MovStackR(!1, S32) $$rax
    # nextln: 3714:     Jump(block1046)
    # nextln:       block1045:
    # nextln: 3715:     $$rax = MovRStack(!6, S32)
    # nextln: 3716:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3717:     MovStackR(!6, S32) $$rax
    # nextln: 3718:     Jump(block1046)
    # nextln:       block1046:
    # nextln: 3719:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3720:     Jumpcc(Ne, block1047, block1048)
    # nextln:       block1047:
    # nextln: 3721:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3722:     $$rax = CallRm $$rax
    # nextln: 3723:     Jump(block1049)
    # nextln:       block1048:
    # nextln: 3724:     $$rax = MovRStack(!4, S64)
    # nextln: 3725:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3726:     $$rax = MovRM(S8) $$rax
    # nextln: 3727:     Jump(block1049)
    # nextln:       block1049:
    # nextln: 3728:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3729:     Jumpcc(Ne, block1050, block1051)
    # nextln:       block1050:
    # nextln: 3730:     $$rax = MovRStack(!1, S32)
    # nextln: 3731:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3732:     MovStackR(!1, S32) $$rax
    # nextln: 3733:     Jump(block1052)
    # nextln:       block1051:
    # nextln: 3734:     $$rax = MovRStack(!6, S32)
    # nextln: 3735:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3736:     MovStackR(!6, S32) $$rax
    # nextln: 3737:     Jump(block1052)
    # nextln:       block1052:
    # nextln: 3738:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3739:     Jumpcc(Ne, block1053, block1054)
    # nextln:       block1053:
    # nextln: 3740:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3741:     $$rax = CallRm $$rax
    # nextln: 3742:     Jump(block1055)
    # nextln:       block1054:
    # nextln: 3743:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3744:     $$rax = CallRm $$rax
    # nextln: 3745:     Jump(block1055)
    # nextln:       block1055:
    # nextln: 3746:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3747:     Jumpcc(Ne, block1056, block1057)
    # nextln:       block1056:
    # nextln: 3748:     $$rax = MovRStack(!1, S32)
    # nextln: 3749:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3750:     MovStackR(!1, S32) $$rax
    # nextln: 3751:     Jump(block1058)
    # nextln:       block1057:
    # nextln: 3752:     $$rax = MovRStack(!6, S32)
    # nextln: 3753:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3754:     MovStackR(!6, S32) $$rax
    # nextln: 3755:     Jump(block1058)
    # nextln:       block1058:
    # nextln: 3756:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3757:     Jumpcc(Ne, block1059, block1060)
    # nextln:       block1059:
    # nextln: 3758:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3759:     $$rax = CallRm $$rax
    # nextln: 3760:     Jump(block1063)
    # nextln:       block1060:
    # nextln: 3761:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3762:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3763:     $$rdx = MovRStack(!3, S32)
    # nextln: 3764:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3765:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3766:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3767:     Jumpcc(L, block1061, block1062)
    # nextln:       block1061:
    # nextln: 3768:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3769:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3770:     $$rax = MovRM(S8) $$rax
    # nextln: 3771:     Jump(block1063)
    # nextln:       block1063:
    # nextln: 3772:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3773:     Jumpcc(Ne, block1064, block1065)
    # nextln:       block1064:
    # nextln: 3774:     $$rax = MovRStack(!1, S32)
    # nextln: 3775:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3776:     MovStackR(!1, S32) $$rax
    # nextln: 3777:     Jump(block1066)
    # nextln:       block1065:
    # nextln: 3778:     $$rax = MovRStack(!6, S32)
    # nextln: 3779:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3780:     MovStackR(!6, S32) $$rax
    # nextln: 3781:     Jump(block1066)
    # nextln:       block1066:
    # nextln: 3782:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3783:     Jumpcc(Ne, block1067, block1068)
    # nextln:       block1067:
    # nextln: 3784:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3785:     $$rax = CallRm $$rax
    # nextln: 3786:     Jump(block1071)
    # nextln:       block1068:
    # nextln: 3787:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3788:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3789:     $$rdi = MovRStack(!3, S32)
    # nextln: 3790:     $$rdx = MovRM(S32) $$rcx
    # nextln: 3791:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 3792:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 3793:     Jumpcc(L, block1069, block1070)
    # nextln:       block1069:
    # nextln: 3794:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3795:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3796:     $$rax = MovRM(S8) $$rax
    # nextln: 3797:     Jump(block1071)
    # nextln:       block1071:
    # nextln: 3798:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3799:     Jumpcc(Ne, block1072, block1073)
    # nextln:       block1072:
    # nextln: 3800:     $$rax = MovRStack(!1, S32)
    # nextln: 3801:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3802:     MovStackR(!1, S32) $$rax
    # nextln: 3803:     Jump(block1074)
    # nextln:       block1073:
    # nextln: 3804:     $$rax = MovRStack(!6, S32)
    # nextln: 3805:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3806:     MovStackR(!6, S32) $$rax
    # nextln: 3807:     Jump(block1074)
    # nextln:       block1074:
    # nextln: 3808:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3809:     Jumpcc(Ne, block1075, block1076)
    # nextln:       block1075:
    # nextln: 3810:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3811:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3812:     $$rdi = MovRStack(!3, S32)
    # nextln: 3813:     $$rdx = MovRM(S32) $$rcx
    # nextln: 3814:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 3815:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 3816:     Jumpcc(L, block1209, block1210)
    # nextln:       block1209:
    # nextln: 3817:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3818:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3819:     $$rax = MovRM(S8) $$rax
    # nextln: 3820:     Jump(block1077)
    # nextln:       block1210:
    # nextln: 3821:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 3822:     CallRm $$rax
    # nextln: 3823:     Ud2
    # nextln:       block1076:
    # nextln:           $$rax = $$r13
    # nextln: 3824:     Jump(block1077)
    # nextln:       block1077:
    # nextln: 3825:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3826:     Jumpcc(Ne, block1078, block1079)
    # nextln:       block1078:
    # nextln: 3827:     $$rax = MovRStack(!1, S32)
    # nextln: 3828:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3829:     MovStackR(!1, S32) $$rax
    # nextln: 3830:     Jump(block1080)
    # nextln:       block1079:
    # nextln: 3831:     $$rax = MovRStack(!6, S32)
    # nextln: 3832:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3833:     MovStackR(!6, S32) $$rax
    # nextln: 3834:     Jump(block1080)
    # nextln:       block1080:
    # nextln: 3835:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3836:     Jumpcc(Ne, block1081, block1082)
    # nextln:       block1081:
    # nextln: 3837:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3838:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3839:     $$rdx = MovRStack(!3, S32)
    # nextln: 3840:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3841:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3842:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3843:     Jumpcc(L, block1207, block1208)
    # nextln:       block1207:
    # nextln: 3844:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3845:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3846:     $$rax = MovRM(S8) $$rax
    # nextln: 3847:     Jump(block1083)
    # nextln:       block1208:
    # nextln: 3848:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 3849:     CallRm $$rax
    # nextln: 3850:     Ud2
    # nextln:       block1082:
    # nextln:           $$rax = $$r12
    # nextln: 3851:     Jump(block1083)
    # nextln:       block1083:
    # nextln: 3852:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3853:     Jumpcc(Ne, block1084, block1085)
    # nextln:       block1084:
    # nextln: 3854:     $$rax = MovRStack(!1, S32)
    # nextln: 3855:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3856:     MovStackR(!1, S32) $$rax
    # nextln: 3857:     Jump(block1086)
    # nextln:       block1085:
    # nextln: 3858:     $$rax = MovRStack(!6, S32)
    # nextln: 3859:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3860:     MovStackR(!6, S32) $$rax
    # nextln: 3861:     Jump(block1086)
    # nextln:       block1086:
    # nextln: 3862:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3863:     Jumpcc(Ne, block1087, block1088)
    # nextln:       block1087:
    # nextln: 3864:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3865:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3866:     $$rdx = MovRStack(!3, S32)
    # nextln: 3867:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3868:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3869:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3870:     Jumpcc(L, block1205, block1206)
    # nextln:       block1205:
    # nextln: 3871:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3872:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3873:     $$rax = MovRM(S8) $$rax
    # nextln: 3874:     Jump(block1089)
    # nextln:       block1206:
    # nextln: 3875:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 3876:     CallRm $$rax
    # nextln: 3877:     Ud2
    # nextln:       block1088:
    # nextln: 3878:     $$rax = MovRStack(!5, S8)
    # nextln: 3879:     Jump(block1089)
    # nextln:       block1089:
    # nextln: 3880:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3881:     Jumpcc(Ne, block1090, block1091)
    # nextln:       block1090:
    # nextln: 3882:     $$rax = MovRStack(!1, S32)
    # nextln: 3883:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3884:     MovStackR(!1, S32) $$rax
    # nextln: 3885:     Jump(block1092)
    # nextln:       block1091:
    # nextln: 3886:     $$rax = MovRStack(!6, S32)
    # nextln: 3887:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3888:     MovStackR(!6, S32) $$rax
    # nextln: 3889:     Jump(block1092)
    # nextln:       block1092:
    # nextln: 3890:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3891:     Jumpcc(Ne, block1093, block1094)
    # nextln:       block1093:
    # nextln: 3892:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3893:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3894:     $$rdi = MovRStack(!3, S32)
    # nextln: 3895:     $$rdx = MovRM(S32) $$rcx
    # nextln: 3896:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 3897:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 3898:     Jumpcc(L, block1203, block1204)
    # nextln:       block1203:
    # nextln: 3899:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3900:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3901:     $$rax = MovRM(S8) $$rax
    # nextln: 3902:     Jump(block1095)
    # nextln:       block1204:
    # nextln: 3903:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 3904:     CallRm $$rax
    # nextln: 3905:     Ud2
    # nextln:       block1094:
    # nextln: 3906:     $$rax = MovRM(S8) $$rbx
    # nextln: 3907:     Jump(block1095)
    # nextln:       block1095:
    # nextln: 3908:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3909:     Jumpcc(Ne, block1096, block1097)
    # nextln:       block1096:
    # nextln: 3910:     $$rax = MovRStack(!1, S32)
    # nextln: 3911:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3912:     MovStackR(!1, S32) $$rax
    # nextln: 3913:     Jump(block1098)
    # nextln:       block1097:
    # nextln: 3914:     $$rax = MovRStack(!6, S32)
    # nextln: 3915:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3916:     MovStackR(!6, S32) $$rax
    # nextln: 3917:     Jump(block1098)
    # nextln:       block1098:
    # nextln: 3918:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3919:     Jumpcc(Ne, block1099, block1100)
    # nextln:       block1099:
    # nextln: 3920:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3921:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3922:     $$rdi = MovRStack(!3, S32)
    # nextln: 3923:     $$rdx = MovRM(S32) $$rcx
    # nextln: 3924:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 3925:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 3926:     Jumpcc(L, block1201, block1202)
    # nextln:       block1201:
    # nextln: 3927:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3928:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3929:     $$rax = MovRM(S8) $$rax
    # nextln: 3930:     Jump(block1101)
    # nextln:       block1202:
    # nextln: 3931:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 3932:     CallRm $$rax
    # nextln: 3933:     Ud2
    # nextln:       block1100:
    # nextln: 3934:     $$rax = MovRStack(!4, S64)
    # nextln: 3935:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 3936:     $$rax = MovRM(S8) $$rax
    # nextln: 3937:     Jump(block1101)
    # nextln:       block1101:
    # nextln: 3938:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3939:     Jumpcc(Ne, block1102, block1103)
    # nextln:       block1102:
    # nextln: 3940:     $$rax = MovRStack(!1, S32)
    # nextln: 3941:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3942:     MovStackR(!1, S32) $$rax
    # nextln: 3943:     Jump(block1104)
    # nextln:       block1103:
    # nextln: 3944:     $$rax = MovRStack(!6, S32)
    # nextln: 3945:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3946:     MovStackR(!6, S32) $$rax
    # nextln: 3947:     Jump(block1104)
    # nextln:       block1104:
    # nextln: 3948:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3949:     Jumpcc(Ne, block1105, block1106)
    # nextln:       block1105:
    # nextln: 3950:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3951:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3952:     $$rdx = MovRStack(!3, S32)
    # nextln: 3953:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3954:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3955:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3956:     Jumpcc(L, block1199, block1200)
    # nextln:       block1199:
    # nextln: 3957:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3958:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3959:     $$rax = MovRM(S8) $$rax
    # nextln: 3960:     Jump(block1107)
    # nextln:       block1200:
    # nextln: 3961:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 3962:     CallRm $$rax
    # nextln: 3963:     Ud2
    # nextln:       block1106:
    # nextln: 3964:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 3965:     $$rax = CallRm $$rax
    # nextln: 3966:     Jump(block1107)
    # nextln:       block1107:
    # nextln: 3967:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 3968:     Jumpcc(Ne, block1108, block1109)
    # nextln:       block1108:
    # nextln: 3969:     $$rax = MovRStack(!1, S32)
    # nextln: 3970:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3971:     MovStackR(!1, S32) $$rax
    # nextln: 3972:     Jump(block1110)
    # nextln:       block1109:
    # nextln: 3973:     $$rax = MovRStack(!6, S32)
    # nextln: 3974:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 3975:     MovStackR(!6, S32) $$rax
    # nextln: 3976:     Jump(block1110)
    # nextln:       block1110:
    # nextln: 3977:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 3978:     Jumpcc(Ne, block1111, block1112)
    # nextln:       block1111:
    # nextln: 3979:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3980:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3981:     $$rdx = MovRStack(!3, S32)
    # nextln: 3982:     $$rdi = MovRM(S32) $$rcx
    # nextln: 3983:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 3984:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 3985:     Jumpcc(L, block1197, block1198)
    # nextln:       block1197:
    # nextln: 3986:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 3987:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 3988:     $$rax = MovRM(S8) $$rax
    # nextln: 3989:     Jump(block1115)
    # nextln:       block1198:
    # nextln: 3990:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 3991:     CallRm $$rax
    # nextln: 3992:     Ud2
    # nextln:       block1112:
    # nextln: 3993:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 3994:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 3995:     $$rdi = MovRStack(!3, S32)
    # nextln: 3996:     $$rdx = MovRM(S32) $$rcx
    # nextln: 3997:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 3998:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 3999:     Jumpcc(L, block1113, block1114)
    # nextln:       block1113:
    # nextln: 4000:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4001:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4002:     $$rax = MovRM(S8) $$rax
    # nextln: 4003:     Jump(block1115)
    # nextln:       block1115:
    # nextln: 4004:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4005:     Jumpcc(Ne, block1116, block1117)
    # nextln:       block1116:
    # nextln: 4006:     $$rax = MovRStack(!1, S32)
    # nextln: 4007:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4008:     MovStackR(!1, S32) $$rax
    # nextln: 4009:     Jump(block1118)
    # nextln:       block1117:
    # nextln: 4010:     $$rax = MovRStack(!6, S32)
    # nextln: 4011:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4012:     MovStackR(!6, S32) $$rax
    # nextln: 4013:     Jump(block1118)
    # nextln:       block1118:
    # nextln: 4014:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4015:     Jumpcc(Ne, block1119, block1120)
    # nextln:       block1119:
    # nextln: 4016:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4017:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4018:     $$rdx = MovRStack(!3, S32)
    # nextln: 4019:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4020:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4021:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4022:     Jumpcc(L, block1195, block1196)
    # nextln:       block1195:
    # nextln: 4023:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4024:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4025:     $$rax = MovRM(S8) $$rax
    # nextln: 4026:     Jump(block1123)
    # nextln:       block1196:
    # nextln: 4027:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4028:     CallRm $$rax
    # nextln: 4029:     Ud2
    # nextln:       block1120:
    # nextln: 4030:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4031:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4032:     $$rdi = MovRStack(!3, S32)
    # nextln: 4033:     $$rdx = MovRM(S32) $$rcx
    # nextln: 4034:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 4035:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 4036:     Jumpcc(L, block1121, block1122)
    # nextln:       block1121:
    # nextln: 4037:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4038:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4039:     $$rax = MovRM(S8) $$rax
    # nextln: 4040:     Jump(block1123)
    # nextln:       block1123:
    # nextln: 4041:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4042:     Jumpcc(Ne, block1124, block1125)
    # nextln:       block1124:
    # nextln: 4043:     $$rax = MovRStack(!1, S32)
    # nextln: 4044:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4045:     MovStackR(!1, S32) $$rax
    # nextln: 4046:     Jump(block1126)
    # nextln:       block1125:
    # nextln: 4047:     $$rax = MovRStack(!6, S32)
    # nextln: 4048:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4049:     MovStackR(!6, S32) $$rax
    # nextln: 4050:     Jump(block1126)
    # nextln:       block1126:
    # nextln: 4051:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4052:     Jumpcc(Ne, block1127, block1128)
    # nextln:       block1127:
    # nextln: 4053:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4054:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4055:     $$rdi = MovRStack(!3, S32)
    # nextln: 4056:     $$rdx = MovRM(S32) $$rcx
    # nextln: 4057:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 4058:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 4059:     Jumpcc(L, block1193, block1194)
    # nextln:       block1193:
    # nextln: 4060:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4061:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4062:     $$r13 = MovRM(S8) $$rax
    # nextln: 4063:     Jump(block1129)
    # nextln:       block1194:
    # nextln: 4064:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4065:     CallRm $$rax
    # nextln: 4066:     Ud2
    # nextln:       block1128:
    # nextln: 4067:     Jump(block1129)
    # nextln:       block1129:
    # nextln: 4068:     AluRRm(S32, Test) $$r13, $$r13
    # nextln: 4069:     Jumpcc(Ne, block1130, block1131)
    # nextln:       block1130:
    # nextln: 4070:     $$rax = MovRStack(!1, S32)
    # nextln: 4071:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4072:     MovStackR(!1, S32) $$rax
    # nextln: 4073:     Jump(block1132)
    # nextln:       block1131:
    # nextln: 4074:     $$rax = MovRStack(!6, S32)
    # nextln: 4075:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4076:     MovStackR(!6, S32) $$rax
    # nextln: 4077:     Jump(block1132)
    # nextln:       block1132:
    # nextln: 4078:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4079:     Jumpcc(Ne, block1133, block1134)
    # nextln:       block1133:
    # nextln: 4080:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4081:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4082:     $$rdx = MovRStack(!3, S32)
    # nextln: 4083:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4084:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4085:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4086:     Jumpcc(L, block1191, block1192)
    # nextln:       block1191:
    # nextln: 4087:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4088:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4089:     $$rax = MovRM(S8) $$rax
    # nextln: 4090:     Jump(block1135)
    # nextln:       block1192:
    # nextln: 4091:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4092:     CallRm $$rax
    # nextln: 4093:     Ud2
    # nextln:       block1134:
    # nextln:           $$rax = $$r12
    # nextln: 4094:     Jump(block1135)
    # nextln:       block1135:
    # nextln: 4095:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4096:     Jumpcc(Ne, block1136, block1137)
    # nextln:       block1136:
    # nextln: 4097:     $$rax = MovRStack(!1, S32)
    # nextln: 4098:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4099:     MovStackR(!1, S32) $$rax
    # nextln: 4100:     Jump(block1138)
    # nextln:       block1137:
    # nextln: 4101:     $$rax = MovRStack(!6, S32)
    # nextln: 4102:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4103:     MovStackR(!6, S32) $$rax
    # nextln: 4104:     Jump(block1138)
    # nextln:       block1138:
    # nextln: 4105:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4106:     Jumpcc(Ne, block1139, block1140)
    # nextln:       block1139:
    # nextln: 4107:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4108:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4109:     $$rdx = MovRStack(!3, S32)
    # nextln: 4110:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4111:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4112:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4113:     Jumpcc(L, block1189, block1190)
    # nextln:       block1189:
    # nextln: 4114:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4115:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4116:     $$rax = MovRM(S8) $$rax
    # nextln: 4117:     Jump(block1141)
    # nextln:       block1190:
    # nextln: 4118:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4119:     CallRm $$rax
    # nextln: 4120:     Ud2
    # nextln:       block1140:
    # nextln: 4121:     $$rax = MovRStack(!5, S8)
    # nextln: 4122:     Jump(block1141)
    # nextln:       block1141:
    # nextln: 4123:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4124:     Jumpcc(Ne, block1142, block1143)
    # nextln:       block1142:
    # nextln: 4125:     $$rax = MovRStack(!1, S32)
    # nextln: 4126:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4127:     MovStackR(!1, S32) $$rax
    # nextln: 4128:     Jump(block1144)
    # nextln:       block1143:
    # nextln: 4129:     $$rax = MovRStack(!6, S32)
    # nextln: 4130:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4131:     MovStackR(!6, S32) $$rax
    # nextln: 4132:     Jump(block1144)
    # nextln:       block1144:
    # nextln: 4133:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4134:     Jumpcc(Ne, block1145, block1146)
    # nextln:       block1145:
    # nextln: 4135:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4136:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4137:     $$rdi = MovRStack(!3, S32)
    # nextln: 4138:     $$rdx = MovRM(S32) $$rcx
    # nextln: 4139:     $$rcx = MovsxRRm(Ext32_64) $$rdi
    # nextln: 4140:     AluRRm(S64, Cmp) $$rcx, $$rdx
    # nextln: 4141:     Jumpcc(L, block1187, block1188)
    # nextln:       block1187:
    # nextln: 4142:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4143:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4144:     $$rax = MovRM(S8) $$rax
    # nextln: 4145:     Jump(block1147)
    # nextln:       block1188:
    # nextln: 4146:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4147:     CallRm $$rax
    # nextln: 4148:     Ud2
    # nextln:       block1146:
    # nextln: 4149:     $$rax = MovRM(S8) $$rbx
    # nextln: 4150:     Jump(block1147)
    # nextln:       block1147:
    # nextln: 4151:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4152:     Jumpcc(Ne, block1148, block1149)
    # nextln:       block1148:
    # nextln: 4153:     $$rax = MovRStack(!1, S32)
    # nextln: 4154:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4155:     MovStackR(!1, S32) $$rax
    # nextln: 4156:     Jump(block1150)
    # nextln:       block1149:
    # nextln: 4157:     $$rax = MovRStack(!6, S32)
    # nextln: 4158:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4159:     MovStackR(!6, S32) $$rax
    # nextln: 4160:     Jump(block1150)
    # nextln:       block1150:
    # nextln: 4161:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4162:     Jumpcc(Ne, block1151, block1152)
    # nextln:       block1151:
    # nextln: 4163:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4164:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4165:     $$rdx = MovRStack(!3, S32)
    # nextln: 4166:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4167:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4168:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4169:     Jumpcc(L, block1185, block1186)
    # nextln:       block1185:
    # nextln: 4170:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4171:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4172:     $$rax = MovRM(S8) $$rax
    # nextln: 4173:     Jump(block1153)
    # nextln:       block1186:
    # nextln: 4174:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4175:     CallRm $$rax
    # nextln: 4176:     Ud2
    # nextln:       block1152:
    # nextln: 4177:     $$rax = MovRStack(!4, S64)
    # nextln: 4178:     $$rax = AluRmI(S64, Add, 32) $$rax
    # nextln: 4179:     $$rax = MovRM(S8) $$rax
    # nextln: 4180:     Jump(block1153)
    # nextln:       block1153:
    # nextln: 4181:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4182:     Jumpcc(Ne, block1154, block1155)
    # nextln:       block1154:
    # nextln: 4183:     $$rax = MovRStack(!1, S32)
    # nextln: 4184:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4185:     MovStackR(!1, S32) $$rax
    # nextln: 4186:     Jump(block1156)
    # nextln:       block1155:
    # nextln: 4187:     $$rax = MovRStack(!6, S32)
    # nextln: 4188:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4189:     MovStackR(!6, S32) $$rax
    # nextln: 4190:     Jump(block1156)
    # nextln:       block1156:
    # nextln: 4191:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4192:     Jumpcc(Ne, block1157, block1158)
    # nextln:       block1157:
    # nextln: 4193:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4194:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4195:     $$rdx = MovRStack(!3, S32)
    # nextln: 4196:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4197:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4198:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4199:     Jumpcc(L, block1183, block1184)
    # nextln:       block1183:
    # nextln: 4200:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4201:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4202:     $$rax = MovRM(S8) $$rax
    # nextln: 4203:     Jump(block1159)
    # nextln:       block1184:
    # nextln: 4204:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4205:     CallRm $$rax
    # nextln: 4206:     Ud2
    # nextln:       block1158:
    # nextln: 4207:     $$rax = FuncAddrAbs(External(extfunc1))
    # nextln: 4208:     $$rax = CallRm $$rax
    # nextln: 4209:     Jump(block1159)
    # nextln:       block1159:
    # nextln: 4210:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4211:     Jumpcc(Ne, block1160, block1161)
    # nextln:       block1160:
    # nextln: 4212:     $$rax = MovRStack(!1, S32)
    # nextln: 4213:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4214:     MovStackR(!1, S32) $$rax
    # nextln: 4215:     Jump(block1162)
    # nextln:       block1161:
    # nextln: 4216:     $$rax = MovRStack(!6, S32)
    # nextln: 4217:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4218:     MovStackR(!6, S32) $$rax
    # nextln: 4219:     Jump(block1162)
    # nextln:       block1162:
    # nextln: 4220:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4221:     Jumpcc(Ne, block1163, block1164)
    # nextln:       block1163:
    # nextln: 4222:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4223:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4224:     $$rdx = MovRStack(!3, S32)
    # nextln: 4225:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4226:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4227:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4228:     Jumpcc(L, block1181, block1182)
    # nextln:       block1181:
    # nextln: 4229:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4230:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4231:     $$rax = MovRM(S8) $$rax
    # nextln: 4232:     Jump(block1167)
    # nextln:       block1182:
    # nextln: 4233:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4234:     CallRm $$rax
    # nextln: 4235:     Ud2
    # nextln:       block1164:
    # nextln: 4236:     $$rax = MovRStack(!0, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4237:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4238:     $$rdx = MovRStack(!3, S32)
    # nextln: 4239:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4240:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4241:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4242:     Jumpcc(L, block1165, block1166)
    # nextln:       block1165:
    # nextln: 4243:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4244:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4245:     $$rax = MovRM(S8) $$rax
    # nextln: 4246:     Jump(block1167)
    # nextln:       block1167:
    # nextln: 4247:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4248:     Jumpcc(Ne, block1168, block1169)
    # nextln:       block1168:
    # nextln: 4249:     $$rax = MovRStack(!1, S32)
    # nextln: 4250:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4251:     MovStackR(!1, S32) $$rax
    # nextln: 4252:     Jump(block1170)
    # nextln:       block1169:
    # nextln: 4253:     $$rax = MovRStack(!6, S32)
    # nextln: 4254:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4255:     MovStackR(!6, S32) $$rax
    # nextln: 4256:     Jump(block1170)
    # nextln:       block1170:
    # nextln: 4257:     AluRRm(S32, Test) $$r12, $$r12
    # nextln: 4258:     Jumpcc(Ne, block1171, block1172)
    # nextln:       block1171:
    # nextln: 4259:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4260:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4261:     $$rdx = MovRStack(!3, S32)
    # nextln: 4262:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4263:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4264:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4265:     Jumpcc(L, block1179, block1180)
    # nextln:       block1179:
    # nextln: 4266:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4267:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4268:     $$rax = MovRM(S8) $$rax
    # nextln: 4269:     Jump(block1175)
    # nextln:       block1180:
    # nextln: 4270:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4271:     CallRm $$rax
    # nextln: 4272:     Ud2
    # nextln:       block1172:
    # nextln: 4273:     $$rax = MovRStack(!2, S64)
    # nextln:           $$rcx = $$rax
    # nextln: 4274:     $$rcx = AluRmI(S64, Add, 32) $$rcx
    # nextln: 4275:     $$rdx = MovRStack(!3, S32)
    # nextln: 4276:     $$rdi = MovRM(S32) $$rcx
    # nextln: 4277:     $$rcx = MovsxRRm(Ext32_64) $$rdx
    # nextln: 4278:     AluRRm(S64, Cmp) $$rcx, $$rdi
    # nextln: 4279:     Jumpcc(L, block1173, block1174)
    # nextln:       block1173:
    # nextln: 4280:     $$rcx = AluRmI(S64, Add, 40) $$rcx
    # nextln: 4281:     $$rax = AluRRm(S64, Add) $$rax, $$rcx
    # nextln: 4282:     $$rax = MovRM(S8) $$rax
    # nextln: 4283:     Jump(block1175)
    # nextln:       block1175:
    # nextln: 4284:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 4285:     Jumpcc(Ne, block1176, block1177)
    # nextln:       block1176:
    # nextln: 4286:     $$rax = MovRStack(!1, S32)
    # nextln: 4287:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4288:     MovStackR(!1, S32) $$rax
    # nextln: 4289:     Jump(block1178)
    # nextln:       block1177:
    # nextln: 4290:     $$rax = MovRStack(!6, S32)
    # nextln: 4291:     $$rax = AluRmI(S32, Add, 1) $$rax
    # nextln: 4292:     MovStackR(!6, S32) $$rax
    # nextln: 4293:     Jump(block1178)
    # nextln:       block1178:
    # nextln: 4294:     $$rax = MovRStack(!1, S32)
    # nextln: 4295:     $$rax = ShiftRmI(S32, Shl, 1) $$rax
    # nextln: 4296:     $$rcx = MovRStack(!6, S32)
    # nextln: 4297:     $$rax = AluRRm(S32, Sub) $$rax, $$rcx
    # nextln: 4298:     Ret $$rax
    # nextln:       block1174:
    # nextln: 4299:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4300:     CallRm $$rax
    # nextln: 4301:     Ud2
    # nextln:       block1166:
    # nextln: 4302:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4303:     CallRm $$rax
    # nextln: 4304:     Ud2
    # nextln:       block1122:
    # nextln: 4305:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4306:     CallRm $$rax
    # nextln: 4307:     Ud2
    # nextln:       block1114:
    # nextln: 4308:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4309:     CallRm $$rax
    # nextln: 4310:     Ud2
    # nextln:       block1070:
    # nextln: 4311:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4312:     CallRm $$rax
    # nextln: 4313:     Ud2
    # nextln:       block1062:
    # nextln: 4314:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4315:     CallRm $$rax
    # nextln: 4316:     Ud2
    # nextln:       block1018:
    # nextln: 4317:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4318:     CallRm $$rax
    # nextln: 4319:     Ud2
    # nextln:       block1010:
    # nextln: 4320:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4321:     CallRm $$rax
    # nextln: 4322:     Ud2
    # nextln:       block966:
    # nextln: 4323:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4324:     CallRm $$rax
    # nextln: 4325:     Ud2
    # nextln:       block958:
    # nextln: 4326:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4327:     CallRm $$rax
    # nextln: 4328:     Ud2
    # nextln:       block914:
    # nextln: 4329:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4330:     CallRm $$rax
    # nextln: 4331:     Ud2
    # nextln:       block906:
    # nextln: 4332:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4333:     CallRm $$rax
    # nextln: 4334:     Ud2
    # nextln:       block863:
    # nextln: 4335:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4336:     CallRm $$rax
    # nextln: 4337:     Ud2
    # nextln:       block855:
    # nextln: 4338:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4339:     CallRm $$rax
    # nextln: 4340:     Ud2
    # nextln:       block814:
    # nextln: 4341:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4342:     CallRm $$rax
    # nextln: 4343:     Ud2
    # nextln:       block806:
    # nextln: 4344:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4345:     CallRm $$rax
    # nextln: 4346:     Ud2
    # nextln:       block764:
    # nextln: 4347:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4348:     CallRm $$rax
    # nextln: 4349:     Ud2
    # nextln:       block756:
    # nextln: 4350:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4351:     CallRm $$rax
    # nextln: 4352:     Ud2
    # nextln:       block712:
    # nextln: 4353:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4354:     CallRm $$rax
    # nextln: 4355:     Ud2
    # nextln:       block704:
    # nextln: 4356:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4357:     CallRm $$rax
    # nextln: 4358:     Ud2
    # nextln:       block660:
    # nextln: 4359:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4360:     CallRm $$rax
    # nextln: 4361:     Ud2
    # nextln:       block652:
    # nextln: 4362:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4363:     CallRm $$rax
    # nextln: 4364:     Ud2
    # nextln:       block608:
    # nextln: 4365:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4366:     CallRm $$rax
    # nextln: 4367:     Ud2
    # nextln:       block600:
    # nextln: 4368:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4369:     CallRm $$rax
    # nextln: 4370:     Ud2
    # nextln:       block556:
    # nextln: 4371:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4372:     CallRm $$rax
    # nextln: 4373:     Ud2
    # nextln:       block548:
    # nextln: 4374:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4375:     CallRm $$rax
    # nextln: 4376:     Ud2
    # nextln:       block504:
    # nextln: 4377:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4378:     CallRm $$rax
    # nextln: 4379:     Ud2
    # nextln:       block496:
    # nextln: 4380:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4381:     CallRm $$rax
    # nextln: 4382:     Ud2
    # nextln:       block453:
    # nextln: 4383:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4384:     CallRm $$rax
    # nextln: 4385:     Ud2
    # nextln:       block445:
    # nextln: 4386:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4387:     CallRm $$rax
    # nextln: 4388:     Ud2
    # nextln:       block404:
    # nextln: 4389:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4390:     CallRm $$rax
    # nextln: 4391:     Ud2
    # nextln:       block396:
    # nextln: 4392:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4393:     CallRm $$rax
    # nextln: 4394:     Ud2
    # nextln:       block355:
    # nextln: 4395:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4396:     CallRm $$rax
    # nextln: 4397:     Ud2
    # nextln:       block350:
    # nextln: 4398:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4399:     CallRm $$rax
    # nextln: 4400:     Ud2
    # nextln:       block333:
    # nextln: 4401:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4402:     CallRm $$rax
    # nextln: 4403:     Ud2
    # nextln:       block328:
    # nextln: 4404:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4405:     CallRm $$rax
    # nextln: 4406:     Ud2
    # nextln:       block311:
    # nextln: 4407:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4408:     CallRm $$rax
    # nextln: 4409:     Ud2
    # nextln:       block306:
    # nextln: 4410:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4411:     CallRm $$rax
    # nextln: 4412:     Ud2
    # nextln:       block289:
    # nextln: 4413:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4414:     CallRm $$rax
    # nextln: 4415:     Ud2
    # nextln:       block284:
    # nextln: 4416:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4417:     CallRm $$rax
    # nextln: 4418:     Ud2
    # nextln:       block267:
    # nextln: 4419:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4420:     CallRm $$rax
    # nextln: 4421:     Ud2
    # nextln:       block262:
    # nextln: 4422:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4423:     CallRm $$rax
    # nextln: 4424:     Ud2
    # nextln:       block245:
    # nextln: 4425:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4426:     CallRm $$rax
    # nextln: 4427:     Ud2
    # nextln:       block240:
    # nextln: 4428:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4429:     CallRm $$rax
    # nextln: 4430:     Ud2
    # nextln:       block223:
    # nextln: 4431:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4432:     CallRm $$rax
    # nextln: 4433:     Ud2
    # nextln:       block218:
    # nextln: 4434:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4435:     CallRm $$rax
    # nextln: 4436:     Ud2
    # nextln:       block201:
    # nextln: 4437:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4438:     CallRm $$rax
    # nextln: 4439:     Ud2
    # nextln:       block196:
    # nextln: 4440:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4441:     CallRm $$rax
    # nextln: 4442:     Ud2
    # nextln:       block179:
    # nextln: 4443:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4444:     CallRm $$rax
    # nextln: 4445:     Ud2
    # nextln:       block174:
    # nextln: 4446:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4447:     CallRm $$rax
    # nextln: 4448:     Ud2
    # nextln:       block169:
    # nextln: 4449:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4450:     CallRm $$rax
    # nextln: 4451:     Ud2
    # nextln:       block164:
    # nextln: 4452:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4453:     CallRm $$rax
    # nextln: 4454:     Ud2
    # nextln:       block159:
    # nextln: 4455:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4456:     CallRm $$rax
    # nextln: 4457:     Ud2
    # nextln:       block154:
    # nextln: 4458:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4459:     CallRm $$rax
    # nextln: 4460:     Ud2
    # nextln:       block149:
    # nextln: 4461:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4462:     CallRm $$rax
    # nextln: 4463:     Ud2
    # nextln:       block144:
    # nextln: 4464:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4465:     CallRm $$rax
    # nextln: 4466:     Ud2
    # nextln:       block139:
    # nextln: 4467:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4468:     CallRm $$rax
    # nextln: 4469:     Ud2
    # nextln:       block134:
    # nextln: 4470:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4471:     CallRm $$rax
    # nextln: 4472:     Ud2
    # nextln:       block129:
    # nextln: 4473:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4474:     CallRm $$rax
    # nextln: 4475:     Ud2
    # nextln:       block124:
    # nextln: 4476:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4477:     CallRm $$rax
    # nextln: 4478:     Ud2
    # nextln:       block119:
    # nextln: 4479:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4480:     CallRm $$rax
    # nextln: 4481:     Ud2
    # nextln:       block114:
    # nextln: 4482:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4483:     CallRm $$rax
    # nextln: 4484:     Ud2
    # nextln:       block109:
    # nextln: 4485:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4486:     CallRm $$rax
    # nextln: 4487:     Ud2
    # nextln:       block104:
    # nextln: 4488:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4489:     CallRm $$rax
    # nextln: 4490:     Ud2
    # nextln:       block6:
    # nextln: 4491:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4492:     CallRm $$rax
    # nextln: 4493:     Ud2
    # nextln:       block4:
    # nextln: 4494:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4495:     CallRm $$rax
    # nextln: 4496:     Ud2
    # nextln:       block2:
    # nextln: 4497:     $$rax = FuncAddrAbs(External(extfunc2))
    # nextln: 4498:     CallRm $$rax
    # nextln: 4499:     Ud2

    %0:ctrl = entry
    %6:ptr = stackslot 4:4
    %7:ptr = stackslot 4:4
    %12:ptr = stackslot 8:8
    %13:ptr = stackslot 4:4
    %28:ptr = stackslot 8:8
    %29:ptr = stackslot 8:8
    %31:ptr = stackslot 1:1
    %8:i32 = iconst 1
    %17:i64 = iconst 40
    %11:i64 = iconst 32
    %20:i32 = iconst 0
    %21:ctrl = store.4 %0, %20, %7
    %22:ctrl = store.4 %21, %20, %6
    %23:ctrl = store.4 %22, %20, %13
    %30:ptr = iconst 105690555220944
    %32:ctrl = store.1 %23, %20, %31
    %33:i64 = iconst 34
    %34:i64 = iconst 33
    %35:ptr = iconst 105690555221008
    %36:ptr = iconst 105690555220976
    %8176:i64 = iconst 42
    %8174:i64 = iconst 2
    %8177:i64 = iconst 41
    %8175:i64 = iconst 1
    %8178:i64 = iconst 0
    %8179:i64 = iconst 3
    %8180:i64 = iconst 51
    %43:ptr = iconst 106721347401152
    %44:i64 = iconst 35
    %45:ptr = iconst 106721347409152
    %46:ptr = iconst 0
    %47:ctrl = store.8 %32, %46, %29
    %48:ctrl = store.8 %47, %46, %12
    %49:ctrl = store.8 %48, %46, %28
    %52:ctrl = store.4 %49, %20, %7
    %53:ctrl = store.4 %52, %20, %6
    %54:ctrl = store.4 %53, %8, %13
    %55:ctrl = store.1 %54, %8, %31
    %56:ctrl, %57:ptr = call @gc_new %55, %45, %44
    %58:ctrl = call @"System.Void Tests.Bool_No_Op::.ctor()" %56, %57
    %59:ctrl = store.8 %58, %57, %29
    %60:ctrl, %61:ptr = call @gc_new %59, %43, %8180
    %62:ptr = ptroff %61, %11
    %63:ctrl = store.4 %60, %8179, %62
    %64:ctrl = store.8 %63, %61, %12
    %65:ctrl, %66:ptr = call @gc_new %64, %43, %8180
    %67:ptr = ptroff %66, %11
    %68:ctrl = store.4 %65, %8179, %67
    %69:ctrl = store.8 %68, %66, %28
    %70:ctrl, %71:ptr = load.8 %69, %28
    %83:ptr = ptroff %71, %17
    %72:ptr = ptroff %71, %11
    %73:ctrl, %74:i64 = load.4 %70, %72
    %75:i64 = icmp slt %8178, %74
    %76:ctrl, %77:ctrl = brcond %73, %75
    %84:ctrl = store.1 %76, %8, %83
    %85:ctrl, %86:ptr = load.8 %84, %28
    %98:ptr = ptroff %86, %8177
    %87:ptr = ptroff %86, %11
    %88:ctrl, %89:i64 = load.4 %85, %87
    %90:i64 = icmp slt %8175, %89
    %91:ctrl, %92:ctrl = brcond %88, %90
    %99:ctrl = store.1 %91, %8, %98
    %100:ctrl, %101:ptr = load.8 %99, %28
    %113:ptr = ptroff %101, %8176
    %102:ptr = ptroff %101, %11
    %103:ctrl, %104:i64 = load.4 %100, %102
    %105:i64 = icmp slt %8174, %104
    %106:ctrl, %107:ctrl = brcond %103, %105
    %114:ctrl = store.1 %106, %8, %113
    %115:ctrl = store.1 %114, %8, %30
    %116:ctrl = store.1 %115, %20, %36
    %117:ctrl = store.1 %116, %8, %35
    %118:ctrl, %119:ptr = load.8 %117, %29
    %120:ptr = ptroff %119, %11
    %121:ctrl = store.1 %118, %8, %120
    %122:ctrl, %123:ptr = load.8 %121, %29
    %124:ptr = ptroff %123, %34
    %125:ctrl = store.1 %122, %20, %124
    %126:ctrl, %127:ptr = load.8 %125, %29
    %128:ptr = ptroff %127, %33
    %129:ctrl = store.1 %126, %8, %128
    %130:ctrl, %131:i32 = load.4 %129, %7
    %132:i32 = iadd %131, %8
    %133:ctrl = store.4 %130, %132, %7
    %134:ctrl, %135:i32 = load.4 %133, %7
    %136:i32 = iadd %135, %8
    %137:ctrl = store.4 %134, %136, %7
    %138:ctrl, %139:i32 = load.4 %137, %7
    %140:i32 = iadd %139, %8
    %141:ctrl = store.4 %138, %140, %7
    %142:ctrl, %143:i32 = load.4 %141, %7
    %144:i32 = iadd %143, %8
    %145:ctrl = store.4 %142, %144, %7
    %146:ctrl, %147:i32 = load.4 %145, %7
    %148:i32 = iadd %147, %8
    %149:ctrl = store.4 %146, %148, %7
    %150:ctrl, %151:i32 = load.4 %149, %7
    %152:i32 = iadd %151, %8
    %153:ctrl = store.4 %150, %152, %7
    %154:ctrl, %155:i32 = load.4 %153, %7
    %156:i32 = iadd %155, %8
    %157:ctrl = store.4 %154, %156, %7
    %158:ctrl, %159:i32 = load.4 %157, %7
    %160:i32 = iadd %159, %8
    %161:ctrl = store.4 %158, %160, %7
    %162:ctrl, %163:i32 = load.4 %161, %6
    %164:i32 = iadd %163, %8
    %165:ctrl = store.4 %162, %164, %6
    %166:ctrl, %167:i32 = load.4 %165, %6
    %168:i32 = iadd %167, %8
    %169:ctrl = store.4 %166, %168, %6
    %170:ctrl, %171:i32 = load.4 %169, %6
    %172:i32 = iadd %171, %8
    %173:ctrl = store.4 %170, %172, %6
    %174:ctrl, %175:i32 = load.4 %173, %6
    %176:i32 = iadd %175, %8
    %177:ctrl = store.4 %174, %176, %6
    %178:ctrl, %179:i32 = load.4 %177, %6
    %180:i32 = iadd %179, %8
    %181:ctrl = store.4 %178, %180, %6
    %182:ctrl, %183:i32 = load.4 %181, %6
    %184:i32 = iadd %183, %8
    %185:ctrl = store.4 %182, %184, %6
    %186:ctrl, %187:i32 = load.4 %185, %6
    %188:i32 = iadd %187, %8
    %189:ctrl = store.4 %186, %188, %6
    %190:ctrl, %191:i32 = load.4 %189, %6
    %192:i32 = iadd %191, %8
    %193:ctrl = store.4 %190, %192, %6
    %194:ctrl, %195:i32 = load.1 %193, %31
    %196:ctrl, %197:ctrl = brcond %194, %195
    %200:ctrl, %201:i32 = load.4 %196, %7
    %202:i32 = iadd %201, %8
    %203:ctrl = store.4 %200, %202, %7
    %206:ctrl, %207:i32 = load.4 %197, %6
    %208:i32 = iadd %207, %8
    %209:ctrl = store.4 %206, %208, %6
    %210:ctrl, %211:phisel = region %203, %209
    %212:ctrl, %213:i32 = load.1 %210, %31
    %214:ctrl, %215:ctrl = brcond %212, %213
    %218:ctrl, %219:i32 = load.4 %214, %7
    %220:i32 = iadd %219, %8
    %221:ctrl = store.4 %218, %220, %7
    %224:ctrl, %225:i32 = load.4 %215, %6
    %226:i32 = iadd %225, %8
    %227:ctrl = store.4 %224, %226, %6
    %228:ctrl, %229:phisel = region %221, %227
    %230:ctrl, %231:i32 = load.1 %228, %31
    %232:ctrl, %233:ctrl = brcond %230, %231
    %236:ctrl, %237:i32 = load.4 %232, %7
    %238:i32 = iadd %237, %8
    %239:ctrl = store.4 %236, %238, %7
    %242:ctrl, %243:i32 = load.4 %233, %6
    %244:i32 = iadd %243, %8
    %245:ctrl = store.4 %242, %244, %6
    %246:ctrl, %247:phisel = region %239, %245
    %248:ctrl, %249:i32 = load.1 %246, %31
    %250:ctrl, %251:ctrl = brcond %248, %249
    %254:ctrl, %255:i32 = load.4 %250, %7
    %256:i32 = iadd %255, %8
    %257:ctrl = store.4 %254, %256, %7
    %260:ctrl, %261:i32 = load.4 %251, %6
    %262:i32 = iadd %261, %8
    %263:ctrl = store.4 %260, %262, %6
    %264:ctrl, %265:phisel = region %257, %263
    %266:ctrl, %267:i32 = load.1 %264, %31
    %268:ctrl, %269:ctrl = brcond %266, %267
    %272:ctrl, %273:i32 = load.4 %268, %7
    %274:i32 = iadd %273, %8
    %275:ctrl = store.4 %272, %274, %7
    %278:ctrl, %279:i32 = load.4 %269, %6
    %280:i32 = iadd %279, %8
    %281:ctrl = store.4 %278, %280, %6
    %282:ctrl, %283:phisel = region %275, %281
    %284:ctrl, %285:i32 = load.1 %282, %31
    %286:ctrl, %287:ctrl = brcond %284, %285
    %290:ctrl, %291:i32 = load.4 %286, %7
    %292:i32 = iadd %291, %8
    %293:ctrl = store.4 %290, %292, %7
    %296:ctrl, %297:i32 = load.4 %287, %6
    %298:i32 = iadd %297, %8
    %299:ctrl = store.4 %296, %298, %6
    %300:ctrl, %301:phisel = region %293, %299
    %302:ctrl, %303:i32 = load.1 %300, %31
    %304:ctrl, %305:ctrl = brcond %302, %303
    %308:ctrl, %309:i32 = load.4 %304, %7
    %310:i32 = iadd %309, %8
    %311:ctrl = store.4 %308, %310, %7
    %314:ctrl, %315:i32 = load.4 %305, %6
    %316:i32 = iadd %315, %8
    %317:ctrl = store.4 %314, %316, %6
    %318:ctrl, %319:phisel = region %311, %317
    %320:ctrl, %321:i32 = load.1 %318, %31
    %322:ctrl, %323:ctrl = brcond %320, %321
    %326:ctrl, %327:i32 = load.4 %322, %7
    %328:i32 = iadd %327, %8
    %329:ctrl = store.4 %326, %328, %7
    %332:ctrl, %333:i32 = load.4 %323, %6
    %334:i32 = iadd %333, %8
    %335:ctrl = store.4 %332, %334, %6
    %336:ctrl, %337:phisel = region %329, %335
    %338:ctrl, %339:i32 = load.1 %336, %30
    %340:ctrl, %341:ctrl = brcond %338, %339
    %344:ctrl, %345:i32 = load.4 %340, %7
    %346:i32 = iadd %345, %8
    %347:ctrl = store.4 %344, %346, %7
    %350:ctrl, %351:i32 = load.4 %341, %6
    %352:i32 = iadd %351, %8
    %353:ctrl = store.4 %350, %352, %6
    %354:ctrl, %355:phisel = region %347, %353
    %356:ctrl, %357:i32 = load.1 %354, %30
    %358:ctrl, %359:ctrl = brcond %356, %357
    %362:ctrl, %363:i32 = load.4 %358, %7
    %364:i32 = iadd %363, %8
    %365:ctrl = store.4 %362, %364, %7
    %368:ctrl, %369:i32 = load.4 %359, %6
    %370:i32 = iadd %369, %8
    %371:ctrl = store.4 %368, %370, %6
    %372:ctrl, %373:phisel = region %365, %371
    %374:ctrl, %375:i32 = load.1 %372, %30
    %376:ctrl, %377:ctrl = brcond %374, %375
    %380:ctrl, %381:i32 = load.4 %376, %7
    %382:i32 = iadd %381, %8
    %383:ctrl = store.4 %380, %382, %7
    %386:ctrl, %387:i32 = load.4 %377, %6
    %388:i32 = iadd %387, %8
    %389:ctrl = store.4 %386, %388, %6
    %390:ctrl, %391:phisel = region %383, %389
    %392:ctrl, %393:i32 = load.1 %390, %30
    %394:ctrl, %395:ctrl = brcond %392, %393
    %398:ctrl, %399:i32 = load.4 %394, %7
    %400:i32 = iadd %399, %8
    %401:ctrl = store.4 %398, %400, %7
    %404:ctrl, %405:i32 = load.4 %395, %6
    %406:i32 = iadd %405, %8
    %407:ctrl = store.4 %404, %406, %6
    %408:ctrl, %409:phisel = region %401, %407
    %410:ctrl, %411:i32 = load.1 %408, %30
    %412:ctrl, %413:ctrl = brcond %410, %411
    %416:ctrl, %417:i32 = load.4 %412, %7
    %418:i32 = iadd %417, %8
    %419:ctrl = store.4 %416, %418, %7
    %422:ctrl, %423:i32 = load.4 %413, %6
    %424:i32 = iadd %423, %8
    %425:ctrl = store.4 %422, %424, %6
    %426:ctrl, %427:phisel = region %419, %425
    %428:ctrl, %429:i32 = load.1 %426, %30
    %430:ctrl, %431:ctrl = brcond %428, %429
    %434:ctrl, %435:i32 = load.4 %430, %7
    %436:i32 = iadd %435, %8
    %437:ctrl = store.4 %434, %436, %7
    %440:ctrl, %441:i32 = load.4 %431, %6
    %442:i32 = iadd %441, %8
    %443:ctrl = store.4 %440, %442, %6
    %444:ctrl, %445:phisel = region %437, %443
    %446:ctrl, %447:i32 = load.1 %444, %30
    %448:ctrl, %449:ctrl = brcond %446, %447
    %452:ctrl, %453:i32 = load.4 %448, %7
    %454:i32 = iadd %453, %8
    %455:ctrl = store.4 %452, %454, %7
    %458:ctrl, %459:i32 = load.4 %449, %6
    %460:i32 = iadd %459, %8
    %461:ctrl = store.4 %458, %460, %6
    %462:ctrl, %463:phisel = region %455, %461
    %464:ctrl, %465:i32 = load.1 %462, %30
    %466:ctrl, %467:ctrl = brcond %464, %465
    %470:ctrl, %471:i32 = load.4 %466, %7
    %472:i32 = iadd %471, %8
    %473:ctrl = store.4 %470, %472, %7
    %476:ctrl, %477:i32 = load.4 %467, %6
    %478:i32 = iadd %477, %8
    %479:ctrl = store.4 %476, %478, %6
    %480:ctrl, %481:phisel = region %473, %479
    %482:ctrl, %483:ptr = load.8 %480, %29
    %484:ptr = ptroff %483, %11
    %485:ctrl, %486:i32 = load.1 %482, %484
    %487:ctrl, %488:ctrl = brcond %485, %486
    %491:ctrl, %492:i32 = load.4 %487, %7
    %493:i32 = iadd %492, %8
    %494:ctrl = store.4 %491, %493, %7
    %497:ctrl, %498:i32 = load.4 %488, %6
    %499:i32 = iadd %498, %8
    %500:ctrl = store.4 %497, %499, %6
    %501:ctrl, %502:phisel = region %494, %500
    %503:ctrl, %504:ptr = load.8 %501, %29
    %505:ptr = ptroff %504, %11
    %506:ctrl, %507:i32 = load.1 %503, %505
    %508:ctrl, %509:ctrl = brcond %506, %507
    %512:ctrl, %513:i32 = load.4 %508, %7
    %514:i32 = iadd %513, %8
    %515:ctrl = store.4 %512, %514, %7
    %518:ctrl, %519:i32 = load.4 %509, %6
    %520:i32 = iadd %519, %8
    %521:ctrl = store.4 %518, %520, %6
    %522:ctrl, %523:phisel = region %515, %521
    %524:ctrl, %525:ptr = load.8 %522, %29
    %526:ptr = ptroff %525, %11
    %527:ctrl, %528:i32 = load.1 %524, %526
    %529:ctrl, %530:ctrl = brcond %527, %528
    %533:ctrl, %534:i32 = load.4 %529, %7
    %535:i32 = iadd %534, %8
    %536:ctrl = store.4 %533, %535, %7
    %539:ctrl, %540:i32 = load.4 %530, %6
    %541:i32 = iadd %540, %8
    %542:ctrl = store.4 %539, %541, %6
    %543:ctrl, %544:phisel = region %536, %542
    %545:ctrl, %546:ptr = load.8 %543, %29
    %547:ptr = ptroff %546, %11
    %548:ctrl, %549:i32 = load.1 %545, %547
    %550:ctrl, %551:ctrl = brcond %548, %549
    %554:ctrl, %555:i32 = load.4 %550, %7
    %556:i32 = iadd %555, %8
    %557:ctrl = store.4 %554, %556, %7
    %560:ctrl, %561:i32 = load.4 %551, %6
    %562:i32 = iadd %561, %8
    %563:ctrl = store.4 %560, %562, %6
    %564:ctrl, %565:phisel = region %557, %563
    %566:ctrl, %567:ptr = load.8 %564, %29
    %568:ptr = ptroff %567, %11
    %569:ctrl, %570:i32 = load.1 %566, %568
    %571:ctrl, %572:ctrl = brcond %569, %570
    %575:ctrl, %576:i32 = load.4 %571, %7
    %577:i32 = iadd %576, %8
    %578:ctrl = store.4 %575, %577, %7
    %581:ctrl, %582:i32 = load.4 %572, %6
    %583:i32 = iadd %582, %8
    %584:ctrl = store.4 %581, %583, %6
    %585:ctrl, %586:phisel = region %578, %584
    %587:ctrl, %588:ptr = load.8 %585, %29
    %589:ptr = ptroff %588, %11
    %590:ctrl, %591:i32 = load.1 %587, %589
    %592:ctrl, %593:ctrl = brcond %590, %591
    %596:ctrl, %597:i32 = load.4 %592, %7
    %598:i32 = iadd %597, %8
    %599:ctrl = store.4 %596, %598, %7
    %602:ctrl, %603:i32 = load.4 %593, %6
    %604:i32 = iadd %603, %8
    %605:ctrl = store.4 %602, %604, %6
    %606:ctrl, %607:phisel = region %599, %605
    %608:ctrl, %609:ptr = load.8 %606, %29
    %610:ptr = ptroff %609, %11
    %611:ctrl, %612:i32 = load.1 %608, %610
    %613:ctrl, %614:ctrl = brcond %611, %612
    %617:ctrl, %618:i32 = load.4 %613, %7
    %619:i32 = iadd %618, %8
    %620:ctrl = store.4 %617, %619, %7
    %623:ctrl, %624:i32 = load.4 %614, %6
    %625:i32 = iadd %624, %8
    %626:ctrl = store.4 %623, %625, %6
    %627:ctrl, %628:phisel = region %620, %626
    %629:ctrl, %630:ptr = load.8 %627, %29
    %631:ptr = ptroff %630, %11
    %632:ctrl, %633:i32 = load.1 %629, %631
    %634:ctrl, %635:ctrl = brcond %632, %633
    %638:ctrl, %639:i32 = load.4 %634, %7
    %640:i32 = iadd %639, %8
    %641:ctrl = store.4 %638, %640, %7
    %644:ctrl, %645:i32 = load.4 %635, %6
    %646:i32 = iadd %645, %8
    %647:ctrl = store.4 %644, %646, %6
    %648:ctrl, %649:phisel = region %641, %647
    %650:ctrl, %651:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %648
    %652:ctrl, %653:ctrl = brcond %650, %651
    %656:ctrl, %657:i32 = load.4 %652, %7
    %658:i32 = iadd %657, %8
    %659:ctrl = store.4 %656, %658, %7
    %662:ctrl, %663:i32 = load.4 %653, %6
    %664:i32 = iadd %663, %8
    %665:ctrl = store.4 %662, %664, %6
    %666:ctrl, %667:phisel = region %659, %665
    %668:ctrl, %669:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %666
    %670:ctrl, %671:ctrl = brcond %668, %669
    %674:ctrl, %675:i32 = load.4 %670, %7
    %676:i32 = iadd %675, %8
    %677:ctrl = store.4 %674, %676, %7
    %680:ctrl, %681:i32 = load.4 %671, %6
    %682:i32 = iadd %681, %8
    %683:ctrl = store.4 %680, %682, %6
    %684:ctrl, %685:phisel = region %677, %683
    %686:ctrl, %687:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %684
    %688:ctrl, %689:ctrl = brcond %686, %687
    %692:ctrl, %693:i32 = load.4 %688, %7
    %694:i32 = iadd %693, %8
    %695:ctrl = store.4 %692, %694, %7
    %698:ctrl, %699:i32 = load.4 %689, %6
    %700:i32 = iadd %699, %8
    %701:ctrl = store.4 %698, %700, %6
    %702:ctrl, %703:phisel = region %695, %701
    %704:ctrl, %705:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %702
    %706:ctrl, %707:ctrl = brcond %704, %705
    %710:ctrl, %711:i32 = load.4 %706, %7
    %712:i32 = iadd %711, %8
    %713:ctrl = store.4 %710, %712, %7
    %716:ctrl, %717:i32 = load.4 %707, %6
    %718:i32 = iadd %717, %8
    %719:ctrl = store.4 %716, %718, %6
    %720:ctrl, %721:phisel = region %713, %719
    %722:ctrl, %723:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %720
    %724:ctrl, %725:ctrl = brcond %722, %723
    %728:ctrl, %729:i32 = load.4 %724, %7
    %730:i32 = iadd %729, %8
    %731:ctrl = store.4 %728, %730, %7
    %734:ctrl, %735:i32 = load.4 %725, %6
    %736:i32 = iadd %735, %8
    %737:ctrl = store.4 %734, %736, %6
    %738:ctrl, %739:phisel = region %731, %737
    %740:ctrl, %741:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %738
    %742:ctrl, %743:ctrl = brcond %740, %741
    %746:ctrl, %747:i32 = load.4 %742, %7
    %748:i32 = iadd %747, %8
    %749:ctrl = store.4 %746, %748, %7
    %752:ctrl, %753:i32 = load.4 %743, %6
    %754:i32 = iadd %753, %8
    %755:ctrl = store.4 %752, %754, %6
    %756:ctrl, %757:phisel = region %749, %755
    %758:ctrl, %759:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %756
    %760:ctrl, %761:ctrl = brcond %758, %759
    %764:ctrl, %765:i32 = load.4 %760, %7
    %766:i32 = iadd %765, %8
    %767:ctrl = store.4 %764, %766, %7
    %770:ctrl, %771:i32 = load.4 %761, %6
    %772:i32 = iadd %771, %8
    %773:ctrl = store.4 %770, %772, %6
    %774:ctrl, %775:phisel = region %767, %773
    %776:ctrl, %777:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %774
    %778:ctrl, %779:ctrl = brcond %776, %777
    %782:ctrl, %783:i32 = load.4 %778, %7
    %784:i32 = iadd %783, %8
    %785:ctrl = store.4 %782, %784, %7
    %788:ctrl, %789:i32 = load.4 %779, %6
    %790:i32 = iadd %789, %8
    %791:ctrl = store.4 %788, %790, %6
    %792:ctrl, %793:phisel = region %785, %791
    %794:ctrl, %795:ptr = load.8 %792, %28
    %796:ctrl, %797:i32 = load.4 %794, %13
    %798:i64 = iext %797
    %799:i64 = sfill 32 %798
    %801:i64 = iadd %799, %17
    %813:ptr = ptroff %795, %801
    %802:ptr = ptroff %795, %11
    %803:ctrl, %804:i64 = load.4 %796, %802
    %805:i64 = icmp slt %799, %804
    %806:ctrl, %807:ctrl = brcond %803, %805
    %814:ctrl, %815:i32 = load.1 %806, %813
    %816:ctrl, %817:ctrl = brcond %814, %815
    %820:ctrl, %821:i32 = load.4 %816, %7
    %822:i32 = iadd %821, %8
    %823:ctrl = store.4 %820, %822, %7
    %826:ctrl, %827:i32 = load.4 %817, %6
    %828:i32 = iadd %827, %8
    %829:ctrl = store.4 %826, %828, %6
    %830:ctrl, %831:phisel = region %823, %829
    %832:ctrl, %833:ptr = load.8 %830, %28
    %834:ctrl, %835:i32 = load.4 %832, %13
    %836:i64 = iext %835
    %837:i64 = sfill 32 %836
    %839:i64 = iadd %837, %17
    %851:ptr = ptroff %833, %839
    %840:ptr = ptroff %833, %11
    %841:ctrl, %842:i64 = load.4 %834, %840
    %843:i64 = icmp slt %837, %842
    %844:ctrl, %845:ctrl = brcond %841, %843
    %852:ctrl, %853:i32 = load.1 %844, %851
    %854:ctrl, %855:ctrl = brcond %852, %853
    %858:ctrl, %859:i32 = load.4 %854, %7
    %860:i32 = iadd %859, %8
    %861:ctrl = store.4 %858, %860, %7
    %864:ctrl, %865:i32 = load.4 %855, %6
    %866:i32 = iadd %865, %8
    %867:ctrl = store.4 %864, %866, %6
    %868:ctrl, %869:phisel = region %861, %867
    %870:ctrl, %871:ptr = load.8 %868, %28
    %872:ctrl, %873:i32 = load.4 %870, %13
    %874:i64 = iext %873
    %875:i64 = sfill 32 %874
    %877:i64 = iadd %875, %17
    %889:ptr = ptroff %871, %877
    %878:ptr = ptroff %871, %11
    %879:ctrl, %880:i64 = load.4 %872, %878
    %881:i64 = icmp slt %875, %880
    %882:ctrl, %883:ctrl = brcond %879, %881
    %890:ctrl, %891:i32 = load.1 %882, %889
    %892:ctrl, %893:ctrl = brcond %890, %891
    %896:ctrl, %897:i32 = load.4 %892, %7
    %898:i32 = iadd %897, %8
    %899:ctrl = store.4 %896, %898, %7
    %902:ctrl, %903:i32 = load.4 %893, %6
    %904:i32 = iadd %903, %8
    %905:ctrl = store.4 %902, %904, %6
    %906:ctrl, %907:phisel = region %899, %905
    %908:ctrl, %909:ptr = load.8 %906, %28
    %910:ctrl, %911:i32 = load.4 %908, %13
    %912:i64 = iext %911
    %913:i64 = sfill 32 %912
    %915:i64 = iadd %913, %17
    %927:ptr = ptroff %909, %915
    %916:ptr = ptroff %909, %11
    %917:ctrl, %918:i64 = load.4 %910, %916
    %919:i64 = icmp slt %913, %918
    %920:ctrl, %921:ctrl = brcond %917, %919
    %928:ctrl, %929:i32 = load.1 %920, %927
    %930:ctrl, %931:ctrl = brcond %928, %929
    %934:ctrl, %935:i32 = load.4 %930, %7
    %936:i32 = iadd %935, %8
    %937:ctrl = store.4 %934, %936, %7
    %940:ctrl, %941:i32 = load.4 %931, %6
    %942:i32 = iadd %941, %8
    %943:ctrl = store.4 %940, %942, %6
    %944:ctrl, %945:phisel = region %937, %943
    %946:ctrl, %947:ptr = load.8 %944, %28
    %948:ctrl, %949:i32 = load.4 %946, %13
    %950:i64 = iext %949
    %951:i64 = sfill 32 %950
    %953:i64 = iadd %951, %17
    %965:ptr = ptroff %947, %953
    %954:ptr = ptroff %947, %11
    %955:ctrl, %956:i64 = load.4 %948, %954
    %957:i64 = icmp slt %951, %956
    %958:ctrl, %959:ctrl = brcond %955, %957
    %966:ctrl, %967:i32 = load.1 %958, %965
    %968:ctrl, %969:ctrl = brcond %966, %967
    %972:ctrl, %973:i32 = load.4 %968, %7
    %974:i32 = iadd %973, %8
    %975:ctrl = store.4 %972, %974, %7
    %978:ctrl, %979:i32 = load.4 %969, %6
    %980:i32 = iadd %979, %8
    %981:ctrl = store.4 %978, %980, %6
    %982:ctrl, %983:phisel = region %975, %981
    %984:ctrl, %985:ptr = load.8 %982, %28
    %986:ctrl, %987:i32 = load.4 %984, %13
    %988:i64 = iext %987
    %989:i64 = sfill 32 %988
    %991:i64 = iadd %989, %17
    %1003:ptr = ptroff %985, %991
    %992:ptr = ptroff %985, %11
    %993:ctrl, %994:i64 = load.4 %986, %992
    %995:i64 = icmp slt %989, %994
    %996:ctrl, %997:ctrl = brcond %993, %995
    %1004:ctrl, %1005:i32 = load.1 %996, %1003
    %1006:ctrl, %1007:ctrl = brcond %1004, %1005
    %1010:ctrl, %1011:i32 = load.4 %1006, %7
    %1012:i32 = iadd %1011, %8
    %1013:ctrl = store.4 %1010, %1012, %7
    %1016:ctrl, %1017:i32 = load.4 %1007, %6
    %1018:i32 = iadd %1017, %8
    %1019:ctrl = store.4 %1016, %1018, %6
    %1020:ctrl, %1021:phisel = region %1013, %1019
    %1022:ctrl, %1023:ptr = load.8 %1020, %28
    %1024:ctrl, %1025:i32 = load.4 %1022, %13
    %1026:i64 = iext %1025
    %1027:i64 = sfill 32 %1026
    %1029:i64 = iadd %1027, %17
    %1041:ptr = ptroff %1023, %1029
    %1030:ptr = ptroff %1023, %11
    %1031:ctrl, %1032:i64 = load.4 %1024, %1030
    %1033:i64 = icmp slt %1027, %1032
    %1034:ctrl, %1035:ctrl = brcond %1031, %1033
    %1042:ctrl, %1043:i32 = load.1 %1034, %1041
    %1044:ctrl, %1045:ctrl = brcond %1042, %1043
    %1048:ctrl, %1049:i32 = load.4 %1044, %7
    %1050:i32 = iadd %1049, %8
    %1051:ctrl = store.4 %1048, %1050, %7
    %1054:ctrl, %1055:i32 = load.4 %1045, %6
    %1056:i32 = iadd %1055, %8
    %1057:ctrl = store.4 %1054, %1056, %6
    %1058:ctrl, %1059:phisel = region %1051, %1057
    %1060:ctrl, %1061:ptr = load.8 %1058, %28
    %1062:ctrl, %1063:i32 = load.4 %1060, %13
    %1064:i64 = iext %1063
    %1065:i64 = sfill 32 %1064
    %1067:i64 = iadd %1065, %17
    %1079:ptr = ptroff %1061, %1067
    %1068:ptr = ptroff %1061, %11
    %1069:ctrl, %1070:i64 = load.4 %1062, %1068
    %1071:i64 = icmp slt %1065, %1070
    %1072:ctrl, %1073:ctrl = brcond %1069, %1071
    %1080:ctrl, %1081:i32 = load.1 %1072, %1079
    %1082:ctrl, %1083:ctrl = brcond %1080, %1081
    %1086:ctrl, %1087:i32 = load.4 %1082, %7
    %1088:i32 = iadd %1087, %8
    %1089:ctrl = store.4 %1086, %1088, %7
    %1092:ctrl, %1093:i32 = load.4 %1083, %6
    %1094:i32 = iadd %1093, %8
    %1095:ctrl = store.4 %1092, %1094, %6
    %1096:ctrl, %1097:phisel = region %1089, %1095
    %1098:ctrl, %1099:ptr = load.8 %1096, %12
    %1100:ctrl, %1101:i32 = load.4 %1098, %13
    %1102:i64 = iext %1101
    %1103:i64 = sfill 32 %1102
    %1105:i64 = iadd %1103, %17
    %1117:ptr = ptroff %1099, %1105
    %1106:ptr = ptroff %1099, %11
    %1107:ctrl, %1108:i64 = load.4 %1100, %1106
    %1109:i64 = icmp slt %1103, %1108
    %1110:ctrl, %1111:ctrl = brcond %1107, %1109
    %1118:ctrl, %1119:i32 = load.1 %1110, %1117
    %1120:ctrl, %1121:ctrl = brcond %1118, %1119
    %1124:ctrl, %1125:i32 = load.4 %1120, %7
    %1126:i32 = iadd %1125, %8
    %1127:ctrl = store.4 %1124, %1126, %7
    %1130:ctrl, %1131:i32 = load.4 %1121, %6
    %1132:i32 = iadd %1131, %8
    %1133:ctrl = store.4 %1130, %1132, %6
    %1134:ctrl, %1135:phisel = region %1127, %1133
    %1136:ctrl, %1137:ptr = load.8 %1134, %12
    %1138:ctrl, %1139:i32 = load.4 %1136, %13
    %1140:i64 = iext %1139
    %1141:i64 = sfill 32 %1140
    %1143:i64 = iadd %1141, %17
    %1155:ptr = ptroff %1137, %1143
    %1144:ptr = ptroff %1137, %11
    %1145:ctrl, %1146:i64 = load.4 %1138, %1144
    %1147:i64 = icmp slt %1141, %1146
    %1148:ctrl, %1149:ctrl = brcond %1145, %1147
    %1156:ctrl, %1157:i32 = load.1 %1148, %1155
    %1158:ctrl, %1159:ctrl = brcond %1156, %1157
    %1162:ctrl, %1163:i32 = load.4 %1158, %7
    %1164:i32 = iadd %1163, %8
    %1165:ctrl = store.4 %1162, %1164, %7
    %1168:ctrl, %1169:i32 = load.4 %1159, %6
    %1170:i32 = iadd %1169, %8
    %1171:ctrl = store.4 %1168, %1170, %6
    %1172:ctrl, %1173:phisel = region %1165, %1171
    %1174:ctrl, %1175:ptr = load.8 %1172, %12
    %1176:ctrl, %1177:i32 = load.4 %1174, %13
    %1178:i64 = iext %1177
    %1179:i64 = sfill 32 %1178
    %1181:i64 = iadd %1179, %17
    %1193:ptr = ptroff %1175, %1181
    %1182:ptr = ptroff %1175, %11
    %1183:ctrl, %1184:i64 = load.4 %1176, %1182
    %1185:i64 = icmp slt %1179, %1184
    %1186:ctrl, %1187:ctrl = brcond %1183, %1185
    %1194:ctrl, %1195:i32 = load.1 %1186, %1193
    %1196:ctrl, %1197:ctrl = brcond %1194, %1195
    %1200:ctrl, %1201:i32 = load.4 %1196, %7
    %1202:i32 = iadd %1201, %8
    %1203:ctrl = store.4 %1200, %1202, %7
    %1206:ctrl, %1207:i32 = load.4 %1197, %6
    %1208:i32 = iadd %1207, %8
    %1209:ctrl = store.4 %1206, %1208, %6
    %1210:ctrl, %1211:phisel = region %1203, %1209
    %1212:ctrl, %1213:ptr = load.8 %1210, %12
    %1214:ctrl, %1215:i32 = load.4 %1212, %13
    %1216:i64 = iext %1215
    %1217:i64 = sfill 32 %1216
    %1219:i64 = iadd %1217, %17
    %1231:ptr = ptroff %1213, %1219
    %1220:ptr = ptroff %1213, %11
    %1221:ctrl, %1222:i64 = load.4 %1214, %1220
    %1223:i64 = icmp slt %1217, %1222
    %1224:ctrl, %1225:ctrl = brcond %1221, %1223
    %1232:ctrl, %1233:i32 = load.1 %1224, %1231
    %1234:ctrl, %1235:ctrl = brcond %1232, %1233
    %1238:ctrl, %1239:i32 = load.4 %1234, %7
    %1240:i32 = iadd %1239, %8
    %1241:ctrl = store.4 %1238, %1240, %7
    %1244:ctrl, %1245:i32 = load.4 %1235, %6
    %1246:i32 = iadd %1245, %8
    %1247:ctrl = store.4 %1244, %1246, %6
    %1248:ctrl, %1249:phisel = region %1241, %1247
    %1250:ctrl, %1251:ptr = load.8 %1248, %12
    %1252:ctrl, %1253:i32 = load.4 %1250, %13
    %1254:i64 = iext %1253
    %1255:i64 = sfill 32 %1254
    %1257:i64 = iadd %1255, %17
    %1269:ptr = ptroff %1251, %1257
    %1258:ptr = ptroff %1251, %11
    %1259:ctrl, %1260:i64 = load.4 %1252, %1258
    %1261:i64 = icmp slt %1255, %1260
    %1262:ctrl, %1263:ctrl = brcond %1259, %1261
    %1270:ctrl, %1271:i32 = load.1 %1262, %1269
    %1272:ctrl, %1273:ctrl = brcond %1270, %1271
    %1276:ctrl, %1277:i32 = load.4 %1272, %7
    %1278:i32 = iadd %1277, %8
    %1279:ctrl = store.4 %1276, %1278, %7
    %1282:ctrl, %1283:i32 = load.4 %1273, %6
    %1284:i32 = iadd %1283, %8
    %1285:ctrl = store.4 %1282, %1284, %6
    %1286:ctrl, %1287:phisel = region %1279, %1285
    %1288:ctrl, %1289:ptr = load.8 %1286, %12
    %1290:ctrl, %1291:i32 = load.4 %1288, %13
    %1292:i64 = iext %1291
    %1293:i64 = sfill 32 %1292
    %1295:i64 = iadd %1293, %17
    %1307:ptr = ptroff %1289, %1295
    %1296:ptr = ptroff %1289, %11
    %1297:ctrl, %1298:i64 = load.4 %1290, %1296
    %1299:i64 = icmp slt %1293, %1298
    %1300:ctrl, %1301:ctrl = brcond %1297, %1299
    %1308:ctrl, %1309:i32 = load.1 %1300, %1307
    %1310:ctrl, %1311:ctrl = brcond %1308, %1309
    %1314:ctrl, %1315:i32 = load.4 %1310, %7
    %1316:i32 = iadd %1315, %8
    %1317:ctrl = store.4 %1314, %1316, %7
    %1320:ctrl, %1321:i32 = load.4 %1311, %6
    %1322:i32 = iadd %1321, %8
    %1323:ctrl = store.4 %1320, %1322, %6
    %1324:ctrl, %1325:phisel = region %1317, %1323
    %1326:ctrl, %1327:ptr = load.8 %1324, %12
    %1328:ctrl, %1329:i32 = load.4 %1326, %13
    %1330:i64 = iext %1329
    %1331:i64 = sfill 32 %1330
    %1333:i64 = iadd %1331, %17
    %1345:ptr = ptroff %1327, %1333
    %1334:ptr = ptroff %1327, %11
    %1335:ctrl, %1336:i64 = load.4 %1328, %1334
    %1337:i64 = icmp slt %1331, %1336
    %1338:ctrl, %1339:ctrl = brcond %1335, %1337
    %1346:ctrl, %1347:i32 = load.1 %1338, %1345
    %1348:ctrl, %1349:ctrl = brcond %1346, %1347
    %1352:ctrl, %1353:i32 = load.4 %1348, %7
    %1354:i32 = iadd %1353, %8
    %1355:ctrl = store.4 %1352, %1354, %7
    %1358:ctrl, %1359:i32 = load.4 %1349, %6
    %1360:i32 = iadd %1359, %8
    %1361:ctrl = store.4 %1358, %1360, %6
    %1362:ctrl, %1363:phisel = region %1355, %1361
    %1364:ctrl, %1365:ptr = load.8 %1362, %12
    %1366:ctrl, %1367:i32 = load.4 %1364, %13
    %1368:i64 = iext %1367
    %1369:i64 = sfill 32 %1368
    %1371:i64 = iadd %1369, %17
    %1383:ptr = ptroff %1365, %1371
    %1372:ptr = ptroff %1365, %11
    %1373:ctrl, %1374:i64 = load.4 %1366, %1372
    %1375:i64 = icmp slt %1369, %1374
    %1376:ctrl, %1377:ctrl = brcond %1373, %1375
    %1384:ctrl, %1385:i32 = load.1 %1376, %1383
    %1386:ctrl, %1387:ctrl = brcond %1384, %1385
    %1390:ctrl, %1391:i32 = load.4 %1386, %7
    %1392:i32 = iadd %1391, %8
    %1393:ctrl = store.4 %1390, %1392, %7
    %1396:ctrl, %1397:i32 = load.4 %1387, %6
    %1398:i32 = iadd %1397, %8
    %1399:ctrl = store.4 %1396, %1398, %6
    %1400:ctrl, %1401:phisel = region %1393, %1399
    %1402:ctrl, %1403:i32 = load.4 %1400, %7
    %1404:i32 = iadd %1403, %8
    %1405:ctrl = store.4 %1402, %1404, %7
    %1406:ctrl, %1407:i32 = load.4 %1405, %6
    %1408:i32 = iadd %1407, %8
    %1409:ctrl = store.4 %1406, %1408, %6
    %1410:ctrl, %1411:i32 = load.1 %1409, %31
    %1412:ctrl, %1413:ctrl = brcond %1410, %1411
    %1416:ctrl, %1417:i32 = load.4 %1412, %7
    %1418:i32 = iadd %1417, %8
    %1419:ctrl = store.4 %1416, %1418, %7
    %1422:ctrl, %1423:i32 = load.4 %1413, %6
    %1424:i32 = iadd %1423, %8
    %1425:ctrl = store.4 %1422, %1424, %6
    %1426:ctrl, %1427:phisel = region %1419, %1425
    %1428:ctrl, %1429:i32 = load.1 %1426, %30
    %1430:ctrl, %1431:ctrl = brcond %1428, %1429
    %1434:ctrl, %1435:i32 = load.4 %1430, %7
    %1436:i32 = iadd %1435, %8
    %1437:ctrl = store.4 %1434, %1436, %7
    %1440:ctrl, %1441:i32 = load.4 %1431, %6
    %1442:i32 = iadd %1441, %8
    %1443:ctrl = store.4 %1440, %1442, %6
    %1444:ctrl, %1445:phisel = region %1437, %1443
    %1446:ctrl, %1447:ptr = load.8 %1444, %29
    %1448:ptr = ptroff %1447, %11
    %1449:ctrl, %1450:i32 = load.1 %1446, %1448
    %1451:ctrl, %1452:ctrl = brcond %1449, %1450
    %1455:ctrl, %1456:i32 = load.4 %1451, %7
    %1457:i32 = iadd %1456, %8
    %1458:ctrl = store.4 %1455, %1457, %7
    %1461:ctrl, %1462:i32 = load.4 %1452, %6
    %1463:i32 = iadd %1462, %8
    %1464:ctrl = store.4 %1461, %1463, %6
    %1465:ctrl, %1466:phisel = region %1458, %1464
    %1467:ctrl, %1468:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1465
    %1469:ctrl, %1470:ctrl = brcond %1467, %1468
    %1473:ctrl, %1474:i32 = load.4 %1469, %7
    %1475:i32 = iadd %1474, %8
    %1476:ctrl = store.4 %1473, %1475, %7
    %1479:ctrl, %1480:i32 = load.4 %1470, %6
    %1481:i32 = iadd %1480, %8
    %1482:ctrl = store.4 %1479, %1481, %6
    %1483:ctrl, %1484:phisel = region %1476, %1482
    %1485:ctrl, %1486:ptr = load.8 %1483, %28
    %1487:ctrl, %1488:i32 = load.4 %1485, %13
    %1489:i64 = iext %1488
    %1490:i64 = sfill 32 %1489
    %1492:i64 = iadd %1490, %17
    %1504:ptr = ptroff %1486, %1492
    %1493:ptr = ptroff %1486, %11
    %1494:ctrl, %1495:i64 = load.4 %1487, %1493
    %1496:i64 = icmp slt %1490, %1495
    %1497:ctrl, %1498:ctrl = brcond %1494, %1496
    %1505:ctrl, %1506:i32 = load.1 %1497, %1504
    %1507:ctrl, %1508:ctrl = brcond %1505, %1506
    %1511:ctrl, %1512:i32 = load.4 %1507, %7
    %1513:i32 = iadd %1512, %8
    %1514:ctrl = store.4 %1511, %1513, %7
    %1517:ctrl, %1518:i32 = load.4 %1508, %6
    %1519:i32 = iadd %1518, %8
    %1520:ctrl = store.4 %1517, %1519, %6
    %1521:ctrl, %1522:phisel = region %1514, %1520
    %1523:ctrl, %1524:ptr = load.8 %1521, %12
    %1525:ctrl, %1526:i32 = load.4 %1523, %13
    %1527:i64 = iext %1526
    %1528:i64 = sfill 32 %1527
    %1530:i64 = iadd %1528, %17
    %1542:ptr = ptroff %1524, %1530
    %1531:ptr = ptroff %1524, %11
    %1532:ctrl, %1533:i64 = load.4 %1525, %1531
    %1534:i64 = icmp slt %1528, %1533
    %1535:ctrl, %1536:ctrl = brcond %1532, %1534
    %1543:ctrl, %1544:i32 = load.1 %1535, %1542
    %1545:ctrl, %1546:ctrl = brcond %1543, %1544
    %1549:ctrl, %1550:i32 = load.4 %1545, %7
    %1551:i32 = iadd %1550, %8
    %1552:ctrl = store.4 %1549, %1551, %7
    %1555:ctrl, %1556:i32 = load.4 %1546, %6
    %1557:i32 = iadd %1556, %8
    %1558:ctrl = store.4 %1555, %1557, %6
    %1559:ctrl, %1560:phisel = region %1552, %1558
    %1561:ctrl, %1562:i32 = load.4 %1559, %7
    %1563:i32 = iadd %1562, %8
    %1564:ctrl = store.4 %1561, %1563, %7
    %1565:ctrl, %1566:i32 = load.4 %1564, %6
    %1567:i32 = iadd %1566, %8
    %1568:ctrl = store.4 %1565, %1567, %6
    %1569:ctrl, %1570:i32 = load.1 %1568, %31
    %1571:ctrl, %1572:ctrl = brcond %1569, %1570
    %1575:ctrl, %1576:i32 = load.4 %1571, %7
    %1577:i32 = iadd %1576, %8
    %1578:ctrl = store.4 %1575, %1577, %7
    %1581:ctrl, %1582:i32 = load.4 %1572, %6
    %1583:i32 = iadd %1582, %8
    %1584:ctrl = store.4 %1581, %1583, %6
    %1585:ctrl, %1586:phisel = region %1578, %1584
    %1587:ctrl, %1588:i32 = load.1 %1585, %30
    %1589:ctrl, %1590:ctrl = brcond %1587, %1588
    %1593:ctrl, %1594:i32 = load.4 %1589, %7
    %1595:i32 = iadd %1594, %8
    %1596:ctrl = store.4 %1593, %1595, %7
    %1599:ctrl, %1600:i32 = load.4 %1590, %6
    %1601:i32 = iadd %1600, %8
    %1602:ctrl = store.4 %1599, %1601, %6
    %1603:ctrl, %1604:phisel = region %1596, %1602
    %1605:ctrl, %1606:ptr = load.8 %1603, %29
    %1607:ptr = ptroff %1606, %11
    %1608:ctrl, %1609:i32 = load.1 %1605, %1607
    %1610:ctrl, %1611:ctrl = brcond %1608, %1609
    %1614:ctrl, %1615:i32 = load.4 %1610, %7
    %1616:i32 = iadd %1615, %8
    %1617:ctrl = store.4 %1614, %1616, %7
    %1620:ctrl, %1621:i32 = load.4 %1611, %6
    %1622:i32 = iadd %1621, %8
    %1623:ctrl = store.4 %1620, %1622, %6
    %1624:ctrl, %1625:phisel = region %1617, %1623
    %1626:ctrl, %1627:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1624
    %1628:ctrl, %1629:ctrl = brcond %1626, %1627
    %1632:ctrl, %1633:i32 = load.4 %1628, %7
    %1634:i32 = iadd %1633, %8
    %1635:ctrl = store.4 %1632, %1634, %7
    %1638:ctrl, %1639:i32 = load.4 %1629, %6
    %1640:i32 = iadd %1639, %8
    %1641:ctrl = store.4 %1638, %1640, %6
    %1642:ctrl, %1643:phisel = region %1635, %1641
    %1644:ctrl, %1645:ptr = load.8 %1642, %28
    %1646:ctrl, %1647:i32 = load.4 %1644, %13
    %1648:i64 = iext %1647
    %1649:i64 = sfill 32 %1648
    %1651:i64 = iadd %1649, %17
    %1663:ptr = ptroff %1645, %1651
    %1652:ptr = ptroff %1645, %11
    %1653:ctrl, %1654:i64 = load.4 %1646, %1652
    %1655:i64 = icmp slt %1649, %1654
    %1656:ctrl, %1657:ctrl = brcond %1653, %1655
    %1664:ctrl, %1665:i32 = load.1 %1656, %1663
    %1666:ctrl, %1667:ctrl = brcond %1664, %1665
    %1670:ctrl, %1671:i32 = load.4 %1666, %7
    %1672:i32 = iadd %1671, %8
    %1673:ctrl = store.4 %1670, %1672, %7
    %1676:ctrl, %1677:i32 = load.4 %1667, %6
    %1678:i32 = iadd %1677, %8
    %1679:ctrl = store.4 %1676, %1678, %6
    %1680:ctrl, %1681:phisel = region %1673, %1679
    %1682:ctrl, %1683:ptr = load.8 %1680, %12
    %1684:ctrl, %1685:i32 = load.4 %1682, %13
    %1686:i64 = iext %1685
    %1687:i64 = sfill 32 %1686
    %1689:i64 = iadd %1687, %17
    %1701:ptr = ptroff %1683, %1689
    %1690:ptr = ptroff %1683, %11
    %1691:ctrl, %1692:i64 = load.4 %1684, %1690
    %1693:i64 = icmp slt %1687, %1692
    %1694:ctrl, %1695:ctrl = brcond %1691, %1693
    %1702:ctrl, %1703:i32 = load.1 %1694, %1701
    %1704:ctrl, %1705:ctrl = brcond %1702, %1703
    %1708:ctrl, %1709:i32 = load.4 %1704, %7
    %1710:i32 = iadd %1709, %8
    %1711:ctrl = store.4 %1708, %1710, %7
    %1714:ctrl, %1715:i32 = load.4 %1705, %6
    %1716:i32 = iadd %1715, %8
    %1717:ctrl = store.4 %1714, %1716, %6
    %1718:ctrl, %1719:phisel = region %1711, %1717
    %1720:ctrl, %1721:i32 = load.4 %1718, %7
    %1722:i32 = iadd %1721, %8
    %1723:ctrl = store.4 %1720, %1722, %7
    %1724:ctrl, %1725:i32 = load.4 %1723, %6
    %1726:i32 = iadd %1725, %8
    %1727:ctrl = store.4 %1724, %1726, %6
    %1728:ctrl, %1729:i32 = load.1 %1727, %31
    %1730:ctrl, %1731:ctrl = brcond %1728, %1729
    %1734:ctrl, %1735:i32 = load.4 %1730, %7
    %1736:i32 = iadd %1735, %8
    %1737:ctrl = store.4 %1734, %1736, %7
    %1740:ctrl, %1741:i32 = load.4 %1731, %6
    %1742:i32 = iadd %1741, %8
    %1743:ctrl = store.4 %1740, %1742, %6
    %1744:ctrl, %1745:phisel = region %1737, %1743
    %1746:ctrl, %1747:i32 = load.1 %1744, %30
    %1748:ctrl, %1749:ctrl = brcond %1746, %1747
    %1752:ctrl, %1753:i32 = load.4 %1748, %7
    %1754:i32 = iadd %1753, %8
    %1755:ctrl = store.4 %1752, %1754, %7
    %1758:ctrl, %1759:i32 = load.4 %1749, %6
    %1760:i32 = iadd %1759, %8
    %1761:ctrl = store.4 %1758, %1760, %6
    %1762:ctrl, %1763:phisel = region %1755, %1761
    %1764:ctrl, %1765:ptr = load.8 %1762, %29
    %1766:ptr = ptroff %1765, %11
    %1767:ctrl, %1768:i32 = load.1 %1764, %1766
    %1769:ctrl, %1770:ctrl = brcond %1767, %1768
    %1773:ctrl, %1774:i32 = load.4 %1769, %7
    %1775:i32 = iadd %1774, %8
    %1776:ctrl = store.4 %1773, %1775, %7
    %1779:ctrl, %1780:i32 = load.4 %1770, %6
    %1781:i32 = iadd %1780, %8
    %1782:ctrl = store.4 %1779, %1781, %6
    %1783:ctrl, %1784:phisel = region %1776, %1782
    %1785:ctrl, %1786:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1783
    %1787:ctrl, %1788:ctrl = brcond %1785, %1786
    %1791:ctrl, %1792:i32 = load.4 %1787, %7
    %1793:i32 = iadd %1792, %8
    %1794:ctrl = store.4 %1791, %1793, %7
    %1797:ctrl, %1798:i32 = load.4 %1788, %6
    %1799:i32 = iadd %1798, %8
    %1800:ctrl = store.4 %1797, %1799, %6
    %1801:ctrl, %1802:phisel = region %1794, %1800
    %1803:ctrl, %1804:ptr = load.8 %1801, %28
    %1805:ctrl, %1806:i32 = load.4 %1803, %13
    %1807:i64 = iext %1806
    %1808:i64 = sfill 32 %1807
    %1810:i64 = iadd %1808, %17
    %1822:ptr = ptroff %1804, %1810
    %1811:ptr = ptroff %1804, %11
    %1812:ctrl, %1813:i64 = load.4 %1805, %1811
    %1814:i64 = icmp slt %1808, %1813
    %1815:ctrl, %1816:ctrl = brcond %1812, %1814
    %1823:ctrl, %1824:i32 = load.1 %1815, %1822
    %1825:ctrl, %1826:ctrl = brcond %1823, %1824
    %1829:ctrl, %1830:i32 = load.4 %1825, %7
    %1831:i32 = iadd %1830, %8
    %1832:ctrl = store.4 %1829, %1831, %7
    %1835:ctrl, %1836:i32 = load.4 %1826, %6
    %1837:i32 = iadd %1836, %8
    %1838:ctrl = store.4 %1835, %1837, %6
    %1839:ctrl, %1840:phisel = region %1832, %1838
    %1841:ctrl, %1842:ptr = load.8 %1839, %12
    %1843:ctrl, %1844:i32 = load.4 %1841, %13
    %1845:i64 = iext %1844
    %1846:i64 = sfill 32 %1845
    %1848:i64 = iadd %1846, %17
    %1860:ptr = ptroff %1842, %1848
    %1849:ptr = ptroff %1842, %11
    %1850:ctrl, %1851:i64 = load.4 %1843, %1849
    %1852:i64 = icmp slt %1846, %1851
    %1853:ctrl, %1854:ctrl = brcond %1850, %1852
    %1861:ctrl, %1862:i32 = load.1 %1853, %1860
    %1863:ctrl, %1864:ctrl = brcond %1861, %1862
    %1867:ctrl, %1868:i32 = load.4 %1863, %7
    %1869:i32 = iadd %1868, %8
    %1870:ctrl = store.4 %1867, %1869, %7
    %1873:ctrl, %1874:i32 = load.4 %1864, %6
    %1875:i32 = iadd %1874, %8
    %1876:ctrl = store.4 %1873, %1875, %6
    %1877:ctrl, %1878:phisel = region %1870, %1876
    %1879:ctrl, %1880:i32 = load.4 %1877, %7
    %1881:i32 = iadd %1880, %8
    %1882:ctrl = store.4 %1879, %1881, %7
    %1883:ctrl, %1884:i32 = load.4 %1882, %6
    %1885:i32 = iadd %1884, %8
    %1886:ctrl = store.4 %1883, %1885, %6
    %1887:ctrl, %1888:i32 = load.1 %1886, %31
    %1889:ctrl, %1890:ctrl = brcond %1887, %1888
    %1893:ctrl, %1894:i32 = load.4 %1889, %7
    %1895:i32 = iadd %1894, %8
    %1896:ctrl = store.4 %1893, %1895, %7
    %1899:ctrl, %1900:i32 = load.4 %1890, %6
    %1901:i32 = iadd %1900, %8
    %1902:ctrl = store.4 %1899, %1901, %6
    %1903:ctrl, %1904:phisel = region %1896, %1902
    %1905:ctrl, %1906:i32 = load.1 %1903, %30
    %1907:ctrl, %1908:ctrl = brcond %1905, %1906
    %1911:ctrl, %1912:i32 = load.4 %1907, %7
    %1913:i32 = iadd %1912, %8
    %1914:ctrl = store.4 %1911, %1913, %7
    %1917:ctrl, %1918:i32 = load.4 %1908, %6
    %1919:i32 = iadd %1918, %8
    %1920:ctrl = store.4 %1917, %1919, %6
    %1921:ctrl, %1922:phisel = region %1914, %1920
    %1923:ctrl, %1924:ptr = load.8 %1921, %29
    %1925:ptr = ptroff %1924, %11
    %1926:ctrl, %1927:i32 = load.1 %1923, %1925
    %1928:ctrl, %1929:ctrl = brcond %1926, %1927
    %1932:ctrl, %1933:i32 = load.4 %1928, %7
    %1934:i32 = iadd %1933, %8
    %1935:ctrl = store.4 %1932, %1934, %7
    %1938:ctrl, %1939:i32 = load.4 %1929, %6
    %1940:i32 = iadd %1939, %8
    %1941:ctrl = store.4 %1938, %1940, %6
    %1942:ctrl, %1943:phisel = region %1935, %1941
    %1944:ctrl, %1945:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1942
    %1946:ctrl, %1947:ctrl = brcond %1944, %1945
    %1950:ctrl, %1951:i32 = load.4 %1946, %7
    %1952:i32 = iadd %1951, %8
    %1953:ctrl = store.4 %1950, %1952, %7
    %1956:ctrl, %1957:i32 = load.4 %1947, %6
    %1958:i32 = iadd %1957, %8
    %1959:ctrl = store.4 %1956, %1958, %6
    %1960:ctrl, %1961:phisel = region %1953, %1959
    %1962:ctrl, %1963:ptr = load.8 %1960, %28
    %1964:ctrl, %1965:i32 = load.4 %1962, %13
    %1966:i64 = iext %1965
    %1967:i64 = sfill 32 %1966
    %1969:i64 = iadd %1967, %17
    %1981:ptr = ptroff %1963, %1969
    %1970:ptr = ptroff %1963, %11
    %1971:ctrl, %1972:i64 = load.4 %1964, %1970
    %1973:i64 = icmp slt %1967, %1972
    %1974:ctrl, %1975:ctrl = brcond %1971, %1973
    %1982:ctrl, %1983:i32 = load.1 %1974, %1981
    %1984:ctrl, %1985:ctrl = brcond %1982, %1983
    %1988:ctrl, %1989:i32 = load.4 %1984, %7
    %1990:i32 = iadd %1989, %8
    %1991:ctrl = store.4 %1988, %1990, %7
    %1994:ctrl, %1995:i32 = load.4 %1985, %6
    %1996:i32 = iadd %1995, %8
    %1997:ctrl = store.4 %1994, %1996, %6
    %1998:ctrl, %1999:phisel = region %1991, %1997
    %2000:ctrl, %2001:ptr = load.8 %1998, %12
    %2002:ctrl, %2003:i32 = load.4 %2000, %13
    %2004:i64 = iext %2003
    %2005:i64 = sfill 32 %2004
    %2007:i64 = iadd %2005, %17
    %2019:ptr = ptroff %2001, %2007
    %2008:ptr = ptroff %2001, %11
    %2009:ctrl, %2010:i64 = load.4 %2002, %2008
    %2011:i64 = icmp slt %2005, %2010
    %2012:ctrl, %2013:ctrl = brcond %2009, %2011
    %2020:ctrl, %2021:i32 = load.1 %2012, %2019
    %2022:ctrl, %2023:ctrl = brcond %2020, %2021
    %2026:ctrl, %2027:i32 = load.4 %2022, %7
    %2028:i32 = iadd %2027, %8
    %2029:ctrl = store.4 %2026, %2028, %7
    %2032:ctrl, %2033:i32 = load.4 %2023, %6
    %2034:i32 = iadd %2033, %8
    %2035:ctrl = store.4 %2032, %2034, %6
    %2036:ctrl, %2037:phisel = region %2029, %2035
    %2038:ctrl, %2039:i32 = load.4 %2036, %7
    %2040:i32 = iadd %2039, %8
    %2041:ctrl = store.4 %2038, %2040, %7
    %2042:ctrl, %2043:i32 = load.4 %2041, %6
    %2044:i32 = iadd %2043, %8
    %2045:ctrl = store.4 %2042, %2044, %6
    %2046:ctrl, %2047:i32 = load.1 %2045, %31
    %2048:ctrl, %2049:ctrl = brcond %2046, %2047
    %2052:ctrl, %2053:i32 = load.4 %2048, %7
    %2054:i32 = iadd %2053, %8
    %2055:ctrl = store.4 %2052, %2054, %7
    %2058:ctrl, %2059:i32 = load.4 %2049, %6
    %2060:i32 = iadd %2059, %8
    %2061:ctrl = store.4 %2058, %2060, %6
    %2062:ctrl, %2063:phisel = region %2055, %2061
    %2064:ctrl, %2065:i32 = load.1 %2062, %30
    %2066:ctrl, %2067:ctrl = brcond %2064, %2065
    %2070:ctrl, %2071:i32 = load.4 %2066, %7
    %2072:i32 = iadd %2071, %8
    %2073:ctrl = store.4 %2070, %2072, %7
    %2076:ctrl, %2077:i32 = load.4 %2067, %6
    %2078:i32 = iadd %2077, %8
    %2079:ctrl = store.4 %2076, %2078, %6
    %2080:ctrl, %2081:phisel = region %2073, %2079
    %2082:ctrl, %2083:ptr = load.8 %2080, %29
    %2084:ptr = ptroff %2083, %11
    %2085:ctrl, %2086:i32 = load.1 %2082, %2084
    %2087:ctrl, %2088:ctrl = brcond %2085, %2086
    %2091:ctrl, %2092:i32 = load.4 %2087, %7
    %2093:i32 = iadd %2092, %8
    %2094:ctrl = store.4 %2091, %2093, %7
    %2097:ctrl, %2098:i32 = load.4 %2088, %6
    %2099:i32 = iadd %2098, %8
    %2100:ctrl = store.4 %2097, %2099, %6
    %2101:ctrl, %2102:phisel = region %2094, %2100
    %2103:ctrl, %2104:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2101
    %2105:ctrl, %2106:ctrl = brcond %2103, %2104
    %2109:ctrl, %2110:i32 = load.4 %2105, %7
    %2111:i32 = iadd %2110, %8
    %2112:ctrl = store.4 %2109, %2111, %7
    %2115:ctrl, %2116:i32 = load.4 %2106, %6
    %2117:i32 = iadd %2116, %8
    %2118:ctrl = store.4 %2115, %2117, %6
    %2119:ctrl, %2120:phisel = region %2112, %2118
    %2121:ctrl, %2122:ptr = load.8 %2119, %28
    %2123:ctrl, %2124:i32 = load.4 %2121, %13
    %2125:i64 = iext %2124
    %2126:i64 = sfill 32 %2125
    %2128:i64 = iadd %2126, %17
    %2140:ptr = ptroff %2122, %2128
    %2129:ptr = ptroff %2122, %11
    %2130:ctrl, %2131:i64 = load.4 %2123, %2129
    %2132:i64 = icmp slt %2126, %2131
    %2133:ctrl, %2134:ctrl = brcond %2130, %2132
    %2141:ctrl, %2142:i32 = load.1 %2133, %2140
    %2143:ctrl, %2144:ctrl = brcond %2141, %2142
    %2147:ctrl, %2148:i32 = load.4 %2143, %7
    %2149:i32 = iadd %2148, %8
    %2150:ctrl = store.4 %2147, %2149, %7
    %2153:ctrl, %2154:i32 = load.4 %2144, %6
    %2155:i32 = iadd %2154, %8
    %2156:ctrl = store.4 %2153, %2155, %6
    %2157:ctrl, %2158:phisel = region %2150, %2156
    %2159:ctrl, %2160:ptr = load.8 %2157, %12
    %2161:ctrl, %2162:i32 = load.4 %2159, %13
    %2163:i64 = iext %2162
    %2164:i64 = sfill 32 %2163
    %2166:i64 = iadd %2164, %17
    %2178:ptr = ptroff %2160, %2166
    %2167:ptr = ptroff %2160, %11
    %2168:ctrl, %2169:i64 = load.4 %2161, %2167
    %2170:i64 = icmp slt %2164, %2169
    %2171:ctrl, %2172:ctrl = brcond %2168, %2170
    %2179:ctrl, %2180:i32 = load.1 %2171, %2178
    %2181:ctrl, %2182:ctrl = brcond %2179, %2180
    %2185:ctrl, %2186:i32 = load.4 %2181, %7
    %2187:i32 = iadd %2186, %8
    %2188:ctrl = store.4 %2185, %2187, %7
    %2191:ctrl, %2192:i32 = load.4 %2182, %6
    %2193:i32 = iadd %2192, %8
    %2194:ctrl = store.4 %2191, %2193, %6
    %2195:ctrl, %2196:phisel = region %2188, %2194
    %2197:ctrl, %2198:i32 = load.4 %2195, %7
    %2199:i32 = iadd %2198, %8
    %2200:ctrl = store.4 %2197, %2199, %7
    %2201:ctrl, %2202:i32 = load.4 %2200, %6
    %2203:i32 = iadd %2202, %8
    %2204:ctrl = store.4 %2201, %2203, %6
    %2205:ctrl, %2206:i32 = load.1 %2204, %31
    %2207:ctrl, %2208:ctrl = brcond %2205, %2206
    %2211:ctrl, %2212:i32 = load.4 %2207, %7
    %2213:i32 = iadd %2212, %8
    %2214:ctrl = store.4 %2211, %2213, %7
    %2217:ctrl, %2218:i32 = load.4 %2208, %6
    %2219:i32 = iadd %2218, %8
    %2220:ctrl = store.4 %2217, %2219, %6
    %2221:ctrl, %2222:phisel = region %2214, %2220
    %2223:ctrl, %2224:i32 = load.1 %2221, %30
    %2225:ctrl, %2226:ctrl = brcond %2223, %2224
    %2229:ctrl, %2230:i32 = load.4 %2225, %7
    %2231:i32 = iadd %2230, %8
    %2232:ctrl = store.4 %2229, %2231, %7
    %2235:ctrl, %2236:i32 = load.4 %2226, %6
    %2237:i32 = iadd %2236, %8
    %2238:ctrl = store.4 %2235, %2237, %6
    %2239:ctrl, %2240:phisel = region %2232, %2238
    %2241:ctrl, %2242:ptr = load.8 %2239, %29
    %2243:ptr = ptroff %2242, %11
    %2244:ctrl, %2245:i32 = load.1 %2241, %2243
    %2246:ctrl, %2247:ctrl = brcond %2244, %2245
    %2250:ctrl, %2251:i32 = load.4 %2246, %7
    %2252:i32 = iadd %2251, %8
    %2253:ctrl = store.4 %2250, %2252, %7
    %2256:ctrl, %2257:i32 = load.4 %2247, %6
    %2258:i32 = iadd %2257, %8
    %2259:ctrl = store.4 %2256, %2258, %6
    %2260:ctrl, %2261:phisel = region %2253, %2259
    %2262:ctrl, %2263:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2260
    %2264:ctrl, %2265:ctrl = brcond %2262, %2263
    %2268:ctrl, %2269:i32 = load.4 %2264, %7
    %2270:i32 = iadd %2269, %8
    %2271:ctrl = store.4 %2268, %2270, %7
    %2274:ctrl, %2275:i32 = load.4 %2265, %6
    %2276:i32 = iadd %2275, %8
    %2277:ctrl = store.4 %2274, %2276, %6
    %2278:ctrl, %2279:phisel = region %2271, %2277
    %2280:ctrl, %2281:ptr = load.8 %2278, %28
    %2282:ctrl, %2283:i32 = load.4 %2280, %13
    %2284:i64 = iext %2283
    %2285:i64 = sfill 32 %2284
    %2287:i64 = iadd %2285, %17
    %2299:ptr = ptroff %2281, %2287
    %2288:ptr = ptroff %2281, %11
    %2289:ctrl, %2290:i64 = load.4 %2282, %2288
    %2291:i64 = icmp slt %2285, %2290
    %2292:ctrl, %2293:ctrl = brcond %2289, %2291
    %2300:ctrl, %2301:i32 = load.1 %2292, %2299
    %2302:ctrl, %2303:ctrl = brcond %2300, %2301
    %2306:ctrl, %2307:i32 = load.4 %2302, %7
    %2308:i32 = iadd %2307, %8
    %2309:ctrl = store.4 %2306, %2308, %7
    %2312:ctrl, %2313:i32 = load.4 %2303, %6
    %2314:i32 = iadd %2313, %8
    %2315:ctrl = store.4 %2312, %2314, %6
    %2316:ctrl, %2317:phisel = region %2309, %2315
    %2318:ctrl, %2319:ptr = load.8 %2316, %12
    %2320:ctrl, %2321:i32 = load.4 %2318, %13
    %2322:i64 = iext %2321
    %2323:i64 = sfill 32 %2322
    %2325:i64 = iadd %2323, %17
    %2337:ptr = ptroff %2319, %2325
    %2326:ptr = ptroff %2319, %11
    %2327:ctrl, %2328:i64 = load.4 %2320, %2326
    %2329:i64 = icmp slt %2323, %2328
    %2330:ctrl, %2331:ctrl = brcond %2327, %2329
    %2338:ctrl, %2339:i32 = load.1 %2330, %2337
    %2340:ctrl, %2341:ctrl = brcond %2338, %2339
    %2344:ctrl, %2345:i32 = load.4 %2340, %7
    %2346:i32 = iadd %2345, %8
    %2347:ctrl = store.4 %2344, %2346, %7
    %2350:ctrl, %2351:i32 = load.4 %2341, %6
    %2352:i32 = iadd %2351, %8
    %2353:ctrl = store.4 %2350, %2352, %6
    %2354:ctrl, %2355:phisel = region %2347, %2353
    %2356:ctrl, %2357:i32 = load.4 %2354, %7
    %2358:i32 = iadd %2357, %8
    %2359:ctrl = store.4 %2356, %2358, %7
    %2360:ctrl, %2361:i32 = load.4 %2359, %6
    %2362:i32 = iadd %2361, %8
    %2363:ctrl = store.4 %2360, %2362, %6
    %2364:ctrl, %2365:i32 = load.1 %2363, %31
    %2366:ctrl, %2367:ctrl = brcond %2364, %2365
    %2370:ctrl, %2371:i32 = load.4 %2366, %7
    %2372:i32 = iadd %2371, %8
    %2373:ctrl = store.4 %2370, %2372, %7
    %2376:ctrl, %2377:i32 = load.4 %2367, %6
    %2378:i32 = iadd %2377, %8
    %2379:ctrl = store.4 %2376, %2378, %6
    %2380:ctrl, %2381:phisel = region %2373, %2379
    %2382:ctrl, %2383:i32 = load.1 %2380, %30
    %2384:ctrl, %2385:ctrl = brcond %2382, %2383
    %2388:ctrl, %2389:i32 = load.4 %2384, %7
    %2390:i32 = iadd %2389, %8
    %2391:ctrl = store.4 %2388, %2390, %7
    %2394:ctrl, %2395:i32 = load.4 %2385, %6
    %2396:i32 = iadd %2395, %8
    %2397:ctrl = store.4 %2394, %2396, %6
    %2398:ctrl, %2399:phisel = region %2391, %2397
    %2400:ctrl, %2401:ptr = load.8 %2398, %29
    %2402:ptr = ptroff %2401, %11
    %2403:ctrl, %2404:i32 = load.1 %2400, %2402
    %2405:ctrl, %2406:ctrl = brcond %2403, %2404
    %2409:ctrl, %2410:i32 = load.4 %2405, %7
    %2411:i32 = iadd %2410, %8
    %2412:ctrl = store.4 %2409, %2411, %7
    %2415:ctrl, %2416:i32 = load.4 %2406, %6
    %2417:i32 = iadd %2416, %8
    %2418:ctrl = store.4 %2415, %2417, %6
    %2419:ctrl, %2420:phisel = region %2412, %2418
    %2421:ctrl, %2422:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2419
    %2423:ctrl, %2424:ctrl = brcond %2421, %2422
    %2427:ctrl, %2428:i32 = load.4 %2423, %7
    %2429:i32 = iadd %2428, %8
    %2430:ctrl = store.4 %2427, %2429, %7
    %2433:ctrl, %2434:i32 = load.4 %2424, %6
    %2435:i32 = iadd %2434, %8
    %2436:ctrl = store.4 %2433, %2435, %6
    %2437:ctrl, %2438:phisel = region %2430, %2436
    %2439:ctrl, %2440:ptr = load.8 %2437, %28
    %2441:ctrl, %2442:i32 = load.4 %2439, %13
    %2443:i64 = iext %2442
    %2444:i64 = sfill 32 %2443
    %2446:i64 = iadd %2444, %17
    %2458:ptr = ptroff %2440, %2446
    %2447:ptr = ptroff %2440, %11
    %2448:ctrl, %2449:i64 = load.4 %2441, %2447
    %2450:i64 = icmp slt %2444, %2449
    %2451:ctrl, %2452:ctrl = brcond %2448, %2450
    %2459:ctrl, %2460:i32 = load.1 %2451, %2458
    %2461:ctrl, %2462:ctrl = brcond %2459, %2460
    %2465:ctrl, %2466:i32 = load.4 %2461, %7
    %2467:i32 = iadd %2466, %8
    %2468:ctrl = store.4 %2465, %2467, %7
    %2471:ctrl, %2472:i32 = load.4 %2462, %6
    %2473:i32 = iadd %2472, %8
    %2474:ctrl = store.4 %2471, %2473, %6
    %2475:ctrl, %2476:phisel = region %2468, %2474
    %2477:ctrl, %2478:ptr = load.8 %2475, %12
    %2479:ctrl, %2480:i32 = load.4 %2477, %13
    %2481:i64 = iext %2480
    %2482:i64 = sfill 32 %2481
    %2484:i64 = iadd %2482, %17
    %2496:ptr = ptroff %2478, %2484
    %2485:ptr = ptroff %2478, %11
    %2486:ctrl, %2487:i64 = load.4 %2479, %2485
    %2488:i64 = icmp slt %2482, %2487
    %2489:ctrl, %2490:ctrl = brcond %2486, %2488
    %2497:ctrl, %2498:i32 = load.1 %2489, %2496
    %2499:ctrl, %2500:ctrl = brcond %2497, %2498
    %2503:ctrl, %2504:i32 = load.4 %2499, %7
    %2505:i32 = iadd %2504, %8
    %2506:ctrl = store.4 %2503, %2505, %7
    %2509:ctrl, %2510:i32 = load.4 %2500, %6
    %2511:i32 = iadd %2510, %8
    %2512:ctrl = store.4 %2509, %2511, %6
    %2513:ctrl, %2514:phisel = region %2506, %2512
    %2515:ctrl, %2516:i32 = load.4 %2513, %7
    %2517:i32 = iadd %2516, %8
    %2518:ctrl = store.4 %2515, %2517, %7
    %2519:ctrl, %2520:i32 = load.4 %2518, %6
    %2521:i32 = iadd %2520, %8
    %2522:ctrl = store.4 %2519, %2521, %6
    %2523:ctrl, %2524:i32 = load.1 %2522, %31
    %2525:ctrl, %2526:ctrl = brcond %2523, %2524
    %2529:ctrl, %2530:i32 = load.4 %2525, %7
    %2531:i32 = iadd %2530, %8
    %2532:ctrl = store.4 %2529, %2531, %7
    %2535:ctrl, %2536:i32 = load.4 %2526, %6
    %2537:i32 = iadd %2536, %8
    %2538:ctrl = store.4 %2535, %2537, %6
    %2539:ctrl, %2540:phisel = region %2532, %2538
    %2541:ctrl, %2542:i32 = load.1 %2539, %30
    %2543:ctrl, %2544:ctrl = brcond %2541, %2542
    %2547:ctrl, %2548:i32 = load.4 %2543, %7
    %2549:i32 = iadd %2548, %8
    %2550:ctrl = store.4 %2547, %2549, %7
    %2553:ctrl, %2554:i32 = load.4 %2544, %6
    %2555:i32 = iadd %2554, %8
    %2556:ctrl = store.4 %2553, %2555, %6
    %2557:ctrl, %2558:phisel = region %2550, %2556
    %2559:ctrl, %2560:ptr = load.8 %2557, %29
    %2561:ptr = ptroff %2560, %11
    %2562:ctrl, %2563:i32 = load.1 %2559, %2561
    %2564:ctrl, %2565:ctrl = brcond %2562, %2563
    %2568:ctrl, %2569:i32 = load.4 %2564, %7
    %2570:i32 = iadd %2569, %8
    %2571:ctrl = store.4 %2568, %2570, %7
    %2574:ctrl, %2575:i32 = load.4 %2565, %6
    %2576:i32 = iadd %2575, %8
    %2577:ctrl = store.4 %2574, %2576, %6
    %2578:ctrl, %2579:phisel = region %2571, %2577
    %2580:ctrl, %2581:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2578
    %2582:ctrl, %2583:ctrl = brcond %2580, %2581
    %2586:ctrl, %2587:i32 = load.4 %2582, %7
    %2588:i32 = iadd %2587, %8
    %2589:ctrl = store.4 %2586, %2588, %7
    %2592:ctrl, %2593:i32 = load.4 %2583, %6
    %2594:i32 = iadd %2593, %8
    %2595:ctrl = store.4 %2592, %2594, %6
    %2596:ctrl, %2597:phisel = region %2589, %2595
    %2598:ctrl, %2599:ptr = load.8 %2596, %28
    %2600:ctrl, %2601:i32 = load.4 %2598, %13
    %2602:i64 = iext %2601
    %2603:i64 = sfill 32 %2602
    %2605:i64 = iadd %2603, %17
    %2617:ptr = ptroff %2599, %2605
    %2606:ptr = ptroff %2599, %11
    %2607:ctrl, %2608:i64 = load.4 %2600, %2606
    %2609:i64 = icmp slt %2603, %2608
    %2610:ctrl, %2611:ctrl = brcond %2607, %2609
    %2618:ctrl, %2619:i32 = load.1 %2610, %2617
    %2620:ctrl, %2621:ctrl = brcond %2618, %2619
    %2624:ctrl, %2625:i32 = load.4 %2620, %7
    %2626:i32 = iadd %2625, %8
    %2627:ctrl = store.4 %2624, %2626, %7
    %2630:ctrl, %2631:i32 = load.4 %2621, %6
    %2632:i32 = iadd %2631, %8
    %2633:ctrl = store.4 %2630, %2632, %6
    %2634:ctrl, %2635:phisel = region %2627, %2633
    %2636:ctrl, %2637:ptr = load.8 %2634, %12
    %2638:ctrl, %2639:i32 = load.4 %2636, %13
    %2640:i64 = iext %2639
    %2641:i64 = sfill 32 %2640
    %2643:i64 = iadd %2641, %17
    %2655:ptr = ptroff %2637, %2643
    %2644:ptr = ptroff %2637, %11
    %2645:ctrl, %2646:i64 = load.4 %2638, %2644
    %2647:i64 = icmp slt %2641, %2646
    %2648:ctrl, %2649:ctrl = brcond %2645, %2647
    %2656:ctrl, %2657:i32 = load.1 %2648, %2655
    %2658:ctrl, %2659:ctrl = brcond %2656, %2657
    %2662:ctrl, %2663:i32 = load.4 %2658, %7
    %2664:i32 = iadd %2663, %8
    %2665:ctrl = store.4 %2662, %2664, %7
    %2668:ctrl, %2669:i32 = load.4 %2659, %6
    %2670:i32 = iadd %2669, %8
    %2671:ctrl = store.4 %2668, %2670, %6
    %2672:ctrl, %2673:phisel = region %2665, %2671
    %2866:ctrl, %2867:ctrl = brcond %2672, %8
    %2872:ctrl, %2873:phisel = region %2867, %2866
    %2877:ctrl, %2878:ctrl = brcond %2872, %8
    %2881:ctrl, %2882:i32 = load.4 %2877, %7
    %2883:i32 = iadd %2882, %8
    %2884:ctrl = store.4 %2881, %2883, %7
    %2887:ctrl, %2888:i32 = load.4 %2878, %6
    %2889:i32 = iadd %2888, %8
    %2890:ctrl = store.4 %2887, %2889, %6
    %2891:ctrl, %2892:phisel = region %2884, %2890
    %2896:ctrl, %2897:ctrl = brcond %2891, %8
    %2900:ctrl, %2901:i32 = load.4 %2896, %7
    %2902:i32 = iadd %2901, %8
    %2903:ctrl = store.4 %2900, %2902, %7
    %2906:ctrl, %2907:i32 = load.4 %2897, %6
    %2908:i32 = iadd %2907, %8
    %2909:ctrl = store.4 %2906, %2908, %6
    %2910:ctrl, %2911:phisel = region %2903, %2909
    %2914:ctrl, %2915:ctrl = brcond %2910, %8
    %2920:ctrl, %2921:i32 = load.1 %2915, %31
    %2922:ctrl, %2923:phisel = region %2920, %2914
    %2926:i32 = phi %2923, %2921, %8
    %2927:ctrl, %2928:ctrl = brcond %2922, %2926
    %2931:ctrl, %2932:i32 = load.4 %2927, %7
    %2933:i32 = iadd %2932, %8
    %2934:ctrl = store.4 %2931, %2933, %7
    %2937:ctrl, %2938:i32 = load.4 %2928, %6
    %2939:i32 = iadd %2938, %8
    %2940:ctrl = store.4 %2937, %2939, %6
    %2941:ctrl, %2942:phisel = region %2934, %2940
    %2945:ctrl, %2946:ctrl = brcond %2941, %8
    %2951:ctrl, %2952:i32 = load.1 %2946, %30
    %2953:ctrl, %2954:phisel = region %2951, %2945
    %2957:i32 = phi %2954, %2952, %8
    %2958:ctrl, %2959:ctrl = brcond %2953, %2957
    %2962:ctrl, %2963:i32 = load.4 %2958, %7
    %2964:i32 = iadd %2963, %8
    %2965:ctrl = store.4 %2962, %2964, %7
    %2968:ctrl, %2969:i32 = load.4 %2959, %6
    %2970:i32 = iadd %2969, %8
    %2971:ctrl = store.4 %2968, %2970, %6
    %2972:ctrl, %2973:phisel = region %2965, %2971
    %2976:ctrl, %2977:ctrl = brcond %2972, %8
    %2982:ctrl, %2983:ptr = load.8 %2977, %29
    %2984:ptr = ptroff %2983, %11
    %2985:ctrl, %2986:i32 = load.1 %2982, %2984
    %2987:ctrl, %2988:phisel = region %2985, %2976
    %2991:i32 = phi %2988, %2986, %8
    %2992:ctrl, %2993:ctrl = brcond %2987, %2991
    %2996:ctrl, %2997:i32 = load.4 %2992, %7
    %2998:i32 = iadd %2997, %8
    %2999:ctrl = store.4 %2996, %2998, %7
    %3002:ctrl, %3003:i32 = load.4 %2993, %6
    %3004:i32 = iadd %3003, %8
    %3005:ctrl = store.4 %3002, %3004, %6
    %3006:ctrl, %3007:phisel = region %2999, %3005
    %3010:ctrl, %3011:ctrl = brcond %3006, %8
    %3016:ctrl, %3017:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3011
    %3018:ctrl, %3019:phisel = region %3016, %3010
    %3022:i32 = phi %3019, %3017, %8
    %3023:ctrl, %3024:ctrl = brcond %3018, %3022
    %3027:ctrl, %3028:i32 = load.4 %3023, %7
    %3029:i32 = iadd %3028, %8
    %3030:ctrl = store.4 %3027, %3029, %7
    %3033:ctrl, %3034:i32 = load.4 %3024, %6
    %3035:i32 = iadd %3034, %8
    %3036:ctrl = store.4 %3033, %3035, %6
    %3037:ctrl, %3038:phisel = region %3030, %3036
    %3041:ctrl, %3042:ctrl = brcond %3037, %8
    %3047:ctrl, %3048:ptr = load.8 %3042, %28
    %3049:ctrl, %3050:i32 = load.4 %3047, %13
    %3051:i64 = iext %3050
    %3052:i64 = sfill 32 %3051
    %3054:i64 = iadd %3052, %17
    %3066:ptr = ptroff %3048, %3054
    %3055:ptr = ptroff %3048, %11
    %3056:ctrl, %3057:i64 = load.4 %3049, %3055
    %3058:i64 = icmp slt %3052, %3057
    %3059:ctrl, %3060:ctrl = brcond %3056, %3058
    %3067:ctrl, %3068:i32 = load.1 %3059, %3066
    %3069:ctrl, %3070:phisel = region %3067, %3041
    %3073:i32 = phi %3070, %3068, %8
    %3074:ctrl, %3075:ctrl = brcond %3069, %3073
    %3078:ctrl, %3079:i32 = load.4 %3074, %7
    %3080:i32 = iadd %3079, %8
    %3081:ctrl = store.4 %3078, %3080, %7
    %3084:ctrl, %3085:i32 = load.4 %3075, %6
    %3086:i32 = iadd %3085, %8
    %3087:ctrl = store.4 %3084, %3086, %6
    %3088:ctrl, %3089:phisel = region %3081, %3087
    %3092:ctrl, %3093:ctrl = brcond %3088, %8
    %3098:ctrl, %3099:ptr = load.8 %3093, %12
    %3100:ctrl, %3101:i32 = load.4 %3098, %13
    %3102:i64 = iext %3101
    %3103:i64 = sfill 32 %3102
    %3105:i64 = iadd %3103, %17
    %3117:ptr = ptroff %3099, %3105
    %3106:ptr = ptroff %3099, %11
    %3107:ctrl, %3108:i64 = load.4 %3100, %3106
    %3109:i64 = icmp slt %3103, %3108
    %3110:ctrl, %3111:ctrl = brcond %3107, %3109
    %3118:ctrl, %3119:i32 = load.1 %3110, %3117
    %3120:ctrl, %3121:phisel = region %3118, %3092
    %3124:i32 = phi %3121, %3119, %8
    %3125:ctrl, %3126:ctrl = brcond %3120, %3124
    %3129:ctrl, %3130:i32 = load.4 %3125, %7
    %3131:i32 = iadd %3130, %8
    %3132:ctrl = store.4 %3129, %3131, %7
    %3135:ctrl, %3136:i32 = load.4 %3126, %6
    %3137:i32 = iadd %3136, %8
    %3138:ctrl = store.4 %3135, %3137, %6
    %3139:ctrl, %3140:phisel = region %3132, %3138
    %3144:ctrl, %3145:ctrl = brcond %3139, %20
    %3148:ctrl, %3149:i32 = load.4 %3144, %7
    %3150:i32 = iadd %3149, %8
    %3151:ctrl = store.4 %3148, %3150, %7
    %3154:ctrl, %3155:i32 = load.4 %3145, %6
    %3156:i32 = iadd %3155, %8
    %3157:ctrl = store.4 %3154, %3156, %6
    %3158:ctrl, %3159:phisel = region %3151, %3157
    %3162:ctrl, %3163:ctrl = brcond %3158, %8
    %3168:ctrl, %3169:phisel = region %3163, %3162
    %3173:ctrl, %3174:ctrl = brcond %3168, %20
    %3177:ctrl, %3178:i32 = load.4 %3173, %7
    %3179:i32 = iadd %3178, %8
    %3180:ctrl = store.4 %3177, %3179, %7
    %3183:ctrl, %3184:i32 = load.4 %3174, %6
    %3185:i32 = iadd %3184, %8
    %3186:ctrl = store.4 %3183, %3185, %6
    %3187:ctrl, %3188:phisel = region %3180, %3186
    %3191:ctrl, %3192:ctrl = brcond %3187, %8
    %3197:ctrl, %3198:i32 = load.1 %3192, %31
    %3199:ctrl, %3200:phisel = region %3197, %3191
    %3203:i32 = phi %3200, %3198, %20
    %3204:ctrl, %3205:ctrl = brcond %3199, %3203
    %3208:ctrl, %3209:i32 = load.4 %3204, %7
    %3210:i32 = iadd %3209, %8
    %3211:ctrl = store.4 %3208, %3210, %7
    %3214:ctrl, %3215:i32 = load.4 %3205, %6
    %3216:i32 = iadd %3215, %8
    %3217:ctrl = store.4 %3214, %3216, %6
    %3218:ctrl, %3219:phisel = region %3211, %3217
    %3222:ctrl, %3223:ctrl = brcond %3218, %8
    %3228:ctrl, %3229:i32 = load.1 %3223, %30
    %3230:ctrl, %3231:phisel = region %3228, %3222
    %3234:i32 = phi %3231, %3229, %20
    %3235:ctrl, %3236:ctrl = brcond %3230, %3234
    %3239:ctrl, %3240:i32 = load.4 %3235, %7
    %3241:i32 = iadd %3240, %8
    %3242:ctrl = store.4 %3239, %3241, %7
    %3245:ctrl, %3246:i32 = load.4 %3236, %6
    %3247:i32 = iadd %3246, %8
    %3248:ctrl = store.4 %3245, %3247, %6
    %3249:ctrl, %3250:phisel = region %3242, %3248
    %3253:ctrl, %3254:ctrl = brcond %3249, %8
    %3259:ctrl, %3260:ptr = load.8 %3254, %29
    %3261:ptr = ptroff %3260, %11
    %3262:ctrl, %3263:i32 = load.1 %3259, %3261
    %3264:ctrl, %3265:phisel = region %3262, %3253
    %3268:i32 = phi %3265, %3263, %20
    %3269:ctrl, %3270:ctrl = brcond %3264, %3268
    %3273:ctrl, %3274:i32 = load.4 %3269, %7
    %3275:i32 = iadd %3274, %8
    %3276:ctrl = store.4 %3273, %3275, %7
    %3279:ctrl, %3280:i32 = load.4 %3270, %6
    %3281:i32 = iadd %3280, %8
    %3282:ctrl = store.4 %3279, %3281, %6
    %3283:ctrl, %3284:phisel = region %3276, %3282
    %3287:ctrl, %3288:ctrl = brcond %3283, %8
    %3293:ctrl, %3294:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3288
    %3295:ctrl, %3296:phisel = region %3293, %3287
    %3299:i32 = phi %3296, %3294, %20
    %3300:ctrl, %3301:ctrl = brcond %3295, %3299
    %3304:ctrl, %3305:i32 = load.4 %3300, %7
    %3306:i32 = iadd %3305, %8
    %3307:ctrl = store.4 %3304, %3306, %7
    %3310:ctrl, %3311:i32 = load.4 %3301, %6
    %3312:i32 = iadd %3311, %8
    %3313:ctrl = store.4 %3310, %3312, %6
    %3314:ctrl, %3315:phisel = region %3307, %3313
    %3318:ctrl, %3319:ctrl = brcond %3314, %8
    %3324:ctrl, %3325:ptr = load.8 %3319, %28
    %3326:ctrl, %3327:i32 = load.4 %3324, %13
    %3328:i64 = iext %3327
    %3329:i64 = sfill 32 %3328
    %3331:i64 = iadd %3329, %17
    %3343:ptr = ptroff %3325, %3331
    %3332:ptr = ptroff %3325, %11
    %3333:ctrl, %3334:i64 = load.4 %3326, %3332
    %3335:i64 = icmp slt %3329, %3334
    %3336:ctrl, %3337:ctrl = brcond %3333, %3335
    %3344:ctrl, %3345:i32 = load.1 %3336, %3343
    %3346:ctrl, %3347:phisel = region %3344, %3318
    %3350:i32 = phi %3347, %3345, %20
    %3351:ctrl, %3352:ctrl = brcond %3346, %3350
    %3355:ctrl, %3356:i32 = load.4 %3351, %7
    %3357:i32 = iadd %3356, %8
    %3358:ctrl = store.4 %3355, %3357, %7
    %3361:ctrl, %3362:i32 = load.4 %3352, %6
    %3363:i32 = iadd %3362, %8
    %3364:ctrl = store.4 %3361, %3363, %6
    %3365:ctrl, %3366:phisel = region %3358, %3364
    %3369:ctrl, %3370:ctrl = brcond %3365, %8
    %3375:ctrl, %3376:ptr = load.8 %3370, %12
    %3377:ctrl, %3378:i32 = load.4 %3375, %13
    %3379:i64 = iext %3378
    %3380:i64 = sfill 32 %3379
    %3382:i64 = iadd %3380, %17
    %3394:ptr = ptroff %3376, %3382
    %3383:ptr = ptroff %3376, %11
    %3384:ctrl, %3385:i64 = load.4 %3377, %3383
    %3386:i64 = icmp slt %3380, %3385
    %3387:ctrl, %3388:ctrl = brcond %3384, %3386
    %3395:ctrl, %3396:i32 = load.1 %3387, %3394
    %3397:ctrl, %3398:phisel = region %3395, %3369
    %3401:i32 = phi %3398, %3396, %20
    %3402:ctrl, %3403:ctrl = brcond %3397, %3401
    %3406:ctrl, %3407:i32 = load.4 %3402, %7
    %3408:i32 = iadd %3407, %8
    %3409:ctrl = store.4 %3406, %3408, %7
    %3412:ctrl, %3413:i32 = load.4 %3403, %6
    %3414:i32 = iadd %3413, %8
    %3415:ctrl = store.4 %3412, %3414, %6
    %3416:ctrl, %3417:phisel = region %3409, %3415
    %3420:ctrl, %3421:ctrl = brcond %3416, %8
    %3424:ctrl, %3425:i32 = load.1 %3420, %31
    %3428:ctrl, %3429:phisel = region %3421, %3424
    %3432:i32 = phi %3429, %8, %3425
    %3433:ctrl, %3434:ctrl = brcond %3428, %3432
    %3437:ctrl, %3438:i32 = load.4 %3433, %7
    %3439:i32 = iadd %3438, %8
    %3440:ctrl = store.4 %3437, %3439, %7
    %3443:ctrl, %3444:i32 = load.4 %3434, %6
    %3445:i32 = iadd %3444, %8
    %3446:ctrl = store.4 %3443, %3445, %6
    %3447:ctrl, %3448:phisel = region %3440, %3446
    %3451:ctrl, %3452:ctrl = brcond %3447, %8
    %3455:ctrl, %3456:i32 = load.1 %3451, %31
    %3459:ctrl, %3460:phisel = region %3452, %3455
    %3463:i32 = phi %3460, %20, %3456
    %3464:ctrl, %3465:ctrl = brcond %3459, %3463
    %3468:ctrl, %3469:i32 = load.4 %3464, %7
    %3470:i32 = iadd %3469, %8
    %3471:ctrl = store.4 %3468, %3470, %7
    %3474:ctrl, %3475:i32 = load.4 %3465, %6
    %3476:i32 = iadd %3475, %8
    %3477:ctrl = store.4 %3474, %3476, %6
    %3478:ctrl, %3479:phisel = region %3471, %3477
    %3482:ctrl, %3483:ctrl = brcond %3478, %8
    %3486:ctrl, %3487:i32 = load.1 %3482, %31
    %3490:ctrl, %3491:i32 = load.1 %3483, %31
    %3492:ctrl, %3493:phisel = region %3490, %3486
    %3496:i32 = phi %3493, %3491, %3487
    %3497:ctrl, %3498:ctrl = brcond %3492, %3496
    %3501:ctrl, %3502:i32 = load.4 %3497, %7
    %3503:i32 = iadd %3502, %8
    %3504:ctrl = store.4 %3501, %3503, %7
    %3507:ctrl, %3508:i32 = load.4 %3498, %6
    %3509:i32 = iadd %3508, %8
    %3510:ctrl = store.4 %3507, %3509, %6
    %3511:ctrl, %3512:phisel = region %3504, %3510
    %3515:ctrl, %3516:ctrl = brcond %3511, %8
    %3519:ctrl, %3520:i32 = load.1 %3515, %31
    %3523:ctrl, %3524:i32 = load.1 %3516, %30
    %3525:ctrl, %3526:phisel = region %3523, %3519
    %3529:i32 = phi %3526, %3524, %3520
    %3530:ctrl, %3531:ctrl = brcond %3525, %3529
    %3534:ctrl, %3535:i32 = load.4 %3530, %7
    %3536:i32 = iadd %3535, %8
    %3537:ctrl = store.4 %3534, %3536, %7
    %3540:ctrl, %3541:i32 = load.4 %3531, %6
    %3542:i32 = iadd %3541, %8
    %3543:ctrl = store.4 %3540, %3542, %6
    %3544:ctrl, %3545:phisel = region %3537, %3543
    %3548:ctrl, %3549:ctrl = brcond %3544, %8
    %3552:ctrl, %3553:i32 = load.1 %3548, %31
    %3556:ctrl, %3557:ptr = load.8 %3549, %29
    %3558:ptr = ptroff %3557, %11
    %3559:ctrl, %3560:i32 = load.1 %3556, %3558
    %3561:ctrl, %3562:phisel = region %3559, %3552
    %3565:i32 = phi %3562, %3560, %3553
    %3566:ctrl, %3567:ctrl = brcond %3561, %3565
    %3570:ctrl, %3571:i32 = load.4 %3566, %7
    %3572:i32 = iadd %3571, %8
    %3573:ctrl = store.4 %3570, %3572, %7
    %3576:ctrl, %3577:i32 = load.4 %3567, %6
    %3578:i32 = iadd %3577, %8
    %3579:ctrl = store.4 %3576, %3578, %6
    %3580:ctrl, %3581:phisel = region %3573, %3579
    %3584:ctrl, %3585:ctrl = brcond %3580, %8
    %3588:ctrl, %3589:i32 = load.1 %3584, %31
    %3592:ctrl, %3593:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3585
    %3594:ctrl, %3595:phisel = region %3592, %3588
    %3598:i32 = phi %3595, %3593, %3589
    %3599:ctrl, %3600:ctrl = brcond %3594, %3598
    %3603:ctrl, %3604:i32 = load.4 %3599, %7
    %3605:i32 = iadd %3604, %8
    %3606:ctrl = store.4 %3603, %3605, %7
    %3609:ctrl, %3610:i32 = load.4 %3600, %6
    %3611:i32 = iadd %3610, %8
    %3612:ctrl = store.4 %3609, %3611, %6
    %3613:ctrl, %3614:phisel = region %3606, %3612
    %3617:ctrl, %3618:ctrl = brcond %3613, %8
    %3621:ctrl, %3622:i32 = load.1 %3617, %31
    %3625:ctrl, %3626:ptr = load.8 %3618, %28
    %3627:ctrl, %3628:i32 = load.4 %3625, %13
    %3629:i64 = iext %3628
    %3630:i64 = sfill 32 %3629
    %3632:i64 = iadd %3630, %17
    %3644:ptr = ptroff %3626, %3632
    %3633:ptr = ptroff %3626, %11
    %3634:ctrl, %3635:i64 = load.4 %3627, %3633
    %3636:i64 = icmp slt %3630, %3635
    %3637:ctrl, %3638:ctrl = brcond %3634, %3636
    %3645:ctrl, %3646:i32 = load.1 %3637, %3644
    %3647:ctrl, %3648:phisel = region %3645, %3621
    %3651:i32 = phi %3648, %3646, %3622
    %3652:ctrl, %3653:ctrl = brcond %3647, %3651
    %3656:ctrl, %3657:i32 = load.4 %3652, %7
    %3658:i32 = iadd %3657, %8
    %3659:ctrl = store.4 %3656, %3658, %7
    %3662:ctrl, %3663:i32 = load.4 %3653, %6
    %3664:i32 = iadd %3663, %8
    %3665:ctrl = store.4 %3662, %3664, %6
    %3666:ctrl, %3667:phisel = region %3659, %3665
    %3670:ctrl, %3671:ctrl = brcond %3666, %8
    %3674:ctrl, %3675:i32 = load.1 %3670, %31
    %3678:ctrl, %3679:ptr = load.8 %3671, %12
    %3680:ctrl, %3681:i32 = load.4 %3678, %13
    %3682:i64 = iext %3681
    %3683:i64 = sfill 32 %3682
    %3685:i64 = iadd %3683, %17
    %3697:ptr = ptroff %3679, %3685
    %3686:ptr = ptroff %3679, %11
    %3687:ctrl, %3688:i64 = load.4 %3680, %3686
    %3689:i64 = icmp slt %3683, %3688
    %3690:ctrl, %3691:ctrl = brcond %3687, %3689
    %3698:ctrl, %3699:i32 = load.1 %3690, %3697
    %3700:ctrl, %3701:phisel = region %3698, %3674
    %3704:i32 = phi %3701, %3699, %3675
    %3705:ctrl, %3706:ctrl = brcond %3700, %3704
    %3709:ctrl, %3710:i32 = load.4 %3705, %7
    %3711:i32 = iadd %3710, %8
    %3712:ctrl = store.4 %3709, %3711, %7
    %3715:ctrl, %3716:i32 = load.4 %3706, %6
    %3717:i32 = iadd %3716, %8
    %3718:ctrl = store.4 %3715, %3717, %6
    %3719:ctrl, %3720:phisel = region %3712, %3718
    %3723:ctrl, %3724:ctrl = brcond %3719, %8
    %3727:ctrl, %3728:i32 = load.1 %3723, %30
    %3731:ctrl, %3732:phisel = region %3724, %3727
    %3735:i32 = phi %3732, %8, %3728
    %3736:ctrl, %3737:ctrl = brcond %3731, %3735
    %3740:ctrl, %3741:i32 = load.4 %3736, %7
    %3742:i32 = iadd %3741, %8
    %3743:ctrl = store.4 %3740, %3742, %7
    %3746:ctrl, %3747:i32 = load.4 %3737, %6
    %3748:i32 = iadd %3747, %8
    %3749:ctrl = store.4 %3746, %3748, %6
    %3750:ctrl, %3751:phisel = region %3743, %3749
    %3754:ctrl, %3755:ctrl = brcond %3750, %8
    %3758:ctrl, %3759:i32 = load.1 %3754, %30
    %3762:ctrl, %3763:phisel = region %3755, %3758
    %3766:i32 = phi %3763, %20, %3759
    %3767:ctrl, %3768:ctrl = brcond %3762, %3766
    %3771:ctrl, %3772:i32 = load.4 %3767, %7
    %3773:i32 = iadd %3772, %8
    %3774:ctrl = store.4 %3771, %3773, %7
    %3777:ctrl, %3778:i32 = load.4 %3768, %6
    %3779:i32 = iadd %3778, %8
    %3780:ctrl = store.4 %3777, %3779, %6
    %3781:ctrl, %3782:phisel = region %3774, %3780
    %3785:ctrl, %3786:ctrl = brcond %3781, %8
    %3789:ctrl, %3790:i32 = load.1 %3785, %30
    %3793:ctrl, %3794:i32 = load.1 %3786, %31
    %3795:ctrl, %3796:phisel = region %3793, %3789
    %3799:i32 = phi %3796, %3794, %3790
    %3800:ctrl, %3801:ctrl = brcond %3795, %3799
    %3804:ctrl, %3805:i32 = load.4 %3800, %7
    %3806:i32 = iadd %3805, %8
    %3807:ctrl = store.4 %3804, %3806, %7
    %3810:ctrl, %3811:i32 = load.4 %3801, %6
    %3812:i32 = iadd %3811, %8
    %3813:ctrl = store.4 %3810, %3812, %6
    %3814:ctrl, %3815:phisel = region %3807, %3813
    %3818:ctrl, %3819:ctrl = brcond %3814, %8
    %3822:ctrl, %3823:i32 = load.1 %3818, %30
    %3826:ctrl, %3827:i32 = load.1 %3819, %30
    %3828:ctrl, %3829:phisel = region %3826, %3822
    %3832:i32 = phi %3829, %3827, %3823
    %3833:ctrl, %3834:ctrl = brcond %3828, %3832
    %3837:ctrl, %3838:i32 = load.4 %3833, %7
    %3839:i32 = iadd %3838, %8
    %3840:ctrl = store.4 %3837, %3839, %7
    %3843:ctrl, %3844:i32 = load.4 %3834, %6
    %3845:i32 = iadd %3844, %8
    %3846:ctrl = store.4 %3843, %3845, %6
    %3847:ctrl, %3848:phisel = region %3840, %3846
    %3851:ctrl, %3852:ctrl = brcond %3847, %8
    %3855:ctrl, %3856:i32 = load.1 %3851, %30
    %3859:ctrl, %3860:ptr = load.8 %3852, %29
    %3861:ptr = ptroff %3860, %11
    %3862:ctrl, %3863:i32 = load.1 %3859, %3861
    %3864:ctrl, %3865:phisel = region %3862, %3855
    %3868:i32 = phi %3865, %3863, %3856
    %3869:ctrl, %3870:ctrl = brcond %3864, %3868
    %3873:ctrl, %3874:i32 = load.4 %3869, %7
    %3875:i32 = iadd %3874, %8
    %3876:ctrl = store.4 %3873, %3875, %7
    %3879:ctrl, %3880:i32 = load.4 %3870, %6
    %3881:i32 = iadd %3880, %8
    %3882:ctrl = store.4 %3879, %3881, %6
    %3883:ctrl, %3884:phisel = region %3876, %3882
    %3887:ctrl, %3888:ctrl = brcond %3883, %8
    %3891:ctrl, %3892:i32 = load.1 %3887, %30
    %3895:ctrl, %3896:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3888
    %3897:ctrl, %3898:phisel = region %3895, %3891
    %3901:i32 = phi %3898, %3896, %3892
    %3902:ctrl, %3903:ctrl = brcond %3897, %3901
    %3906:ctrl, %3907:i32 = load.4 %3902, %7
    %3908:i32 = iadd %3907, %8
    %3909:ctrl = store.4 %3906, %3908, %7
    %3912:ctrl, %3913:i32 = load.4 %3903, %6
    %3914:i32 = iadd %3913, %8
    %3915:ctrl = store.4 %3912, %3914, %6
    %3916:ctrl, %3917:phisel = region %3909, %3915
    %3920:ctrl, %3921:ctrl = brcond %3916, %8
    %3924:ctrl, %3925:i32 = load.1 %3920, %30
    %3928:ctrl, %3929:ptr = load.8 %3921, %28
    %3930:ctrl, %3931:i32 = load.4 %3928, %13
    %3932:i64 = iext %3931
    %3933:i64 = sfill 32 %3932
    %3935:i64 = iadd %3933, %17
    %3947:ptr = ptroff %3929, %3935
    %3936:ptr = ptroff %3929, %11
    %3937:ctrl, %3938:i64 = load.4 %3930, %3936
    %3939:i64 = icmp slt %3933, %3938
    %3940:ctrl, %3941:ctrl = brcond %3937, %3939
    %3948:ctrl, %3949:i32 = load.1 %3940, %3947
    %3950:ctrl, %3951:phisel = region %3948, %3924
    %3954:i32 = phi %3951, %3949, %3925
    %3955:ctrl, %3956:ctrl = brcond %3950, %3954
    %3959:ctrl, %3960:i32 = load.4 %3955, %7
    %3961:i32 = iadd %3960, %8
    %3962:ctrl = store.4 %3959, %3961, %7
    %3965:ctrl, %3966:i32 = load.4 %3956, %6
    %3967:i32 = iadd %3966, %8
    %3968:ctrl = store.4 %3965, %3967, %6
    %3969:ctrl, %3970:phisel = region %3962, %3968
    %3973:ctrl, %3974:ctrl = brcond %3969, %8
    %3977:ctrl, %3978:i32 = load.1 %3973, %30
    %3981:ctrl, %3982:ptr = load.8 %3974, %12
    %3983:ctrl, %3984:i32 = load.4 %3981, %13
    %3985:i64 = iext %3984
    %3986:i64 = sfill 32 %3985
    %3988:i64 = iadd %3986, %17
    %4000:ptr = ptroff %3982, %3988
    %3989:ptr = ptroff %3982, %11
    %3990:ctrl, %3991:i64 = load.4 %3983, %3989
    %3992:i64 = icmp slt %3986, %3991
    %3993:ctrl, %3994:ctrl = brcond %3990, %3992
    %4001:ctrl, %4002:i32 = load.1 %3993, %4000
    %4003:ctrl, %4004:phisel = region %4001, %3977
    %4007:i32 = phi %4004, %4002, %3978
    %4008:ctrl, %4009:ctrl = brcond %4003, %4007
    %4012:ctrl, %4013:i32 = load.4 %4008, %7
    %4014:i32 = iadd %4013, %8
    %4015:ctrl = store.4 %4012, %4014, %7
    %4018:ctrl, %4019:i32 = load.4 %4009, %6
    %4020:i32 = iadd %4019, %8
    %4021:ctrl = store.4 %4018, %4020, %6
    %4022:ctrl, %4023:phisel = region %4015, %4021
    %4026:ctrl, %4027:ctrl = brcond %4022, %8
    %4030:ctrl, %4031:ptr = load.8 %4026, %29
    %4032:ptr = ptroff %4031, %11
    %4033:ctrl, %4034:i32 = load.1 %4030, %4032
    %4037:ctrl, %4038:phisel = region %4027, %4033
    %4041:i32 = phi %4038, %8, %4034
    %4042:ctrl, %4043:ctrl = brcond %4037, %4041
    %4046:ctrl, %4047:i32 = load.4 %4042, %7
    %4048:i32 = iadd %4047, %8
    %4049:ctrl = store.4 %4046, %4048, %7
    %4052:ctrl, %4053:i32 = load.4 %4043, %6
    %4054:i32 = iadd %4053, %8
    %4055:ctrl = store.4 %4052, %4054, %6
    %4056:ctrl, %4057:phisel = region %4049, %4055
    %4060:ctrl, %4061:ctrl = brcond %4056, %8
    %4064:ctrl, %4065:ptr = load.8 %4060, %29
    %4066:ptr = ptroff %4065, %11
    %4067:ctrl, %4068:i32 = load.1 %4064, %4066
    %4071:ctrl, %4072:phisel = region %4061, %4067
    %4075:i32 = phi %4072, %20, %4068
    %4076:ctrl, %4077:ctrl = brcond %4071, %4075
    %4080:ctrl, %4081:i32 = load.4 %4076, %7
    %4082:i32 = iadd %4081, %8
    %4083:ctrl = store.4 %4080, %4082, %7
    %4086:ctrl, %4087:i32 = load.4 %4077, %6
    %4088:i32 = iadd %4087, %8
    %4089:ctrl = store.4 %4086, %4088, %6
    %4090:ctrl, %4091:phisel = region %4083, %4089
    %4094:ctrl, %4095:ctrl = brcond %4090, %8
    %4098:ctrl, %4099:ptr = load.8 %4094, %29
    %4100:ptr = ptroff %4099, %11
    %4101:ctrl, %4102:i32 = load.1 %4098, %4100
    %4105:ctrl, %4106:i32 = load.1 %4095, %31
    %4107:ctrl, %4108:phisel = region %4105, %4101
    %4111:i32 = phi %4108, %4106, %4102
    %4112:ctrl, %4113:ctrl = brcond %4107, %4111
    %4116:ctrl, %4117:i32 = load.4 %4112, %7
    %4118:i32 = iadd %4117, %8
    %4119:ctrl = store.4 %4116, %4118, %7
    %4122:ctrl, %4123:i32 = load.4 %4113, %6
    %4124:i32 = iadd %4123, %8
    %4125:ctrl = store.4 %4122, %4124, %6
    %4126:ctrl, %4127:phisel = region %4119, %4125
    %4130:ctrl, %4131:ctrl = brcond %4126, %8
    %4134:ctrl, %4135:ptr = load.8 %4130, %29
    %4136:ptr = ptroff %4135, %11
    %4137:ctrl, %4138:i32 = load.1 %4134, %4136
    %4141:ctrl, %4142:i32 = load.1 %4131, %30
    %4143:ctrl, %4144:phisel = region %4141, %4137
    %4147:i32 = phi %4144, %4142, %4138
    %4148:ctrl, %4149:ctrl = brcond %4143, %4147
    %4152:ctrl, %4153:i32 = load.4 %4148, %7
    %4154:i32 = iadd %4153, %8
    %4155:ctrl = store.4 %4152, %4154, %7
    %4158:ctrl, %4159:i32 = load.4 %4149, %6
    %4160:i32 = iadd %4159, %8
    %4161:ctrl = store.4 %4158, %4160, %6
    %4162:ctrl, %4163:phisel = region %4155, %4161
    %4166:ctrl, %4167:ctrl = brcond %4162, %8
    %4170:ctrl, %4171:ptr = load.8 %4166, %29
    %4172:ptr = ptroff %4171, %11
    %4173:ctrl, %4174:i32 = load.1 %4170, %4172
    %4177:ctrl, %4178:ptr = load.8 %4167, %29
    %4179:ptr = ptroff %4178, %11
    %4180:ctrl, %4181:i32 = load.1 %4177, %4179
    %4182:ctrl, %4183:phisel = region %4180, %4173
    %4186:i32 = phi %4183, %4181, %4174
    %4187:ctrl, %4188:ctrl = brcond %4182, %4186
    %4191:ctrl, %4192:i32 = load.4 %4187, %7
    %4193:i32 = iadd %4192, %8
    %4194:ctrl = store.4 %4191, %4193, %7
    %4197:ctrl, %4198:i32 = load.4 %4188, %6
    %4199:i32 = iadd %4198, %8
    %4200:ctrl = store.4 %4197, %4199, %6
    %4201:ctrl, %4202:phisel = region %4194, %4200
    %4205:ctrl, %4206:ctrl = brcond %4201, %8
    %4209:ctrl, %4210:ptr = load.8 %4205, %29
    %4211:ptr = ptroff %4210, %11
    %4212:ctrl, %4213:i32 = load.1 %4209, %4211
    %4216:ctrl, %4217:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4206
    %4218:ctrl, %4219:phisel = region %4216, %4212
    %4222:i32 = phi %4219, %4217, %4213
    %4223:ctrl, %4224:ctrl = brcond %4218, %4222
    %4227:ctrl, %4228:i32 = load.4 %4223, %7
    %4229:i32 = iadd %4228, %8
    %4230:ctrl = store.4 %4227, %4229, %7
    %4233:ctrl, %4234:i32 = load.4 %4224, %6
    %4235:i32 = iadd %4234, %8
    %4236:ctrl = store.4 %4233, %4235, %6
    %4237:ctrl, %4238:phisel = region %4230, %4236
    %4241:ctrl, %4242:ctrl = brcond %4237, %8
    %4245:ctrl, %4246:ptr = load.8 %4241, %29
    %4247:ptr = ptroff %4246, %11
    %4248:ctrl, %4249:i32 = load.1 %4245, %4247
    %4252:ctrl, %4253:ptr = load.8 %4242, %28
    %4254:ctrl, %4255:i32 = load.4 %4252, %13
    %4256:i64 = iext %4255
    %4257:i64 = sfill 32 %4256
    %4259:i64 = iadd %4257, %17
    %4271:ptr = ptroff %4253, %4259
    %4260:ptr = ptroff %4253, %11
    %4261:ctrl, %4262:i64 = load.4 %4254, %4260
    %4263:i64 = icmp slt %4257, %4262
    %4264:ctrl, %4265:ctrl = brcond %4261, %4263
    %4272:ctrl, %4273:i32 = load.1 %4264, %4271
    %4274:ctrl, %4275:phisel = region %4272, %4248
    %4278:i32 = phi %4275, %4273, %4249
    %4279:ctrl, %4280:ctrl = brcond %4274, %4278
    %4283:ctrl, %4284:i32 = load.4 %4279, %7
    %4285:i32 = iadd %4284, %8
    %4286:ctrl = store.4 %4283, %4285, %7
    %4289:ctrl, %4290:i32 = load.4 %4280, %6
    %4291:i32 = iadd %4290, %8
    %4292:ctrl = store.4 %4289, %4291, %6
    %4293:ctrl, %4294:phisel = region %4286, %4292
    %4297:ctrl, %4298:ctrl = brcond %4293, %8
    %4301:ctrl, %4302:ptr = load.8 %4297, %29
    %4303:ptr = ptroff %4302, %11
    %4304:ctrl, %4305:i32 = load.1 %4301, %4303
    %4308:ctrl, %4309:ptr = load.8 %4298, %12
    %4310:ctrl, %4311:i32 = load.4 %4308, %13
    %4312:i64 = iext %4311
    %4313:i64 = sfill 32 %4312
    %4315:i64 = iadd %4313, %17
    %4327:ptr = ptroff %4309, %4315
    %4316:ptr = ptroff %4309, %11
    %4317:ctrl, %4318:i64 = load.4 %4310, %4316
    %4319:i64 = icmp slt %4313, %4318
    %4320:ctrl, %4321:ctrl = brcond %4317, %4319
    %4328:ctrl, %4329:i32 = load.1 %4320, %4327
    %4330:ctrl, %4331:phisel = region %4328, %4304
    %4334:i32 = phi %4331, %4329, %4305
    %4335:ctrl, %4336:ctrl = brcond %4330, %4334
    %4339:ctrl, %4340:i32 = load.4 %4335, %7
    %4341:i32 = iadd %4340, %8
    %4342:ctrl = store.4 %4339, %4341, %7
    %4345:ctrl, %4346:i32 = load.4 %4336, %6
    %4347:i32 = iadd %4346, %8
    %4348:ctrl = store.4 %4345, %4347, %6
    %4349:ctrl, %4350:phisel = region %4342, %4348
    %4353:ctrl, %4354:ctrl = brcond %4349, %8
    %4357:ctrl, %4358:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4353
    %4361:ctrl, %4362:phisel = region %4354, %4357
    %4365:i32 = phi %4362, %8, %4358
    %4366:ctrl, %4367:ctrl = brcond %4361, %4365
    %4370:ctrl, %4371:i32 = load.4 %4366, %7
    %4372:i32 = iadd %4371, %8
    %4373:ctrl = store.4 %4370, %4372, %7
    %4376:ctrl, %4377:i32 = load.4 %4367, %6
    %4378:i32 = iadd %4377, %8
    %4379:ctrl = store.4 %4376, %4378, %6
    %4380:ctrl, %4381:phisel = region %4373, %4379
    %4384:ctrl, %4385:ctrl = brcond %4380, %8
    %4388:ctrl, %4389:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4384
    %4392:ctrl, %4393:phisel = region %4385, %4388
    %4396:i32 = phi %4393, %20, %4389
    %4397:ctrl, %4398:ctrl = brcond %4392, %4396
    %4401:ctrl, %4402:i32 = load.4 %4397, %7
    %4403:i32 = iadd %4402, %8
    %4404:ctrl = store.4 %4401, %4403, %7
    %4407:ctrl, %4408:i32 = load.4 %4398, %6
    %4409:i32 = iadd %4408, %8
    %4410:ctrl = store.4 %4407, %4409, %6
    %4411:ctrl, %4412:phisel = region %4404, %4410
    %4415:ctrl, %4416:ctrl = brcond %4411, %8
    %4419:ctrl, %4420:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4415
    %4423:ctrl, %4424:i32 = load.1 %4416, %31
    %4425:ctrl, %4426:phisel = region %4423, %4419
    %4429:i32 = phi %4426, %4424, %4420
    %4430:ctrl, %4431:ctrl = brcond %4425, %4429
    %4434:ctrl, %4435:i32 = load.4 %4430, %7
    %4436:i32 = iadd %4435, %8
    %4437:ctrl = store.4 %4434, %4436, %7
    %4440:ctrl, %4441:i32 = load.4 %4431, %6
    %4442:i32 = iadd %4441, %8
    %4443:ctrl = store.4 %4440, %4442, %6
    %4444:ctrl, %4445:phisel = region %4437, %4443
    %4448:ctrl, %4449:ctrl = brcond %4444, %8
    %4452:ctrl, %4453:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4448
    %4456:ctrl, %4457:i32 = load.1 %4449, %30
    %4458:ctrl, %4459:phisel = region %4456, %4452
    %4462:i32 = phi %4459, %4457, %4453
    %4463:ctrl, %4464:ctrl = brcond %4458, %4462
    %4467:ctrl, %4468:i32 = load.4 %4463, %7
    %4469:i32 = iadd %4468, %8
    %4470:ctrl = store.4 %4467, %4469, %7
    %4473:ctrl, %4474:i32 = load.4 %4464, %6
    %4475:i32 = iadd %4474, %8
    %4476:ctrl = store.4 %4473, %4475, %6
    %4477:ctrl, %4478:phisel = region %4470, %4476
    %4481:ctrl, %4482:ctrl = brcond %4477, %8
    %4485:ctrl, %4486:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4481
    %4489:ctrl, %4490:ptr = load.8 %4482, %29
    %4491:ptr = ptroff %4490, %11
    %4492:ctrl, %4493:i32 = load.1 %4489, %4491
    %4494:ctrl, %4495:phisel = region %4492, %4485
    %4498:i32 = phi %4495, %4493, %4486
    %4499:ctrl, %4500:ctrl = brcond %4494, %4498
    %4503:ctrl, %4504:i32 = load.4 %4499, %7
    %4505:i32 = iadd %4504, %8
    %4506:ctrl = store.4 %4503, %4505, %7
    %4509:ctrl, %4510:i32 = load.4 %4500, %6
    %4511:i32 = iadd %4510, %8
    %4512:ctrl = store.4 %4509, %4511, %6
    %4513:ctrl, %4514:phisel = region %4506, %4512
    %4517:ctrl, %4518:ctrl = brcond %4513, %8
    %4521:ctrl, %4522:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4517
    %4525:ctrl, %4526:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4518
    %4527:ctrl, %4528:phisel = region %4525, %4521
    %4531:i32 = phi %4528, %4526, %4522
    %4532:ctrl, %4533:ctrl = brcond %4527, %4531
    %4536:ctrl, %4537:i32 = load.4 %4532, %7
    %4538:i32 = iadd %4537, %8
    %4539:ctrl = store.4 %4536, %4538, %7
    %4542:ctrl, %4543:i32 = load.4 %4533, %6
    %4544:i32 = iadd %4543, %8
    %4545:ctrl = store.4 %4542, %4544, %6
    %4546:ctrl, %4547:phisel = region %4539, %4545
    %4550:ctrl, %4551:ctrl = brcond %4546, %8
    %4554:ctrl, %4555:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4550
    %4558:ctrl, %4559:ptr = load.8 %4551, %28
    %4560:ctrl, %4561:i32 = load.4 %4558, %13
    %4562:i64 = iext %4561
    %4563:i64 = sfill 32 %4562
    %4565:i64 = iadd %4563, %17
    %4577:ptr = ptroff %4559, %4565
    %4566:ptr = ptroff %4559, %11
    %4567:ctrl, %4568:i64 = load.4 %4560, %4566
    %4569:i64 = icmp slt %4563, %4568
    %4570:ctrl, %4571:ctrl = brcond %4567, %4569
    %4578:ctrl, %4579:i32 = load.1 %4570, %4577
    %4580:ctrl, %4581:phisel = region %4578, %4554
    %4584:i32 = phi %4581, %4579, %4555
    %4585:ctrl, %4586:ctrl = brcond %4580, %4584
    %4589:ctrl, %4590:i32 = load.4 %4585, %7
    %4591:i32 = iadd %4590, %8
    %4592:ctrl = store.4 %4589, %4591, %7
    %4595:ctrl, %4596:i32 = load.4 %4586, %6
    %4597:i32 = iadd %4596, %8
    %4598:ctrl = store.4 %4595, %4597, %6
    %4599:ctrl, %4600:phisel = region %4592, %4598
    %4603:ctrl, %4604:ctrl = brcond %4599, %8
    %4607:ctrl, %4608:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4603
    %4611:ctrl, %4612:ptr = load.8 %4604, %12
    %4613:ctrl, %4614:i32 = load.4 %4611, %13
    %4615:i64 = iext %4614
    %4616:i64 = sfill 32 %4615
    %4618:i64 = iadd %4616, %17
    %4630:ptr = ptroff %4612, %4618
    %4619:ptr = ptroff %4612, %11
    %4620:ctrl, %4621:i64 = load.4 %4613, %4619
    %4622:i64 = icmp slt %4616, %4621
    %4623:ctrl, %4624:ctrl = brcond %4620, %4622
    %4631:ctrl, %4632:i32 = load.1 %4623, %4630
    %4633:ctrl, %4634:phisel = region %4631, %4607
    %4637:i32 = phi %4634, %4632, %4608
    %4638:ctrl, %4639:ctrl = brcond %4633, %4637
    %4642:ctrl, %4643:i32 = load.4 %4638, %7
    %4644:i32 = iadd %4643, %8
    %4645:ctrl = store.4 %4642, %4644, %7
    %4648:ctrl, %4649:i32 = load.4 %4639, %6
    %4650:i32 = iadd %4649, %8
    %4651:ctrl = store.4 %4648, %4650, %6
    %4652:ctrl, %4653:phisel = region %4645, %4651
    %4656:ctrl, %4657:ctrl = brcond %4652, %8
    %4660:ctrl, %4661:ptr = load.8 %4656, %28
    %4662:ctrl, %4663:i32 = load.4 %4660, %13
    %4664:i64 = iext %4663
    %4665:i64 = sfill 32 %4664
    %4667:i64 = iadd %4665, %17
    %4679:ptr = ptroff %4661, %4667
    %4668:ptr = ptroff %4661, %11
    %4669:ctrl, %4670:i64 = load.4 %4662, %4668
    %4671:i64 = icmp slt %4665, %4670
    %4672:ctrl, %4673:ctrl = brcond %4669, %4671
    %4680:ctrl, %4681:i32 = load.1 %4672, %4679
    %4678:ctrl = call @throw_index_out_of_range_exception %4673
    unreachable %4678
    %4684:ctrl, %4685:phisel = region %4657, %4680
    %4688:i32 = phi %4685, %8, %4681
    %4689:ctrl, %4690:ctrl = brcond %4684, %4688
    %4693:ctrl, %4694:i32 = load.4 %4689, %7
    %4695:i32 = iadd %4694, %8
    %4696:ctrl = store.4 %4693, %4695, %7
    %4699:ctrl, %4700:i32 = load.4 %4690, %6
    %4701:i32 = iadd %4700, %8
    %4702:ctrl = store.4 %4699, %4701, %6
    %4703:ctrl, %4704:phisel = region %4696, %4702
    %4707:ctrl, %4708:ctrl = brcond %4703, %8
    %4711:ctrl, %4712:ptr = load.8 %4707, %28
    %4713:ctrl, %4714:i32 = load.4 %4711, %13
    %4715:i64 = iext %4714
    %4716:i64 = sfill 32 %4715
    %4718:i64 = iadd %4716, %17
    %4730:ptr = ptroff %4712, %4718
    %4719:ptr = ptroff %4712, %11
    %4720:ctrl, %4721:i64 = load.4 %4713, %4719
    %4722:i64 = icmp slt %4716, %4721
    %4723:ctrl, %4724:ctrl = brcond %4720, %4722
    %4731:ctrl, %4732:i32 = load.1 %4723, %4730
    %4729:ctrl = call @throw_index_out_of_range_exception %4724
    unreachable %4729
    %4735:ctrl, %4736:phisel = region %4708, %4731
    %4739:i32 = phi %4736, %20, %4732
    %4740:ctrl, %4741:ctrl = brcond %4735, %4739
    %4744:ctrl, %4745:i32 = load.4 %4740, %7
    %4746:i32 = iadd %4745, %8
    %4747:ctrl = store.4 %4744, %4746, %7
    %4750:ctrl, %4751:i32 = load.4 %4741, %6
    %4752:i32 = iadd %4751, %8
    %4753:ctrl = store.4 %4750, %4752, %6
    %4754:ctrl, %4755:phisel = region %4747, %4753
    %4758:ctrl, %4759:ctrl = brcond %4754, %8
    %4762:ctrl, %4763:ptr = load.8 %4758, %28
    %4764:ctrl, %4765:i32 = load.4 %4762, %13
    %4766:i64 = iext %4765
    %4767:i64 = sfill 32 %4766
    %4769:i64 = iadd %4767, %17
    %4781:ptr = ptroff %4763, %4769
    %4770:ptr = ptroff %4763, %11
    %4771:ctrl, %4772:i64 = load.4 %4764, %4770
    %4773:i64 = icmp slt %4767, %4772
    %4774:ctrl, %4775:ctrl = brcond %4771, %4773
    %4782:ctrl, %4783:i32 = load.1 %4774, %4781
    %4780:ctrl = call @throw_index_out_of_range_exception %4775
    unreachable %4780
    %4786:ctrl, %4787:i32 = load.1 %4759, %31
    %4788:ctrl, %4789:phisel = region %4786, %4782
    %4792:i32 = phi %4789, %4787, %4783
    %4793:ctrl, %4794:ctrl = brcond %4788, %4792
    %4797:ctrl, %4798:i32 = load.4 %4793, %7
    %4799:i32 = iadd %4798, %8
    %4800:ctrl = store.4 %4797, %4799, %7
    %4803:ctrl, %4804:i32 = load.4 %4794, %6
    %4805:i32 = iadd %4804, %8
    %4806:ctrl = store.4 %4803, %4805, %6
    %4807:ctrl, %4808:phisel = region %4800, %4806
    %4811:ctrl, %4812:ctrl = brcond %4807, %8
    %4815:ctrl, %4816:ptr = load.8 %4811, %28
    %4817:ctrl, %4818:i32 = load.4 %4815, %13
    %4819:i64 = iext %4818
    %4820:i64 = sfill 32 %4819
    %4822:i64 = iadd %4820, %17
    %4834:ptr = ptroff %4816, %4822
    %4823:ptr = ptroff %4816, %11
    %4824:ctrl, %4825:i64 = load.4 %4817, %4823
    %4826:i64 = icmp slt %4820, %4825
    %4827:ctrl, %4828:ctrl = brcond %4824, %4826
    %4835:ctrl, %4836:i32 = load.1 %4827, %4834
    %4833:ctrl = call @throw_index_out_of_range_exception %4828
    unreachable %4833
    %4839:ctrl, %4840:i32 = load.1 %4812, %30
    %4841:ctrl, %4842:phisel = region %4839, %4835
    %4845:i32 = phi %4842, %4840, %4836
    %4846:ctrl, %4847:ctrl = brcond %4841, %4845
    %4850:ctrl, %4851:i32 = load.4 %4846, %7
    %4852:i32 = iadd %4851, %8
    %4853:ctrl = store.4 %4850, %4852, %7
    %4856:ctrl, %4857:i32 = load.4 %4847, %6
    %4858:i32 = iadd %4857, %8
    %4859:ctrl = store.4 %4856, %4858, %6
    %4860:ctrl, %4861:phisel = region %4853, %4859
    %4864:ctrl, %4865:ctrl = brcond %4860, %8
    %4868:ctrl, %4869:ptr = load.8 %4864, %28
    %4870:ctrl, %4871:i32 = load.4 %4868, %13
    %4872:i64 = iext %4871
    %4873:i64 = sfill 32 %4872
    %4875:i64 = iadd %4873, %17
    %4887:ptr = ptroff %4869, %4875
    %4876:ptr = ptroff %4869, %11
    %4877:ctrl, %4878:i64 = load.4 %4870, %4876
    %4879:i64 = icmp slt %4873, %4878
    %4880:ctrl, %4881:ctrl = brcond %4877, %4879
    %4888:ctrl, %4889:i32 = load.1 %4880, %4887
    %4886:ctrl = call @throw_index_out_of_range_exception %4881
    unreachable %4886
    %4892:ctrl, %4893:ptr = load.8 %4865, %29
    %4894:ptr = ptroff %4893, %11
    %4895:ctrl, %4896:i32 = load.1 %4892, %4894
    %4897:ctrl, %4898:phisel = region %4895, %4888
    %4901:i32 = phi %4898, %4896, %4889
    %4902:ctrl, %4903:ctrl = brcond %4897, %4901
    %4906:ctrl, %4907:i32 = load.4 %4902, %7
    %4908:i32 = iadd %4907, %8
    %4909:ctrl = store.4 %4906, %4908, %7
    %4912:ctrl, %4913:i32 = load.4 %4903, %6
    %4914:i32 = iadd %4913, %8
    %4915:ctrl = store.4 %4912, %4914, %6
    %4916:ctrl, %4917:phisel = region %4909, %4915
    %4920:ctrl, %4921:ctrl = brcond %4916, %8
    %4924:ctrl, %4925:ptr = load.8 %4920, %28
    %4926:ctrl, %4927:i32 = load.4 %4924, %13
    %4928:i64 = iext %4927
    %4929:i64 = sfill 32 %4928
    %4931:i64 = iadd %4929, %17
    %4943:ptr = ptroff %4925, %4931
    %4932:ptr = ptroff %4925, %11
    %4933:ctrl, %4934:i64 = load.4 %4926, %4932
    %4935:i64 = icmp slt %4929, %4934
    %4936:ctrl, %4937:ctrl = brcond %4933, %4935
    %4944:ctrl, %4945:i32 = load.1 %4936, %4943
    %4942:ctrl = call @throw_index_out_of_range_exception %4937
    unreachable %4942
    %4948:ctrl, %4949:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4921
    %4950:ctrl, %4951:phisel = region %4948, %4944
    %4954:i32 = phi %4951, %4949, %4945
    %4955:ctrl, %4956:ctrl = brcond %4950, %4954
    %4959:ctrl, %4960:i32 = load.4 %4955, %7
    %4961:i32 = iadd %4960, %8
    %4962:ctrl = store.4 %4959, %4961, %7
    %4965:ctrl, %4966:i32 = load.4 %4956, %6
    %4967:i32 = iadd %4966, %8
    %4968:ctrl = store.4 %4965, %4967, %6
    %4969:ctrl, %4970:phisel = region %4962, %4968
    %4973:ctrl, %4974:ctrl = brcond %4969, %8
    %4977:ctrl, %4978:ptr = load.8 %4973, %28
    %4979:ctrl, %4980:i32 = load.4 %4977, %13
    %4981:i64 = iext %4980
    %4982:i64 = sfill 32 %4981
    %4984:i64 = iadd %4982, %17
    %4996:ptr = ptroff %4978, %4984
    %4985:ptr = ptroff %4978, %11
    %4986:ctrl, %4987:i64 = load.4 %4979, %4985
    %4988:i64 = icmp slt %4982, %4987
    %4989:ctrl, %4990:ctrl = brcond %4986, %4988
    %4997:ctrl, %4998:i32 = load.1 %4989, %4996
    %4995:ctrl = call @throw_index_out_of_range_exception %4990
    unreachable %4995
    %5001:ctrl, %5002:ptr = load.8 %4974, %28
    %5003:ctrl, %5004:i32 = load.4 %5001, %13
    %5005:i64 = iext %5004
    %5006:i64 = sfill 32 %5005
    %5008:i64 = iadd %5006, %17
    %5020:ptr = ptroff %5002, %5008
    %5009:ptr = ptroff %5002, %11
    %5010:ctrl, %5011:i64 = load.4 %5003, %5009
    %5012:i64 = icmp slt %5006, %5011
    %5013:ctrl, %5014:ctrl = brcond %5010, %5012
    %5021:ctrl, %5022:i32 = load.1 %5013, %5020
    %5023:ctrl, %5024:phisel = region %5021, %4997
    %5027:i32 = phi %5024, %5022, %4998
    %5028:ctrl, %5029:ctrl = brcond %5023, %5027
    %5032:ctrl, %5033:i32 = load.4 %5028, %7
    %5034:i32 = iadd %5033, %8
    %5035:ctrl = store.4 %5032, %5034, %7
    %5038:ctrl, %5039:i32 = load.4 %5029, %6
    %5040:i32 = iadd %5039, %8
    %5041:ctrl = store.4 %5038, %5040, %6
    %5042:ctrl, %5043:phisel = region %5035, %5041
    %5046:ctrl, %5047:ctrl = brcond %5042, %8
    %5050:ctrl, %5051:ptr = load.8 %5046, %28
    %5052:ctrl, %5053:i32 = load.4 %5050, %13
    %5054:i64 = iext %5053
    %5055:i64 = sfill 32 %5054
    %5057:i64 = iadd %5055, %17
    %5069:ptr = ptroff %5051, %5057
    %5058:ptr = ptroff %5051, %11
    %5059:ctrl, %5060:i64 = load.4 %5052, %5058
    %5061:i64 = icmp slt %5055, %5060
    %5062:ctrl, %5063:ctrl = brcond %5059, %5061
    %5070:ctrl, %5071:i32 = load.1 %5062, %5069
    %5068:ctrl = call @throw_index_out_of_range_exception %5063
    unreachable %5068
    %5074:ctrl, %5075:ptr = load.8 %5047, %12
    %5076:ctrl, %5077:i32 = load.4 %5074, %13
    %5078:i64 = iext %5077
    %5079:i64 = sfill 32 %5078
    %5081:i64 = iadd %5079, %17
    %5093:ptr = ptroff %5075, %5081
    %5082:ptr = ptroff %5075, %11
    %5083:ctrl, %5084:i64 = load.4 %5076, %5082
    %5085:i64 = icmp slt %5079, %5084
    %5086:ctrl, %5087:ctrl = brcond %5083, %5085
    %5094:ctrl, %5095:i32 = load.1 %5086, %5093
    %5096:ctrl, %5097:phisel = region %5094, %5070
    %5100:i32 = phi %5097, %5095, %5071
    %5101:ctrl, %5102:ctrl = brcond %5096, %5100
    %5105:ctrl, %5106:i32 = load.4 %5101, %7
    %5107:i32 = iadd %5106, %8
    %5108:ctrl = store.4 %5105, %5107, %7
    %5111:ctrl, %5112:i32 = load.4 %5102, %6
    %5113:i32 = iadd %5112, %8
    %5114:ctrl = store.4 %5111, %5113, %6
    %5115:ctrl, %5116:phisel = region %5108, %5114
    %5119:ctrl, %5120:ctrl = brcond %5115, %8
    %5123:ctrl, %5124:ptr = load.8 %5119, %12
    %5125:ctrl, %5126:i32 = load.4 %5123, %13
    %5127:i64 = iext %5126
    %5128:i64 = sfill 32 %5127
    %5130:i64 = iadd %5128, %17
    %5142:ptr = ptroff %5124, %5130
    %5131:ptr = ptroff %5124, %11
    %5132:ctrl, %5133:i64 = load.4 %5125, %5131
    %5134:i64 = icmp slt %5128, %5133
    %5135:ctrl, %5136:ctrl = brcond %5132, %5134
    %5143:ctrl, %5144:i32 = load.1 %5135, %5142
    %5141:ctrl = call @throw_index_out_of_range_exception %5136
    unreachable %5141
    %5147:ctrl, %5148:phisel = region %5120, %5143
    %5151:i32 = phi %5148, %8, %5144
    %5152:ctrl, %5153:ctrl = brcond %5147, %5151
    %5156:ctrl, %5157:i32 = load.4 %5152, %7
    %5158:i32 = iadd %5157, %8
    %5159:ctrl = store.4 %5156, %5158, %7
    %5162:ctrl, %5163:i32 = load.4 %5153, %6
    %5164:i32 = iadd %5163, %8
    %5165:ctrl = store.4 %5162, %5164, %6
    %5166:ctrl, %5167:phisel = region %5159, %5165
    %5170:ctrl, %5171:ctrl = brcond %5166, %8
    %5174:ctrl, %5175:ptr = load.8 %5170, %12
    %5176:ctrl, %5177:i32 = load.4 %5174, %13
    %5178:i64 = iext %5177
    %5179:i64 = sfill 32 %5178
    %5181:i64 = iadd %5179, %17
    %5193:ptr = ptroff %5175, %5181
    %5182:ptr = ptroff %5175, %11
    %5183:ctrl, %5184:i64 = load.4 %5176, %5182
    %5185:i64 = icmp slt %5179, %5184
    %5186:ctrl, %5187:ctrl = brcond %5183, %5185
    %5194:ctrl, %5195:i32 = load.1 %5186, %5193
    %5192:ctrl = call @throw_index_out_of_range_exception %5187
    unreachable %5192
    %5198:ctrl, %5199:phisel = region %5171, %5194
    %5202:i32 = phi %5199, %20, %5195
    %5203:ctrl, %5204:ctrl = brcond %5198, %5202
    %5207:ctrl, %5208:i32 = load.4 %5203, %7
    %5209:i32 = iadd %5208, %8
    %5210:ctrl = store.4 %5207, %5209, %7
    %5213:ctrl, %5214:i32 = load.4 %5204, %6
    %5215:i32 = iadd %5214, %8
    %5216:ctrl = store.4 %5213, %5215, %6
    %5217:ctrl, %5218:phisel = region %5210, %5216
    %5221:ctrl, %5222:ctrl = brcond %5217, %8
    %5225:ctrl, %5226:ptr = load.8 %5221, %12
    %5227:ctrl, %5228:i32 = load.4 %5225, %13
    %5229:i64 = iext %5228
    %5230:i64 = sfill 32 %5229
    %5232:i64 = iadd %5230, %17
    %5244:ptr = ptroff %5226, %5232
    %5233:ptr = ptroff %5226, %11
    %5234:ctrl, %5235:i64 = load.4 %5227, %5233
    %5236:i64 = icmp slt %5230, %5235
    %5237:ctrl, %5238:ctrl = brcond %5234, %5236
    %5245:ctrl, %5246:i32 = load.1 %5237, %5244
    %5243:ctrl = call @throw_index_out_of_range_exception %5238
    unreachable %5243
    %5249:ctrl, %5250:i32 = load.1 %5222, %31
    %5251:ctrl, %5252:phisel = region %5249, %5245
    %5255:i32 = phi %5252, %5250, %5246
    %5256:ctrl, %5257:ctrl = brcond %5251, %5255
    %5260:ctrl, %5261:i32 = load.4 %5256, %7
    %5262:i32 = iadd %5261, %8
    %5263:ctrl = store.4 %5260, %5262, %7
    %5266:ctrl, %5267:i32 = load.4 %5257, %6
    %5268:i32 = iadd %5267, %8
    %5269:ctrl = store.4 %5266, %5268, %6
    %5270:ctrl, %5271:phisel = region %5263, %5269
    %5274:ctrl, %5275:ctrl = brcond %5270, %8
    %5278:ctrl, %5279:ptr = load.8 %5274, %12
    %5280:ctrl, %5281:i32 = load.4 %5278, %13
    %5282:i64 = iext %5281
    %5283:i64 = sfill 32 %5282
    %5285:i64 = iadd %5283, %17
    %5297:ptr = ptroff %5279, %5285
    %5286:ptr = ptroff %5279, %11
    %5287:ctrl, %5288:i64 = load.4 %5280, %5286
    %5289:i64 = icmp slt %5283, %5288
    %5290:ctrl, %5291:ctrl = brcond %5287, %5289
    %5298:ctrl, %5299:i32 = load.1 %5290, %5297
    %5296:ctrl = call @throw_index_out_of_range_exception %5291
    unreachable %5296
    %5302:ctrl, %5303:i32 = load.1 %5275, %30
    %5304:ctrl, %5305:phisel = region %5302, %5298
    %5308:i32 = phi %5305, %5303, %5299
    %5309:ctrl, %5310:ctrl = brcond %5304, %5308
    %5313:ctrl, %5314:i32 = load.4 %5309, %7
    %5315:i32 = iadd %5314, %8
    %5316:ctrl = store.4 %5313, %5315, %7
    %5319:ctrl, %5320:i32 = load.4 %5310, %6
    %5321:i32 = iadd %5320, %8
    %5322:ctrl = store.4 %5319, %5321, %6
    %5323:ctrl, %5324:phisel = region %5316, %5322
    %5327:ctrl, %5328:ctrl = brcond %5323, %8
    %5331:ctrl, %5332:ptr = load.8 %5327, %12
    %5333:ctrl, %5334:i32 = load.4 %5331, %13
    %5335:i64 = iext %5334
    %5336:i64 = sfill 32 %5335
    %5338:i64 = iadd %5336, %17
    %5350:ptr = ptroff %5332, %5338
    %5339:ptr = ptroff %5332, %11
    %5340:ctrl, %5341:i64 = load.4 %5333, %5339
    %5342:i64 = icmp slt %5336, %5341
    %5343:ctrl, %5344:ctrl = brcond %5340, %5342
    %5351:ctrl, %5352:i32 = load.1 %5343, %5350
    %5349:ctrl = call @throw_index_out_of_range_exception %5344
    unreachable %5349
    %5355:ctrl, %5356:ptr = load.8 %5328, %29
    %5357:ptr = ptroff %5356, %11
    %5358:ctrl, %5359:i32 = load.1 %5355, %5357
    %5360:ctrl, %5361:phisel = region %5358, %5351
    %5364:i32 = phi %5361, %5359, %5352
    %5365:ctrl, %5366:ctrl = brcond %5360, %5364
    %5369:ctrl, %5370:i32 = load.4 %5365, %7
    %5371:i32 = iadd %5370, %8
    %5372:ctrl = store.4 %5369, %5371, %7
    %5375:ctrl, %5376:i32 = load.4 %5366, %6
    %5377:i32 = iadd %5376, %8
    %5378:ctrl = store.4 %5375, %5377, %6
    %5379:ctrl, %5380:phisel = region %5372, %5378
    %5383:ctrl, %5384:ctrl = brcond %5379, %8
    %5387:ctrl, %5388:ptr = load.8 %5383, %12
    %5389:ctrl, %5390:i32 = load.4 %5387, %13
    %5391:i64 = iext %5390
    %5392:i64 = sfill 32 %5391
    %5394:i64 = iadd %5392, %17
    %5406:ptr = ptroff %5388, %5394
    %5395:ptr = ptroff %5388, %11
    %5396:ctrl, %5397:i64 = load.4 %5389, %5395
    %5398:i64 = icmp slt %5392, %5397
    %5399:ctrl, %5400:ctrl = brcond %5396, %5398
    %5407:ctrl, %5408:i32 = load.1 %5399, %5406
    %5405:ctrl = call @throw_index_out_of_range_exception %5400
    unreachable %5405
    %5411:ctrl, %5412:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5384
    %5413:ctrl, %5414:phisel = region %5411, %5407
    %5417:i32 = phi %5414, %5412, %5408
    %5418:ctrl, %5419:ctrl = brcond %5413, %5417
    %5422:ctrl, %5423:i32 = load.4 %5418, %7
    %5424:i32 = iadd %5423, %8
    %5425:ctrl = store.4 %5422, %5424, %7
    %5428:ctrl, %5429:i32 = load.4 %5419, %6
    %5430:i32 = iadd %5429, %8
    %5431:ctrl = store.4 %5428, %5430, %6
    %5432:ctrl, %5433:phisel = region %5425, %5431
    %5436:ctrl, %5437:ctrl = brcond %5432, %8
    %5440:ctrl, %5441:ptr = load.8 %5436, %12
    %5442:ctrl, %5443:i32 = load.4 %5440, %13
    %5444:i64 = iext %5443
    %5445:i64 = sfill 32 %5444
    %5447:i64 = iadd %5445, %17
    %5459:ptr = ptroff %5441, %5447
    %5448:ptr = ptroff %5441, %11
    %5449:ctrl, %5450:i64 = load.4 %5442, %5448
    %5451:i64 = icmp slt %5445, %5450
    %5452:ctrl, %5453:ctrl = brcond %5449, %5451
    %5460:ctrl, %5461:i32 = load.1 %5452, %5459
    %5458:ctrl = call @throw_index_out_of_range_exception %5453
    unreachable %5458
    %5464:ctrl, %5465:ptr = load.8 %5437, %28
    %5466:ctrl, %5467:i32 = load.4 %5464, %13
    %5468:i64 = iext %5467
    %5469:i64 = sfill 32 %5468
    %5471:i64 = iadd %5469, %17
    %5483:ptr = ptroff %5465, %5471
    %5472:ptr = ptroff %5465, %11
    %5473:ctrl, %5474:i64 = load.4 %5466, %5472
    %5475:i64 = icmp slt %5469, %5474
    %5476:ctrl, %5477:ctrl = brcond %5473, %5475
    %5484:ctrl, %5485:i32 = load.1 %5476, %5483
    %5486:ctrl, %5487:phisel = region %5484, %5460
    %5490:i32 = phi %5487, %5485, %5461
    %5491:ctrl, %5492:ctrl = brcond %5486, %5490
    %5495:ctrl, %5496:i32 = load.4 %5491, %7
    %5497:i32 = iadd %5496, %8
    %5498:ctrl = store.4 %5495, %5497, %7
    %5501:ctrl, %5502:i32 = load.4 %5492, %6
    %5503:i32 = iadd %5502, %8
    %5504:ctrl = store.4 %5501, %5503, %6
    %5505:ctrl, %5506:phisel = region %5498, %5504
    %5509:ctrl, %5510:ctrl = brcond %5505, %8
    %5513:ctrl, %5514:ptr = load.8 %5509, %12
    %5515:ctrl, %5516:i32 = load.4 %5513, %13
    %5517:i64 = iext %5516
    %5518:i64 = sfill 32 %5517
    %5520:i64 = iadd %5518, %17
    %5532:ptr = ptroff %5514, %5520
    %5521:ptr = ptroff %5514, %11
    %5522:ctrl, %5523:i64 = load.4 %5515, %5521
    %5524:i64 = icmp slt %5518, %5523
    %5525:ctrl, %5526:ctrl = brcond %5522, %5524
    %5533:ctrl, %5534:i32 = load.1 %5525, %5532
    %5531:ctrl = call @throw_index_out_of_range_exception %5526
    unreachable %5531
    %5537:ctrl, %5538:ptr = load.8 %5510, %12
    %5539:ctrl, %5540:i32 = load.4 %5537, %13
    %5541:i64 = iext %5540
    %5542:i64 = sfill 32 %5541
    %5544:i64 = iadd %5542, %17
    %5556:ptr = ptroff %5538, %5544
    %5545:ptr = ptroff %5538, %11
    %5546:ctrl, %5547:i64 = load.4 %5539, %5545
    %5548:i64 = icmp slt %5542, %5547
    %5549:ctrl, %5550:ctrl = brcond %5546, %5548
    %5557:ctrl, %5558:i32 = load.1 %5549, %5556
    %5559:ctrl, %5560:phisel = region %5557, %5533
    %5562:i32 = phi %5560, %5558, %5534
    %5563:ctrl, %5564:ctrl = brcond %5559, %5562
    %5567:ctrl, %5568:i32 = load.4 %5563, %7
    %5569:i32 = iadd %5568, %8
    %5570:ctrl = store.4 %5567, %5569, %7
    %5573:ctrl, %5574:i32 = load.4 %5564, %6
    %5575:i32 = iadd %5574, %8
    %5576:ctrl = store.4 %5573, %5575, %6
    %5577:ctrl, %5578:phisel = region %5570, %5576
    %5580:ctrl, %5581:ctrl = brcond %5577, %20
    %5586:ctrl, %5587:phisel = region %5581, %5580
    %5590:ctrl, %5591:ctrl = brcond %5586, %8
    %5594:ctrl, %5595:i32 = load.4 %5590, %7
    %5596:i32 = iadd %5595, %8
    %5597:ctrl = store.4 %5594, %5596, %7
    %5600:ctrl, %5601:i32 = load.4 %5591, %6
    %5602:i32 = iadd %5601, %8
    %5603:ctrl = store.4 %5600, %5602, %6
    %5604:ctrl, %5605:phisel = region %5597, %5603
    %5608:ctrl, %5609:ctrl = brcond %5604, %20
    %5612:ctrl, %5613:i32 = load.4 %5608, %7
    %5614:i32 = iadd %5613, %8
    %5615:ctrl = store.4 %5612, %5614, %7
    %5618:ctrl, %5619:i32 = load.4 %5609, %6
    %5620:i32 = iadd %5619, %8
    %5621:ctrl = store.4 %5618, %5620, %6
    %5622:ctrl, %5623:phisel = region %5615, %5621
    %5625:ctrl, %5626:ctrl = brcond %5622, %20
    %5631:ctrl, %5632:i32 = load.1 %5626, %31
    %5633:ctrl, %5634:phisel = region %5631, %5625
    %5636:i32 = phi %5634, %5632, %8
    %5637:ctrl, %5638:ctrl = brcond %5633, %5636
    %5641:ctrl, %5642:i32 = load.4 %5637, %7
    %5643:i32 = iadd %5642, %8
    %5644:ctrl = store.4 %5641, %5643, %7
    %5647:ctrl, %5648:i32 = load.4 %5638, %6
    %5649:i32 = iadd %5648, %8
    %5650:ctrl = store.4 %5647, %5649, %6
    %5651:ctrl, %5652:phisel = region %5644, %5650
    %5654:ctrl, %5655:ctrl = brcond %5651, %20
    %5660:ctrl, %5661:i32 = load.1 %5655, %30
    %5662:ctrl, %5663:phisel = region %5660, %5654
    %5665:i32 = phi %5663, %5661, %8
    %5666:ctrl, %5667:ctrl = brcond %5662, %5665
    %5670:ctrl, %5671:i32 = load.4 %5666, %7
    %5672:i32 = iadd %5671, %8
    %5673:ctrl = store.4 %5670, %5672, %7
    %5676:ctrl, %5677:i32 = load.4 %5667, %6
    %5678:i32 = iadd %5677, %8
    %5679:ctrl = store.4 %5676, %5678, %6
    %5680:ctrl, %5681:phisel = region %5673, %5679
    %5683:ctrl, %5684:ctrl = brcond %5680, %20
    %5689:ctrl, %5690:ptr = load.8 %5684, %29
    %5691:ptr = ptroff %5690, %11
    %5692:ctrl, %5693:i32 = load.1 %5689, %5691
    %5694:ctrl, %5695:phisel = region %5692, %5683
    %5697:i32 = phi %5695, %5693, %8
    %5698:ctrl, %5699:ctrl = brcond %5694, %5697
    %5702:ctrl, %5703:i32 = load.4 %5698, %7
    %5704:i32 = iadd %5703, %8
    %5705:ctrl = store.4 %5702, %5704, %7
    %5708:ctrl, %5709:i32 = load.4 %5699, %6
    %5710:i32 = iadd %5709, %8
    %5711:ctrl = store.4 %5708, %5710, %6
    %5712:ctrl, %5713:phisel = region %5705, %5711
    %5715:ctrl, %5716:ctrl = brcond %5712, %20
    %5721:ctrl, %5722:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5716
    %5723:ctrl, %5724:phisel = region %5721, %5715
    %5726:i32 = phi %5724, %5722, %8
    %5727:ctrl, %5728:ctrl = brcond %5723, %5726
    %5731:ctrl, %5732:i32 = load.4 %5727, %7
    %5733:i32 = iadd %5732, %8
    %5734:ctrl = store.4 %5731, %5733, %7
    %5737:ctrl, %5738:i32 = load.4 %5728, %6
    %5739:i32 = iadd %5738, %8
    %5740:ctrl = store.4 %5737, %5739, %6
    %5741:ctrl, %5742:phisel = region %5734, %5740
    %5744:ctrl, %5745:ctrl = brcond %5741, %20
    %5750:ctrl, %5751:ptr = load.8 %5745, %28
    %5752:ctrl, %5753:i32 = load.4 %5750, %13
    %5754:i64 = iext %5753
    %5755:i64 = sfill 32 %5754
    %5757:i64 = iadd %5755, %17
    %5769:ptr = ptroff %5751, %5757
    %5758:ptr = ptroff %5751, %11
    %5759:ctrl, %5760:i64 = load.4 %5752, %5758
    %5761:i64 = icmp slt %5755, %5760
    %5762:ctrl, %5763:ctrl = brcond %5759, %5761
    %5770:ctrl, %5771:i32 = load.1 %5762, %5769
    %5772:ctrl, %5773:phisel = region %5770, %5744
    %5775:i32 = phi %5773, %5771, %8
    %5776:ctrl, %5777:ctrl = brcond %5772, %5775
    %5780:ctrl, %5781:i32 = load.4 %5776, %7
    %5782:i32 = iadd %5781, %8
    %5783:ctrl = store.4 %5780, %5782, %7
    %5786:ctrl, %5787:i32 = load.4 %5777, %6
    %5788:i32 = iadd %5787, %8
    %5789:ctrl = store.4 %5786, %5788, %6
    %5790:ctrl, %5791:phisel = region %5783, %5789
    %5793:ctrl, %5794:ctrl = brcond %5790, %20
    %5799:ctrl, %5800:ptr = load.8 %5794, %12
    %5801:ctrl, %5802:i32 = load.4 %5799, %13
    %5803:i64 = iext %5802
    %5804:i64 = sfill 32 %5803
    %5806:i64 = iadd %5804, %17
    %5818:ptr = ptroff %5800, %5806
    %5807:ptr = ptroff %5800, %11
    %5808:ctrl, %5809:i64 = load.4 %5801, %5807
    %5810:i64 = icmp slt %5804, %5809
    %5811:ctrl, %5812:ctrl = brcond %5808, %5810
    %5819:ctrl, %5820:i32 = load.1 %5811, %5818
    %5821:ctrl, %5822:phisel = region %5819, %5793
    %5824:i32 = phi %5822, %5820, %8
    %5825:ctrl, %5826:ctrl = brcond %5821, %5824
    %5829:ctrl, %5830:i32 = load.4 %5825, %7
    %5831:i32 = iadd %5830, %8
    %5832:ctrl = store.4 %5829, %5831, %7
    %5835:ctrl, %5836:i32 = load.4 %5826, %6
    %5837:i32 = iadd %5836, %8
    %5838:ctrl = store.4 %5835, %5837, %6
    %5839:ctrl, %5840:phisel = region %5832, %5838
    %5843:ctrl, %5844:ctrl = brcond %5839, %8
    %5847:ctrl, %5848:i32 = load.4 %5843, %7
    %5849:i32 = iadd %5848, %8
    %5850:ctrl = store.4 %5847, %5849, %7
    %5853:ctrl, %5854:i32 = load.4 %5844, %6
    %5855:i32 = iadd %5854, %8
    %5856:ctrl = store.4 %5853, %5855, %6
    %5857:ctrl, %5858:phisel = region %5850, %5856
    %5860:ctrl, %5861:ctrl = brcond %5857, %20
    %5866:ctrl, %5867:phisel = region %5861, %5860
    %5870:ctrl, %5871:ctrl = brcond %5866, %20
    %5874:ctrl, %5875:i32 = load.4 %5870, %7
    %5876:i32 = iadd %5875, %8
    %5877:ctrl = store.4 %5874, %5876, %7
    %5880:ctrl, %5881:i32 = load.4 %5871, %6
    %5882:i32 = iadd %5881, %8
    %5883:ctrl = store.4 %5880, %5882, %6
    %5884:ctrl, %5885:phisel = region %5877, %5883
    %5887:ctrl, %5888:ctrl = brcond %5884, %20
    %5893:ctrl, %5894:i32 = load.1 %5888, %31
    %5895:ctrl, %5896:phisel = region %5893, %5887
    %5898:i32 = phi %5896, %5894, %20
    %5899:ctrl, %5900:ctrl = brcond %5895, %5898
    %5903:ctrl, %5904:i32 = load.4 %5899, %7
    %5905:i32 = iadd %5904, %8
    %5906:ctrl = store.4 %5903, %5905, %7
    %5909:ctrl, %5910:i32 = load.4 %5900, %6
    %5911:i32 = iadd %5910, %8
    %5912:ctrl = store.4 %5909, %5911, %6
    %5913:ctrl, %5914:phisel = region %5906, %5912
    %5916:ctrl, %5917:ctrl = brcond %5913, %20
    %5922:ctrl, %5923:i32 = load.1 %5917, %30
    %5924:ctrl, %5925:phisel = region %5922, %5916
    %5927:i32 = phi %5925, %5923, %20
    %5928:ctrl, %5929:ctrl = brcond %5924, %5927
    %5932:ctrl, %5933:i32 = load.4 %5928, %7
    %5934:i32 = iadd %5933, %8
    %5935:ctrl = store.4 %5932, %5934, %7
    %5938:ctrl, %5939:i32 = load.4 %5929, %6
    %5940:i32 = iadd %5939, %8
    %5941:ctrl = store.4 %5938, %5940, %6
    %5942:ctrl, %5943:phisel = region %5935, %5941
    %5945:ctrl, %5946:ctrl = brcond %5942, %20
    %5951:ctrl, %5952:ptr = load.8 %5946, %29
    %5953:ptr = ptroff %5952, %11
    %5954:ctrl, %5955:i32 = load.1 %5951, %5953
    %5956:ctrl, %5957:phisel = region %5954, %5945
    %5959:i32 = phi %5957, %5955, %20
    %5960:ctrl, %5961:ctrl = brcond %5956, %5959
    %5964:ctrl, %5965:i32 = load.4 %5960, %7
    %5966:i32 = iadd %5965, %8
    %5967:ctrl = store.4 %5964, %5966, %7
    %5970:ctrl, %5971:i32 = load.4 %5961, %6
    %5972:i32 = iadd %5971, %8
    %5973:ctrl = store.4 %5970, %5972, %6
    %5974:ctrl, %5975:phisel = region %5967, %5973
    %5977:ctrl, %5978:ctrl = brcond %5974, %20
    %5983:ctrl, %5984:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5978
    %5985:ctrl, %5986:phisel = region %5983, %5977
    %5988:i32 = phi %5986, %5984, %20
    %5989:ctrl, %5990:ctrl = brcond %5985, %5988
    %5993:ctrl, %5994:i32 = load.4 %5989, %7
    %5995:i32 = iadd %5994, %8
    %5996:ctrl = store.4 %5993, %5995, %7
    %5999:ctrl, %6000:i32 = load.4 %5990, %6
    %6001:i32 = iadd %6000, %8
    %6002:ctrl = store.4 %5999, %6001, %6
    %6003:ctrl, %6004:phisel = region %5996, %6002
    %6006:ctrl, %6007:ctrl = brcond %6003, %20
    %6012:ctrl, %6013:ptr = load.8 %6007, %28
    %6014:ctrl, %6015:i32 = load.4 %6012, %13
    %6016:i64 = iext %6015
    %6017:i64 = sfill 32 %6016
    %6019:i64 = iadd %6017, %17
    %6031:ptr = ptroff %6013, %6019
    %6020:ptr = ptroff %6013, %11
    %6021:ctrl, %6022:i64 = load.4 %6014, %6020
    %6023:i64 = icmp slt %6017, %6022
    %6024:ctrl, %6025:ctrl = brcond %6021, %6023
    %6032:ctrl, %6033:i32 = load.1 %6024, %6031
    %6034:ctrl, %6035:phisel = region %6032, %6006
    %6037:i32 = phi %6035, %6033, %20
    %6038:ctrl, %6039:ctrl = brcond %6034, %6037
    %6042:ctrl, %6043:i32 = load.4 %6038, %7
    %6044:i32 = iadd %6043, %8
    %6045:ctrl = store.4 %6042, %6044, %7
    %6048:ctrl, %6049:i32 = load.4 %6039, %6
    %6050:i32 = iadd %6049, %8
    %6051:ctrl = store.4 %6048, %6050, %6
    %6052:ctrl, %6053:phisel = region %6045, %6051
    %6055:ctrl, %6056:ctrl = brcond %6052, %20
    %6061:ctrl, %6062:ptr = load.8 %6056, %12
    %6063:ctrl, %6064:i32 = load.4 %6061, %13
    %6065:i64 = iext %6064
    %6066:i64 = sfill 32 %6065
    %6068:i64 = iadd %6066, %17
    %6080:ptr = ptroff %6062, %6068
    %6069:ptr = ptroff %6062, %11
    %6070:ctrl, %6071:i64 = load.4 %6063, %6069
    %6072:i64 = icmp slt %6066, %6071
    %6073:ctrl, %6074:ctrl = brcond %6070, %6072
    %6081:ctrl, %6082:i32 = load.1 %6073, %6080
    %6083:ctrl, %6084:phisel = region %6081, %6055
    %6086:i32 = phi %6084, %6082, %20
    %6087:ctrl, %6088:ctrl = brcond %6083, %6086
    %6091:ctrl, %6092:i32 = load.4 %6087, %7
    %6093:i32 = iadd %6092, %8
    %6094:ctrl = store.4 %6091, %6093, %7
    %6097:ctrl, %6098:i32 = load.4 %6088, %6
    %6099:i32 = iadd %6098, %8
    %6100:ctrl = store.4 %6097, %6099, %6
    %6101:ctrl, %6102:phisel = region %6094, %6100
    %6104:ctrl, %6105:ctrl = brcond %6101, %20
    %6108:ctrl, %6109:i32 = load.1 %6104, %31
    %6112:ctrl, %6113:phisel = region %6105, %6108
    %6115:i32 = phi %6113, %8, %6109
    %6116:ctrl, %6117:ctrl = brcond %6112, %6115
    %6120:ctrl, %6121:i32 = load.4 %6116, %7
    %6122:i32 = iadd %6121, %8
    %6123:ctrl = store.4 %6120, %6122, %7
    %6126:ctrl, %6127:i32 = load.4 %6117, %6
    %6128:i32 = iadd %6127, %8
    %6129:ctrl = store.4 %6126, %6128, %6
    %6130:ctrl, %6131:phisel = region %6123, %6129
    %6133:ctrl, %6134:ctrl = brcond %6130, %20
    %6137:ctrl, %6138:i32 = load.1 %6133, %31
    %6141:ctrl, %6142:phisel = region %6134, %6137
    %6144:i32 = phi %6142, %20, %6138
    %6145:ctrl, %6146:ctrl = brcond %6141, %6144
    %6149:ctrl, %6150:i32 = load.4 %6145, %7
    %6151:i32 = iadd %6150, %8
    %6152:ctrl = store.4 %6149, %6151, %7
    %6155:ctrl, %6156:i32 = load.4 %6146, %6
    %6157:i32 = iadd %6156, %8
    %6158:ctrl = store.4 %6155, %6157, %6
    %6159:ctrl, %6160:phisel = region %6152, %6158
    %6162:ctrl, %6163:ctrl = brcond %6159, %20
    %6166:ctrl, %6167:i32 = load.1 %6162, %31
    %6170:ctrl, %6171:i32 = load.1 %6163, %31
    %6172:ctrl, %6173:phisel = region %6170, %6166
    %6175:i32 = phi %6173, %6171, %6167
    %6176:ctrl, %6177:ctrl = brcond %6172, %6175
    %6180:ctrl, %6181:i32 = load.4 %6176, %7
    %6182:i32 = iadd %6181, %8
    %6183:ctrl = store.4 %6180, %6182, %7
    %6186:ctrl, %6187:i32 = load.4 %6177, %6
    %6188:i32 = iadd %6187, %8
    %6189:ctrl = store.4 %6186, %6188, %6
    %6190:ctrl, %6191:phisel = region %6183, %6189
    %6193:ctrl, %6194:ctrl = brcond %6190, %20
    %6197:ctrl, %6198:i32 = load.1 %6193, %31
    %6201:ctrl, %6202:i32 = load.1 %6194, %30
    %6203:ctrl, %6204:phisel = region %6201, %6197
    %6206:i32 = phi %6204, %6202, %6198
    %6207:ctrl, %6208:ctrl = brcond %6203, %6206
    %6211:ctrl, %6212:i32 = load.4 %6207, %7
    %6213:i32 = iadd %6212, %8
    %6214:ctrl = store.4 %6211, %6213, %7
    %6217:ctrl, %6218:i32 = load.4 %6208, %6
    %6219:i32 = iadd %6218, %8
    %6220:ctrl = store.4 %6217, %6219, %6
    %6221:ctrl, %6222:phisel = region %6214, %6220
    %6224:ctrl, %6225:ctrl = brcond %6221, %20
    %6228:ctrl, %6229:i32 = load.1 %6224, %31
    %6232:ctrl, %6233:ptr = load.8 %6225, %29
    %6234:ptr = ptroff %6233, %11
    %6235:ctrl, %6236:i32 = load.1 %6232, %6234
    %6237:ctrl, %6238:phisel = region %6235, %6228
    %6240:i32 = phi %6238, %6236, %6229
    %6241:ctrl, %6242:ctrl = brcond %6237, %6240
    %6245:ctrl, %6246:i32 = load.4 %6241, %7
    %6247:i32 = iadd %6246, %8
    %6248:ctrl = store.4 %6245, %6247, %7
    %6251:ctrl, %6252:i32 = load.4 %6242, %6
    %6253:i32 = iadd %6252, %8
    %6254:ctrl = store.4 %6251, %6253, %6
    %6255:ctrl, %6256:phisel = region %6248, %6254
    %6258:ctrl, %6259:ctrl = brcond %6255, %20
    %6262:ctrl, %6263:i32 = load.1 %6258, %31
    %6266:ctrl, %6267:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6259
    %6268:ctrl, %6269:phisel = region %6266, %6262
    %6271:i32 = phi %6269, %6267, %6263
    %6272:ctrl, %6273:ctrl = brcond %6268, %6271
    %6276:ctrl, %6277:i32 = load.4 %6272, %7
    %6278:i32 = iadd %6277, %8
    %6279:ctrl = store.4 %6276, %6278, %7
    %6282:ctrl, %6283:i32 = load.4 %6273, %6
    %6284:i32 = iadd %6283, %8
    %6285:ctrl = store.4 %6282, %6284, %6
    %6286:ctrl, %6287:phisel = region %6279, %6285
    %6289:ctrl, %6290:ctrl = brcond %6286, %20
    %6293:ctrl, %6294:i32 = load.1 %6289, %31
    %6297:ctrl, %6298:ptr = load.8 %6290, %28
    %6299:ctrl, %6300:i32 = load.4 %6297, %13
    %6301:i64 = iext %6300
    %6302:i64 = sfill 32 %6301
    %6304:i64 = iadd %6302, %17
    %6316:ptr = ptroff %6298, %6304
    %6305:ptr = ptroff %6298, %11
    %6306:ctrl, %6307:i64 = load.4 %6299, %6305
    %6308:i64 = icmp slt %6302, %6307
    %6309:ctrl, %6310:ctrl = brcond %6306, %6308
    %6317:ctrl, %6318:i32 = load.1 %6309, %6316
    %6319:ctrl, %6320:phisel = region %6317, %6293
    %6322:i32 = phi %6320, %6318, %6294
    %6323:ctrl, %6324:ctrl = brcond %6319, %6322
    %6327:ctrl, %6328:i32 = load.4 %6323, %7
    %6329:i32 = iadd %6328, %8
    %6330:ctrl = store.4 %6327, %6329, %7
    %6333:ctrl, %6334:i32 = load.4 %6324, %6
    %6335:i32 = iadd %6334, %8
    %6336:ctrl = store.4 %6333, %6335, %6
    %6337:ctrl, %6338:phisel = region %6330, %6336
    %6340:ctrl, %6341:ctrl = brcond %6337, %20
    %6344:ctrl, %6345:i32 = load.1 %6340, %31
    %6348:ctrl, %6349:ptr = load.8 %6341, %12
    %6350:ctrl, %6351:i32 = load.4 %6348, %13
    %6352:i64 = iext %6351
    %6353:i64 = sfill 32 %6352
    %6355:i64 = iadd %6353, %17
    %6367:ptr = ptroff %6349, %6355
    %6356:ptr = ptroff %6349, %11
    %6357:ctrl, %6358:i64 = load.4 %6350, %6356
    %6359:i64 = icmp slt %6353, %6358
    %6360:ctrl, %6361:ctrl = brcond %6357, %6359
    %6368:ctrl, %6369:i32 = load.1 %6360, %6367
    %6370:ctrl, %6371:phisel = region %6368, %6344
    %6373:i32 = phi %6371, %6369, %6345
    %6374:ctrl, %6375:ctrl = brcond %6370, %6373
    %6378:ctrl, %6379:i32 = load.4 %6374, %7
    %6380:i32 = iadd %6379, %8
    %6381:ctrl = store.4 %6378, %6380, %7
    %6384:ctrl, %6385:i32 = load.4 %6375, %6
    %6386:i32 = iadd %6385, %8
    %6387:ctrl = store.4 %6384, %6386, %6
    %6388:ctrl, %6389:phisel = region %6381, %6387
    %6391:ctrl, %6392:ctrl = brcond %6388, %20
    %6395:ctrl, %6396:i32 = load.1 %6391, %30
    %6399:ctrl, %6400:phisel = region %6392, %6395
    %6402:i32 = phi %6400, %8, %6396
    %6403:ctrl, %6404:ctrl = brcond %6399, %6402
    %6407:ctrl, %6408:i32 = load.4 %6403, %7
    %6409:i32 = iadd %6408, %8
    %6410:ctrl = store.4 %6407, %6409, %7
    %6413:ctrl, %6414:i32 = load.4 %6404, %6
    %6415:i32 = iadd %6414, %8
    %6416:ctrl = store.4 %6413, %6415, %6
    %6417:ctrl, %6418:phisel = region %6410, %6416
    %6420:ctrl, %6421:ctrl = brcond %6417, %20
    %6424:ctrl, %6425:i32 = load.1 %6420, %30
    %6428:ctrl, %6429:phisel = region %6421, %6424
    %6431:i32 = phi %6429, %20, %6425
    %6432:ctrl, %6433:ctrl = brcond %6428, %6431
    %6436:ctrl, %6437:i32 = load.4 %6432, %7
    %6438:i32 = iadd %6437, %8
    %6439:ctrl = store.4 %6436, %6438, %7
    %6442:ctrl, %6443:i32 = load.4 %6433, %6
    %6444:i32 = iadd %6443, %8
    %6445:ctrl = store.4 %6442, %6444, %6
    %6446:ctrl, %6447:phisel = region %6439, %6445
    %6449:ctrl, %6450:ctrl = brcond %6446, %20
    %6453:ctrl, %6454:i32 = load.1 %6449, %30
    %6457:ctrl, %6458:i32 = load.1 %6450, %31
    %6459:ctrl, %6460:phisel = region %6457, %6453
    %6462:i32 = phi %6460, %6458, %6454
    %6463:ctrl, %6464:ctrl = brcond %6459, %6462
    %6467:ctrl, %6468:i32 = load.4 %6463, %7
    %6469:i32 = iadd %6468, %8
    %6470:ctrl = store.4 %6467, %6469, %7
    %6473:ctrl, %6474:i32 = load.4 %6464, %6
    %6475:i32 = iadd %6474, %8
    %6476:ctrl = store.4 %6473, %6475, %6
    %6477:ctrl, %6478:phisel = region %6470, %6476
    %6480:ctrl, %6481:ctrl = brcond %6477, %20
    %6484:ctrl, %6485:i32 = load.1 %6480, %30
    %6488:ctrl, %6489:i32 = load.1 %6481, %30
    %6490:ctrl, %6491:phisel = region %6488, %6484
    %6493:i32 = phi %6491, %6489, %6485
    %6494:ctrl, %6495:ctrl = brcond %6490, %6493
    %6498:ctrl, %6499:i32 = load.4 %6494, %7
    %6500:i32 = iadd %6499, %8
    %6501:ctrl = store.4 %6498, %6500, %7
    %6504:ctrl, %6505:i32 = load.4 %6495, %6
    %6506:i32 = iadd %6505, %8
    %6507:ctrl = store.4 %6504, %6506, %6
    %6508:ctrl, %6509:phisel = region %6501, %6507
    %6511:ctrl, %6512:ctrl = brcond %6508, %20
    %6515:ctrl, %6516:i32 = load.1 %6511, %30
    %6519:ctrl, %6520:ptr = load.8 %6512, %29
    %6521:ptr = ptroff %6520, %11
    %6522:ctrl, %6523:i32 = load.1 %6519, %6521
    %6524:ctrl, %6525:phisel = region %6522, %6515
    %6527:i32 = phi %6525, %6523, %6516
    %6528:ctrl, %6529:ctrl = brcond %6524, %6527
    %6532:ctrl, %6533:i32 = load.4 %6528, %7
    %6534:i32 = iadd %6533, %8
    %6535:ctrl = store.4 %6532, %6534, %7
    %6538:ctrl, %6539:i32 = load.4 %6529, %6
    %6540:i32 = iadd %6539, %8
    %6541:ctrl = store.4 %6538, %6540, %6
    %6542:ctrl, %6543:phisel = region %6535, %6541
    %6545:ctrl, %6546:ctrl = brcond %6542, %20
    %6549:ctrl, %6550:i32 = load.1 %6545, %30
    %6553:ctrl, %6554:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6546
    %6555:ctrl, %6556:phisel = region %6553, %6549
    %6558:i32 = phi %6556, %6554, %6550
    %6559:ctrl, %6560:ctrl = brcond %6555, %6558
    %6563:ctrl, %6564:i32 = load.4 %6559, %7
    %6565:i32 = iadd %6564, %8
    %6566:ctrl = store.4 %6563, %6565, %7
    %6569:ctrl, %6570:i32 = load.4 %6560, %6
    %6571:i32 = iadd %6570, %8
    %6572:ctrl = store.4 %6569, %6571, %6
    %6573:ctrl, %6574:phisel = region %6566, %6572
    %6576:ctrl, %6577:ctrl = brcond %6573, %20
    %6580:ctrl, %6581:i32 = load.1 %6576, %30
    %6584:ctrl, %6585:ptr = load.8 %6577, %28
    %6586:ctrl, %6587:i32 = load.4 %6584, %13
    %6588:i64 = iext %6587
    %6589:i64 = sfill 32 %6588
    %6591:i64 = iadd %6589, %17
    %6603:ptr = ptroff %6585, %6591
    %6592:ptr = ptroff %6585, %11
    %6593:ctrl, %6594:i64 = load.4 %6586, %6592
    %6595:i64 = icmp slt %6589, %6594
    %6596:ctrl, %6597:ctrl = brcond %6593, %6595
    %6604:ctrl, %6605:i32 = load.1 %6596, %6603
    %6606:ctrl, %6607:phisel = region %6604, %6580
    %6609:i32 = phi %6607, %6605, %6581
    %6610:ctrl, %6611:ctrl = brcond %6606, %6609
    %6614:ctrl, %6615:i32 = load.4 %6610, %7
    %6616:i32 = iadd %6615, %8
    %6617:ctrl = store.4 %6614, %6616, %7
    %6620:ctrl, %6621:i32 = load.4 %6611, %6
    %6622:i32 = iadd %6621, %8
    %6623:ctrl = store.4 %6620, %6622, %6
    %6624:ctrl, %6625:phisel = region %6617, %6623
    %6627:ctrl, %6628:ctrl = brcond %6624, %20
    %6631:ctrl, %6632:i32 = load.1 %6627, %30
    %6635:ctrl, %6636:ptr = load.8 %6628, %12
    %6637:ctrl, %6638:i32 = load.4 %6635, %13
    %6639:i64 = iext %6638
    %6640:i64 = sfill 32 %6639
    %6642:i64 = iadd %6640, %17
    %6654:ptr = ptroff %6636, %6642
    %6643:ptr = ptroff %6636, %11
    %6644:ctrl, %6645:i64 = load.4 %6637, %6643
    %6646:i64 = icmp slt %6640, %6645
    %6647:ctrl, %6648:ctrl = brcond %6644, %6646
    %6655:ctrl, %6656:i32 = load.1 %6647, %6654
    %6657:ctrl, %6658:phisel = region %6655, %6631
    %6660:i32 = phi %6658, %6656, %6632
    %6661:ctrl, %6662:ctrl = brcond %6657, %6660
    %6665:ctrl, %6666:i32 = load.4 %6661, %7
    %6667:i32 = iadd %6666, %8
    %6668:ctrl = store.4 %6665, %6667, %7
    %6671:ctrl, %6672:i32 = load.4 %6662, %6
    %6673:i32 = iadd %6672, %8
    %6674:ctrl = store.4 %6671, %6673, %6
    %6675:ctrl, %6676:phisel = region %6668, %6674
    %6678:ctrl, %6679:ctrl = brcond %6675, %20
    %6682:ctrl, %6683:ptr = load.8 %6678, %29
    %6684:ptr = ptroff %6683, %11
    %6685:ctrl, %6686:i32 = load.1 %6682, %6684
    %6689:ctrl, %6690:phisel = region %6679, %6685
    %6692:i32 = phi %6690, %8, %6686
    %6693:ctrl, %6694:ctrl = brcond %6689, %6692
    %6697:ctrl, %6698:i32 = load.4 %6693, %7
    %6699:i32 = iadd %6698, %8
    %6700:ctrl = store.4 %6697, %6699, %7
    %6703:ctrl, %6704:i32 = load.4 %6694, %6
    %6705:i32 = iadd %6704, %8
    %6706:ctrl = store.4 %6703, %6705, %6
    %6707:ctrl, %6708:phisel = region %6700, %6706
    %6710:ctrl, %6711:ctrl = brcond %6707, %20
    %6714:ctrl, %6715:ptr = load.8 %6710, %29
    %6716:ptr = ptroff %6715, %11
    %6717:ctrl, %6718:i32 = load.1 %6714, %6716
    %6721:ctrl, %6722:phisel = region %6711, %6717
    %6724:i32 = phi %6722, %20, %6718
    %6725:ctrl, %6726:ctrl = brcond %6721, %6724
    %6729:ctrl, %6730:i32 = load.4 %6725, %7
    %6731:i32 = iadd %6730, %8
    %6732:ctrl = store.4 %6729, %6731, %7
    %6735:ctrl, %6736:i32 = load.4 %6726, %6
    %6737:i32 = iadd %6736, %8
    %6738:ctrl = store.4 %6735, %6737, %6
    %6739:ctrl, %6740:phisel = region %6732, %6738
    %6742:ctrl, %6743:ctrl = brcond %6739, %20
    %6746:ctrl, %6747:ptr = load.8 %6742, %29
    %6748:ptr = ptroff %6747, %11
    %6749:ctrl, %6750:i32 = load.1 %6746, %6748
    %6753:ctrl, %6754:i32 = load.1 %6743, %31
    %6755:ctrl, %6756:phisel = region %6753, %6749
    %6758:i32 = phi %6756, %6754, %6750
    %6759:ctrl, %6760:ctrl = brcond %6755, %6758
    %6763:ctrl, %6764:i32 = load.4 %6759, %7
    %6765:i32 = iadd %6764, %8
    %6766:ctrl = store.4 %6763, %6765, %7
    %6769:ctrl, %6770:i32 = load.4 %6760, %6
    %6771:i32 = iadd %6770, %8
    %6772:ctrl = store.4 %6769, %6771, %6
    %6773:ctrl, %6774:phisel = region %6766, %6772
    %6776:ctrl, %6777:ctrl = brcond %6773, %20
    %6780:ctrl, %6781:ptr = load.8 %6776, %29
    %6782:ptr = ptroff %6781, %11
    %6783:ctrl, %6784:i32 = load.1 %6780, %6782
    %6787:ctrl, %6788:i32 = load.1 %6777, %30
    %6789:ctrl, %6790:phisel = region %6787, %6783
    %6792:i32 = phi %6790, %6788, %6784
    %6793:ctrl, %6794:ctrl = brcond %6789, %6792
    %6797:ctrl, %6798:i32 = load.4 %6793, %7
    %6799:i32 = iadd %6798, %8
    %6800:ctrl = store.4 %6797, %6799, %7
    %6803:ctrl, %6804:i32 = load.4 %6794, %6
    %6805:i32 = iadd %6804, %8
    %6806:ctrl = store.4 %6803, %6805, %6
    %6807:ctrl, %6808:phisel = region %6800, %6806
    %6810:ctrl, %6811:ctrl = brcond %6807, %20
    %6814:ctrl, %6815:ptr = load.8 %6810, %29
    %6816:ptr = ptroff %6815, %11
    %6817:ctrl, %6818:i32 = load.1 %6814, %6816
    %6821:ctrl, %6822:ptr = load.8 %6811, %29
    %6823:ptr = ptroff %6822, %11
    %6824:ctrl, %6825:i32 = load.1 %6821, %6823
    %6826:ctrl, %6827:phisel = region %6824, %6817
    %6829:i32 = phi %6827, %6825, %6818
    %6830:ctrl, %6831:ctrl = brcond %6826, %6829
    %6834:ctrl, %6835:i32 = load.4 %6830, %7
    %6836:i32 = iadd %6835, %8
    %6837:ctrl = store.4 %6834, %6836, %7
    %6840:ctrl, %6841:i32 = load.4 %6831, %6
    %6842:i32 = iadd %6841, %8
    %6843:ctrl = store.4 %6840, %6842, %6
    %6844:ctrl, %6845:phisel = region %6837, %6843
    %6847:ctrl, %6848:ctrl = brcond %6844, %20
    %6851:ctrl, %6852:ptr = load.8 %6847, %29
    %6853:ptr = ptroff %6852, %11
    %6854:ctrl, %6855:i32 = load.1 %6851, %6853
    %6858:ctrl, %6859:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6848
    %6860:ctrl, %6861:phisel = region %6858, %6854
    %6863:i32 = phi %6861, %6859, %6855
    %6864:ctrl, %6865:ctrl = brcond %6860, %6863
    %6868:ctrl, %6869:i32 = load.4 %6864, %7
    %6870:i32 = iadd %6869, %8
    %6871:ctrl = store.4 %6868, %6870, %7
    %6874:ctrl, %6875:i32 = load.4 %6865, %6
    %6876:i32 = iadd %6875, %8
    %6877:ctrl = store.4 %6874, %6876, %6
    %6878:ctrl, %6879:phisel = region %6871, %6877
    %6881:ctrl, %6882:ctrl = brcond %6878, %20
    %6885:ctrl, %6886:ptr = load.8 %6881, %29
    %6887:ptr = ptroff %6886, %11
    %6888:ctrl, %6889:i32 = load.1 %6885, %6887
    %6892:ctrl, %6893:ptr = load.8 %6882, %28
    %6894:ctrl, %6895:i32 = load.4 %6892, %13
    %6896:i64 = iext %6895
    %6897:i64 = sfill 32 %6896
    %6899:i64 = iadd %6897, %17
    %6911:ptr = ptroff %6893, %6899
    %6900:ptr = ptroff %6893, %11
    %6901:ctrl, %6902:i64 = load.4 %6894, %6900
    %6903:i64 = icmp slt %6897, %6902
    %6904:ctrl, %6905:ctrl = brcond %6901, %6903
    %6912:ctrl, %6913:i32 = load.1 %6904, %6911
    %6914:ctrl, %6915:phisel = region %6912, %6888
    %6917:i32 = phi %6915, %6913, %6889
    %6918:ctrl, %6919:ctrl = brcond %6914, %6917
    %6922:ctrl, %6923:i32 = load.4 %6918, %7
    %6924:i32 = iadd %6923, %8
    %6925:ctrl = store.4 %6922, %6924, %7
    %6928:ctrl, %6929:i32 = load.4 %6919, %6
    %6930:i32 = iadd %6929, %8
    %6931:ctrl = store.4 %6928, %6930, %6
    %6932:ctrl, %6933:phisel = region %6925, %6931
    %6935:ctrl, %6936:ctrl = brcond %6932, %20
    %6939:ctrl, %6940:ptr = load.8 %6935, %29
    %6941:ptr = ptroff %6940, %11
    %6942:ctrl, %6943:i32 = load.1 %6939, %6941
    %6946:ctrl, %6947:ptr = load.8 %6936, %12
    %6948:ctrl, %6949:i32 = load.4 %6946, %13
    %6950:i64 = iext %6949
    %6951:i64 = sfill 32 %6950
    %6953:i64 = iadd %6951, %17
    %6965:ptr = ptroff %6947, %6953
    %6954:ptr = ptroff %6947, %11
    %6955:ctrl, %6956:i64 = load.4 %6948, %6954
    %6957:i64 = icmp slt %6951, %6956
    %6958:ctrl, %6959:ctrl = brcond %6955, %6957
    %6966:ctrl, %6967:i32 = load.1 %6958, %6965
    %6968:ctrl, %6969:phisel = region %6966, %6942
    %6971:i32 = phi %6969, %6967, %6943
    %6972:ctrl, %6973:ctrl = brcond %6968, %6971
    %6976:ctrl, %6977:i32 = load.4 %6972, %7
    %6978:i32 = iadd %6977, %8
    %6979:ctrl = store.4 %6976, %6978, %7
    %6982:ctrl, %6983:i32 = load.4 %6973, %6
    %6984:i32 = iadd %6983, %8
    %6985:ctrl = store.4 %6982, %6984, %6
    %6986:ctrl, %6987:phisel = region %6979, %6985
    %6989:ctrl, %6990:ctrl = brcond %6986, %20
    %6993:ctrl, %6994:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6989
    %6997:ctrl, %6998:phisel = region %6990, %6993
    %7000:i32 = phi %6998, %8, %6994
    %7001:ctrl, %7002:ctrl = brcond %6997, %7000
    %7005:ctrl, %7006:i32 = load.4 %7001, %7
    %7007:i32 = iadd %7006, %8
    %7008:ctrl = store.4 %7005, %7007, %7
    %7011:ctrl, %7012:i32 = load.4 %7002, %6
    %7013:i32 = iadd %7012, %8
    %7014:ctrl = store.4 %7011, %7013, %6
    %7015:ctrl, %7016:phisel = region %7008, %7014
    %7018:ctrl, %7019:ctrl = brcond %7015, %20
    %7022:ctrl, %7023:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7018
    %7026:ctrl, %7027:phisel = region %7019, %7022
    %7029:i32 = phi %7027, %20, %7023
    %7030:ctrl, %7031:ctrl = brcond %7026, %7029
    %7034:ctrl, %7035:i32 = load.4 %7030, %7
    %7036:i32 = iadd %7035, %8
    %7037:ctrl = store.4 %7034, %7036, %7
    %7040:ctrl, %7041:i32 = load.4 %7031, %6
    %7042:i32 = iadd %7041, %8
    %7043:ctrl = store.4 %7040, %7042, %6
    %7044:ctrl, %7045:phisel = region %7037, %7043
    %7047:ctrl, %7048:ctrl = brcond %7044, %20
    %7051:ctrl, %7052:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7047
    %7055:ctrl, %7056:i32 = load.1 %7048, %31
    %7057:ctrl, %7058:phisel = region %7055, %7051
    %7060:i32 = phi %7058, %7056, %7052
    %7061:ctrl, %7062:ctrl = brcond %7057, %7060
    %7065:ctrl, %7066:i32 = load.4 %7061, %7
    %7067:i32 = iadd %7066, %8
    %7068:ctrl = store.4 %7065, %7067, %7
    %7071:ctrl, %7072:i32 = load.4 %7062, %6
    %7073:i32 = iadd %7072, %8
    %7074:ctrl = store.4 %7071, %7073, %6
    %7075:ctrl, %7076:phisel = region %7068, %7074
    %7078:ctrl, %7079:ctrl = brcond %7075, %20
    %7082:ctrl, %7083:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7078
    %7086:ctrl, %7087:i32 = load.1 %7079, %30
    %7088:ctrl, %7089:phisel = region %7086, %7082
    %7091:i32 = phi %7089, %7087, %7083
    %7092:ctrl, %7093:ctrl = brcond %7088, %7091
    %7096:ctrl, %7097:i32 = load.4 %7092, %7
    %7098:i32 = iadd %7097, %8
    %7099:ctrl = store.4 %7096, %7098, %7
    %7102:ctrl, %7103:i32 = load.4 %7093, %6
    %7104:i32 = iadd %7103, %8
    %7105:ctrl = store.4 %7102, %7104, %6
    %7106:ctrl, %7107:phisel = region %7099, %7105
    %7109:ctrl, %7110:ctrl = brcond %7106, %20
    %7113:ctrl, %7114:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7109
    %7117:ctrl, %7118:ptr = load.8 %7110, %29
    %7119:ptr = ptroff %7118, %11
    %7120:ctrl, %7121:i32 = load.1 %7117, %7119
    %7122:ctrl, %7123:phisel = region %7120, %7113
    %7125:i32 = phi %7123, %7121, %7114
    %7126:ctrl, %7127:ctrl = brcond %7122, %7125
    %7130:ctrl, %7131:i32 = load.4 %7126, %7
    %7132:i32 = iadd %7131, %8
    %7133:ctrl = store.4 %7130, %7132, %7
    %7136:ctrl, %7137:i32 = load.4 %7127, %6
    %7138:i32 = iadd %7137, %8
    %7139:ctrl = store.4 %7136, %7138, %6
    %7140:ctrl, %7141:phisel = region %7133, %7139
    %7143:ctrl, %7144:ctrl = brcond %7140, %20
    %7147:ctrl, %7148:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7143
    %7151:ctrl, %7152:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7144
    %7153:ctrl, %7154:phisel = region %7151, %7147
    %7156:i32 = phi %7154, %7152, %7148
    %7157:ctrl, %7158:ctrl = brcond %7153, %7156
    %7161:ctrl, %7162:i32 = load.4 %7157, %7
    %7163:i32 = iadd %7162, %8
    %7164:ctrl = store.4 %7161, %7163, %7
    %7167:ctrl, %7168:i32 = load.4 %7158, %6
    %7169:i32 = iadd %7168, %8
    %7170:ctrl = store.4 %7167, %7169, %6
    %7171:ctrl, %7172:phisel = region %7164, %7170
    %7174:ctrl, %7175:ctrl = brcond %7171, %20
    %7178:ctrl, %7179:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7174
    %7182:ctrl, %7183:ptr = load.8 %7175, %28
    %7184:ctrl, %7185:i32 = load.4 %7182, %13
    %7186:i64 = iext %7185
    %7187:i64 = sfill 32 %7186
    %7189:i64 = iadd %7187, %17
    %7201:ptr = ptroff %7183, %7189
    %7190:ptr = ptroff %7183, %11
    %7191:ctrl, %7192:i64 = load.4 %7184, %7190
    %7193:i64 = icmp slt %7187, %7192
    %7194:ctrl, %7195:ctrl = brcond %7191, %7193
    %7202:ctrl, %7203:i32 = load.1 %7194, %7201
    %7204:ctrl, %7205:phisel = region %7202, %7178
    %7207:i32 = phi %7205, %7203, %7179
    %7208:ctrl, %7209:ctrl = brcond %7204, %7207
    %7212:ctrl, %7213:i32 = load.4 %7208, %7
    %7214:i32 = iadd %7213, %8
    %7215:ctrl = store.4 %7212, %7214, %7
    %7218:ctrl, %7219:i32 = load.4 %7209, %6
    %7220:i32 = iadd %7219, %8
    %7221:ctrl = store.4 %7218, %7220, %6
    %7222:ctrl, %7223:phisel = region %7215, %7221
    %7225:ctrl, %7226:ctrl = brcond %7222, %20
    %7229:ctrl, %7230:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7225
    %7233:ctrl, %7234:ptr = load.8 %7226, %12
    %7235:ctrl, %7236:i32 = load.4 %7233, %13
    %7237:i64 = iext %7236
    %7238:i64 = sfill 32 %7237
    %7240:i64 = iadd %7238, %17
    %7252:ptr = ptroff %7234, %7240
    %7241:ptr = ptroff %7234, %11
    %7242:ctrl, %7243:i64 = load.4 %7235, %7241
    %7244:i64 = icmp slt %7238, %7243
    %7245:ctrl, %7246:ctrl = brcond %7242, %7244
    %7253:ctrl, %7254:i32 = load.1 %7245, %7252
    %7255:ctrl, %7256:phisel = region %7253, %7229
    %7258:i32 = phi %7256, %7254, %7230
    %7259:ctrl, %7260:ctrl = brcond %7255, %7258
    %7263:ctrl, %7264:i32 = load.4 %7259, %7
    %7265:i32 = iadd %7264, %8
    %7266:ctrl = store.4 %7263, %7265, %7
    %7269:ctrl, %7270:i32 = load.4 %7260, %6
    %7271:i32 = iadd %7270, %8
    %7272:ctrl = store.4 %7269, %7271, %6
    %7273:ctrl, %7274:phisel = region %7266, %7272
    %7276:ctrl, %7277:ctrl = brcond %7273, %20
    %7280:ctrl, %7281:ptr = load.8 %7276, %28
    %7282:ctrl, %7283:i32 = load.4 %7280, %13
    %7284:i64 = iext %7283
    %7285:i64 = sfill 32 %7284
    %7287:i64 = iadd %7285, %17
    %7299:ptr = ptroff %7281, %7287
    %7288:ptr = ptroff %7281, %11
    %7289:ctrl, %7290:i64 = load.4 %7282, %7288
    %7291:i64 = icmp slt %7285, %7290
    %7292:ctrl, %7293:ctrl = brcond %7289, %7291
    %7300:ctrl, %7301:i32 = load.1 %7292, %7299
    %7298:ctrl = call @throw_index_out_of_range_exception %7293
    unreachable %7298
    %7304:ctrl, %7305:phisel = region %7277, %7300
    %7307:i32 = phi %7305, %8, %7301
    %7308:ctrl, %7309:ctrl = brcond %7304, %7307
    %7312:ctrl, %7313:i32 = load.4 %7308, %7
    %7314:i32 = iadd %7313, %8
    %7315:ctrl = store.4 %7312, %7314, %7
    %7318:ctrl, %7319:i32 = load.4 %7309, %6
    %7320:i32 = iadd %7319, %8
    %7321:ctrl = store.4 %7318, %7320, %6
    %7322:ctrl, %7323:phisel = region %7315, %7321
    %7325:ctrl, %7326:ctrl = brcond %7322, %20
    %7329:ctrl, %7330:ptr = load.8 %7325, %28
    %7331:ctrl, %7332:i32 = load.4 %7329, %13
    %7333:i64 = iext %7332
    %7334:i64 = sfill 32 %7333
    %7336:i64 = iadd %7334, %17
    %7348:ptr = ptroff %7330, %7336
    %7337:ptr = ptroff %7330, %11
    %7338:ctrl, %7339:i64 = load.4 %7331, %7337
    %7340:i64 = icmp slt %7334, %7339
    %7341:ctrl, %7342:ctrl = brcond %7338, %7340
    %7349:ctrl, %7350:i32 = load.1 %7341, %7348
    %7347:ctrl = call @throw_index_out_of_range_exception %7342
    unreachable %7347
    %7353:ctrl, %7354:phisel = region %7326, %7349
    %7356:i32 = phi %7354, %20, %7350
    %7357:ctrl, %7358:ctrl = brcond %7353, %7356
    %7361:ctrl, %7362:i32 = load.4 %7357, %7
    %7363:i32 = iadd %7362, %8
    %7364:ctrl = store.4 %7361, %7363, %7
    %7367:ctrl, %7368:i32 = load.4 %7358, %6
    %7369:i32 = iadd %7368, %8
    %7370:ctrl = store.4 %7367, %7369, %6
    %7371:ctrl, %7372:phisel = region %7364, %7370
    %7374:ctrl, %7375:ctrl = brcond %7371, %20
    %7378:ctrl, %7379:ptr = load.8 %7374, %28
    %7380:ctrl, %7381:i32 = load.4 %7378, %13
    %7382:i64 = iext %7381
    %7383:i64 = sfill 32 %7382
    %7385:i64 = iadd %7383, %17
    %7397:ptr = ptroff %7379, %7385
    %7386:ptr = ptroff %7379, %11
    %7387:ctrl, %7388:i64 = load.4 %7380, %7386
    %7389:i64 = icmp slt %7383, %7388
    %7390:ctrl, %7391:ctrl = brcond %7387, %7389
    %7398:ctrl, %7399:i32 = load.1 %7390, %7397
    %7396:ctrl = call @throw_index_out_of_range_exception %7391
    unreachable %7396
    %7402:ctrl, %7403:i32 = load.1 %7375, %31
    %7404:ctrl, %7405:phisel = region %7402, %7398
    %7407:i32 = phi %7405, %7403, %7399
    %7408:ctrl, %7409:ctrl = brcond %7404, %7407
    %7412:ctrl, %7413:i32 = load.4 %7408, %7
    %7414:i32 = iadd %7413, %8
    %7415:ctrl = store.4 %7412, %7414, %7
    %7418:ctrl, %7419:i32 = load.4 %7409, %6
    %7420:i32 = iadd %7419, %8
    %7421:ctrl = store.4 %7418, %7420, %6
    %7422:ctrl, %7423:phisel = region %7415, %7421
    %7425:ctrl, %7426:ctrl = brcond %7422, %20
    %7429:ctrl, %7430:ptr = load.8 %7425, %28
    %7431:ctrl, %7432:i32 = load.4 %7429, %13
    %7433:i64 = iext %7432
    %7434:i64 = sfill 32 %7433
    %7436:i64 = iadd %7434, %17
    %7448:ptr = ptroff %7430, %7436
    %7437:ptr = ptroff %7430, %11
    %7438:ctrl, %7439:i64 = load.4 %7431, %7437
    %7440:i64 = icmp slt %7434, %7439
    %7441:ctrl, %7442:ctrl = brcond %7438, %7440
    %7449:ctrl, %7450:i32 = load.1 %7441, %7448
    %7447:ctrl = call @throw_index_out_of_range_exception %7442
    unreachable %7447
    %7453:ctrl, %7454:i32 = load.1 %7426, %30
    %7455:ctrl, %7456:phisel = region %7453, %7449
    %7458:i32 = phi %7456, %7454, %7450
    %7459:ctrl, %7460:ctrl = brcond %7455, %7458
    %7463:ctrl, %7464:i32 = load.4 %7459, %7
    %7465:i32 = iadd %7464, %8
    %7466:ctrl = store.4 %7463, %7465, %7
    %7469:ctrl, %7470:i32 = load.4 %7460, %6
    %7471:i32 = iadd %7470, %8
    %7472:ctrl = store.4 %7469, %7471, %6
    %7473:ctrl, %7474:phisel = region %7466, %7472
    %7476:ctrl, %7477:ctrl = brcond %7473, %20
    %7480:ctrl, %7481:ptr = load.8 %7476, %28
    %7482:ctrl, %7483:i32 = load.4 %7480, %13
    %7484:i64 = iext %7483
    %7485:i64 = sfill 32 %7484
    %7487:i64 = iadd %7485, %17
    %7499:ptr = ptroff %7481, %7487
    %7488:ptr = ptroff %7481, %11
    %7489:ctrl, %7490:i64 = load.4 %7482, %7488
    %7491:i64 = icmp slt %7485, %7490
    %7492:ctrl, %7493:ctrl = brcond %7489, %7491
    %7500:ctrl, %7501:i32 = load.1 %7492, %7499
    %7498:ctrl = call @throw_index_out_of_range_exception %7493
    unreachable %7498
    %7504:ctrl, %7505:ptr = load.8 %7477, %29
    %7506:ptr = ptroff %7505, %11
    %7507:ctrl, %7508:i32 = load.1 %7504, %7506
    %7509:ctrl, %7510:phisel = region %7507, %7500
    %7512:i32 = phi %7510, %7508, %7501
    %7513:ctrl, %7514:ctrl = brcond %7509, %7512
    %7517:ctrl, %7518:i32 = load.4 %7513, %7
    %7519:i32 = iadd %7518, %8
    %7520:ctrl = store.4 %7517, %7519, %7
    %7523:ctrl, %7524:i32 = load.4 %7514, %6
    %7525:i32 = iadd %7524, %8
    %7526:ctrl = store.4 %7523, %7525, %6
    %7527:ctrl, %7528:phisel = region %7520, %7526
    %7530:ctrl, %7531:ctrl = brcond %7527, %20
    %7534:ctrl, %7535:ptr = load.8 %7530, %28
    %7536:ctrl, %7537:i32 = load.4 %7534, %13
    %7538:i64 = iext %7537
    %7539:i64 = sfill 32 %7538
    %7541:i64 = iadd %7539, %17
    %7553:ptr = ptroff %7535, %7541
    %7542:ptr = ptroff %7535, %11
    %7543:ctrl, %7544:i64 = load.4 %7536, %7542
    %7545:i64 = icmp slt %7539, %7544
    %7546:ctrl, %7547:ctrl = brcond %7543, %7545
    %7554:ctrl, %7555:i32 = load.1 %7546, %7553
    %7552:ctrl = call @throw_index_out_of_range_exception %7547
    unreachable %7552
    %7558:ctrl, %7559:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7531
    %7560:ctrl, %7561:phisel = region %7558, %7554
    %7563:i32 = phi %7561, %7559, %7555
    %7564:ctrl, %7565:ctrl = brcond %7560, %7563
    %7568:ctrl, %7569:i32 = load.4 %7564, %7
    %7570:i32 = iadd %7569, %8
    %7571:ctrl = store.4 %7568, %7570, %7
    %7574:ctrl, %7575:i32 = load.4 %7565, %6
    %7576:i32 = iadd %7575, %8
    %7577:ctrl = store.4 %7574, %7576, %6
    %7578:ctrl, %7579:phisel = region %7571, %7577
    %7581:ctrl, %7582:ctrl = brcond %7578, %20
    %7585:ctrl, %7586:ptr = load.8 %7581, %28
    %7587:ctrl, %7588:i32 = load.4 %7585, %13
    %7589:i64 = iext %7588
    %7590:i64 = sfill 32 %7589
    %7592:i64 = iadd %7590, %17
    %7604:ptr = ptroff %7586, %7592
    %7593:ptr = ptroff %7586, %11
    %7594:ctrl, %7595:i64 = load.4 %7587, %7593
    %7596:i64 = icmp slt %7590, %7595
    %7597:ctrl, %7598:ctrl = brcond %7594, %7596
    %7605:ctrl, %7606:i32 = load.1 %7597, %7604
    %7603:ctrl = call @throw_index_out_of_range_exception %7598
    unreachable %7603
    %7609:ctrl, %7610:ptr = load.8 %7582, %28
    %7611:ctrl, %7612:i32 = load.4 %7609, %13
    %7613:i64 = iext %7612
    %7614:i64 = sfill 32 %7613
    %7616:i64 = iadd %7614, %17
    %7628:ptr = ptroff %7610, %7616
    %7617:ptr = ptroff %7610, %11
    %7618:ctrl, %7619:i64 = load.4 %7611, %7617
    %7620:i64 = icmp slt %7614, %7619
    %7621:ctrl, %7622:ctrl = brcond %7618, %7620
    %7629:ctrl, %7630:i32 = load.1 %7621, %7628
    %7631:ctrl, %7632:phisel = region %7629, %7605
    %7634:i32 = phi %7632, %7630, %7606
    %7635:ctrl, %7636:ctrl = brcond %7631, %7634
    %7639:ctrl, %7640:i32 = load.4 %7635, %7
    %7641:i32 = iadd %7640, %8
    %7642:ctrl = store.4 %7639, %7641, %7
    %7645:ctrl, %7646:i32 = load.4 %7636, %6
    %7647:i32 = iadd %7646, %8
    %7648:ctrl = store.4 %7645, %7647, %6
    %7649:ctrl, %7650:phisel = region %7642, %7648
    %7652:ctrl, %7653:ctrl = brcond %7649, %20
    %7656:ctrl, %7657:ptr = load.8 %7652, %28
    %7658:ctrl, %7659:i32 = load.4 %7656, %13
    %7660:i64 = iext %7659
    %7661:i64 = sfill 32 %7660
    %7663:i64 = iadd %7661, %17
    %7675:ptr = ptroff %7657, %7663
    %7664:ptr = ptroff %7657, %11
    %7665:ctrl, %7666:i64 = load.4 %7658, %7664
    %7667:i64 = icmp slt %7661, %7666
    %7668:ctrl, %7669:ctrl = brcond %7665, %7667
    %7676:ctrl, %7677:i32 = load.1 %7668, %7675
    %7674:ctrl = call @throw_index_out_of_range_exception %7669
    unreachable %7674
    %7680:ctrl, %7681:ptr = load.8 %7653, %12
    %7682:ctrl, %7683:i32 = load.4 %7680, %13
    %7684:i64 = iext %7683
    %7685:i64 = sfill 32 %7684
    %7687:i64 = iadd %7685, %17
    %7699:ptr = ptroff %7681, %7687
    %7688:ptr = ptroff %7681, %11
    %7689:ctrl, %7690:i64 = load.4 %7682, %7688
    %7691:i64 = icmp slt %7685, %7690
    %7692:ctrl, %7693:ctrl = brcond %7689, %7691
    %7700:ctrl, %7701:i32 = load.1 %7692, %7699
    %7702:ctrl, %7703:phisel = region %7700, %7676
    %7705:i32 = phi %7703, %7701, %7677
    %7706:ctrl, %7707:ctrl = brcond %7702, %7705
    %7710:ctrl, %7711:i32 = load.4 %7706, %7
    %7712:i32 = iadd %7711, %8
    %7713:ctrl = store.4 %7710, %7712, %7
    %7716:ctrl, %7717:i32 = load.4 %7707, %6
    %7718:i32 = iadd %7717, %8
    %7719:ctrl = store.4 %7716, %7718, %6
    %7720:ctrl, %7721:phisel = region %7713, %7719
    %7723:ctrl, %7724:ctrl = brcond %7720, %20
    %7727:ctrl, %7728:ptr = load.8 %7723, %12
    %7729:ctrl, %7730:i32 = load.4 %7727, %13
    %7731:i64 = iext %7730
    %7732:i64 = sfill 32 %7731
    %7734:i64 = iadd %7732, %17
    %7746:ptr = ptroff %7728, %7734
    %7735:ptr = ptroff %7728, %11
    %7736:ctrl, %7737:i64 = load.4 %7729, %7735
    %7738:i64 = icmp slt %7732, %7737
    %7739:ctrl, %7740:ctrl = brcond %7736, %7738
    %7747:ctrl, %7748:i32 = load.1 %7739, %7746
    %7745:ctrl = call @throw_index_out_of_range_exception %7740
    unreachable %7745
    %7751:ctrl, %7752:phisel = region %7724, %7747
    %7754:i32 = phi %7752, %8, %7748
    %7755:ctrl, %7756:ctrl = brcond %7751, %7754
    %7759:ctrl, %7760:i32 = load.4 %7755, %7
    %7761:i32 = iadd %7760, %8
    %7762:ctrl = store.4 %7759, %7761, %7
    %7765:ctrl, %7766:i32 = load.4 %7756, %6
    %7767:i32 = iadd %7766, %8
    %7768:ctrl = store.4 %7765, %7767, %6
    %7769:ctrl, %7770:phisel = region %7762, %7768
    %7772:ctrl, %7773:ctrl = brcond %7769, %20
    %7776:ctrl, %7777:ptr = load.8 %7772, %12
    %7778:ctrl, %7779:i32 = load.4 %7776, %13
    %7780:i64 = iext %7779
    %7781:i64 = sfill 32 %7780
    %7783:i64 = iadd %7781, %17
    %7795:ptr = ptroff %7777, %7783
    %7784:ptr = ptroff %7777, %11
    %7785:ctrl, %7786:i64 = load.4 %7778, %7784
    %7787:i64 = icmp slt %7781, %7786
    %7788:ctrl, %7789:ctrl = brcond %7785, %7787
    %7796:ctrl, %7797:i32 = load.1 %7788, %7795
    %7794:ctrl = call @throw_index_out_of_range_exception %7789
    unreachable %7794
    %7800:ctrl, %7801:phisel = region %7773, %7796
    %7803:i32 = phi %7801, %20, %7797
    %7804:ctrl, %7805:ctrl = brcond %7800, %7803
    %7808:ctrl, %7809:i32 = load.4 %7804, %7
    %7810:i32 = iadd %7809, %8
    %7811:ctrl = store.4 %7808, %7810, %7
    %7814:ctrl, %7815:i32 = load.4 %7805, %6
    %7816:i32 = iadd %7815, %8
    %7817:ctrl = store.4 %7814, %7816, %6
    %7818:ctrl, %7819:phisel = region %7811, %7817
    %7821:ctrl, %7822:ctrl = brcond %7818, %20
    %7825:ctrl, %7826:ptr = load.8 %7821, %12
    %7827:ctrl, %7828:i32 = load.4 %7825, %13
    %7829:i64 = iext %7828
    %7830:i64 = sfill 32 %7829
    %7832:i64 = iadd %7830, %17
    %7844:ptr = ptroff %7826, %7832
    %7833:ptr = ptroff %7826, %11
    %7834:ctrl, %7835:i64 = load.4 %7827, %7833
    %7836:i64 = icmp slt %7830, %7835
    %7837:ctrl, %7838:ctrl = brcond %7834, %7836
    %7845:ctrl, %7846:i32 = load.1 %7837, %7844
    %7843:ctrl = call @throw_index_out_of_range_exception %7838
    unreachable %7843
    %7849:ctrl, %7850:i32 = load.1 %7822, %31
    %7851:ctrl, %7852:phisel = region %7849, %7845
    %7854:i32 = phi %7852, %7850, %7846
    %7855:ctrl, %7856:ctrl = brcond %7851, %7854
    %7859:ctrl, %7860:i32 = load.4 %7855, %7
    %7861:i32 = iadd %7860, %8
    %7862:ctrl = store.4 %7859, %7861, %7
    %7865:ctrl, %7866:i32 = load.4 %7856, %6
    %7867:i32 = iadd %7866, %8
    %7868:ctrl = store.4 %7865, %7867, %6
    %7869:ctrl, %7870:phisel = region %7862, %7868
    %7872:ctrl, %7873:ctrl = brcond %7869, %20
    %7876:ctrl, %7877:ptr = load.8 %7872, %12
    %7878:ctrl, %7879:i32 = load.4 %7876, %13
    %7880:i64 = iext %7879
    %7881:i64 = sfill 32 %7880
    %7883:i64 = iadd %7881, %17
    %7895:ptr = ptroff %7877, %7883
    %7884:ptr = ptroff %7877, %11
    %7885:ctrl, %7886:i64 = load.4 %7878, %7884
    %7887:i64 = icmp slt %7881, %7886
    %7888:ctrl, %7889:ctrl = brcond %7885, %7887
    %7896:ctrl, %7897:i32 = load.1 %7888, %7895
    %7894:ctrl = call @throw_index_out_of_range_exception %7889
    unreachable %7894
    %7900:ctrl, %7901:i32 = load.1 %7873, %30
    %7902:ctrl, %7903:phisel = region %7900, %7896
    %7905:i32 = phi %7903, %7901, %7897
    %7906:ctrl, %7907:ctrl = brcond %7902, %7905
    %7910:ctrl, %7911:i32 = load.4 %7906, %7
    %7912:i32 = iadd %7911, %8
    %7913:ctrl = store.4 %7910, %7912, %7
    %7916:ctrl, %7917:i32 = load.4 %7907, %6
    %7918:i32 = iadd %7917, %8
    %7919:ctrl = store.4 %7916, %7918, %6
    %7920:ctrl, %7921:phisel = region %7913, %7919
    %7923:ctrl, %7924:ctrl = brcond %7920, %20
    %7927:ctrl, %7928:ptr = load.8 %7923, %12
    %7929:ctrl, %7930:i32 = load.4 %7927, %13
    %7931:i64 = iext %7930
    %7932:i64 = sfill 32 %7931
    %7934:i64 = iadd %7932, %17
    %7946:ptr = ptroff %7928, %7934
    %7935:ptr = ptroff %7928, %11
    %7936:ctrl, %7937:i64 = load.4 %7929, %7935
    %7938:i64 = icmp slt %7932, %7937
    %7939:ctrl, %7940:ctrl = brcond %7936, %7938
    %7947:ctrl, %7948:i32 = load.1 %7939, %7946
    %7945:ctrl = call @throw_index_out_of_range_exception %7940
    unreachable %7945
    %7951:ctrl, %7952:ptr = load.8 %7924, %29
    %7953:ptr = ptroff %7952, %11
    %7954:ctrl, %7955:i32 = load.1 %7951, %7953
    %7956:ctrl, %7957:phisel = region %7954, %7947
    %7959:i32 = phi %7957, %7955, %7948
    %7960:ctrl, %7961:ctrl = brcond %7956, %7959
    %7964:ctrl, %7965:i32 = load.4 %7960, %7
    %7966:i32 = iadd %7965, %8
    %7967:ctrl = store.4 %7964, %7966, %7
    %7970:ctrl, %7971:i32 = load.4 %7961, %6
    %7972:i32 = iadd %7971, %8
    %7973:ctrl = store.4 %7970, %7972, %6
    %7974:ctrl, %7975:phisel = region %7967, %7973
    %7977:ctrl, %7978:ctrl = brcond %7974, %20
    %7981:ctrl, %7982:ptr = load.8 %7977, %12
    %7983:ctrl, %7984:i32 = load.4 %7981, %13
    %7985:i64 = iext %7984
    %7986:i64 = sfill 32 %7985
    %7988:i64 = iadd %7986, %17
    %8000:ptr = ptroff %7982, %7988
    %7989:ptr = ptroff %7982, %11
    %7990:ctrl, %7991:i64 = load.4 %7983, %7989
    %7992:i64 = icmp slt %7986, %7991
    %7993:ctrl, %7994:ctrl = brcond %7990, %7992
    %8001:ctrl, %8002:i32 = load.1 %7993, %8000
    %7999:ctrl = call @throw_index_out_of_range_exception %7994
    unreachable %7999
    %8005:ctrl, %8006:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7978
    %8007:ctrl, %8008:phisel = region %8005, %8001
    %8010:i32 = phi %8008, %8006, %8002
    %8011:ctrl, %8012:ctrl = brcond %8007, %8010
    %8015:ctrl, %8016:i32 = load.4 %8011, %7
    %8017:i32 = iadd %8016, %8
    %8018:ctrl = store.4 %8015, %8017, %7
    %8021:ctrl, %8022:i32 = load.4 %8012, %6
    %8023:i32 = iadd %8022, %8
    %8024:ctrl = store.4 %8021, %8023, %6
    %8025:ctrl, %8026:phisel = region %8018, %8024
    %8028:ctrl, %8029:ctrl = brcond %8025, %20
    %8032:ctrl, %8033:ptr = load.8 %8028, %12
    %8034:ctrl, %8035:i32 = load.4 %8032, %13
    %8036:i64 = iext %8035
    %8037:i64 = sfill 32 %8036
    %8039:i64 = iadd %8037, %17
    %8051:ptr = ptroff %8033, %8039
    %8040:ptr = ptroff %8033, %11
    %8041:ctrl, %8042:i64 = load.4 %8034, %8040
    %8043:i64 = icmp slt %8037, %8042
    %8044:ctrl, %8045:ctrl = brcond %8041, %8043
    %8052:ctrl, %8053:i32 = load.1 %8044, %8051
    %8050:ctrl = call @throw_index_out_of_range_exception %8045
    unreachable %8050
    %8056:ctrl, %8057:ptr = load.8 %8029, %28
    %8058:ctrl, %8059:i32 = load.4 %8056, %13
    %8060:i64 = iext %8059
    %8061:i64 = sfill 32 %8060
    %8063:i64 = iadd %8061, %17
    %8075:ptr = ptroff %8057, %8063
    %8064:ptr = ptroff %8057, %11
    %8065:ctrl, %8066:i64 = load.4 %8058, %8064
    %8067:i64 = icmp slt %8061, %8066
    %8068:ctrl, %8069:ctrl = brcond %8065, %8067
    %8076:ctrl, %8077:i32 = load.1 %8068, %8075
    %8078:ctrl, %8079:phisel = region %8076, %8052
    %8081:i32 = phi %8079, %8077, %8053
    %8082:ctrl, %8083:ctrl = brcond %8078, %8081
    %8086:ctrl, %8087:i32 = load.4 %8082, %7
    %8088:i32 = iadd %8087, %8
    %8089:ctrl = store.4 %8086, %8088, %7
    %8092:ctrl, %8093:i32 = load.4 %8083, %6
    %8094:i32 = iadd %8093, %8
    %8095:ctrl = store.4 %8092, %8094, %6
    %8096:ctrl, %8097:phisel = region %8089, %8095
    %8099:ctrl, %8100:ctrl = brcond %8096, %20
    %8103:ctrl, %8104:ptr = load.8 %8099, %12
    %8105:ctrl, %8106:i32 = load.4 %8103, %13
    %8107:i64 = iext %8106
    %8108:i64 = sfill 32 %8107
    %8110:i64 = iadd %8108, %17
    %8122:ptr = ptroff %8104, %8110
    %8111:ptr = ptroff %8104, %11
    %8112:ctrl, %8113:i64 = load.4 %8105, %8111
    %8114:i64 = icmp slt %8108, %8113
    %8115:ctrl, %8116:ctrl = brcond %8112, %8114
    %8123:ctrl, %8124:i32 = load.1 %8115, %8122
    %8121:ctrl = call @throw_index_out_of_range_exception %8116
    unreachable %8121
    %8127:ctrl, %8128:ptr = load.8 %8100, %12
    %8129:ctrl, %8130:i32 = load.4 %8127, %13
    %8131:i64 = iext %8130
    %8132:i64 = sfill 32 %8131
    %8134:i64 = iadd %8132, %17
    %8146:ptr = ptroff %8128, %8134
    %8135:ptr = ptroff %8128, %11
    %8136:ctrl, %8137:i64 = load.4 %8129, %8135
    %8138:i64 = icmp slt %8132, %8137
    %8139:ctrl, %8140:ctrl = brcond %8136, %8138
    %8147:ctrl, %8148:i32 = load.1 %8139, %8146
    %8149:ctrl, %8150:phisel = region %8147, %8123
    %8151:i32 = phi %8150, %8148, %8124
    %8152:ctrl, %8153:ctrl = brcond %8149, %8151
    %8156:ctrl, %8157:i32 = load.4 %8152, %7
    %8158:i32 = iadd %8157, %8
    %8159:ctrl = store.4 %8156, %8158, %7
    %8162:ctrl, %8163:i32 = load.4 %8153, %6
    %8164:i32 = iadd %8163, %8
    %8165:ctrl = store.4 %8162, %8164, %6
    %8166:ctrl, %8167:phisel = region %8159, %8165
    %8168:ctrl, %8169:i32 = load.4 %8166, %7
    %8170:ctrl, %8171:i32 = load.4 %8168, %6
    %8181:i32 = shl %8169, %8
    %8173:i32 = isub %8181, %8171
    return %8170, %8173
    %8145:ctrl = call @throw_index_out_of_range_exception %8140
    unreachable %8145
    %8074:ctrl = call @throw_index_out_of_range_exception %8069
    unreachable %8074
    %7698:ctrl = call @throw_index_out_of_range_exception %7693
    unreachable %7698
    %7627:ctrl = call @throw_index_out_of_range_exception %7622
    unreachable %7627
    %7251:ctrl = call @throw_index_out_of_range_exception %7246
    unreachable %7251
    %7200:ctrl = call @throw_index_out_of_range_exception %7195
    unreachable %7200
    %6964:ctrl = call @throw_index_out_of_range_exception %6959
    unreachable %6964
    %6910:ctrl = call @throw_index_out_of_range_exception %6905
    unreachable %6910
    %6653:ctrl = call @throw_index_out_of_range_exception %6648
    unreachable %6653
    %6602:ctrl = call @throw_index_out_of_range_exception %6597
    unreachable %6602
    %6366:ctrl = call @throw_index_out_of_range_exception %6361
    unreachable %6366
    %6315:ctrl = call @throw_index_out_of_range_exception %6310
    unreachable %6315
    %6079:ctrl = call @throw_index_out_of_range_exception %6074
    unreachable %6079
    %6030:ctrl = call @throw_index_out_of_range_exception %6025
    unreachable %6030
    %5817:ctrl = call @throw_index_out_of_range_exception %5812
    unreachable %5817
    %5768:ctrl = call @throw_index_out_of_range_exception %5763
    unreachable %5768
    %5555:ctrl = call @throw_index_out_of_range_exception %5550
    unreachable %5555
    %5482:ctrl = call @throw_index_out_of_range_exception %5477
    unreachable %5482
    %5092:ctrl = call @throw_index_out_of_range_exception %5087
    unreachable %5092
    %5019:ctrl = call @throw_index_out_of_range_exception %5014
    unreachable %5019
    %4629:ctrl = call @throw_index_out_of_range_exception %4624
    unreachable %4629
    %4576:ctrl = call @throw_index_out_of_range_exception %4571
    unreachable %4576
    %4326:ctrl = call @throw_index_out_of_range_exception %4321
    unreachable %4326
    %4270:ctrl = call @throw_index_out_of_range_exception %4265
    unreachable %4270
    %3999:ctrl = call @throw_index_out_of_range_exception %3994
    unreachable %3999
    %3946:ctrl = call @throw_index_out_of_range_exception %3941
    unreachable %3946
    %3696:ctrl = call @throw_index_out_of_range_exception %3691
    unreachable %3696
    %3643:ctrl = call @throw_index_out_of_range_exception %3638
    unreachable %3643
    %3393:ctrl = call @throw_index_out_of_range_exception %3388
    unreachable %3393
    %3342:ctrl = call @throw_index_out_of_range_exception %3337
    unreachable %3342
    %3116:ctrl = call @throw_index_out_of_range_exception %3111
    unreachable %3116
    %3065:ctrl = call @throw_index_out_of_range_exception %3060
    unreachable %3065
    %2654:ctrl = call @throw_index_out_of_range_exception %2649
    unreachable %2654
    %2616:ctrl = call @throw_index_out_of_range_exception %2611
    unreachable %2616
    %2495:ctrl = call @throw_index_out_of_range_exception %2490
    unreachable %2495
    %2457:ctrl = call @throw_index_out_of_range_exception %2452
    unreachable %2457
    %2336:ctrl = call @throw_index_out_of_range_exception %2331
    unreachable %2336
    %2298:ctrl = call @throw_index_out_of_range_exception %2293
    unreachable %2298
    %2177:ctrl = call @throw_index_out_of_range_exception %2172
    unreachable %2177
    %2139:ctrl = call @throw_index_out_of_range_exception %2134
    unreachable %2139
    %2018:ctrl = call @throw_index_out_of_range_exception %2013
    unreachable %2018
    %1980:ctrl = call @throw_index_out_of_range_exception %1975
    unreachable %1980
    %1859:ctrl = call @throw_index_out_of_range_exception %1854
    unreachable %1859
    %1821:ctrl = call @throw_index_out_of_range_exception %1816
    unreachable %1821
    %1700:ctrl = call @throw_index_out_of_range_exception %1695
    unreachable %1700
    %1662:ctrl = call @throw_index_out_of_range_exception %1657
    unreachable %1662
    %1541:ctrl = call @throw_index_out_of_range_exception %1536
    unreachable %1541
    %1503:ctrl = call @throw_index_out_of_range_exception %1498
    unreachable %1503
    %1382:ctrl = call @throw_index_out_of_range_exception %1377
    unreachable %1382
    %1344:ctrl = call @throw_index_out_of_range_exception %1339
    unreachable %1344
    %1306:ctrl = call @throw_index_out_of_range_exception %1301
    unreachable %1306
    %1268:ctrl = call @throw_index_out_of_range_exception %1263
    unreachable %1268
    %1230:ctrl = call @throw_index_out_of_range_exception %1225
    unreachable %1230
    %1192:ctrl = call @throw_index_out_of_range_exception %1187
    unreachable %1192
    %1154:ctrl = call @throw_index_out_of_range_exception %1149
    unreachable %1154
    %1116:ctrl = call @throw_index_out_of_range_exception %1111
    unreachable %1116
    %1078:ctrl = call @throw_index_out_of_range_exception %1073
    unreachable %1078
    %1040:ctrl = call @throw_index_out_of_range_exception %1035
    unreachable %1040
    %1002:ctrl = call @throw_index_out_of_range_exception %997
    unreachable %1002
    %964:ctrl = call @throw_index_out_of_range_exception %959
    unreachable %964
    %926:ctrl = call @throw_index_out_of_range_exception %921
    unreachable %926
    %888:ctrl = call @throw_index_out_of_range_exception %883
    unreachable %888
    %850:ctrl = call @throw_index_out_of_range_exception %845
    unreachable %850
    %812:ctrl = call @throw_index_out_of_range_exception %807
    unreachable %812
    %112:ctrl = call @throw_index_out_of_range_exception %107
    unreachable %112
    %97:ctrl = call @throw_index_out_of_range_exception %92
    unreachable %97
    %82:ctrl = call @throw_index_out_of_range_exception %77
    unreachable %82
}
