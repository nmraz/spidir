# run: codegen

extfunc @malloc:ptr(i64)

func @gc_new:ptr(i32, i64) {
    # check: function `gc_new`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f7                        mov rdi, rsi
    # nextln: 000007: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @malloc + 0
    # nextln: 000011: ff d0                           call rax
    # nextln: 000013: 5d                              pop rbp
    # nextln: 000014: c3                              ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:ctrl, %4:ptr = call @malloc %0, %2
    return %3, %4
}

func @throw_index_out_of_range_exception() {
    # check: function `throw_index_out_of_range_exception`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl = entry
    return %0
}

func @"System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 56                           push r14
    # nextln: 000006: 41 55                           push r13
    # nextln: 000008: 41 54                           push r12
    # nextln: 00000a: 53                              push rbx
    # nextln: 00000b: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 00000f: 48 89 fb                        mov rbx, rdi
    # nextln: 000012: be 28 00 00 00                  mov esi, 0x28
    # nextln: 000017: bf ab 00 00 00                  mov edi, 0xab
    # nextln: 00001c: 41 bd 02 00 00 00               mov r13d, 2
    # nextln: 000022: 41 bc 01 00 00 00               mov r12d, 1
    # nextln: 000028: 33 c0                           xor eax, eax
    # nextln: 00002a: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 00002e: e8 00 00 00 00                  call 0x33  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000033: 48 89 c1                        mov rcx, rax
    # nextln: 000036: 48 83 c1 10                     add rcx, 0x10
    # nextln: 00003a: 44 89 29                        mov dword ptr [rcx], r13d
    # nextln: 00003d: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 000041: 4c 8b 34 24                     mov r14, qword ptr [rsp]
    # nextln: 000045: be 1c 00 00 00                  mov esi, 0x1c
    # nextln: 00004a: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 00004f: e8 00 00 00 00                  call 0x54  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000054: 48 89 c1                        mov rcx, rax
    # nextln: 000057: 48 83 c1 10                     add rcx, 0x10
    # nextln: 00005b: 44 89 29                        mov dword ptr [rcx], r13d
    # nextln: 00005e: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000060: 4c 3b e1                        cmp r12, rcx
    # nextln: 000063: 0f 8d db 00 00 00               jge 0x144
    # nextln: 000069: 4c 89 f1                        mov rcx, r14
    # nextln: 00006c: 48 83 c1 10                     add rcx, 0x10
    # nextln: 000070: 48 89 c2                        mov rdx, rax
    # nextln: 000073: 48 83 c2 18                     add rdx, 0x18
    # nextln: 000077: bf 01 00 00 00                  mov edi, 1
    # nextln: 00007c: 89 3a                           mov dword ptr [rdx], edi
    # nextln: 00007e: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000080: 48 85 c9                        test rcx, rcx
    # nextln: 000083: 0f 8e bb 00 00 00               jle 0x144
    # nextln: 000089: 49 83 c6 18                     add r14, 0x18
    # nextln: 00008d: 49 89 06                        mov qword ptr [r14], rax
    # nextln: 000090: 4c 8b 34 24                     mov r14, qword ptr [rsp]
    # nextln: 000094: be 1c 00 00 00                  mov esi, 0x1c
    # nextln: 000099: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 00009e: e8 00 00 00 00                  call 0xa3  # RELOC_PC32 -> @gc_new + -4
    # nextln: 0000a3: 48 89 c1                        mov rcx, rax
    # nextln: 0000a6: 48 83 c1 10                     add rcx, 0x10
    # nextln: 0000aa: 44 89 29                        mov dword ptr [rcx], r13d
    # nextln: 0000ad: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0000af: 48 85 d2                        test rdx, rdx
    # nextln: 0000b2: 0f 8e 8c 00 00 00               jle 0x144
    # nextln: 0000b8: 48 89 c2                        mov rdx, rax
    # nextln: 0000bb: 48 83 c2 14                     add rdx, 0x14
    # nextln: 0000bf: bf 02 00 00 00                  mov edi, 2
    # nextln: 0000c4: 89 3a                           mov dword ptr [rdx], edi
    # nextln: 0000c6: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 0000c8: 4c 3b e1                        cmp r12, rcx
    # nextln: 0000cb: 0f 8d 73 00 00 00               jge 0x144
    # nextln: 0000d1: 4c 89 f1                        mov rcx, r14
    # nextln: 0000d4: 48 83 c1 10                     add rcx, 0x10
    # nextln: 0000d8: 48 89 c2                        mov rdx, rax
    # nextln: 0000db: 48 83 c2 18                     add rdx, 0x18
    # nextln: 0000df: bf 03 00 00 00                  mov edi, 3
    # nextln: 0000e4: 89 3a                           mov dword ptr [rdx], edi
    # nextln: 0000e6: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 0000e8: 4c 3b e1                        cmp r12, rcx
    # nextln: 0000eb: 0f 8d 53 00 00 00               jge 0x144
    # nextln: 0000f1: 49 83 c6 20                     add r14, 0x20
    # nextln: 0000f5: 49 89 06                        mov qword ptr [r14], rax
    # nextln: 0000f8: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0000fc: 48 89 c1                        mov rcx, rax
    # nextln: 0000ff: 48 83 c1 10                     add rcx, 0x10
    # nextln: 000103: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000105: 4c 3b e1                        cmp r12, rcx
    # nextln: 000108: 0f 8d 36 00 00 00               jge 0x144
    # nextln: 00010e: 48 83 c0 20                     add rax, 0x20
    # nextln: 000112: 48 8b 00                        mov rax, qword ptr [rax]
    # nextln: 000115: 48 89 c1                        mov rcx, rax
    # nextln: 000118: 48 83 c1 10                     add rcx, 0x10
    # nextln: 00011c: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 00011e: 48 63 cb                        movsxd rcx, ebx
    # nextln: 000121: 48 3b ca                        cmp rcx, rdx
    # nextln: 000124: 0f 8d 1a 00 00 00               jge 0x144
    # nextln: 00012a: 48 c1 e1 02                     shl rcx, 2
    # nextln: 00012e: 48 83 c1 14                     add rcx, 0x14
    # nextln: 000132: 48 03 c1                        add rax, rcx
    # nextln: 000135: 8b 00                           mov eax, dword ptr [rax]
    # nextln: 000137: 48 83 c4 10                     add rsp, 0x10
    # nextln: 00013b: 5b                              pop rbx
    # nextln: 00013c: 41 5c                           pop r12
    # nextln: 00013e: 41 5d                           pop r13
    # nextln: 000140: 41 5e                           pop r14
    # nextln: 000142: 5d                              pop rbp
    # nextln: 000143: c3                              ret
    # nextln: 000144: e8 00 00 00 00                  call 0x149  # RELOC_PC32 -> @throw_index_out_of_range_exception + -4
    # nextln: 000149: 0f 0b                           ud2

    %0:ctrl, %1:i32 = entry
    %20:ptr = stackslot 8:8
    %4:i64 = iext %1
    %5:i64 = sfill 32 %4
    %8:i64 = iconst 20
    %29:i32 = iconst 2
    %140:i64 = shl %5, %29
    %9:i64 = iadd %140, %8
    %10:i64 = iconst 16
    %135:i64 = iconst 32
    %133:i64 = iconst 1
    %134:i64 = iconst 24
    %21:i32 = iconst 3
    %136:i64 = iconst 0
    %137:i64 = iconst 2
    %138:i64 = iconst 28
    %36:i32 = iconst 170
    %11:i32 = iconst 1
    %139:i64 = iconst 40
    %37:i32 = iconst 171
    %38:ptr = iconst 0
    %39:ctrl = store.8 %0, %38, %20
    %42:ctrl, %43:ptr = call @gc_new %39, %37, %139
    %44:ptr = ptroff %43, %10
    %45:ctrl = store.4 %42, %137, %44
    %46:ctrl = store.8 %45, %43, %20
    %47:ctrl, %48:ptr = load.8 %46, %20
    %49:ctrl, %50:ptr = call @gc_new %47, %36, %138
    %60:ptr = ptroff %50, %134
    %51:ptr = ptroff %50, %10
    %52:ctrl = store.4 %49, %137, %51
    %53:ctrl, %54:i64 = load.4 %52, %51
    %55:i64 = icmp slt %133, %54
    %56:ctrl, %57:ctrl = brcond %53, %55
    %61:ctrl = store.4 %56, %11, %60
    %70:ptr = ptroff %48, %134
    %62:ptr = ptroff %48, %10
    %63:ctrl, %64:i64 = load.4 %61, %62
    %65:i64 = icmp slt %136, %64
    %66:ctrl, %67:ctrl = brcond %63, %65
    %71:ctrl = store.8 %66, %50, %70
    %72:ctrl, %73:ptr = load.8 %71, %20
    %74:ctrl, %75:ptr = call @gc_new %72, %36, %138
    %94:ptr = ptroff %75, %134
    %85:ptr = ptroff %75, %8
    %76:ptr = ptroff %75, %10
    %77:ctrl = store.4 %74, %137, %76
    %78:ctrl, %79:i64 = load.4 %77, %76
    %80:i64 = icmp slt %136, %79
    %81:ctrl, %82:ctrl = brcond %78, %80
    %86:ctrl = store.4 %81, %29, %85
    %87:ctrl, %88:i64 = load.4 %86, %76
    %89:i64 = icmp slt %133, %88
    %90:ctrl, %91:ctrl = brcond %87, %89
    %95:ctrl = store.4 %90, %21, %94
    %104:ptr = ptroff %73, %135
    %96:ptr = ptroff %73, %10
    %97:ctrl, %98:i64 = load.4 %95, %96
    %99:i64 = icmp slt %133, %98
    %100:ctrl, %101:ctrl = brcond %97, %99
    %105:ctrl = store.8 %100, %75, %104
    %106:ctrl, %107:ptr = load.8 %105, %20
    %116:ptr = ptroff %107, %135
    %108:ptr = ptroff %107, %10
    %109:ctrl, %110:i64 = load.4 %106, %108
    %111:i64 = icmp slt %133, %110
    %112:ctrl, %113:ctrl = brcond %109, %111
    %117:ctrl, %118:ptr = load.8 %112, %116
    %130:ptr = ptroff %118, %9
    %119:ptr = ptroff %118, %10
    %120:ctrl, %121:i64 = load.4 %117, %119
    %122:i64 = icmp slt %5, %121
    %123:ctrl, %124:ctrl = brcond %120, %122
    %131:ctrl, %132:i32 = load.4 %123, %130
    return %131, %132
    %127:ctrl, %128:phisel = region %57, %67, %82, %91, %101, %113, %124
    %129:ctrl = call @throw_index_out_of_range_exception %127
    unreachable %129
}
