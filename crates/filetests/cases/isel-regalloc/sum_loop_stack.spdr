# run: isel-regalloc

func @sum_to_n_with_stack:i32(i32) {
    # check: function `sum_to_n_with_stack`:
    # nextln: clobbers: rax, rcx, rdx
    # nextln: frame: size 8, align 4
    # nextln:     !0: 0
    # nextln:     !1: 4
    # nextln:       block0:
    # nextln: 0000:     Jump(block1)
    # nextln:       block1:
    # nextln: 0002:     MovStackR(!0, S32) $$rdi
    # nextln:           $$rax = MovRmS32(0)
    # nextln: 0003:     MovStackR(!1, S32) $$rax
    # nextln: 0004:     Jump(block2)
    # nextln:       block2:
    # nextln: 0005:     $$rax = MovRStack(!0, S32)
    # nextln: 0006:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0007:     Jumpcc(E, block3, block4)
    # nextln:       block4:
    # nextln: 0008:     $$rdx = MovRStack(!0, S32)
    # nextln:           $$rax = $$rdx
    # nextln: 0009:     $$rax = AluRmI(S32, Sub, 1) $$rax
    # nextln: 0010:     $$rcx = MovRStack(!1, S32)
    # nextln: 0011:     $$rcx = AluRRm(S32, Add) $$rcx, $$rdx
    # nextln: 0012:     MovStackR(!0, S32) $$rax
    # nextln: 0013:     MovStackR(!1, S32) $$rcx
    # nextln: 0014:     Jump(block2)
    # nextln:       block3:
    # nextln: 0015:     $$rax = MovRStack(!1, S32)
    # nextln: 0016:     Ret $$rax

    %0:ctrl, %1:i32 = entry
    %2:ctrl, %3:phisel = region %0
    %5:ptr = stackslot 4:4
    %4:ptr = stackslot 4:4
    %6:ctrl = store.4 %2, %1, %4
    %24:i32 = iconst 1
    %7:i32 = iconst 0
    %8:ctrl = store.4 %6, %7, %5
    %13:i32 = icmp eq %12, %7
    %18:ctrl, %19:ctrl = brcond %11, %13
    %14:ctrl, %15:phisel = region %18
    %29:ctrl, %30:i32 = load.4 %14, %5
    return %29, %30
    %16:ctrl, %17:phisel = region %19
    %20:ctrl, %21:i32 = load.4 %16, %4
    %22:ctrl, %23:i32 = load.4 %20, %5
    %25:i32 = isub %21, %24
    %27:ctrl = store.4 %22, %25, %4
    %26:i32 = iadd %23, %21
    %28:ctrl = store.4 %27, %26, %5
    %9:ctrl, %10:phisel = region %8, %28
    %11:ctrl, %12:i32 = load.4 %9, %4
}
