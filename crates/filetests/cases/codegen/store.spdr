# run: codegen

func @store1_i32(i32, ptr) {
    # check: function `store1_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 40 88 3e                        mov byte ptr [rsi], dil
    # nextln: 000007: 5d                              pop rbp
    # nextln: 000008: c3                              ret

    %0:ctrl, %1:i32, %2:ptr = entry
    %3:ctrl = store.1 %0, %1, %2
    return %3
}

func @store2_i32(i32, ptr) {
    # check: function `store2_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 66 89 3e                        mov word ptr [rsi], di
    # nextln: 000007: 5d                              pop rbp
    # nextln: 000008: c3                              ret

    %0:ctrl, %1:i32, %2:ptr = entry
    %3:ctrl = store.2 %0, %1, %2
    return %3
}

func @store4_i32(i32, ptr) {
    # check: function `store4_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 89 3e                           mov dword ptr [rsi], edi
    # nextln: 000006: 5d                              pop rbp
    # nextln: 000007: c3                              ret

    %0:ctrl, %1:i32, %2:ptr = entry
    %3:ctrl = store.4 %0, %1, %2
    return %3
}

func @store1_i64(i64, ptr) {
    # check: function `store1_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 40 88 3e                        mov byte ptr [rsi], dil
    # nextln: 000007: 5d                              pop rbp
    # nextln: 000008: c3                              ret

    %0:ctrl, %1:i64, %2:ptr = entry
    %3:ctrl = store.1 %0, %1, %2
    return %3
}

func @store2_i64(i64, ptr) {
    # check: function `store2_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 66 89 3e                        mov word ptr [rsi], di
    # nextln: 000007: 5d                              pop rbp
    # nextln: 000008: c3                              ret

    %0:ctrl, %1:i64, %2:ptr = entry
    %3:ctrl = store.2 %0, %1, %2
    return %3
}

func @store4_i64(i64, ptr) {
    # check: function `store4_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 89 3e                           mov dword ptr [rsi], edi
    # nextln: 000006: 5d                              pop rbp
    # nextln: 000007: c3                              ret

    %0:ctrl, %1:i64, %2:ptr = entry
    %3:ctrl = store.4 %0, %1, %2
    return %3
}

func @store8_i64(i64, ptr) {
    # check: function `store8_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 3e                        mov qword ptr [rsi], rdi
    # nextln: 000007: 5d                              pop rbp
    # nextln: 000008: c3                              ret

    %0:ctrl, %1:i64, %2:ptr = entry
    %3:ctrl = store.8 %0, %1, %2
    return %3
}

func @store8_ptr(ptr, ptr) {
    # check: function `store8_ptr`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 3e                        mov qword ptr [rsi], rdi
    # nextln: 000007: 5d                              pop rbp
    # nextln: 000008: c3                              ret

    %0:ctrl, %1:ptr, %2:ptr = entry
    %3:ctrl = store.8 %0, %1, %2
    return %3
}

func @store8_f64(f64, ptr) {
    # check: function `store8_f64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: f2 0f 11 07                     movsd qword ptr [rdi], xmm0
    # nextln: 000008: 5d                              pop rbp
    # nextln: 000009: c3                              ret

    %0:ctrl, %1:f64, %2:ptr = entry
    %3:ctrl = store.8 %0, %1, %2
    return %3
}
