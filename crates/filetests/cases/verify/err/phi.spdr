# run: verify-err

func @phi_no_inputs:i32() {
    # check: function `phi_no_inputs`:
    # unordered: `$val:i32 = phi`: bad input count, expected 1

    %0:ctrl = entry
    %1:i32 = phi
    return %0, %1
}

func @phi_bad_output_count:i32(i32, i32, i32) {
    # check: function `phi_bad_output_count`:
    # unordered: `$val:i32, $val:i32 = phi $val, $val, $val`: bad output count, expected 1

    %0:ctrl, %1:i32, %2:i32, %3:i32 = entry
    %4:ctrl, %5:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %4, %5
    %8:i32, %9:i32 = phi %7, %2, %3
    return %6, %8
}

func @phi_bad_input_count:i32(i32, i32, i32) {
    # check: function `phi_bad_input_count`:
    # unordered: `$val:i32 = phi $val, $val`: bad input count, expected 4

    %0:ctrl, %1:i32, %2:i32, %3:i32 = entry
    %4:ctrl, %5:ctrl = brcond %0, %1
    %6:ctrl, %7:ctrl = brcond %4, %2
    %8:ctrl, %9:phisel = region %5, %6, %7
    %10:i32 = phi %9, %3
    return %8, %10
}

func @phi_missing_phisel:i32(i32, i32, i32) {
    # check: function `phi_missing_phisel`:
    # unordered: `$val:i32 = phi $val, $val`: bad value kind for input 0, expected one of `phisel`, got `i32`

    %0:ctrl, %1:i32, %2:i32, %3:i32 = entry
    %4:ctrl, %5:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %4, %5
    %8:i32 = phi %2, %3
    return %6, %8
}

func @phi_bad_input_kind:i64(i32, i32, i64) {
    # check: function `phi_bad_input_kind`:
    # unordered: `$val:i64 = phi $val, $val, $val`: bad value kind for input 1, expected one of `i64`, got `i32`

    %0:ctrl, %1:i32, %2:i32, %3:i64 = entry
    %4:ctrl, %5:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %4, %5
    %8:i64 = phi %7, %2, %3
    return %6, %8
}
