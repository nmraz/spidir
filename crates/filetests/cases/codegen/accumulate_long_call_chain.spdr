# run: codegen

extfunc @f:i32()

func @func:i32() {
    # check: function `func`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: push rbx
    # nextln: 0x0005: push rax
    # nextln: 0x0006: call 0xb  # reloc <0> -> @f + -4
    # nextln: 0x000b: mov rbx, rax
    # nextln: 0x000e: call 0x13  # reloc <0> -> @f + -4
    # nextln: 0x0013: and ebx, eax
    # nextln: 0x0015: call 0x1a  # reloc <0> -> @f + -4
    # nextln: 0x001a: and ebx, eax
    # nextln: 0x001c: call 0x21  # reloc <0> -> @f + -4
    # nextln: 0x0021: and ebx, eax
    # nextln: 0x0023: call 0x28  # reloc <0> -> @f + -4
    # nextln: 0x0028: and ebx, eax
    # nextln: 0x002a: call 0x2f  # reloc <0> -> @f + -4
    # nextln: 0x002f: and ebx, eax
    # nextln: 0x0031: call 0x36  # reloc <0> -> @f + -4
    # nextln: 0x0036: and ebx, eax
    # nextln: 0x0038: call 0x3d  # reloc <0> -> @f + -4
    # nextln: 0x003d: and ebx, eax
    # nextln: 0x003f: call 0x44  # reloc <0> -> @f + -4
    # nextln: 0x0044: and ebx, eax
    # nextln: 0x0046: call 0x4b  # reloc <0> -> @f + -4
    # nextln: 0x004b: and ebx, eax
    # nextln: 0x004d: mov rax, rbx
    # nextln: 0x0050: add rsp, 8
    # nextln: 0x0054: pop rbx
    # nextln: 0x0055: pop rbp
    # nextln: 0x0056: ret

    %ent:ctrl = entry
    %c0:ctrl, %v0:i32 = call @f %ent
    %c1:ctrl, %v1:i32 = call @f %c0
    %c2:ctrl, %v2:i32 = call @f %c1
    %c3:ctrl, %v3:i32 = call @f %c2
    %c4:ctrl, %v4:i32 = call @f %c3
    %c5:ctrl, %v5:i32 = call @f %c4
    %c6:ctrl, %v6:i32 = call @f %c5
    %c7:ctrl, %v7:i32 = call @f %c6
    %c8:ctrl, %v8:i32 = call @f %c7
    %c9:ctrl, %v9:i32 = call @f %c8
    %a1:i32 = and %v0, %v1
    %a2:i32 = and %a1, %v2
    %a3:i32 = and %a2, %v3
    %a4:i32 = and %a3, %v4
    %a5:i32 = and %a4, %v5
    %a6:i32 = and %a5, %v6
    %a7:i32 = and %a6, %v7
    %a8:i32 = and %a7, %v8
    %a9:i32 = and %a8, %v9
    return %c9, %a9
}
