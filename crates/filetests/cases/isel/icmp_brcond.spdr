# run: isel

func @select_eq:i32(i32, i32, i32, i32) {
    # check: function `select_eq`:
    # nextln:       block0[%3:gpr32($$rdi), %4:gpr32($$rsi), %2:gpr32($$rdx), %1:gpr32($$rcx)]:
    # nextln: 0000:      AluRRm(S32, Cmp) %3(reg)[early], %4(any)[early]
    # nextln: 0001:      Jumpcc(E, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr32]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr32]
    # nextln:       block2[%0:gpr32]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp eq %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ne:i32(i32, i32, i32, i32) {
    # check: function `select_ne`:
    # nextln:       block0[%3:gpr32($$rdi), %4:gpr32($$rsi), %2:gpr32($$rdx), %1:gpr32($$rcx)]:
    # nextln: 0000:      AluRRm(S32, Cmp) %3(reg)[early], %4(any)[early]
    # nextln: 0001:      Jumpcc(Ne, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr32]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr32]
    # nextln:       block2[%0:gpr32]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp ne %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_slt:i32(i32, i32, i32, i32) {
    # check: function `select_slt`:
    # nextln:       block0[%3:gpr32($$rdi), %4:gpr32($$rsi), %2:gpr32($$rdx), %1:gpr32($$rcx)]:
    # nextln: 0000:      AluRRm(S32, Cmp) %3(reg)[early], %4(any)[early]
    # nextln: 0001:      Jumpcc(L, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr32]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr32]
    # nextln:       block2[%0:gpr32]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp slt %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_sle:i32(i32, i32, i32, i32) {
    # check: function `select_sle`:
    # nextln:       block0[%3:gpr32($$rdi), %4:gpr32($$rsi), %2:gpr32($$rdx), %1:gpr32($$rcx)]:
    # nextln: 0000:      AluRRm(S32, Cmp) %3(reg)[early], %4(any)[early]
    # nextln: 0001:      Jumpcc(Le, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr32]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr32]
    # nextln:       block2[%0:gpr32]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp sle %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ult:i32(i32, i32, i32, i32) {
    # check: function `select_ult`:
    # nextln:       block0[%3:gpr32($$rdi), %4:gpr32($$rsi), %2:gpr32($$rdx), %1:gpr32($$rcx)]:
    # nextln: 0000:      AluRRm(S32, Cmp) %3(reg)[early], %4(any)[early]
    # nextln: 0001:      Jumpcc(B, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr32]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr32]
    # nextln:       block2[%0:gpr32]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp ult %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ule:i32(i32, i32, i32, i32) {
    # check: function `select_ule`:
    # nextln:       block0[%3:gpr32($$rdi), %4:gpr32($$rsi), %2:gpr32($$rdx), %1:gpr32($$rcx)]:
    # nextln: 0000:      AluRRm(S32, Cmp) %3(reg)[early], %4(any)[early]
    # nextln: 0001:      Jumpcc(Be, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0002:      Jump(block2)
    # nextln:       => block2[%2:gpr32]
    # nextln:       block3:
    # nextln: 0003:      Jump(block2)
    # nextln:       => block2[%1:gpr32]
    # nextln:       block2[%0:gpr32]:
    # nextln: 0004:      Ret %0($$rax)[early]

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp ule %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_slt_cond_reused:i32(i32, i32, i32, i32) {
    # check: function `select_slt_cond_reused`:
    # nextln:       block0[%7:gpr32($$rdi), %8:gpr32($$rsi), %5:gpr32($$rdx), %4:gpr32($$rcx)]:
    # nextln: 0000:      %6:gpr64(any)[late] = MovRmS32(0)
    # nextln: 0001:      AluRRm(S32, Cmp) %7(reg)[early], %8(any)[early]
    # nextln: 0002:      %3:gpr32(reg)[late] = Setcc(L) %6(tied:0)[early]
    # nextln: 0003:      AluRRm(S32, Test) %3(reg)[early], %3(any)[early]
    # nextln: 0004:      Jumpcc(Ne, block1, block3)
    # nextln:       => block1, block3
    # nextln:       block1:
    # nextln: 0005:      Jump(block2)
    # nextln:       => block2[%5:gpr32]
    # nextln:       block3:
    # nextln: 0006:      Jump(block2)
    # nextln:       => block2[%4:gpr32]
    # nextln:       block2[%0:gpr32]:
    # nextln: 0007:      %2:gpr32(any)[late] = AluCommRmI(S32, Xor, 5) %3(tied:0)[early]
    # nextln: 0008:      %1:gpr32(reg)[late] = AddRR(S32) %0(soft-tied:0)[early], %2(soft-tied:0)[early]
    # nextln: 0009:      Ret %1($$rax)[early]

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp slt %a, %b
    %five:i32 = iconst 5
    %thing:i32 = xor %1, %five
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    %retval:i32 = iadd %10, %thing
    return %6, %retval
}
