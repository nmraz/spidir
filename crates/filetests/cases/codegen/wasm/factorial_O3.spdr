# run: codegen

func @func00000001:i64(i32) {
    # check: function `func00000001`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: b8 01 00 00 00                  mov eax, 1
    # nextln: 000009: 85 ff                           test edi, edi
    # nextln: 00000b: 0f 8e af 00 00 00               jle 0xc0
    # nextln: 000011: 83 c7 01                        add edi, 1
    # nextln: 000014: 48 8d 57 ff                     lea rdx, [rdi - 1]
    # nextln: 000018: 48 8d 77 fe                     lea rsi, [rdi - 2]
    # nextln: 00001c: 48 89 d1                        mov rcx, rdx
    # nextln: 00001f: 48 83 e1 07                     and rcx, 7
    # nextln: 000023: 48 83 fe 06                     cmp rsi, 6
    # nextln: 000027: 0f 86 6b 00 00 00               jbe 0x98
    # nextln: 00002d: 48 83 c7 f7                     add rdi, -9
    # nextln: 000031: 48 83 e2 f8                     and rdx, 0xfffffffffffffff8
    # nextln: 000035: 48 83 e7 f8                     and rdi, 0xfffffffffffffff8
    # nextln: 000039: 48 f7 da                        neg rdx
    # nextln: 00003c: be 08 00 00 00                  mov esi, 8
    # nextln: 000041: 4c 8d 46 f9                     lea r8, [rsi - 7]
    # nextln: 000045: 49 0f af c0                     imul rax, r8
    # nextln: 000049: 4c 8d 46 fa                     lea r8, [rsi - 6]
    # nextln: 00004d: 49 0f af c0                     imul rax, r8
    # nextln: 000051: 4c 8d 46 fb                     lea r8, [rsi - 5]
    # nextln: 000055: 49 0f af c0                     imul rax, r8
    # nextln: 000059: 4c 8d 46 fc                     lea r8, [rsi - 4]
    # nextln: 00005d: 49 0f af c0                     imul rax, r8
    # nextln: 000061: 4c 8d 46 fd                     lea r8, [rsi - 3]
    # nextln: 000065: 49 0f af c0                     imul rax, r8
    # nextln: 000069: 4c 8d 46 fe                     lea r8, [rsi - 2]
    # nextln: 00006d: 49 0f af c0                     imul rax, r8
    # nextln: 000071: 4c 8d 46 ff                     lea r8, [rsi - 1]
    # nextln: 000075: 49 0f af c0                     imul rax, r8
    # nextln: 000079: 48 0f af c6                     imul rax, rsi
    # nextln: 00007d: 48 83 c6 08                     add rsi, 8
    # nextln: 000081: 4c 8d 04 32                     lea r8, [rdx + rsi]
    # nextln: 000085: 49 83 f8 08                     cmp r8, 8
    # nextln: 000089: 0f 85 b2 ff ff ff               jne 0x41
    # nextln: 00008f: 48 83 c7 09                     add rdi, 9
    # nextln: 000093: e9 03 00 00 00                  jmp 0x9b
    # nextln: 000098: 48 89 c7                        mov rdi, rax
    # nextln: 00009b: 48 85 c9                        test rcx, rcx
    # nextln: 00009e: 0f 84 1a 00 00 00               je 0xbe
    # nextln: 0000a4: 48 83 c1 ff                     add rcx, -1
    # nextln: 0000a8: 48 0f af c7                     imul rax, rdi
    # nextln: 0000ac: 48 85 c9                        test rcx, rcx
    # nextln: 0000af: 0f 84 09 00 00 00               je 0xbe
    # nextln: 0000b5: 48 83 c7 01                     add rdi, 1
    # nextln: 0000b9: e9 e6 ff ff ff                  jmp 0xa4
    # nextln: 0000be: 5d                              pop rbp
    # nextln: 0000bf: c3                              ret
    # nextln: 0000c0: 5d                              pop rbp
    # nextln: 0000c1: c3                              ret

    %0:ctrl, %1:i32 = entry
    %2:i64 = iconst 1
    %3:i64 = iconst 9
    %4:i64 = iconst 18446744073709551608
    %5:i64 = iconst 18446744073709551607
    %7:i32 = iconst 1
    %8:i32 = iadd %1, %7
    %9:i64 = iext %8
    %11:i64 = iadd %9, %5
    %12:i64 = and %11, %4
    %15:i64 = iconst 8
    %6:i64 = iconst 18446744073709551615
    %13:i64 = iadd %9, %6
    %14:i64 = and %13, %4
    %16:i64 = iconst 0
    %17:i64 = isub %16, %14
    %18:i64 = iconst 18446744073709551614
    %19:i64 = iadd %9, %18
    %20:i64 = iconst 18446744073709551613
    %21:i64 = iconst 18446744073709551612
    %22:i64 = iconst 18446744073709551611
    %23:i64 = iconst 18446744073709551610
    %24:i64 = iconst 18446744073709551609
    %25:i64 = iconst 7
    %26:i64 = and %13, %25
    %27:i64 = iconst 6
    %28:i32 = icmp ult %27, %19
    %29:i32 = iconst 0
    %30:i32 = icmp slt %29, %1
    %31:ctrl, %32:ctrl = brcond %0, %30
    %33:ctrl, %34:ctrl = brcond %31, %28
    %35:ctrl, %36:phisel = region %33, %45
    %41:i64 = phi %36, %15, %42
    %53:i64 = iadd %41, %24
    %52:i64 = iadd %41, %23
    %51:i64 = iadd %41, %22
    %50:i64 = iadd %41, %21
    %49:i64 = iadd %41, %20
    %48:i64 = iadd %41, %18
    %47:i64 = iadd %41, %6
    %60:i64 = imul %59, %47
    %61:i64 = imul %60, %41
    %62:i64 = phi %36, %2, %61
    %54:i64 = imul %62, %53
    %55:i64 = imul %54, %52
    %56:i64 = imul %55, %51
    %57:i64 = imul %56, %50
    %58:i64 = imul %57, %49
    %59:i64 = imul %58, %48
    %42:i64 = iadd %41, %15
    %40:i64 = phi %36, %26, %40
    %39:i64 = phi %36, %17, %39
    %43:i64 = iadd %39, %42
    %44:i32 = icmp ne %43, %15
    %45:ctrl, %46:ctrl = brcond %35, %44
    %37:i64 = phi %36, %12, %37
    %38:i64 = iadd %37, %3
    %63:ctrl, %64:phisel = region %34, %46
    %79:i64 = phi %64, %2, %38
    %78:i64 = phi %64, %2, %61
    %65:i64 = phi %64, %26, %40
    %66:i32 = icmp eq %65, %16
    %67:ctrl, %68:ctrl = brcond %63, %66
    %69:ctrl, %70:phisel = region %68, %74
    %80:i64 = phi %70, %79, %81
    %82:i64 = imul %84, %80
    %84:i64 = phi %70, %78, %82
    %81:i64 = iadd %80, %2
    %71:i64 = phi %70, %65, %72
    %72:i64 = iadd %71, %6
    %73:i32 = icmp ne %72, %16
    %74:ctrl, %75:ctrl = brcond %69, %73
    %76:ctrl, %77:phisel = region %67, %75
    %83:i64 = phi %77, %78, %82
    return %76, %83
    return %32, %2
}
