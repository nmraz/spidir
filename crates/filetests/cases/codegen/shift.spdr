# run: codegen

func @shl_i32_i32:i32(i32, i32) {
    # check: function `shl_i32_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: d3 e0                           shl eax, cl
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:i32 = shl %1, %2
    return %0, %3
}

func @shl_i64_i64:i64(i64, i64) {
    # check: function `shl_i64_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: 48 d3 e0                        shl rax, cl
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:i64, %2:i64 = entry
    %3:i64 = shl %1, %2
    return %0, %3
}

func @shl_i32_i64:i32(i32, i64) {
    # check: function `shl_i32_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: d3 e0                           shl eax, cl
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:i32 = shl %1, %2
    return %0, %3
}

func @shl_i64_i32:i64(i64, i32) {
    # check: function `shl_i64_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: 48 d3 e0                        shl rax, cl
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:i64, %2:i32 = entry
    %3:i64 = shl %1, %2
    return %0, %3
}

func @lshr_i32_i32:i32(i32, i32) {
    # check: function `lshr_i32_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: d3 e8                           shr eax, cl
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:i32 = lshr %1, %2
    return %0, %3
}

func @lshr_i64_i64:i64(i64, i64) {
    # check: function `lshr_i64_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: 48 d3 e8                        shr rax, cl
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:i64, %2:i64 = entry
    %3:i64 = lshr %1, %2
    return %0, %3
}

func @lshr_i32_i64:i32(i32, i64) {
    # check: function `lshr_i32_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: d3 e8                           shr eax, cl
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:i32 = lshr %1, %2
    return %0, %3
}

func @lshr_i64_i32:i64(i64, i32) {
    # check: function `lshr_i64_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: 48 d3 e8                        shr rax, cl
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:i64, %2:i32 = entry
    %3:i64 = lshr %1, %2
    return %0, %3
}

func @ashr_i32_i32:i32(i32, i32) {
    # check: function `ashr_i32_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: d3 f8                           sar eax, cl
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:i32 = ashr %1, %2
    return %0, %3
}

func @ashr_i64_i64:i64(i64, i64) {
    # check: function `ashr_i64_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: 48 d3 f8                        sar rax, cl
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:i64, %2:i64 = entry
    %3:i64 = ashr %1, %2
    return %0, %3
}

func @ashr_i32_i64:i32(i32, i64) {
    # check: function `ashr_i32_i64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: d3 f8                           sar eax, cl
    # nextln: 00000c: 5d                              pop rbp
    # nextln: 00000d: c3                              ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:i32 = ashr %1, %2
    return %0, %3
}

func @ashr_i64_i32:i64(i64, i32) {
    # check: function `ashr_i64_i32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f1                        mov rcx, rsi
    # nextln: 000007: 48 89 f8                        mov rax, rdi
    # nextln: 00000a: 48 d3 f8                        sar rax, cl
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %0:ctrl, %1:i64, %2:i32 = entry
    %3:i64 = ashr %1, %2
    return %0, %3
}
