# run: isel-regalloc

func @"System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)":i32(ptr, i32, i32, i32) {
    # check: function `System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)`:
    # nextln: clobbers: rax, rdx, rdi, rsi, r8
    # nextln: frame: size 16, align 4
    # nextln:     !0: 0
    # nextln:     !1: 4
    # nextln:     !2: 8
    # nextln:     !3: 12
    # nextln:       block0:
    # nextln: 0000:     $$rax = MovRmS32(0)
    # nextln: 0001:     MovMR(S32, [!1 + 0]) $$rax
    # nextln: 0002:     MovMR(S32, [!2 + 0]) $$rax
    # nextln: 0003:     MovMR(S32, [!0 + 0]) $$rax
    # nextln: 0004:     MovMR(S32, [!3 + 0]) $$rax
    # nextln: 0005:     MovMR(S32, [!1 + 0]) $$rax
    # nextln: 0006:     MovMR(S32, [!2 + 0]) $$rax
    # nextln: 0007:     Jump(block1)
    # nextln:       block1:
    # nextln: 0008:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0009:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0010:     Jumpcc(L, block2, block3)
    # nextln:       block2:
    # nextln: 0011:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0012:     $$rdi = AluCommRmI(S32, And, 2) $$rdi
    # nextln: 0013:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0014:     Jumpcc(Ne, block16, block17)
    # nextln:       block16:
    # nextln: 0015:     $$rdi = MovRM(S32, [!1 + 0])
    # nextln: 0016:     $$r8 = MovRM(S32, [!2 + 0])
    # nextln: 0017:     $$rdi = AddRR(S32) $$rdi, $$r8
    # nextln: 0018:     MovMR(S32, [!1 + 0]) $$rdi
    # nextln: 0019:     Jump(block18)
    # nextln:       block17:
    # nextln: 0020:     Jump(block18)
    # nextln:       block18:
    # nextln: 0021:     $$rdi = MovRM(S32, [!2 + 0])
    # nextln: 0022:     $$rdi = AddRI(S32, 1) $$rdi
    # nextln: 0023:     MovMR(S32, [!2 + 0]) $$rdi
    # nextln: 0024:     Jump(block1)
    # nextln:       block3:
    # nextln: 0025:     MovMR(S32, [!0 + 0]) $$rax
    # nextln: 0026:     Jump(block4)
    # nextln:       block4:
    # nextln: 0027:     $$rdi = MovRM(S32, [!0 + 0])
    # nextln: 0028:     AluRRm(S32, Cmp) $$rdi, $$rdx
    # nextln: 0029:     Jumpcc(L, block5, block6)
    # nextln:       block5:
    # nextln: 0030:     $$rdi = MovRM(S32, [!0 + 0])
    # nextln: 0031:     $$rdi = AluCommRmI(S32, And, 3) $$rdi
    # nextln: 0032:     AluRRm(S32, Test) $$rdi, $$rdi
    # nextln: 0033:     Jumpcc(Ne, block14, block15)
    # nextln:       block14:
    # nextln: 0034:     $$rdi = MovRM(S32, [!1 + 0])
    # nextln: 0035:     $$rsi = MovRM(S32, [!0 + 0])
    # nextln: 0036:     $$rdi = AddRR(S32) $$rdi, $$rsi
    # nextln: 0037:     MovMR(S32, [!1 + 0]) $$rdi
    # nextln: 0038:     $$rdi = MovRM(S32, [!0 + 0])
    # nextln: 0039:     $$rdi = AddRI(S32, 1) $$rdi
    # nextln: 0040:     MovMR(S32, [!0 + 0]) $$rdi
    # nextln: 0041:     Jump(block4)
    # nextln:       block15:
    # nextln: 0042:     Jump(block7)
    # nextln:       block6:
    # nextln: 0043:     Jump(block7)
    # nextln:       block7:
    # nextln: 0044:     MovMR(S32, [!3 + 0]) $$rax
    # nextln: 0045:     Jump(block8)
    # nextln:       block8:
    # nextln: 0046:     $$rax = MovRM(S32, [!3 + 0])
    # nextln: 0047:     AluRRm(S32, Cmp) $$rax, $$rcx
    # nextln: 0048:     Jumpcc(L, block9, block10)
    # nextln:       block9:
    # nextln: 0049:     $$rax = MovRM(S32, [!3 + 0])
    # nextln: 0050:     $$rax = AluCommRmI(S32, And, 4) $$rax
    # nextln: 0051:     AluRRm(S32, Test) $$rax, $$rax
    # nextln: 0052:     Jumpcc(Ne, block11, block12)
    # nextln:       block11:
    # nextln: 0053:     $$rax = MovRM(S32, [!1 + 0])
    # nextln: 0054:     $$rdx = MovRM(S32, [!3 + 0])
    # nextln: 0055:     $$rax = AddRR(S32) $$rax, $$rdx
    # nextln: 0056:     MovMR(S32, [!1 + 0]) $$rax
    # nextln: 0057:     Jump(block13)
    # nextln:       block12:
    # nextln: 0058:     Jump(block13)
    # nextln:       block13:
    # nextln: 0059:     $$rax = MovRM(S32, [!3 + 0])
    # nextln: 0060:     $$rax = AddRI(S32, 1) $$rax
    # nextln: 0061:     MovMR(S32, [!3 + 0]) $$rax
    # nextln: 0062:     Jump(block8)
    # nextln:       block10:
    # nextln: 0063:     $$rax = MovRM(S32, [!1 + 0])
    # nextln: 0064:     Ret $$rax

    %0:ctrl, %1:ptr, %2:i32, %3:i32, %4:i32 = entry
    %7:ptr = stackslot 4:4
    %8:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %15:ptr = stackslot 4:4
    %9:i32 = iconst 1
    %10:i32 = iconst 4
    %11:i32 = iconst 0
    %12:ctrl = store.4 %0, %11, %7
    %14:i32 = iconst 3
    %16:ctrl = store.4 %12, %11, %15
    %17:ctrl = store.4 %16, %11, %13
    %18:ctrl = store.4 %17, %11, %8
    %21:ctrl = store.4 %18, %11, %7
    %22:ctrl = store.4 %21, %11, %15
    %23:i32 = iconst 2
    %24:i32 = and %51, %23
    %25:ctrl, %26:ctrl = brcond %50, %24
    %29:ctrl, %30:i32 = load.4 %25, %7
    %31:ctrl, %32:i32 = load.4 %29, %15
    %33:i32 = iadd %30, %32
    %34:ctrl = store.4 %31, %33, %7
    %35:ctrl, %36:phisel = region %26, %34
    %37:ctrl, %38:i32 = load.4 %35, %15
    %39:i32 = iadd %38, %9
    %40:ctrl = store.4 %37, %39, %15
    %41:ctrl, %42:phisel = region %22, %40
    %43:ctrl, %44:i32 = load.4 %41, %15
    %45:i32 = icmp slt %44, %2
    %46:ctrl, %47:ctrl = brcond %43, %45
    %50:ctrl, %51:i32 = load.4 %46, %15
    %54:ctrl = store.4 %47, %11, %13
    %55:ctrl, %56:phisel = region %54, %80
    %57:ctrl, %58:i32 = load.4 %55, %13
    %59:i32 = icmp slt %58, %3
    %60:ctrl, %61:ctrl = brcond %57, %59
    %64:ctrl, %65:i32 = load.4 %60, %13
    %66:i32 = and %65, %14
    %67:ctrl, %68:ctrl = brcond %64, %66
    %71:ctrl, %72:i32 = load.4 %67, %7
    %73:ctrl, %74:i32 = load.4 %71, %13
    %75:i32 = iadd %72, %74
    %76:ctrl = store.4 %73, %75, %7
    %77:ctrl, %78:i32 = load.4 %76, %13
    %79:i32 = iadd %78, %9
    %80:ctrl = store.4 %77, %79, %13
    %81:ctrl, %82:phisel = region %68, %61
    %83:ctrl = store.4 %81, %11, %8
    %84:ctrl, %85:phisel = region %83, %111
    %86:ctrl, %87:i32 = load.4 %84, %8
    %88:i32 = icmp slt %87, %4
    %89:ctrl, %90:ctrl = brcond %86, %88
    %93:ctrl, %94:i32 = load.4 %89, %8
    %95:i32 = and %94, %10
    %96:ctrl, %97:ctrl = brcond %93, %95
    %100:ctrl, %101:i32 = load.4 %96, %7
    %102:ctrl, %103:i32 = load.4 %100, %8
    %104:i32 = iadd %101, %103
    %105:ctrl = store.4 %102, %104, %7
    %106:ctrl, %107:phisel = region %97, %105
    %108:ctrl, %109:i32 = load.4 %106, %8
    %110:i32 = iadd %109, %9
    %111:ctrl = store.4 %108, %110, %8
    %114:ctrl, %115:i32 = load.4 %90, %7
    return %114, %115
}
