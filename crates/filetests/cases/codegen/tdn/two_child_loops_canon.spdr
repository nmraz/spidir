# run: codegen

func @"System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)":i32(ptr, i32, i32, i32) {
    # check: function `System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 33 c0                           xor eax, eax
    # nextln: 00000a: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 00000d: 89 44 24 08                     mov dword ptr [rsp + 8], eax
    # nextln: 000011: 89 44 24 0c                     mov dword ptr [rsp + 0xc], eax
    # nextln: 000015: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000019: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 00001c: 89 44 24 08                     mov dword ptr [rsp + 8], eax
    # nextln: 000020: 8b 7c 24 08                     mov edi, dword ptr [rsp + 8]
    # nextln: 000024: 3b fe                           cmp edi, esi
    # nextln: 000026: 0f 8d a7 00 00 00               jge 0xd3
    # nextln: 00002c: 8b 7c 24 08                     mov edi, dword ptr [rsp + 8]
    # nextln: 000030: 83 e7 02                        and edi, 2
    # nextln: 000033: 85 ff                           test edi, edi
    # nextln: 000035: 0f 84 88 00 00 00               je 0xc3
    # nextln: 00003b: 89 44 24 0c                     mov dword ptr [rsp + 0xc], eax
    # nextln: 00003f: 8b 7c 24 0c                     mov edi, dword ptr [rsp + 0xc]
    # nextln: 000043: 3b fa                           cmp edi, edx
    # nextln: 000045: 0f 8d 2d 00 00 00               jge 0x78
    # nextln: 00004b: 8b 7c 24 08                     mov edi, dword ptr [rsp + 8]
    # nextln: 00004f: 83 e7 03                        and edi, 3
    # nextln: 000052: 85 ff                           test edi, edi
    # nextln: 000054: 0f 84 1e 00 00 00               je 0x78
    # nextln: 00005a: 8b 3c 24                        mov edi, dword ptr [rsp]
    # nextln: 00005d: 44 8b 44 24 0c                  mov r8d, dword ptr [rsp + 0xc]
    # nextln: 000062: 41 03 f8                        add edi, r8d
    # nextln: 000065: 89 3c 24                        mov dword ptr [rsp], edi
    # nextln: 000068: 8b 7c 24 0c                     mov edi, dword ptr [rsp + 0xc]
    # nextln: 00006c: 83 c7 01                        add edi, 1
    # nextln: 00006f: 89 7c 24 0c                     mov dword ptr [rsp + 0xc], edi
    # nextln: 000073: e9 c7 ff ff ff                  jmp 0x3f
    # nextln: 000078: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 00007c: 8b 7c 24 04                     mov edi, dword ptr [rsp + 4]
    # nextln: 000080: 3b f9                           cmp edi, ecx
    # nextln: 000082: 0f 8d 2d 00 00 00               jge 0xb5
    # nextln: 000088: 8b 7c 24 08                     mov edi, dword ptr [rsp + 8]
    # nextln: 00008c: 83 e7 04                        and edi, 4
    # nextln: 00008f: 85 ff                           test edi, edi
    # nextln: 000091: 0f 84 0e 00 00 00               je 0xa5
    # nextln: 000097: 8b 3c 24                        mov edi, dword ptr [rsp]
    # nextln: 00009a: 44 8b 44 24 04                  mov r8d, dword ptr [rsp + 4]
    # nextln: 00009f: 41 03 f8                        add edi, r8d
    # nextln: 0000a2: 89 3c 24                        mov dword ptr [rsp], edi
    # nextln: 0000a5: 8b 7c 24 04                     mov edi, dword ptr [rsp + 4]
    # nextln: 0000a9: 83 c7 01                        add edi, 1
    # nextln: 0000ac: 89 7c 24 04                     mov dword ptr [rsp + 4], edi
    # nextln: 0000b0: e9 c7 ff ff ff                  jmp 0x7c
    # nextln: 0000b5: 8b 3c 24                        mov edi, dword ptr [rsp]
    # nextln: 0000b8: 44 8b 44 24 08                  mov r8d, dword ptr [rsp + 8]
    # nextln: 0000bd: 41 03 f8                        add edi, r8d
    # nextln: 0000c0: 89 3c 24                        mov dword ptr [rsp], edi
    # nextln: 0000c3: 8b 7c 24 08                     mov edi, dword ptr [rsp + 8]
    # nextln: 0000c7: 83 c7 01                        add edi, 1
    # nextln: 0000ca: 89 7c 24 08                     mov dword ptr [rsp + 8], edi
    # nextln: 0000ce: e9 4d ff ff ff                  jmp 0x20
    # nextln: 0000d3: 8b 04 24                        mov eax, dword ptr [rsp]
    # nextln: 0000d6: 48 83 c4 10                     add rsp, 0x10
    # nextln: 0000da: 5d                              pop rbp
    # nextln: 0000db: c3                              ret

    %0:ctrl, %1:ptr, %2:i32, %3:i32, %4:i32 = entry
    %7:ptr = stackslot 4:4
    %8:ptr = stackslot 4:4
    %10:ptr = stackslot 4:4
    %14:ptr = stackslot 4:4
    %9:i32 = iconst 1
    %11:i32 = iconst 0
    %12:ctrl = store.4 %0, %11, %7
    %13:ctrl = store.4 %12, %11, %8
    %15:ctrl = store.4 %13, %11, %14
    %16:ctrl = store.4 %15, %11, %10
    %19:ctrl = store.4 %16, %11, %7
    %20:ctrl = store.4 %19, %11, %8
    %21:i32 = iconst 3
    %22:i32 = iconst 4
    %23:i32 = iconst 2
    %24:i32 = and %111, %23
    %25:ctrl, %26:ctrl = brcond %110, %24
    %29:ctrl = store.4 %25, %11, %14
    %30:ctrl, %31:phisel = region %29, %55
    %32:ctrl, %33:i32 = load.4 %30, %14
    %34:i32 = icmp slt %33, %3
    %35:ctrl, %36:ctrl = brcond %32, %34
    %39:ctrl, %40:i32 = load.4 %35, %8
    %41:i32 = and %40, %21
    %42:ctrl, %43:ctrl = brcond %39, %41
    %46:ctrl, %47:i32 = load.4 %42, %7
    %48:ctrl, %49:i32 = load.4 %46, %14
    %50:i32 = iadd %47, %49
    %51:ctrl = store.4 %48, %50, %7
    %52:ctrl, %53:i32 = load.4 %51, %14
    %54:i32 = iadd %53, %9
    %55:ctrl = store.4 %52, %54, %14
    %56:ctrl, %57:phisel = region %43, %36
    %58:ctrl = store.4 %56, %11, %10
    %59:ctrl, %60:phisel = region %58, %86
    %61:ctrl, %62:i32 = load.4 %59, %10
    %63:i32 = icmp slt %62, %4
    %64:ctrl, %65:ctrl = brcond %61, %63
    %68:ctrl, %69:i32 = load.4 %64, %8
    %70:i32 = and %69, %22
    %71:ctrl, %72:ctrl = brcond %68, %70
    %75:ctrl, %76:i32 = load.4 %71, %7
    %77:ctrl, %78:i32 = load.4 %75, %10
    %79:i32 = iadd %76, %78
    %80:ctrl = store.4 %77, %79, %7
    %81:ctrl, %82:phisel = region %72, %80
    %83:ctrl, %84:i32 = load.4 %81, %10
    %85:i32 = iadd %84, %9
    %86:ctrl = store.4 %83, %85, %10
    %89:ctrl, %90:i32 = load.4 %65, %7
    %91:ctrl, %92:i32 = load.4 %89, %8
    %93:i32 = iadd %90, %92
    %94:ctrl = store.4 %91, %93, %7
    %95:ctrl, %96:phisel = region %26, %94
    %97:ctrl, %98:i32 = load.4 %95, %8
    %99:i32 = iadd %98, %9
    %100:ctrl = store.4 %97, %99, %8
    %101:ctrl, %102:phisel = region %20, %100
    %103:ctrl, %104:i32 = load.4 %101, %8
    %105:i32 = icmp slt %104, %2
    %106:ctrl, %107:ctrl = brcond %103, %105
    %110:ctrl, %111:i32 = load.4 %106, %8
    %114:ctrl, %115:i32 = load.4 %107, %7
    return %114, %115
}
