# run: isel-regalloc

func @select_eq:i32(i32, i32, i32, i32) {
    # check: function `select_eq`:
    # nextln: clobbers: rax
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax = $$rdx
    # nextln: 0000:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0001:     Jumpcc(E, block1, block3)
    # nextln:       block1:
    # nextln: 0002:     Jump(block2)
    # nextln:       block3:
    # nextln:           $$rax = $$rcx
    # nextln: 0003:     Jump(block2)
    # nextln:       block2:
    # nextln: 0004:     Ret $$rax

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp eq %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ne:i32(i32, i32, i32, i32) {
    # check: function `select_ne`:
    # nextln: clobbers: rax
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax = $$rdx
    # nextln: 0000:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0001:     Jumpcc(Ne, block1, block3)
    # nextln:       block1:
    # nextln: 0002:     Jump(block2)
    # nextln:       block3:
    # nextln:           $$rax = $$rcx
    # nextln: 0003:     Jump(block2)
    # nextln:       block2:
    # nextln: 0004:     Ret $$rax

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp ne %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_slt:i32(i32, i32, i32, i32) {
    # check: function `select_slt`:
    # nextln: clobbers: rax
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax = $$rdx
    # nextln: 0000:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0001:     Jumpcc(L, block1, block3)
    # nextln:       block1:
    # nextln: 0002:     Jump(block2)
    # nextln:       block3:
    # nextln:           $$rax = $$rcx
    # nextln: 0003:     Jump(block2)
    # nextln:       block2:
    # nextln: 0004:     Ret $$rax

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp slt %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_sle:i32(i32, i32, i32, i32) {
    # check: function `select_sle`:
    # nextln: clobbers: rax
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax = $$rdx
    # nextln: 0000:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0001:     Jumpcc(Le, block1, block3)
    # nextln:       block1:
    # nextln: 0002:     Jump(block2)
    # nextln:       block3:
    # nextln:           $$rax = $$rcx
    # nextln: 0003:     Jump(block2)
    # nextln:       block2:
    # nextln: 0004:     Ret $$rax

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp sle %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ult:i32(i32, i32, i32, i32) {
    # check: function `select_ult`:
    # nextln: clobbers: rax
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax = $$rdx
    # nextln: 0000:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0001:     Jumpcc(B, block1, block3)
    # nextln:       block1:
    # nextln: 0002:     Jump(block2)
    # nextln:       block3:
    # nextln:           $$rax = $$rcx
    # nextln: 0003:     Jump(block2)
    # nextln:       block2:
    # nextln: 0004:     Ret $$rax

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp ult %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_ule:i32(i32, i32, i32, i32) {
    # check: function `select_ule`:
    # nextln: clobbers: rax
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax = $$rdx
    # nextln: 0000:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0001:     Jumpcc(Be, block1, block3)
    # nextln:       block1:
    # nextln: 0002:     Jump(block2)
    # nextln:       block3:
    # nextln:           $$rax = $$rcx
    # nextln: 0003:     Jump(block2)
    # nextln:       block2:
    # nextln: 0004:     Ret $$rax

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp ule %a, %b
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    return %6, %10
}

func @select_slt_cond_reused:i32(i32, i32, i32, i32) {
    # check: function `select_slt_cond_reused`:
    # nextln: clobbers: rax, rdx
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax = $$rdx
    # nextln: 0000:     $$rdx = MovRmS32(0)
    # nextln: 0001:     AluRRm(S32, Cmp) $$rdi, $$rsi
    # nextln: 0002:     $$rdx = Setcc(L) $$rdx
    # nextln: 0003:     AluRRm(S32, Test) $$rdx, $$rdx
    # nextln: 0004:     Jumpcc(Ne, block1, block3)
    # nextln:       block1:
    # nextln: 0005:     Jump(block2)
    # nextln:       block3:
    # nextln:           $$rax = $$rcx
    # nextln: 0006:     Jump(block2)
    # nextln:       block2:
    # nextln: 0007:     $$rdx = AluRmI(S32, Xor, 5) $$rdx
    # nextln: 0008:     $$rax = AluRRm(S32, Add) $$rax, $$rdx
    # nextln: 0009:     Ret $$rax

    %0:ctrl, %a:i32, %b:i32, %2:i32, %3:i32 = entry
    %1:i32 = icmp slt %a, %b
    %five:i32 = iconst 5
    %thing:i32 = xor %1, %five
    %8:ctrl, %9:ctrl = brcond %0, %1
    %6:ctrl, %7:phisel = region %8, %9
    %10:i32 = phi %7, %2, %3
    %retval:i32 = iadd %10, %thing
    return %6, %retval
}
