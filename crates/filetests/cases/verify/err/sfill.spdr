# run: verify-err

func @sfill_bad_input_count:i32() {
    # check: function `sfill_bad_input_count`:
    # unordered: `$val:i32 = sfill 8 $val, $val, $val`: bad input count, expected 1
    # unordered: `$val:i32 = sfill 8`: bad input count, expected 1

    %0:ctrl = entry
    %1:i32 = sfill 8
    %2:i32 = sfill 8 %1, %1, %1
    return %0, %2
}

func @sfill_bad_output_count:i32(i32) {
    # check: function `sfill_bad_output_count`:
    # unordered: `$val:i32, $val:i32 = sfill 8 $val`: bad output count, expected 1

    %0:ctrl, %1:i32 = entry
    %2:i32, %3:i32 = sfill 8 %1
    return %0, %2
}

func @sfill_bad_output_kind:ptr(i32) {
    # check: function `sfill_bad_output_kind`:
    # unordered: `$val:ptr = sfill 8 $val`: bad value kind for output 0, expected one of `i32`, `i64`, got `ptr`

    %0:ctrl, %1:i32 = entry
    %2:ptr = sfill 8 %1
    return %0, %2
}

func @sfill_bad_input_kind:i64(i32) {
    # check: function `sfill_bad_input_kind`:
    # unordered: `$val:i64 = sfill 8 $val`: bad value kind for input 0, expected one of `i64`, got `i32`

    %0:ctrl, %1:i32 = entry
    %2:i64 = sfill 8 %1
    return %0, %2
}

func @sfill_bad_width_min:i32(i32) {
    # check: function `sfill_bad_width_min`:
    # unordered: `$val:i32 = sfill 0 $val`: bad fill width

    %0:ctrl, %1:i32 = entry
    %2:i32 = sfill 0 %1
    return %0, %2
}

func @sfill_bad_width_max_32:i32(i32) {
    # check: function `sfill_bad_width_max_32`:
    # unordered: `$val:i32 = sfill 32 $val`: bad fill width

    %0:ctrl, %1:i32 = entry
    %2:i32 = sfill 32 %1
    return %0, %2
}

func @sfill_bad_width_max_64:i64(i64) {
    # check: function `sfill_bad_width_max_64`:
    # unordered: `$val:i64 = sfill 64 $val`: bad fill width

    %0:ctrl, %1:i64 = entry
    %2:i64 = sfill 64 %1
    return %0, %2
}
