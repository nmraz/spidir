# run: codegen

extfunc @malloc:ptr(i64)

func @gc_new:ptr(i32, i64) {
    # check: function `gc_new`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f7                        mov rdi, rsi
    # nextln: 000007: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @malloc + 0
    # nextln: 000011: ff d0                           call rax
    # nextln: 000013: 5d                              pop rbp
    # nextln: 000014: c3                              ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:ctrl, %4:ptr = call @malloc %0, %2
    return %3, %4
}

func @throw_index_out_of_range_exception() {
    # check: function `throw_index_out_of_range_exception`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl = entry
    return %0
}

func @"System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)":i32(i32) {
    # check: function `System.Int32 Tests.CodeGenBringUpTests::ArrayJagged(System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 55                           push r13
    # nextln: 000006: 41 54                           push r12
    # nextln: 000008: 53                              push rbx
    # nextln: 000009: 48 83 ec 18                     sub rsp, 0x18
    # nextln: 00000d: 89 fb                           mov ebx, edi
    # nextln: 00000f: 41 bc 02 00 00 00               mov r12d, 2
    # nextln: 000015: 33 c0                           xor eax, eax
    # nextln: 000017: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 00001b: be 28 00 00 00                  mov esi, 0x28
    # nextln: 000020: bf ab 00 00 00                  mov edi, 0xab
    # nextln: 000025: e8 00 00 00 00                  call 0x2a  # RELOC_PC32 -> @gc_new + -4
    # nextln: 00002a: 44 89 60 10                     mov dword ptr [rax + 0x10], r12d
    # nextln: 00002e: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 000032: 4c 8b 2c 24                     mov r13, qword ptr [rsp]
    # nextln: 000036: be 1c 00 00 00                  mov esi, 0x1c
    # nextln: 00003b: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 000040: e8 00 00 00 00                  call 0x45  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000045: 44 89 60 10                     mov dword ptr [rax + 0x10], r12d
    # nextln: 000049: 8b 48 10                        mov ecx, dword ptr [rax + 0x10]
    # nextln: 00004c: 48 83 f9 01                     cmp rcx, 1
    # nextln: 000050: 0f 8e a7 00 00 00               jle 0xfd
    # nextln: 000056: b9 01 00 00 00                  mov ecx, 1
    # nextln: 00005b: 89 48 18                        mov dword ptr [rax + 0x18], ecx
    # nextln: 00005e: 41 8b 4d 10                     mov ecx, dword ptr [r13 + 0x10]
    # nextln: 000062: 48 85 c9                        test rcx, rcx
    # nextln: 000065: 0f 8e 92 00 00 00               jle 0xfd
    # nextln: 00006b: 49 89 45 18                     mov qword ptr [r13 + 0x18], rax
    # nextln: 00006f: 4c 8b 2c 24                     mov r13, qword ptr [rsp]
    # nextln: 000073: be 1c 00 00 00                  mov esi, 0x1c
    # nextln: 000078: bf aa 00 00 00                  mov edi, 0xaa
    # nextln: 00007d: e8 00 00 00 00                  call 0x82  # RELOC_PC32 -> @gc_new + -4
    # nextln: 000082: 44 89 60 10                     mov dword ptr [rax + 0x10], r12d
    # nextln: 000086: 8b 48 10                        mov ecx, dword ptr [rax + 0x10]
    # nextln: 000089: 48 85 c9                        test rcx, rcx
    # nextln: 00008c: 0f 8e 6b 00 00 00               jle 0xfd
    # nextln: 000092: b9 02 00 00 00                  mov ecx, 2
    # nextln: 000097: 89 48 14                        mov dword ptr [rax + 0x14], ecx
    # nextln: 00009a: 8b 48 10                        mov ecx, dword ptr [rax + 0x10]
    # nextln: 00009d: 48 83 f9 01                     cmp rcx, 1
    # nextln: 0000a1: 0f 8e 56 00 00 00               jle 0xfd
    # nextln: 0000a7: b9 03 00 00 00                  mov ecx, 3
    # nextln: 0000ac: 89 48 18                        mov dword ptr [rax + 0x18], ecx
    # nextln: 0000af: 41 8b 4d 10                     mov ecx, dword ptr [r13 + 0x10]
    # nextln: 0000b3: 48 83 f9 01                     cmp rcx, 1
    # nextln: 0000b7: 0f 8e 40 00 00 00               jle 0xfd
    # nextln: 0000bd: 49 89 45 20                     mov qword ptr [r13 + 0x20], rax
    # nextln: 0000c1: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0000c5: 8b 48 10                        mov ecx, dword ptr [rax + 0x10]
    # nextln: 0000c8: 48 83 f9 01                     cmp rcx, 1
    # nextln: 0000cc: 0f 8e 2b 00 00 00               jle 0xfd
    # nextln: 0000d2: 48 8b 40 20                     mov rax, qword ptr [rax + 0x20]
    # nextln: 0000d6: 8b 50 10                        mov edx, dword ptr [rax + 0x10]
    # nextln: 0000d9: 48 63 cb                        movsxd rcx, ebx
    # nextln: 0000dc: 48 3b ca                        cmp rcx, rdx
    # nextln: 0000df: 0f 8d 18 00 00 00               jge 0xfd
    # nextln: 0000e5: 48 c1 e1 02                     shl rcx, 2
    # nextln: 0000e9: 48 83 c1 14                     add rcx, 0x14
    # nextln: 0000ed: 48 03 c1                        add rax, rcx
    # nextln: 0000f0: 8b 00                           mov eax, dword ptr [rax]
    # nextln: 0000f2: 48 83 c4 18                     add rsp, 0x18
    # nextln: 0000f6: 5b                              pop rbx
    # nextln: 0000f7: 41 5c                           pop r12
    # nextln: 0000f9: 41 5d                           pop r13
    # nextln: 0000fb: 5d                              pop rbp
    # nextln: 0000fc: c3                              ret
    # nextln: 0000fd: e8 00 00 00 00                  call 0x102  # RELOC_PC32 -> @throw_index_out_of_range_exception + -4
    # nextln: 000102: 0f 0b                           ud2

    %0:ctrl, %1:i32 = entry
    %20:ptr = stackslot 8:8
    %4:i64 = iext %1
    %5:i64 = sfill 32 %4
    %8:i64 = iconst 20
    %29:i32 = iconst 2
    %140:i64 = shl %5, %29
    %9:i64 = iadd %140, %8
    %10:i64 = iconst 16
    %135:i64 = iconst 32
    %133:i64 = iconst 1
    %134:i64 = iconst 24
    %21:i32 = iconst 3
    %136:i64 = iconst 0
    %137:i64 = iconst 2
    %138:i64 = iconst 28
    %36:i32 = iconst 170
    %11:i32 = iconst 1
    %139:i64 = iconst 40
    %37:i32 = iconst 171
    %38:ptr = iconst 0
    %39:ctrl = store.8 %0, %38, %20
    %42:ctrl, %43:ptr = call @gc_new %39, %37, %139
    %44:ptr = ptroff %43, %10
    %45:ctrl = store.4 %42, %137, %44
    %46:ctrl = store.8 %45, %43, %20
    %47:ctrl, %48:ptr = load.8 %46, %20
    %49:ctrl, %50:ptr = call @gc_new %47, %36, %138
    %60:ptr = ptroff %50, %134
    %51:ptr = ptroff %50, %10
    %52:ctrl = store.4 %49, %137, %51
    %53:ctrl, %54:i64 = load.4 %52, %51
    %55:i64 = icmp slt %133, %54
    %56:ctrl, %57:ctrl = brcond %53, %55
    %61:ctrl = store.4 %56, %11, %60
    %70:ptr = ptroff %48, %134
    %62:ptr = ptroff %48, %10
    %63:ctrl, %64:i64 = load.4 %61, %62
    %65:i64 = icmp slt %136, %64
    %66:ctrl, %67:ctrl = brcond %63, %65
    %71:ctrl = store.8 %66, %50, %70
    %72:ctrl, %73:ptr = load.8 %71, %20
    %74:ctrl, %75:ptr = call @gc_new %72, %36, %138
    %94:ptr = ptroff %75, %134
    %85:ptr = ptroff %75, %8
    %76:ptr = ptroff %75, %10
    %77:ctrl = store.4 %74, %137, %76
    %78:ctrl, %79:i64 = load.4 %77, %76
    %80:i64 = icmp slt %136, %79
    %81:ctrl, %82:ctrl = brcond %78, %80
    %86:ctrl = store.4 %81, %29, %85
    %87:ctrl, %88:i64 = load.4 %86, %76
    %89:i64 = icmp slt %133, %88
    %90:ctrl, %91:ctrl = brcond %87, %89
    %95:ctrl = store.4 %90, %21, %94
    %104:ptr = ptroff %73, %135
    %96:ptr = ptroff %73, %10
    %97:ctrl, %98:i64 = load.4 %95, %96
    %99:i64 = icmp slt %133, %98
    %100:ctrl, %101:ctrl = brcond %97, %99
    %105:ctrl = store.8 %100, %75, %104
    %106:ctrl, %107:ptr = load.8 %105, %20
    %116:ptr = ptroff %107, %135
    %108:ptr = ptroff %107, %10
    %109:ctrl, %110:i64 = load.4 %106, %108
    %111:i64 = icmp slt %133, %110
    %112:ctrl, %113:ctrl = brcond %109, %111
    %117:ctrl, %118:ptr = load.8 %112, %116
    %130:ptr = ptroff %118, %9
    %119:ptr = ptroff %118, %10
    %120:ctrl, %121:i64 = load.4 %117, %119
    %122:i64 = icmp slt %5, %121
    %123:ctrl, %124:ctrl = brcond %120, %122
    %131:ctrl, %132:i32 = load.4 %123, %130
    return %131, %132
    %127:ctrl, %128:phisel = region %57, %67, %82, %91, %101, %113, %124
    %129:ctrl = call @throw_index_out_of_range_exception %127
    unreachable %129
}
