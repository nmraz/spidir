# run: codegen

extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)":i32(ptr, i32)
extfunc @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)":i32(i64, i32)

func @"System.Boolean Tests.BitTest::Run()":i32() {
    # check: function `System.Boolean Tests.BitTest::Run()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 81 ec c8 00 00 00            sub rsp, 0xc8
    # nextln: 000014: 33 c9                           xor ecx, ecx
    # nextln: 000016: 48 8d 84 24 ae 00 00 00         lea rax, [rsp + 0xae]
    # nextln: 00001e: 48 8d 94 24 a8 00 00 00         lea rdx, [rsp + 0xa8]
    # nextln: 000026: 48 89 d7                        mov rdi, rdx
    # nextln: 000029: 48 89 c2                        mov rdx, rax
    # nextln: 00002c: 33 c0                           xor eax, eax
    # nextln: 00002e: 48 89 e6                        mov rsi, rsp
    # nextln: 000031: 49 89 f9                        mov r9, rdi
    # nextln: 000034: 48 89 f7                        mov rdi, rsi
    # nextln: 000037: 4c 8d 44 24 08                  lea r8, [rsp + 8]
    # nextln: 00003c: 48 8d b4 24 a0 00 00 00         lea rsi, [rsp + 0xa0]
    # nextln: 000044: 4d 89 c3                        mov r11, r8
    # nextln: 000047: 4c 8d 84 24 aa 00 00 00         lea r8, [rsp + 0xaa]
    # nextln: 00004f: 4c 8d 94 24 a4 00 00 00         lea r10, [rsp + 0xa4]
    # nextln: 000057: 48 8d 9c 24 ac 00 00 00         lea rbx, [rsp + 0xac]
    # nextln: 00005f: 4c 8d a4 24 af 00 00 00         lea r12, [rsp + 0xaf]
    # nextln: 000067: 88 84 24 af 00 00 00            mov byte ptr [rsp + 0xaf], al
    # nextln: 00006e: 88 84 24 ae 00 00 00            mov byte ptr [rsp + 0xae], al
    # nextln: 000075: 4c 8d ac 24 b0 00 00 00         lea r13, [rsp + 0xb0]
    # nextln: 00007d: 88 84 24 b0 00 00 00            mov byte ptr [rsp + 0xb0], al
    # nextln: 000084: 66 89 84 24 ac 00 00 00         mov word ptr [rsp + 0xac], ax
    # nextln: 00008c: 66 89 84 24 aa 00 00 00         mov word ptr [rsp + 0xaa], ax
    # nextln: 000094: 66 89 84 24 a8 00 00 00         mov word ptr [rsp + 0xa8], ax
    # nextln: 00009c: 89 84 24 a4 00 00 00            mov dword ptr [rsp + 0xa4], eax
    # nextln: 0000a3: 89 84 24 a0 00 00 00            mov dword ptr [rsp + 0xa0], eax
    # nextln: 0000aa: 48 89 4c 24 08                  mov qword ptr [rsp + 8], rcx
    # nextln: 0000af: 48 89 0c 24                     mov qword ptr [rsp], rcx
    # nextln: 0000b3: 48 89 d1                        mov rcx, rdx
    # nextln: 0000b6: ba 07 00 00 00                  mov edx, 7
    # nextln: 0000bb: 48 89 94 24 98 00 00 00         mov qword ptr [rsp + 0x98], rdx
    # nextln: 0000c3: ba 08 00 00 00                  mov edx, 8
    # nextln: 0000c8: 4d 89 d6                        mov r14, r10
    # nextln: 0000cb: 49 89 f2                        mov r10, rsi
    # nextln: 0000ce: 4c 89 f6                        mov rsi, r14
    # nextln: 0000d1: 4d 89 de                        mov r14, r11
    # nextln: 0000d4: 49 89 fb                        mov r11, rdi
    # nextln: 0000d7: 4c 89 ef                        mov rdi, r13
    # nextln: 0000da: 4d 89 c5                        mov r13, r8
    # nextln: 0000dd: 49 89 d8                        mov r8, rbx
    # nextln: 0000e0: 4c 89 f3                        mov rbx, r14
    # nextln: 0000e3: 41 be 01 00 00 00               mov r14d, 1
    # nextln: 0000e9: 48 89 8c 24 88 00 00 00         mov qword ptr [rsp + 0x88], rcx
    # nextln: 0000f1: 4c 89 e1                        mov rcx, r12
    # nextln: 0000f4: 4c 89 4c 24 58                  mov qword ptr [rsp + 0x58], r9
    # nextln: 0000f9: 4d 89 c1                        mov r9, r8
    # nextln: 0000fc: 48 89 74 24 48                  mov qword ptr [rsp + 0x48], rsi
    # nextln: 000101: 48 89 fe                        mov rsi, rdi
    # nextln: 000104: 4c 89 54 24 40                  mov qword ptr [rsp + 0x40], r10
    # nextln: 000109: 4d 89 ea                        mov r10, r13
    # nextln: 00010c: 48 89 5c 24 28                  mov qword ptr [rsp + 0x28], rbx
    # nextln: 000111: 4c 89 df                        mov rdi, r11
    # nextln: 000114: 4d 89 f0                        mov r8, r14
    # nextln: 000117: bb 20 00 00 00                  mov ebx, 0x20
    # nextln: 00011c: 41 bb 0f 00 00 00               mov r11d, 0xf
    # nextln: 000122: 49 89 f5                        mov r13, rsi
    # nextln: 000125: 4d 89 df                        mov r15, r11
    # nextln: 000128: 4c 89 4c 24 70                  mov qword ptr [rsp + 0x70], r9
    # nextln: 00012d: 4c 89 54 24 60                  mov qword ptr [rsp + 0x60], r10
    # nextln: 000132: b9 10 00 00 00                  mov ecx, 0x10
    # nextln: 000137: be 03 00 00 00                  mov esi, 3
    # nextln: 00013c: 48 89 7c 24 20                  mov qword ptr [rsp + 0x20], rdi
    # nextln: 000141: 41 b8 40 00 00 00               mov r8d, 0x40
    # nextln: 000147: bf 02 00 00 00                  mov edi, 2
    # nextln: 00014c: 4d 63 ce                        movsxd r9, r14d
    # nextln: 00014f: 4c 63 d7                        movsxd r10, edi
    # nextln: 000152: 41 bb 80 ff ff ff               mov r11d, 0xffffff80
    # nextln: 000158: 44 88 9c 24 af 00 00 00         mov byte ptr [rsp + 0xaf], r11b
    # nextln: 000160: 41 bb 00 80 ff ff               mov r11d, 0xffff8000
    # nextln: 000166: 44 88 b4 24 ae 00 00 00         mov byte ptr [rsp + 0xae], r14b
    # nextln: 00016e: 40 88 bc 24 b0 00 00 00         mov byte ptr [rsp + 0xb0], dil
    # nextln: 000176: 66 44 89 9c 24 ac 00 00 00      mov word ptr [rsp + 0xac], r11w
    # nextln: 00017f: 66 44 89 b4 24 aa 00 00 00      mov word ptr [rsp + 0xaa], r14w
    # nextln: 000188: 66 89 bc 24 a8 00 00 00         mov word ptr [rsp + 0xa8], di
    # nextln: 000190: 44 89 b4 24 a4 00 00 00         mov dword ptr [rsp + 0xa4], r14d
    # nextln: 000198: 89 bc 24 a0 00 00 00            mov dword ptr [rsp + 0xa0], edi
    # nextln: 00019f: 4c 89 4c 24 08                  mov qword ptr [rsp + 8], r9
    # nextln: 0001a4: 4c 89 14 24                     mov qword ptr [rsp], r10
    # nextln: 0001a8: 0f b6 bc 24 af 00 00 00         movzx edi, byte ptr [rsp + 0xaf]
    # nextln: 0001b0: 40 0f be ff                     movsx edi, dil
    # nextln: 0001b4: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0001be: 48 89 4c 24 68                  mov qword ptr [rsp + 0x68], rcx
    # nextln: 0001c3: 4c 89 7c 24 78                  mov qword ptr [rsp + 0x78], r15
    # nextln: 0001c8: 48 89 94 24 90 00 00 00         mov qword ptr [rsp + 0x90], rdx
    # nextln: 0001d0: 49 89 f7                        mov r15, rsi
    # nextln: 0001d3: 48 89 5c 24 38                  mov qword ptr [rsp + 0x38], rbx
    # nextln: 0001d8: 4c 89 44 24 30                  mov qword ptr [rsp + 0x30], r8
    # nextln: 0001dd: 48 8b 9c 24 98 00 00 00         mov rbx, qword ptr [rsp + 0x98]
    # nextln: 0001e5: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 0001ea: 4c 89 ac 24 80 00 00 00         mov qword ptr [rsp + 0x80], r13
    # nextln: 0001f2: 4d 89 f5                        mov r13, r14
    # nextln: 0001f5: 4c 8b b4 24 88 00 00 00         mov r14, qword ptr [rsp + 0x88]
    # nextln: 0001fd: 48 89 de                        mov rsi, rbx
    # nextln: 000200: 41 ff d1                        call r9
    # nextln: 000203: 48 89 d9                        mov rcx, rbx
    # nextln: 000206: 4c 8b 9c 24 90 00 00 00         mov r11, qword ptr [rsp + 0x90]
    # nextln: 00020e: 4c 89 f2                        mov rdx, r14
    # nextln: 000211: 4d 89 f9                        mov r9, r15
    # nextln: 000214: 4d 89 e8                        mov r8, r13
    # nextln: 000217: 4c 8b 54 24 10                  mov r10, qword ptr [rsp + 0x10]
    # nextln: 00021c: 4c 89 e6                        mov rsi, r12
    # nextln: 00021f: 44 23 e8                        and r13d, eax
    # nextln: 000222: 0f b6 84 24 af 00 00 00         movzx eax, byte ptr [rsp + 0xaf]
    # nextln: 00022a: 0f be f8                        movsx edi, al
    # nextln: 00022d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000237: 49 89 ce                        mov r14, rcx
    # nextln: 00023a: 49 89 f7                        mov r15, rsi
    # nextln: 00023d: 4c 89 db                        mov rbx, r11
    # nextln: 000240: 4c 89 4c 24 50                  mov qword ptr [rsp + 0x50], r9
    # nextln: 000245: 49 89 d4                        mov r12, rdx
    # nextln: 000248: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 00024d: 48 89 de                        mov rsi, rbx
    # nextln: 000250: ff d0                           call rax
    # nextln: 000252: 44 23 e8                        and r13d, eax
    # nextln: 000255: 4c 89 f1                        mov rcx, r14
    # nextln: 000258: 4c 89 fa                        mov rdx, r15
    # nextln: 00025b: 4c 8b 44 24 10                  mov r8, qword ptr [rsp + 0x10]
    # nextln: 000260: 49 89 d9                        mov r9, rbx
    # nextln: 000263: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 000268: 4c 89 e0                        mov rax, r12
    # nextln: 00026b: 0f b6 bc 24 ae 00 00 00         movzx edi, byte ptr [rsp + 0xae]
    # nextln: 000273: 40 0f be ff                     movsx edi, dil
    # nextln: 000277: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000281: 4c 89 c3                        mov rbx, r8
    # nextln: 000284: 49 89 cc                        mov r12, rcx
    # nextln: 000287: 49 89 c6                        mov r14, rax
    # nextln: 00028a: 48 89 de                        mov rsi, rbx
    # nextln: 00028d: 41 ff d2                        call r10
    # nextln: 000290: 44 23 e8                        and r13d, eax
    # nextln: 000293: 4c 89 e0                        mov rax, r12
    # nextln: 000296: 4c 89 f9                        mov rcx, r15
    # nextln: 000299: 4c 8b 84 24 90 00 00 00         mov r8, qword ptr [rsp + 0x90]
    # nextln: 0002a1: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 0002a6: 4d 89 f1                        mov r9, r14
    # nextln: 0002a9: 48 89 de                        mov rsi, rbx
    # nextln: 0002ac: 0f b6 bc 24 ae 00 00 00         movzx edi, byte ptr [rsp + 0xae]
    # nextln: 0002b4: 40 0f be ff                     movsx edi, dil
    # nextln: 0002b8: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0002c2: 49 89 ce                        mov r14, rcx
    # nextln: 0002c5: 4c 89 c3                        mov rbx, r8
    # nextln: 0002c8: 49 89 d7                        mov r15, rdx
    # nextln: 0002cb: 48 89 de                        mov rsi, rbx
    # nextln: 0002ce: 41 ff d2                        call r10
    # nextln: 0002d1: 33 c9                           xor ecx, ecx
    # nextln: 0002d3: 85 c0                           test eax, eax
    # nextln: 0002d5: 0f 94 c1                        sete cl
    # nextln: 0002d8: 44 23 e9                        and r13d, ecx
    # nextln: 0002db: 4c 89 e1                        mov rcx, r12
    # nextln: 0002de: 49 89 d8                        mov r8, rbx
    # nextln: 0002e1: 4c 89 fa                        mov rdx, r15
    # nextln: 0002e4: 4c 8b 8c 24 88 00 00 00         mov r9, qword ptr [rsp + 0x88]
    # nextln: 0002ec: 48 8b 74 24 10                  mov rsi, qword ptr [rsp + 0x10]
    # nextln: 0002f1: 4c 89 f0                        mov rax, r14
    # nextln: 0002f4: 0f b6 bc 24 ae 00 00 00         movzx edi, byte ptr [rsp + 0xae]
    # nextln: 0002fc: 40 0f be ff                     movsx edi, dil
    # nextln: 000300: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00030a: 48 89 c3                        mov rbx, rax
    # nextln: 00030d: 49 89 d4                        mov r12, rdx
    # nextln: 000310: 49 89 f7                        mov r15, rsi
    # nextln: 000313: 4d 89 ce                        mov r14, r9
    # nextln: 000316: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 00031b: 41 ff d2                        call r10
    # nextln: 00031e: 44 23 e8                        and r13d, eax
    # nextln: 000321: 49 89 d9                        mov r9, rbx
    # nextln: 000324: 4c 89 e1                        mov rcx, r12
    # nextln: 000327: 48 8b 84 24 90 00 00 00         mov rax, qword ptr [rsp + 0x90]
    # nextln: 00032f: 4c 89 fa                        mov rdx, r15
    # nextln: 000332: 4d 89 f0                        mov r8, r14
    # nextln: 000335: 48 8b b4 24 98 00 00 00         mov rsi, qword ptr [rsp + 0x98]
    # nextln: 00033d: 0f b6 bc 24 b0 00 00 00         movzx edi, byte ptr [rsp + 0xb0]
    # nextln: 000345: 40 0f be ff                     movsx edi, dil
    # nextln: 000349: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000353: 4d 89 cf                        mov r15, r9
    # nextln: 000356: 4c 89 c3                        mov rbx, r8
    # nextln: 000359: 49 89 d4                        mov r12, rdx
    # nextln: 00035c: 49 89 f6                        mov r14, rsi
    # nextln: 00035f: 4c 89 e6                        mov rsi, r12
    # nextln: 000362: 41 ff d2                        call r10
    # nextln: 000365: 33 c9                           xor ecx, ecx
    # nextln: 000367: 85 c0                           test eax, eax
    # nextln: 000369: 0f 94 c1                        sete cl
    # nextln: 00036c: 44 23 e9                        and r13d, ecx
    # nextln: 00036f: 4c 89 e0                        mov rax, r12
    # nextln: 000372: 4c 8b a4 24 90 00 00 00         mov r12, qword ptr [rsp + 0x90]
    # nextln: 00037a: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 00037f: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000389: 4c 89 f6                        mov rsi, r14
    # nextln: 00038c: 4c 89 ff                        mov rdi, r15
    # nextln: 00038f: ff d1                           call rcx
    # nextln: 000391: 4c 89 ff                        mov rdi, r15
    # nextln: 000394: 48 8b 74 24 68                  mov rsi, qword ptr [rsp + 0x68]
    # nextln: 000399: 4c 8b 7c 24 10                  mov r15, qword ptr [rsp + 0x10]
    # nextln: 00039e: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 0003a3: 4c 8b 84 24 80 00 00 00         mov r8, qword ptr [rsp + 0x80]
    # nextln: 0003ab: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0003b0: 44 23 e8                        and r13d, eax
    # nextln: 0003b3: 4c 89 c0                        mov rax, r8
    # nextln: 0003b6: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0003c0: 49 89 f6                        mov r14, rsi
    # nextln: 0003c3: 4c 89 e6                        mov rsi, r12
    # nextln: 0003c6: 41 ff d0                        call r8
    # nextln: 0003c9: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0003ce: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0003d3: 44 23 e8                        and r13d, eax
    # nextln: 0003d6: 48 8b 7c 24 50                  mov rdi, qword ptr [rsp + 0x50]
    # nextln: 0003db: 4c 89 f0                        mov rax, r14
    # nextln: 0003de: 4c 8b b4 24 80 00 00 00         mov r14, qword ptr [rsp + 0x80]
    # nextln: 0003e6: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0003f0: 4c 89 fe                        mov rsi, r15
    # nextln: 0003f3: 48 89 df                        mov rdi, rbx
    # nextln: 0003f6: 41 ff d0                        call r8
    # nextln: 0003f9: 44 23 e8                        and r13d, eax
    # nextln: 0003fc: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 000401: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 000406: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000410: 4c 89 e6                        mov rsi, r12
    # nextln: 000413: 48 89 df                        mov rdi, rbx
    # nextln: 000416: ff d0                           call rax
    # nextln: 000418: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 00041d: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 000422: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 000427: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 00042c: 45 33 c0                        xor r8d, r8d
    # nextln: 00042f: 85 c0                           test eax, eax
    # nextln: 000431: 41 0f 94 c0                     sete r8b
    # nextln: 000435: 45 23 e8                        and r13d, r8d
    # nextln: 000438: 48 89 d0                        mov rax, rdx
    # nextln: 00043b: 48 89 fa                        mov rdx, rdi
    # nextln: 00043e: 48 89 f7                        mov rdi, rsi
    # nextln: 000441: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 00044b: 49 89 d4                        mov r12, rdx
    # nextln: 00044e: 4c 89 e6                        mov rsi, r12
    # nextln: 000451: 48 89 df                        mov rdi, rbx
    # nextln: 000454: 41 ff d0                        call r8
    # nextln: 000457: 4d 89 e1                        mov r9, r12
    # nextln: 00045a: 48 8b 4c 24 78                  mov rcx, qword ptr [rsp + 0x78]
    # nextln: 00045f: 4c 8b 44 24 68                  mov r8, qword ptr [rsp + 0x68]
    # nextln: 000464: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000469: 48 8b 7c 24 60                  mov rdi, qword ptr [rsp + 0x60]
    # nextln: 00046e: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 000473: 44 23 e8                        and r13d, eax
    # nextln: 000476: 4c 89 c0                        mov rax, r8
    # nextln: 000479: 4d 89 c8                        mov r8, r9
    # nextln: 00047c: 49 89 f1                        mov r9, rsi
    # nextln: 00047f: 48 89 fe                        mov rsi, rdi
    # nextln: 000482: 48 89 c7                        mov rdi, rax
    # nextln: 000485: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 00048f: 48 89 f3                        mov rbx, rsi
    # nextln: 000492: 4c 89 fe                        mov rsi, r15
    # nextln: 000495: 4c 89 f7                        mov rdi, r14
    # nextln: 000498: ff d0                           call rax
    # nextln: 00049a: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 00049f: 48 8b 4c 24 78                  mov rcx, qword ptr [rsp + 0x78]
    # nextln: 0004a4: 33 ff                           xor edi, edi
    # nextln: 0004a6: 85 c0                           test eax, eax
    # nextln: 0004a8: 40 0f 94 c7                     sete dil
    # nextln: 0004ac: 44 23 ef                        and r13d, edi
    # nextln: 0004af: 4c 8b 44 24 68                  mov r8, qword ptr [rsp + 0x68]
    # nextln: 0004b4: 48 89 d6                        mov rsi, rdx
    # nextln: 0004b7: 48 89 ca                        mov rdx, rcx
    # nextln: 0004ba: 4c 89 e1                        mov rcx, r12
    # nextln: 0004bd: 48 89 d8                        mov rax, rbx
    # nextln: 0004c0: 0f b7 bc 24 ac 00 00 00         movzx edi, word ptr [rsp + 0xac]
    # nextln: 0004c8: 0f bf ff                        movsx edi, di
    # nextln: 0004cb: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0004d5: 48 89 d3                        mov rbx, rdx
    # nextln: 0004d8: 4d 89 c4                        mov r12, r8
    # nextln: 0004db: 49 89 c6                        mov r14, rax
    # nextln: 0004de: 48 89 de                        mov rsi, rbx
    # nextln: 0004e1: 41 ff d1                        call r9
    # nextln: 0004e4: 44 23 e8                        and r13d, eax
    # nextln: 0004e7: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 0004ec: 48 89 d9                        mov rcx, rbx
    # nextln: 0004ef: 4c 89 f0                        mov rax, r14
    # nextln: 0004f2: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 0004f7: 0f b7 bc 24 ac 00 00 00         movzx edi, word ptr [rsp + 0xac]
    # nextln: 0004ff: 0f bf ff                        movsx edi, di
    # nextln: 000502: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 00050c: 48 89 c3                        mov rbx, rax
    # nextln: 00050f: 49 89 ce                        mov r14, rcx
    # nextln: 000512: 4c 89 e6                        mov rsi, r12
    # nextln: 000515: 41 ff d0                        call r8
    # nextln: 000518: 44 23 e8                        and r13d, eax
    # nextln: 00051b: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 000520: 48 89 da                        mov rdx, rbx
    # nextln: 000523: 4c 89 f0                        mov rax, r14
    # nextln: 000526: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 00052b: 0f b7 bc 24 aa 00 00 00         movzx edi, word ptr [rsp + 0xaa]
    # nextln: 000533: 0f bf ff                        movsx edi, di
    # nextln: 000536: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000540: 49 89 ce                        mov r14, rcx
    # nextln: 000543: 48 89 c3                        mov rbx, rax
    # nextln: 000546: 4c 89 fe                        mov rsi, r15
    # nextln: 000549: 41 ff d0                        call r8
    # nextln: 00054c: 44 23 e8                        and r13d, eax
    # nextln: 00054f: 48 8b 74 24 60                  mov rsi, qword ptr [rsp + 0x60]
    # nextln: 000554: 48 89 d8                        mov rax, rbx
    # nextln: 000557: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 00055c: 4c 89 f2                        mov rdx, r14
    # nextln: 00055f: 0f b7 bc 24 aa 00 00 00         movzx edi, word ptr [rsp + 0xaa]
    # nextln: 000567: 0f bf ff                        movsx edi, di
    # nextln: 00056a: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000574: 48 89 d3                        mov rbx, rdx
    # nextln: 000577: 49 89 c6                        mov r14, rax
    # nextln: 00057a: 4c 89 e6                        mov rsi, r12
    # nextln: 00057d: 41 ff d0                        call r8
    # nextln: 000580: 33 c9                           xor ecx, ecx
    # nextln: 000582: 85 c0                           test eax, eax
    # nextln: 000584: 0f 94 c1                        sete cl
    # nextln: 000587: 44 23 e9                        and r13d, ecx
    # nextln: 00058a: 48 89 d8                        mov rax, rbx
    # nextln: 00058d: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 000592: 4c 89 f2                        mov rdx, r14
    # nextln: 000595: 4c 8b 74 24 60                  mov r14, qword ptr [rsp + 0x60]
    # nextln: 00059a: 0f b7 bc 24 aa 00 00 00         movzx edi, word ptr [rsp + 0xaa]
    # nextln: 0005a2: 0f bf ff                        movsx edi, di
    # nextln: 0005a5: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0005af: 48 89 de                        mov rsi, rbx
    # nextln: 0005b2: 41 ff d0                        call r8
    # nextln: 0005b5: 44 23 e8                        and r13d, eax
    # nextln: 0005b8: 48 89 d8                        mov rax, rbx
    # nextln: 0005bb: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 0005c0: 48 8b 5c 24 78                  mov rbx, qword ptr [rsp + 0x78]
    # nextln: 0005c5: 0f b7 94 24 a8 00 00 00         movzx edx, word ptr [rsp + 0xa8]
    # nextln: 0005cd: 0f bf fa                        movsx edi, dx
    # nextln: 0005d0: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0005da: 4c 89 fe                        mov rsi, r15
    # nextln: 0005dd: ff d2                           call rdx
    # nextln: 0005df: 33 c9                           xor ecx, ecx
    # nextln: 0005e1: 85 c0                           test eax, eax
    # nextln: 0005e3: 0f 94 c1                        sete cl
    # nextln: 0005e6: 44 23 e9                        and r13d, ecx
    # nextln: 0005e9: 48 8b 44 24 38                  mov rax, qword ptr [rsp + 0x38]
    # nextln: 0005ee: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 0005f3: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0005fd: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 000602: 48 89 de                        mov rsi, rbx
    # nextln: 000605: ff d2                           call rdx
    # nextln: 000607: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 00060c: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000611: 44 23 e8                        and r13d, eax
    # nextln: 000614: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 000619: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000623: 48 89 cb                        mov rbx, rcx
    # nextln: 000626: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 00062b: 4c 89 e6                        mov rsi, r12
    # nextln: 00062e: ff d0                           call rax
    # nextln: 000630: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000635: 44 23 e8                        and r13d, eax
    # nextln: 000638: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 00063d: 48 8b 7c 24 50                  mov rdi, qword ptr [rsp + 0x50]
    # nextln: 000642: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 00064c: 4c 89 fe                        mov rsi, r15
    # nextln: 00064f: 4c 89 f7                        mov rdi, r14
    # nextln: 000652: ff d0                           call rax
    # nextln: 000654: 44 23 e8                        and r13d, eax
    # nextln: 000657: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 00065c: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 000661: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 00066b: 4c 89 e6                        mov rsi, r12
    # nextln: 00066e: 4c 89 f7                        mov rdi, r14
    # nextln: 000671: ff d0                           call rax
    # nextln: 000673: 4c 8b 64 24 58                  mov r12, qword ptr [rsp + 0x58]
    # nextln: 000678: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 00067d: 48 89 da                        mov rdx, rbx
    # nextln: 000680: 48 8b 7c 24 50                  mov rdi, qword ptr [rsp + 0x50]
    # nextln: 000685: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 00068a: 45 33 c0                        xor r8d, r8d
    # nextln: 00068d: 85 c0                           test eax, eax
    # nextln: 00068f: 41 0f 94 c0                     sete r8b
    # nextln: 000693: 45 23 e8                        and r13d, r8d
    # nextln: 000696: 48 89 f0                        mov rax, rsi
    # nextln: 000699: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0006a3: 48 89 c3                        mov rbx, rax
    # nextln: 0006a6: 4c 89 f7                        mov rdi, r14
    # nextln: 0006a9: 41 ff d0                        call r8
    # nextln: 0006ac: 48 8b 7c 24 50                  mov rdi, qword ptr [rsp + 0x50]
    # nextln: 0006b1: 49 89 de                        mov r14, rbx
    # nextln: 0006b4: 48 8b 5c 24 48                  mov rbx, qword ptr [rsp + 0x48]
    # nextln: 0006b9: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0006be: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0006c3: 44 23 e8                        and r13d, eax
    # nextln: 0006c6: 48 89 f8                        mov rax, rdi
    # nextln: 0006c9: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0006d3: 4c 89 fe                        mov rsi, r15
    # nextln: 0006d6: 4c 89 e7                        mov rdi, r12
    # nextln: 0006d9: 41 ff d0                        call r8
    # nextln: 0006dc: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 0006e1: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0006e6: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0006eb: 33 ff                           xor edi, edi
    # nextln: 0006ed: 85 c0                           test eax, eax
    # nextln: 0006ef: 40 0f 94 c7                     sete dil
    # nextln: 0006f3: 44 23 ef                        and r13d, edi
    # nextln: 0006f6: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0006fd: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000707: 4c 89 fe                        mov rsi, r15
    # nextln: 00070a: ff d0                           call rax
    # nextln: 00070c: 44 23 e8                        and r13d, eax
    # nextln: 00070f: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 000716: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000720: 4c 89 f6                        mov rsi, r14
    # nextln: 000723: ff d0                           call rax
    # nextln: 000725: 44 23 e8                        and r13d, eax
    # nextln: 000728: 8b bc 24 a0 00 00 00            mov edi, dword ptr [rsp + 0xa0]
    # nextln: 00072f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000739: 4c 89 fe                        mov rsi, r15
    # nextln: 00073c: ff d0                           call rax
    # nextln: 00073e: 33 c9                           xor ecx, ecx
    # nextln: 000740: 85 c0                           test eax, eax
    # nextln: 000742: 0f 94 c1                        sete cl
    # nextln: 000745: 44 23 e9                        and r13d, ecx
    # nextln: 000748: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 00074f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000759: 4c 89 fe                        mov rsi, r15
    # nextln: 00075c: ff d0                           call rax
    # nextln: 00075e: 33 c9                           xor ecx, ecx
    # nextln: 000760: 85 c0                           test eax, eax
    # nextln: 000762: 0f 94 c1                        sete cl
    # nextln: 000765: 44 23 e9                        and r13d, ecx
    # nextln: 000768: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 00076f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000779: 4c 89 f6                        mov rsi, r14
    # nextln: 00077c: ff d0                           call rax
    # nextln: 00077e: 33 c9                           xor ecx, ecx
    # nextln: 000780: 85 c0                           test eax, eax
    # nextln: 000782: 0f 94 c1                        sete cl
    # nextln: 000785: 44 23 e9                        and r13d, ecx
    # nextln: 000788: 8b bc 24 a0 00 00 00            mov edi, dword ptr [rsp + 0xa0]
    # nextln: 00078f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000799: 4c 89 fe                        mov rsi, r15
    # nextln: 00079c: ff d0                           call rax
    # nextln: 00079e: 44 23 e8                        and r13d, eax
    # nextln: 0007a1: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0007a8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0007b2: 4c 89 fe                        mov rsi, r15
    # nextln: 0007b5: ff d0                           call rax
    # nextln: 0007b7: 33 c9                           xor ecx, ecx
    # nextln: 0007b9: 85 c0                           test eax, eax
    # nextln: 0007bb: 0f 94 c1                        sete cl
    # nextln: 0007be: 44 23 e9                        and r13d, ecx
    # nextln: 0007c1: 8b bc 24 a4 00 00 00            mov edi, dword ptr [rsp + 0xa4]
    # nextln: 0007c8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0007d2: 4c 89 f6                        mov rsi, r14
    # nextln: 0007d5: ff d0                           call rax
    # nextln: 0007d7: 33 c9                           xor ecx, ecx
    # nextln: 0007d9: 85 c0                           test eax, eax
    # nextln: 0007db: 0f 94 c1                        sete cl
    # nextln: 0007de: 44 23 e9                        and r13d, ecx
    # nextln: 0007e1: 8b bc 24 a0 00 00 00            mov edi, dword ptr [rsp + 0xa0]
    # nextln: 0007e8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0007f2: 4c 89 fe                        mov rsi, r15
    # nextln: 0007f5: ff d0                           call rax
    # nextln: 0007f7: 33 c9                           xor ecx, ecx
    # nextln: 0007f9: 41 3b c4                        cmp eax, r12d
    # nextln: 0007fc: 0f 94 c1                        sete cl
    # nextln: 0007ff: 44 23 e9                        and r13d, ecx
    # nextln: 000802: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 00080c: 48 89 df                        mov rdi, rbx
    # nextln: 00080f: 4c 89 fe                        mov rsi, r15
    # nextln: 000812: ff d0                           call rax
    # nextln: 000814: 44 23 e8                        and r13d, eax
    # nextln: 000817: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 000821: 4c 89 f6                        mov rsi, r14
    # nextln: 000824: 48 89 df                        mov rdi, rbx
    # nextln: 000827: ff d0                           call rax
    # nextln: 000829: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 00082e: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000833: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000838: 48 8b 5c 24 28                  mov rbx, qword ptr [rsp + 0x28]
    # nextln: 00083d: 44 23 e8                        and r13d, eax
    # nextln: 000840: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 00084a: 49 89 d4                        mov r12, rdx
    # nextln: 00084d: 4c 89 fe                        mov rsi, r15
    # nextln: 000850: ff d0                           call rax
    # nextln: 000852: 33 c9                           xor ecx, ecx
    # nextln: 000854: 85 c0                           test eax, eax
    # nextln: 000856: 0f 94 c1                        sete cl
    # nextln: 000859: 44 23 e9                        and r13d, ecx
    # nextln: 00085c: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000861: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 00086b: 4c 89 fe                        mov rsi, r15
    # nextln: 00086e: ff d0                           call rax
    # nextln: 000870: 44 23 e8                        and r13d, eax
    # nextln: 000873: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000878: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 000882: 4c 89 f6                        mov rsi, r14
    # nextln: 000885: ff d0                           call rax
    # nextln: 000887: 33 c9                           xor ecx, ecx
    # nextln: 000889: 85 c0                           test eax, eax
    # nextln: 00088b: 0f 94 c1                        sete cl
    # nextln: 00088e: 44 23 e9                        and r13d, ecx
    # nextln: 000891: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000896: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0008a0: 4c 89 e6                        mov rsi, r12
    # nextln: 0008a3: ff d0                           call rax
    # nextln: 0008a5: 44 23 e8                        and r13d, eax
    # nextln: 0008a8: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 0008ac: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0008b6: 4c 89 fe                        mov rsi, r15
    # nextln: 0008b9: ff d0                           call rax
    # nextln: 0008bb: 33 c9                           xor ecx, ecx
    # nextln: 0008bd: 85 c0                           test eax, eax
    # nextln: 0008bf: 0f 94 c1                        sete cl
    # nextln: 0008c2: 44 23 e9                        and r13d, ecx
    # nextln: 0008c5: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0008cf: 4c 89 fe                        mov rsi, r15
    # nextln: 0008d2: 48 89 df                        mov rdi, rbx
    # nextln: 0008d5: ff d0                           call rax
    # nextln: 0008d7: 44 23 e8                        and r13d, eax
    # nextln: 0008da: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0008e4: 48 89 df                        mov rdi, rbx
    # nextln: 0008e7: 4c 89 f6                        mov rsi, r14
    # nextln: 0008ea: ff d0                           call rax
    # nextln: 0008ec: 4c 8b 74 24 20                  mov r14, qword ptr [rsp + 0x20]
    # nextln: 0008f1: 4c 89 e6                        mov rsi, r12
    # nextln: 0008f4: 49 89 c4                        mov r12, rax
    # nextln: 0008f7: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0008fc: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000906: 48 89 df                        mov rdi, rbx
    # nextln: 000909: ff d1                           call rcx
    # nextln: 00090b: 48 8b 5c 24 18                  mov rbx, qword ptr [rsp + 0x18]
    # nextln: 000910: 33 c9                           xor ecx, ecx
    # nextln: 000912: 45 85 e4                        test r12d, r12d
    # nextln: 000915: 0f 94 c1                        sete cl
    # nextln: 000918: 44 23 e9                        and r13d, ecx
    # nextln: 00091b: 44 23 e8                        and r13d, eax
    # nextln: 00091e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000928: 4c 89 fe                        mov rsi, r15
    # nextln: 00092b: 4c 89 f7                        mov rdi, r14
    # nextln: 00092e: ff d0                           call rax
    # nextln: 000930: 33 c9                           xor ecx, ecx
    # nextln: 000932: 85 c0                           test eax, eax
    # nextln: 000934: 0f 94 c1                        sete cl
    # nextln: 000937: 44 23 e9                        and r13d, ecx
    # nextln: 00093a: 45 85 ed                        test r13d, r13d
    # nextln: 00093d: 0f 84 15 00 00 00               je 0x958
    # nextln: 000943: 48 89 d8                        mov rax, rbx
    # nextln: 000946: 48 81 c4 c8 00 00 00            add rsp, 0xc8
    # nextln: 00094d: 5b                              pop rbx
    # nextln: 00094e: 41 5c                           pop r12
    # nextln: 000950: 41 5d                           pop r13
    # nextln: 000952: 41 5e                           pop r14
    # nextln: 000954: 41 5f                           pop r15
    # nextln: 000956: 5d                              pop rbp
    # nextln: 000957: c3                              ret
    # nextln: 000958: 4c 89 f8                        mov rax, r15
    # nextln: 00095b: 48 81 c4 c8 00 00 00            add rsp, 0xc8
    # nextln: 000962: 5b                              pop rbx
    # nextln: 000963: 41 5c                           pop r12
    # nextln: 000965: 41 5d                           pop r13
    # nextln: 000967: 41 5e                           pop r14
    # nextln: 000969: 41 5f                           pop r15
    # nextln: 00096b: 5d                              pop rbp
    # nextln: 00096c: c3                              ret

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i32 = iconst 1
    %5:i64 = iext %4
    %6:i64 = sfill 32 %5
    %7:i32 = iconst 3
    %8:ptr = stackslot 8:8
    %9:i32 = iconst 64
    %10:ptr = stackslot 8:8
    %11:i32 = iconst 32
    %12:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %14:ptr = stackslot 2:2
    %15:ptr = stackslot 2:2
    %16:i32 = iconst 16
    %17:ptr = stackslot 2:2
    %18:i32 = iconst 15
    %19:ptr = stackslot 1:1
    %20:ptr = stackslot 1:1
    %21:i32 = iconst 8
    %22:ptr = stackslot 1:1
    %23:ctrl = store.1 %1, %3, %22
    %24:ctrl = store.1 %23, %3, %20
    %25:ctrl = store.1 %24, %3, %19
    %26:ctrl = store.2 %25, %3, %17
    %27:ctrl = store.2 %26, %3, %15
    %28:ctrl = store.2 %27, %3, %14
    %29:ctrl = store.4 %28, %3, %13
    %30:ctrl = store.4 %29, %3, %12
    %31:i32 = iconst 7
    %32:i32 = iconst 2
    %33:i64 = iext %32
    %34:i64 = sfill 32 %33
    %35:i32 = iconst 4294934528
    %36:i32 = iconst 4294967168
    %37:i64 = iconst 0
    %38:ctrl = store.8 %30, %37, %10
    %39:ctrl = store.8 %38, %37, %8
    %40:ctrl, %41:phisel = region %39
    %42:ctrl = store.1 %40, %36, %22
    %43:ctrl = store.1 %42, %4, %20
    %44:ctrl = store.1 %43, %32, %19
    %45:ctrl = store.2 %44, %35, %17
    %46:ctrl = store.2 %45, %4, %15
    %47:ctrl = store.2 %46, %32, %14
    %48:ctrl = store.4 %47, %4, %13
    %49:ctrl = store.4 %48, %32, %12
    %50:ctrl = store.8 %49, %6, %10
    %51:ctrl = store.8 %50, %34, %8
    %52:ctrl, %53:i32 = load.1 %51, %22
    %54:i32 = sfill 8 %53
    %55:ctrl, %56:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %52, %54, %31
    %57:ctrl, %58:i32 = load.1 %55, %22
    %59:i32 = sfill 8 %58
    %60:ctrl, %61:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %57, %59, %21
    %62:ctrl, %63:i32 = load.1 %60, %20
    %64:i32 = sfill 8 %63
    %65:ctrl, %66:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %62, %64, %3
    %67:ctrl, %68:i32 = load.1 %65, %20
    %69:i32 = sfill 8 %68
    %70:ctrl, %71:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %67, %69, %21
    %72:ctrl, %73:i32 = load.1 %70, %20
    %74:i32 = sfill 8 %73
    %75:ctrl, %76:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %72, %74, %11
    %77:ctrl, %78:i32 = load.1 %75, %19
    %79:i32 = sfill 8 %78
    %80:ctrl, %81:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %77, %79, %3
    %82:ctrl, %83:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %80, %22, %31
    %84:ctrl, %85:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %82, %22, %21
    %86:ctrl, %87:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %84, %20, %3
    %88:ctrl, %89:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %86, %20, %21
    %90:ctrl, %91:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %88, %20, %11
    %92:ctrl, %93:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %90, %19, %3
    %94:ctrl, %95:i32 = load.2 %92, %17
    %96:i32 = sfill 16 %95
    %97:ctrl, %98:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %94, %96, %18
    %99:ctrl, %100:i32 = load.2 %97, %17
    %101:i32 = sfill 16 %100
    %102:ctrl, %103:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %99, %101, %16
    %104:ctrl, %105:i32 = load.2 %102, %15
    %106:i32 = sfill 16 %105
    %107:ctrl, %108:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %104, %106, %3
    %109:ctrl, %110:i32 = load.2 %107, %15
    %111:i32 = sfill 16 %110
    %112:ctrl, %113:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %109, %111, %16
    %114:ctrl, %115:i32 = load.2 %112, %15
    %116:i32 = sfill 16 %115
    %117:ctrl, %118:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %114, %116, %11
    %119:ctrl, %120:i32 = load.2 %117, %14
    %121:i32 = sfill 16 %120
    %122:ctrl, %123:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %119, %121, %3
    %124:ctrl, %125:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %122, %17, %18
    %126:ctrl, %127:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %124, %17, %16
    %128:ctrl, %129:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %126, %15, %3
    %130:ctrl, %131:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %128, %15, %16
    %132:ctrl, %133:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %130, %15, %11
    %134:ctrl, %135:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %132, %14, %3
    %136:ctrl, %137:i32 = load.4 %134, %13
    %138:ctrl, %139:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %136, %137, %3
    %140:ctrl, %141:i32 = load.4 %138, %13
    %142:ctrl, %143:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %140, %141, %11
    %144:ctrl, %145:i32 = load.4 %142, %12
    %146:ctrl, %147:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %144, %145, %3
    %148:ctrl, %149:i32 = load.4 %146, %13
    %150:ctrl, %151:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %148, %149, %3
    %152:ctrl, %153:i32 = load.4 %150, %13
    %154:ctrl, %155:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %152, %153, %11
    %156:ctrl, %157:i32 = load.4 %154, %12
    %158:ctrl, %159:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %156, %157, %3
    %160:ctrl, %161:i32 = load.4 %158, %13
    %162:ctrl, %163:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %160, %161, %3
    %164:ctrl, %165:i32 = load.4 %162, %13
    %166:ctrl, %167:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %164, %165, %11
    %168:ctrl, %169:i32 = load.4 %166, %12
    %170:ctrl, %171:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %168, %169, %3
    %172:ctrl, %173:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %170, %13, %3
    %174:ctrl, %175:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %172, %13, %11
    %176:ctrl, %177:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %174, %12, %3
    %178:ctrl, %179:i64 = load.8 %176, %10
    %180:ctrl, %181:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %178, %179, %3
    %182:ctrl, %183:i64 = load.8 %180, %10
    %184:ctrl, %185:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %182, %183, %11
    %186:ctrl, %187:i64 = load.8 %184, %10
    %188:ctrl, %189:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %186, %187, %9
    %190:ctrl, %191:i64 = load.8 %188, %8
    %192:ctrl, %193:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %190, %191, %3
    %194:ctrl, %195:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %192, %10, %3
    %196:ctrl, %197:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %194, %10, %11
    %198:ctrl, %199:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %196, %10, %9
    %200:ctrl, %201:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %198, %8, %3
    %202:i32 = icmp eq %201, %3
    %203:i32 = icmp eq %197, %3
    %204:i32 = icmp eq %193, %3
    %205:i32 = icmp eq %185, %3
    %206:i32 = icmp eq %177, %3
    %207:i32 = icmp eq %171, %7
    %208:i32 = icmp eq %167, %3
    %209:i32 = icmp eq %163, %3
    %210:i32 = icmp eq %155, %3
    %211:i32 = icmp eq %151, %3
    %212:i32 = icmp eq %147, %3
    %213:i32 = icmp eq %135, %3
    %214:i32 = icmp eq %131, %3
    %215:i32 = icmp eq %123, %3
    %216:i32 = icmp eq %113, %3
    %217:i32 = icmp eq %93, %3
    %218:i32 = icmp eq %89, %3
    %219:i32 = icmp eq %81, %3
    %220:i32 = icmp eq %71, %3
    %221:i32 = and %4, %56
    %222:i32 = and %221, %61
    %223:i32 = and %222, %66
    %224:i32 = and %223, %220
    %225:i32 = and %224, %76
    %226:i32 = and %225, %219
    %227:i32 = and %226, %83
    %228:i32 = and %227, %85
    %229:i32 = and %228, %87
    %230:i32 = and %229, %218
    %231:i32 = and %230, %91
    %232:i32 = and %231, %217
    %233:i32 = and %232, %98
    %234:i32 = and %233, %103
    %235:i32 = and %234, %108
    %236:i32 = and %235, %216
    %237:i32 = and %236, %118
    %238:i32 = and %237, %215
    %239:i32 = and %238, %125
    %240:i32 = and %239, %127
    %241:i32 = and %240, %129
    %242:i32 = and %241, %214
    %243:i32 = and %242, %133
    %244:i32 = and %243, %213
    %245:i32 = and %244, %139
    %246:i32 = and %245, %143
    %247:i32 = and %246, %212
    %248:i32 = and %247, %211
    %249:i32 = and %248, %210
    %250:i32 = and %249, %159
    %251:i32 = and %250, %209
    %252:i32 = and %251, %208
    %253:i32 = and %252, %207
    %254:i32 = and %253, %173
    %255:i32 = and %254, %175
    %256:i32 = and %255, %206
    %257:i32 = and %256, %181
    %258:i32 = and %257, %205
    %259:i32 = and %258, %189
    %260:i32 = and %259, %204
    %261:i32 = and %260, %195
    %262:i32 = and %261, %203
    %263:i32 = and %262, %199
    %264:i32 = and %263, %202
    %265:ctrl, %266:ctrl = brcond %200, %264
    %267:ctrl, %268:phisel = region %265
    return %267, %4
    %269:ctrl, %270:phisel = region %266
    return %269, %3
}
