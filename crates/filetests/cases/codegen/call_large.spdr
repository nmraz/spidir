# run: codegen[large-abs]

extfunc @extfunc(ptr, i32)
extfunc @extfunc2:i32(ptr, i32)

func @infunc(ptr, i32) {
    # check: function `infunc`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl, %1:ptr, %2:i32 = entry
    return %0
}

func @infunc2:i32(ptr, i32) {
    # check: function `infunc2`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 89 f0                           mov eax, esi
    # nextln: 000006: 5d                              pop rbp
    # nextln: 000007: c3                              ret

    %0:ctrl, %1:ptr, %2:i32 = entry
    return %0, %2
}

func @no_params() {
    # check: function `no_params`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl = entry
    return %0
}

func @single_stack_arg(i64, i64, i64, i64, i64, i64, i64) {
    # check: function `single_stack_arg`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl, %1:i64, %2:i64, %3:i64, %4:i64, %5:i64, %6:i64, %7:i64 = entry
    return %0
}

func @many_params(i32, i64, ptr, i64, i32, i32, i64, ptr, i32, i64) {
    # check: function `many_params`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 5d                              pop rbp
    # nextln: 000005: c3                              ret

    %0:ctrl, %1:i32, %2:i64, %3:ptr, %4:i64, %5:i32, %6:i32, %7:i64, %8:ptr, %9:i32, %10:i64 = entry
    return %0
}

func @caller:i32(ptr, i32) {
    # check: function `caller`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 55                           push r13
    # nextln: 000006: 41 54                           push r12
    # nextln: 000008: 53                              push rbx
    # nextln: 000009: 50                              push rax
    # nextln: 00000a: 41 89 f4                        mov r12d, esi
    # nextln: 00000d: 48 89 fb                        mov rbx, rdi
    # nextln: 000010: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @extfunc + 0
    # nextln: 00001a: ff d0                           call rax
    # nextln: 00001c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @extfunc2 + 0
    # nextln: 000026: 44 89 e6                        mov esi, r12d
    # nextln: 000029: 48 89 df                        mov rdi, rbx
    # nextln: 00002c: ff d0                           call rax
    # nextln: 00002e: 41 89 c5                        mov r13d, eax
    # nextln: 000031: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @infunc + 0
    # nextln: 00003b: 44 89 e6                        mov esi, r12d
    # nextln: 00003e: 48 89 df                        mov rdi, rbx
    # nextln: 000041: ff d0                           call rax
    # nextln: 000043: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @infunc2 + 0
    # nextln: 00004d: 44 89 e6                        mov esi, r12d
    # nextln: 000050: 48 89 df                        mov rdi, rbx
    # nextln: 000053: ff d0                           call rax
    # nextln: 000055: 44 03 e8                        add r13d, eax
    # nextln: 000058: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @no_params + 0
    # nextln: 000062: ff d0                           call rax
    # nextln: 000064: 44 89 e8                        mov eax, r13d
    # nextln: 000067: 48 83 c4 08                     add rsp, 8
    # nextln: 00006b: 5b                              pop rbx
    # nextln: 00006c: 41 5c                           pop r12
    # nextln: 00006e: 41 5d                           pop r13
    # nextln: 000070: 5d                              pop rbp
    # nextln: 000071: c3                              ret

    %3:ctrl, %1:ptr, %2:i32 = entry
    %5:ctrl = call @extfunc %3, %1, %2
    %6:ctrl, %7:i32 = call @extfunc2 %5, %1, %2
    %8:ctrl = call @infunc %6, %1, %2
    %9:ctrl, %10:i32 = call @infunc2 %8, %1, %2
    %11:i32 = iadd %7, %10
    %12:ctrl = call @no_params %9
    return %12, %11
}

# When calling functions with an odd number of stack arguments, the stack should
# stay aligned to 16 bytes.

func @call_single_stack_arg() {
    # check: function `call_single_stack_arg`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: b9 07 00 00 00                  mov ecx, 7
    # nextln: 000009: 50                              push rax
    # nextln: 00000a: 51                              push rcx
    # nextln: 00000b: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @single_stack_arg + 0
    # nextln: 000015: 49 89 c9                        mov r9, rcx
    # nextln: 000018: 49 89 c8                        mov r8, rcx
    # nextln: 00001b: 48 89 ca                        mov rdx, rcx
    # nextln: 00001e: 48 89 ce                        mov rsi, rcx
    # nextln: 000021: 48 89 cf                        mov rdi, rcx
    # nextln: 000024: ff d0                           call rax
    # nextln: 000026: 48 83 c4 10                     add rsp, 0x10
    # nextln: 00002a: 5d                              pop rbp
    # nextln: 00002b: c3                              ret

    %0:ctrl = entry
    %x:i64 = iconst 7
    %1:ctrl = call @single_stack_arg %0, %x, %x, %x, %x, %x, %x, %x
    return %1
}

func @call_many_params(ptr) {
    # check: function `call_many_params`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 fa                        mov rdx, rdi
    # nextln: 000007: 33 ff                           xor edi, edi
    # nextln: 000009: 33 c9                           xor ecx, ecx
    # nextln: 00000b: 51                              push rcx
    # nextln: 00000c: 57                              push rdi
    # nextln: 00000d: 52                              push rdx
    # nextln: 00000e: 51                              push rcx
    # nextln: 00000f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @many_params + 0
    # nextln: 000019: 48 89 ce                        mov rsi, rcx
    # nextln: 00001c: 41 89 f9                        mov r9d, edi
    # nextln: 00001f: 41 89 f8                        mov r8d, edi
    # nextln: 000022: ff d0                           call rax
    # nextln: 000024: 48 83 c4 20                     add rsp, 0x20
    # nextln: 000028: 5d                              pop rbp
    # nextln: 000029: c3                              ret

    %0:ctrl, %p:ptr = entry
    %zero32:i32 = iconst 0
    %zero64:i64 = iconst 0
    %1:ctrl = call @many_params %0, %zero32, %zero64, %p, %zero64, %zero32, %zero32, %zero64, %p, %zero32, %zero64
    return %1
}
