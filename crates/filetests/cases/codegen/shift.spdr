# run: codegen

func @shl_i32_i32:i32(i32, i32) {
    # check: function `shl_i32_i32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shl eax, cl
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:i32 = shl %1, %2
    return %0, %3
}

func @shl_i64_i64:i64(i64, i64) {
    # check: function `shl_i64_i64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shl rax, cl
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i64, %2:i64 = entry
    %3:i64 = shl %1, %2
    return %0, %3
}

func @shl_i32_i64:i32(i32, i64) {
    # check: function `shl_i32_i64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shl eax, cl
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:i32 = shl %1, %2
    return %0, %3
}

func @shl_i64_i32:i64(i64, i32) {
    # check: function `shl_i64_i32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shl rax, cl
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i64, %2:i32 = entry
    %3:i64 = shl %1, %2
    return %0, %3
}

func @lshr_i32_i32:i32(i32, i32) {
    # check: function `lshr_i32_i32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shr eax, cl
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:i32 = lshr %1, %2
    return %0, %3
}

func @lshr_i64_i64:i64(i64, i64) {
    # check: function `lshr_i64_i64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shr rax, cl
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i64, %2:i64 = entry
    %3:i64 = lshr %1, %2
    return %0, %3
}

func @lshr_i32_i64:i32(i32, i64) {
    # check: function `lshr_i32_i64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shr eax, cl
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:i32 = lshr %1, %2
    return %0, %3
}

func @lshr_i64_i32:i64(i64, i32) {
    # check: function `lshr_i64_i32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: shr rax, cl
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i64, %2:i32 = entry
    %3:i64 = lshr %1, %2
    return %0, %3
}

func @ashr_i32_i32:i32(i32, i32) {
    # check: function `ashr_i32_i32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: sar eax, cl
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %0:ctrl, %1:i32, %2:i32 = entry
    %3:i32 = ashr %1, %2
    return %0, %3
}

func @ashr_i64_i64:i64(i64, i64) {
    # check: function `ashr_i64_i64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: sar rax, cl
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i64, %2:i64 = entry
    %3:i64 = ashr %1, %2
    return %0, %3
}

func @ashr_i32_i64:i32(i32, i64) {
    # check: function `ashr_i32_i64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: sar eax, cl
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %0:ctrl, %1:i32, %2:i64 = entry
    %3:i32 = ashr %1, %2
    return %0, %3
}

func @ashr_i64_i32:i64(i64, i32) {
    # check: function `ashr_i64_i32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: mov rcx, rsi
    # nextln: 0x0007: mov rax, rdi
    # nextln: 0x000a: sar rax, cl
    # nextln: 0x000d: pop rbp
    # nextln: 0x000e: ret

    %0:ctrl, %1:i64, %2:i32 = entry
    %3:i64 = ashr %1, %2
    return %0, %3
}
