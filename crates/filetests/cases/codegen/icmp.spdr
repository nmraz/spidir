# run: codegen

func @icmp_eq64_64:i64(i64, i64) {
    # check: function `icmp_eq64_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp rdi, rsi
    # nextln: 0x0009: sete al
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_eq64_32:i32(i64, i64) {
    # check: function `icmp_eq64_32`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp rdi, rsi
    # nextln: 0x0009: sete al
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i32 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_eq32_64:i64(i32, i32) {
    # check: function `icmp_eq32_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp edi, esi
    # nextln: 0x0008: sete al
    # nextln: 0x000b: pop rbp
    # nextln: 0x000c: ret

    %c:ctrl, %a:i32, %b:i32 = entry
    %icmp:i64 = icmp eq %a, %b
    return %c, %icmp
}

func @icmp_ne64_64:i64(i64, i64) {
    # check: function `icmp_ne64_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp rdi, rsi
    # nextln: 0x0009: setne al
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ne %a, %b
    return %c, %icmp
}

func @icmp_slt64_64:i64(i64, i64) {
    # check: function `icmp_slt64_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp rdi, rsi
    # nextln: 0x0009: setl al
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp slt %a, %b
    return %c, %icmp
}

func @icmp_sle64_64:i64(i64, i64) {
    # check: function `icmp_sle64_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp rdi, rsi
    # nextln: 0x0009: setle al
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp sle %a, %b
    return %c, %icmp
}

func @icmp_ult64_64:i64(i64, i64) {
    # check: function `icmp_ult64_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp rdi, rsi
    # nextln: 0x0009: setb al
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ult %a, %b
    return %c, %icmp
}

func @icmp_ule64_64:i64(i64, i64) {
    # check: function `icmp_ule64_64`:
    # nextln: 0x0000: push rbp
    # nextln: 0x0001: mov rbp, rsp
    # nextln: 0x0004: xor eax, eax
    # nextln: 0x0006: cmp rdi, rsi
    # nextln: 0x0009: setbe al
    # nextln: 0x000c: pop rbp
    # nextln: 0x000d: ret

    %c:ctrl, %a:i64, %b:i64 = entry
    %icmp:i64 = icmp ule %a, %b
    return %c, %icmp
}
