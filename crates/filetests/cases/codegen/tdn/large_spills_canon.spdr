# run: codegen

extfunc @gc_new:ptr(ptr, i64)
extfunc @"System.Boolean Tests.Bool_No_Op::simple_func_bool()":i32()
extfunc @throw_index_out_of_range_exception()
extfunc @"System.Void Tests.Bool_No_Op::.ctor()"(ptr)

func @"System.Int32 Tests.Bool_No_Op::Sub_Funclet_0()":i32() {
    # check: function `System.Int32 Tests.Bool_No_Op::Sub_Funclet_0()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 83 ec 38                     sub rsp, 0x38
    # nextln: 000011: 48 bb c0 75 00 00 10 61 00 00   movabs rbx, 0x6110000075c0
    # nextln: 00001b: 41 bc 33 00 00 00               mov r12d, 0x33
    # nextln: 000021: be 23 00 00 00                  mov esi, 0x23
    # nextln: 000026: 48 bf 00 95 00 00 10 61 00 00   movabs rdi, 0x611000009500
    # nextln: 000030: 41 bf 03 00 00 00               mov r15d, 3
    # nextln: 000036: b8 01 00 00 00                  mov eax, 1
    # nextln: 00003b: 45 33 f6                        xor r14d, r14d
    # nextln: 00003e: 33 c9                           xor ecx, ecx
    # nextln: 000040: 44 89 74 24 18                  mov dword ptr [rsp + 0x18], r14d
    # nextln: 000045: 44 89 74 24 20                  mov dword ptr [rsp + 0x20], r14d
    # nextln: 00004a: 44 89 74 24 1c                  mov dword ptr [rsp + 0x1c], r14d
    # nextln: 00004f: 44 88 74 24 24                  mov byte ptr [rsp + 0x24], r14b
    # nextln: 000054: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 000059: 48 89 4c 24 08                  mov qword ptr [rsp + 8], rcx
    # nextln: 00005e: 48 89 0c 24                     mov qword ptr [rsp], rcx
    # nextln: 000062: 44 89 74 24 18                  mov dword ptr [rsp + 0x18], r14d
    # nextln: 000067: 44 89 74 24 20                  mov dword ptr [rsp + 0x20], r14d
    # nextln: 00006c: 89 44 24 1c                     mov dword ptr [rsp + 0x1c], eax
    # nextln: 000070: 88 44 24 24                     mov byte ptr [rsp + 0x24], al
    # nextln: 000074: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 00007e: ff d0                           call rax
    # nextln: 000080: 49 89 c5                        mov r13, rax
    # nextln: 000083: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Void Tests.Bool_No_Op::.ctor()" + 0
    # nextln: 00008d: 4c 89 ef                        mov rdi, r13
    # nextln: 000090: ff d0                           call rax
    # nextln: 000092: 4c 89 6c 24 10                  mov qword ptr [rsp + 0x10], r13
    # nextln: 000097: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 0000a1: 4c 89 e6                        mov rsi, r12
    # nextln: 0000a4: 48 89 df                        mov rdi, rbx
    # nextln: 0000a7: ff d0                           call rax
    # nextln: 0000a9: 48 89 c1                        mov rcx, rax
    # nextln: 0000ac: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0000b0: 44 89 39                        mov dword ptr [rcx], r15d
    # nextln: 0000b3: 48 89 44 24 08                  mov qword ptr [rsp + 8], rax
    # nextln: 0000b8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @gc_new + 0
    # nextln: 0000c2: 4c 89 e6                        mov rsi, r12
    # nextln: 0000c5: 48 89 df                        mov rdi, rbx
    # nextln: 0000c8: ff d0                           call rax
    # nextln: 0000ca: 48 89 c1                        mov rcx, rax
    # nextln: 0000cd: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0000d1: 44 89 39                        mov dword ptr [rcx], r15d
    # nextln: 0000d4: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 0000d8: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0000dc: 48 89 c1                        mov rcx, rax
    # nextln: 0000df: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0000e3: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 0000e5: 48 85 c9                        test rcx, rcx
    # nextln: 0000e8: 0f 8e 16 42 00 00               jle 0x4304
    # nextln: 0000ee: 48 83 c0 28                     add rax, 0x28
    # nextln: 0000f2: 41 bc 01 00 00 00               mov r12d, 1
    # nextln: 0000f8: 44 88 20                        mov byte ptr [rax], r12b
    # nextln: 0000fb: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0000ff: 48 89 c1                        mov rcx, rax
    # nextln: 000102: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000106: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 000108: ba 01 00 00 00                  mov edx, 1
    # nextln: 00010d: 48 3b d1                        cmp rdx, rcx
    # nextln: 000110: 0f 8d e0 41 00 00               jge 0x42f6
    # nextln: 000116: 48 83 c0 29                     add rax, 0x29
    # nextln: 00011a: 44 88 20                        mov byte ptr [rax], r12b
    # nextln: 00011d: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000121: 48 89 c1                        mov rcx, rax
    # nextln: 000124: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000128: 8b 09                           mov ecx, dword ptr [rcx]
    # nextln: 00012a: ba 02 00 00 00                  mov edx, 2
    # nextln: 00012f: 48 3b d1                        cmp rdx, rcx
    # nextln: 000132: 0f 8d b0 41 00 00               jge 0x42e8
    # nextln: 000138: 48 83 c0 2a                     add rax, 0x2a
    # nextln: 00013c: 44 88 20                        mov byte ptr [rax], r12b
    # nextln: 00013f: 48 b8 10 04 00 00 20 60 00 00   movabs rax, 0x602000000410
    # nextln: 000149: 48 b9 f0 03 00 00 20 60 00 00   movabs rcx, 0x6020000003f0
    # nextln: 000153: 48 bb d0 03 00 00 20 60 00 00   movabs rbx, 0x6020000003d0
    # nextln: 00015d: 44 88 23                        mov byte ptr [rbx], r12b
    # nextln: 000160: 44 88 31                        mov byte ptr [rcx], r14b
    # nextln: 000163: 44 88 20                        mov byte ptr [rax], r12b
    # nextln: 000166: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00016b: 48 83 c0 20                     add rax, 0x20
    # nextln: 00016f: 44 88 20                        mov byte ptr [rax], r12b
    # nextln: 000172: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000177: 48 83 c0 21                     add rax, 0x21
    # nextln: 00017b: 44 88 30                        mov byte ptr [rax], r14b
    # nextln: 00017e: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000183: 48 83 c0 22                     add rax, 0x22
    # nextln: 000187: 44 88 20                        mov byte ptr [rax], r12b
    # nextln: 00018a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00018e: 83 c0 01                        add eax, 1
    # nextln: 000191: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000195: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000199: 83 c0 01                        add eax, 1
    # nextln: 00019c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0001a0: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0001a4: 83 c0 01                        add eax, 1
    # nextln: 0001a7: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0001ab: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0001af: 83 c0 01                        add eax, 1
    # nextln: 0001b2: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0001b6: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0001ba: 83 c0 01                        add eax, 1
    # nextln: 0001bd: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0001c1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0001c5: 83 c0 01                        add eax, 1
    # nextln: 0001c8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0001cc: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0001d0: 83 c0 01                        add eax, 1
    # nextln: 0001d3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0001d7: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0001db: 83 c0 01                        add eax, 1
    # nextln: 0001de: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0001e2: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0001e6: 83 c0 01                        add eax, 1
    # nextln: 0001e9: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0001ed: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0001f1: 83 c0 01                        add eax, 1
    # nextln: 0001f4: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0001f8: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0001fc: 83 c0 01                        add eax, 1
    # nextln: 0001ff: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000203: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000207: 83 c0 01                        add eax, 1
    # nextln: 00020a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00020e: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000212: 83 c0 01                        add eax, 1
    # nextln: 000215: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000219: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00021d: 83 c0 01                        add eax, 1
    # nextln: 000220: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000224: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000228: 83 c0 01                        add eax, 1
    # nextln: 00022b: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00022f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000233: 83 c0 01                        add eax, 1
    # nextln: 000236: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00023a: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 00023f: 85 c0                           test eax, eax
    # nextln: 000241: 0f 84 10 00 00 00               je 0x257
    # nextln: 000247: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00024b: 83 c0 01                        add eax, 1
    # nextln: 00024e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000252: e9 0b 00 00 00                  jmp 0x262
    # nextln: 000257: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00025b: 83 c0 01                        add eax, 1
    # nextln: 00025e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000262: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 000267: 85 c0                           test eax, eax
    # nextln: 000269: 0f 84 10 00 00 00               je 0x27f
    # nextln: 00026f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000273: 83 c0 01                        add eax, 1
    # nextln: 000276: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00027a: e9 0b 00 00 00                  jmp 0x28a
    # nextln: 00027f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000283: 83 c0 01                        add eax, 1
    # nextln: 000286: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00028a: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 00028f: 85 c0                           test eax, eax
    # nextln: 000291: 0f 84 10 00 00 00               je 0x2a7
    # nextln: 000297: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00029b: 83 c0 01                        add eax, 1
    # nextln: 00029e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0002a2: e9 0b 00 00 00                  jmp 0x2b2
    # nextln: 0002a7: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0002ab: 83 c0 01                        add eax, 1
    # nextln: 0002ae: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0002b2: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0002b7: 85 c0                           test eax, eax
    # nextln: 0002b9: 0f 84 10 00 00 00               je 0x2cf
    # nextln: 0002bf: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0002c3: 83 c0 01                        add eax, 1
    # nextln: 0002c6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0002ca: e9 0b 00 00 00                  jmp 0x2da
    # nextln: 0002cf: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0002d3: 83 c0 01                        add eax, 1
    # nextln: 0002d6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0002da: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0002df: 85 c0                           test eax, eax
    # nextln: 0002e1: 0f 84 10 00 00 00               je 0x2f7
    # nextln: 0002e7: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0002eb: 83 c0 01                        add eax, 1
    # nextln: 0002ee: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0002f2: e9 0b 00 00 00                  jmp 0x302
    # nextln: 0002f7: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0002fb: 83 c0 01                        add eax, 1
    # nextln: 0002fe: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000302: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 000307: 85 c0                           test eax, eax
    # nextln: 000309: 0f 84 10 00 00 00               je 0x31f
    # nextln: 00030f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000313: 83 c0 01                        add eax, 1
    # nextln: 000316: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00031a: e9 0b 00 00 00                  jmp 0x32a
    # nextln: 00031f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000323: 83 c0 01                        add eax, 1
    # nextln: 000326: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00032a: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 00032f: 85 c0                           test eax, eax
    # nextln: 000331: 0f 84 10 00 00 00               je 0x347
    # nextln: 000337: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00033b: 83 c0 01                        add eax, 1
    # nextln: 00033e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000342: e9 0b 00 00 00                  jmp 0x352
    # nextln: 000347: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00034b: 83 c0 01                        add eax, 1
    # nextln: 00034e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000352: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 000357: 85 c0                           test eax, eax
    # nextln: 000359: 0f 84 10 00 00 00               je 0x36f
    # nextln: 00035f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000363: 83 c0 01                        add eax, 1
    # nextln: 000366: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00036a: e9 0b 00 00 00                  jmp 0x37a
    # nextln: 00036f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000373: 83 c0 01                        add eax, 1
    # nextln: 000376: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00037a: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 00037d: 85 c0                           test eax, eax
    # nextln: 00037f: 0f 84 10 00 00 00               je 0x395
    # nextln: 000385: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000389: 83 c0 01                        add eax, 1
    # nextln: 00038c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000390: e9 0b 00 00 00                  jmp 0x3a0
    # nextln: 000395: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000399: 83 c0 01                        add eax, 1
    # nextln: 00039c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0003a0: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0003a3: 85 c0                           test eax, eax
    # nextln: 0003a5: 0f 84 10 00 00 00               je 0x3bb
    # nextln: 0003ab: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0003af: 83 c0 01                        add eax, 1
    # nextln: 0003b2: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0003b6: e9 0b 00 00 00                  jmp 0x3c6
    # nextln: 0003bb: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0003bf: 83 c0 01                        add eax, 1
    # nextln: 0003c2: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0003c6: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0003c9: 85 c0                           test eax, eax
    # nextln: 0003cb: 0f 84 10 00 00 00               je 0x3e1
    # nextln: 0003d1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0003d5: 83 c0 01                        add eax, 1
    # nextln: 0003d8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0003dc: e9 0b 00 00 00                  jmp 0x3ec
    # nextln: 0003e1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0003e5: 83 c0 01                        add eax, 1
    # nextln: 0003e8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0003ec: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0003ef: 85 c0                           test eax, eax
    # nextln: 0003f1: 0f 84 10 00 00 00               je 0x407
    # nextln: 0003f7: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0003fb: 83 c0 01                        add eax, 1
    # nextln: 0003fe: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000402: e9 0b 00 00 00                  jmp 0x412
    # nextln: 000407: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00040b: 83 c0 01                        add eax, 1
    # nextln: 00040e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000412: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 000415: 85 c0                           test eax, eax
    # nextln: 000417: 0f 84 10 00 00 00               je 0x42d
    # nextln: 00041d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000421: 83 c0 01                        add eax, 1
    # nextln: 000424: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000428: e9 0b 00 00 00                  jmp 0x438
    # nextln: 00042d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000431: 83 c0 01                        add eax, 1
    # nextln: 000434: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000438: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 00043b: 85 c0                           test eax, eax
    # nextln: 00043d: 0f 84 10 00 00 00               je 0x453
    # nextln: 000443: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000447: 83 c0 01                        add eax, 1
    # nextln: 00044a: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00044e: e9 0b 00 00 00                  jmp 0x45e
    # nextln: 000453: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000457: 83 c0 01                        add eax, 1
    # nextln: 00045a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00045e: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 000461: 85 c0                           test eax, eax
    # nextln: 000463: 0f 84 10 00 00 00               je 0x479
    # nextln: 000469: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00046d: 83 c0 01                        add eax, 1
    # nextln: 000470: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000474: e9 0b 00 00 00                  jmp 0x484
    # nextln: 000479: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00047d: 83 c0 01                        add eax, 1
    # nextln: 000480: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000484: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 000487: 85 c0                           test eax, eax
    # nextln: 000489: 0f 84 10 00 00 00               je 0x49f
    # nextln: 00048f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000493: 83 c0 01                        add eax, 1
    # nextln: 000496: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00049a: e9 0b 00 00 00                  jmp 0x4aa
    # nextln: 00049f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0004a3: 83 c0 01                        add eax, 1
    # nextln: 0004a6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0004aa: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0004af: 48 83 c0 20                     add rax, 0x20
    # nextln: 0004b3: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0004b6: 85 c0                           test eax, eax
    # nextln: 0004b8: 0f 84 10 00 00 00               je 0x4ce
    # nextln: 0004be: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0004c2: 83 c0 01                        add eax, 1
    # nextln: 0004c5: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0004c9: e9 0b 00 00 00                  jmp 0x4d9
    # nextln: 0004ce: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0004d2: 83 c0 01                        add eax, 1
    # nextln: 0004d5: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0004d9: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0004de: 48 83 c0 20                     add rax, 0x20
    # nextln: 0004e2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0004e5: 85 c0                           test eax, eax
    # nextln: 0004e7: 0f 84 10 00 00 00               je 0x4fd
    # nextln: 0004ed: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0004f1: 83 c0 01                        add eax, 1
    # nextln: 0004f4: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0004f8: e9 0b 00 00 00                  jmp 0x508
    # nextln: 0004fd: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000501: 83 c0 01                        add eax, 1
    # nextln: 000504: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000508: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00050d: 48 83 c0 20                     add rax, 0x20
    # nextln: 000511: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000514: 85 c0                           test eax, eax
    # nextln: 000516: 0f 84 10 00 00 00               je 0x52c
    # nextln: 00051c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000520: 83 c0 01                        add eax, 1
    # nextln: 000523: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000527: e9 0b 00 00 00                  jmp 0x537
    # nextln: 00052c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000530: 83 c0 01                        add eax, 1
    # nextln: 000533: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000537: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00053c: 48 83 c0 20                     add rax, 0x20
    # nextln: 000540: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000543: 85 c0                           test eax, eax
    # nextln: 000545: 0f 84 10 00 00 00               je 0x55b
    # nextln: 00054b: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00054f: 83 c0 01                        add eax, 1
    # nextln: 000552: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000556: e9 0b 00 00 00                  jmp 0x566
    # nextln: 00055b: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00055f: 83 c0 01                        add eax, 1
    # nextln: 000562: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000566: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00056b: 48 83 c0 20                     add rax, 0x20
    # nextln: 00056f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000572: 85 c0                           test eax, eax
    # nextln: 000574: 0f 84 10 00 00 00               je 0x58a
    # nextln: 00057a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00057e: 83 c0 01                        add eax, 1
    # nextln: 000581: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000585: e9 0b 00 00 00                  jmp 0x595
    # nextln: 00058a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00058e: 83 c0 01                        add eax, 1
    # nextln: 000591: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000595: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00059a: 48 83 c0 20                     add rax, 0x20
    # nextln: 00059e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0005a1: 85 c0                           test eax, eax
    # nextln: 0005a3: 0f 84 10 00 00 00               je 0x5b9
    # nextln: 0005a9: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0005ad: 83 c0 01                        add eax, 1
    # nextln: 0005b0: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0005b4: e9 0b 00 00 00                  jmp 0x5c4
    # nextln: 0005b9: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0005bd: 83 c0 01                        add eax, 1
    # nextln: 0005c0: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0005c4: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0005c9: 48 83 c0 20                     add rax, 0x20
    # nextln: 0005cd: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0005d0: 85 c0                           test eax, eax
    # nextln: 0005d2: 0f 84 10 00 00 00               je 0x5e8
    # nextln: 0005d8: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0005dc: 83 c0 01                        add eax, 1
    # nextln: 0005df: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0005e3: e9 0b 00 00 00                  jmp 0x5f3
    # nextln: 0005e8: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0005ec: 83 c0 01                        add eax, 1
    # nextln: 0005ef: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0005f3: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0005f8: 48 83 c0 20                     add rax, 0x20
    # nextln: 0005fc: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0005ff: 85 c0                           test eax, eax
    # nextln: 000601: 0f 84 10 00 00 00               je 0x617
    # nextln: 000607: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00060b: 83 c0 01                        add eax, 1
    # nextln: 00060e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000612: e9 0b 00 00 00                  jmp 0x622
    # nextln: 000617: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00061b: 83 c0 01                        add eax, 1
    # nextln: 00061e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000622: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00062c: ff d0                           call rax
    # nextln: 00062e: 85 c0                           test eax, eax
    # nextln: 000630: 0f 84 10 00 00 00               je 0x646
    # nextln: 000636: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00063a: 83 c0 01                        add eax, 1
    # nextln: 00063d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000641: e9 0b 00 00 00                  jmp 0x651
    # nextln: 000646: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00064a: 83 c0 01                        add eax, 1
    # nextln: 00064d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000651: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00065b: ff d0                           call rax
    # nextln: 00065d: 85 c0                           test eax, eax
    # nextln: 00065f: 0f 84 10 00 00 00               je 0x675
    # nextln: 000665: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000669: 83 c0 01                        add eax, 1
    # nextln: 00066c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000670: e9 0b 00 00 00                  jmp 0x680
    # nextln: 000675: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000679: 83 c0 01                        add eax, 1
    # nextln: 00067c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000680: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00068a: ff d0                           call rax
    # nextln: 00068c: 85 c0                           test eax, eax
    # nextln: 00068e: 0f 84 10 00 00 00               je 0x6a4
    # nextln: 000694: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000698: 83 c0 01                        add eax, 1
    # nextln: 00069b: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00069f: e9 0b 00 00 00                  jmp 0x6af
    # nextln: 0006a4: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0006a8: 83 c0 01                        add eax, 1
    # nextln: 0006ab: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0006af: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0006b9: ff d0                           call rax
    # nextln: 0006bb: 85 c0                           test eax, eax
    # nextln: 0006bd: 0f 84 10 00 00 00               je 0x6d3
    # nextln: 0006c3: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0006c7: 83 c0 01                        add eax, 1
    # nextln: 0006ca: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0006ce: e9 0b 00 00 00                  jmp 0x6de
    # nextln: 0006d3: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0006d7: 83 c0 01                        add eax, 1
    # nextln: 0006da: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0006de: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0006e8: ff d0                           call rax
    # nextln: 0006ea: 85 c0                           test eax, eax
    # nextln: 0006ec: 0f 84 10 00 00 00               je 0x702
    # nextln: 0006f2: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0006f6: 83 c0 01                        add eax, 1
    # nextln: 0006f9: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0006fd: e9 0b 00 00 00                  jmp 0x70d
    # nextln: 000702: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000706: 83 c0 01                        add eax, 1
    # nextln: 000709: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00070d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000717: ff d0                           call rax
    # nextln: 000719: 85 c0                           test eax, eax
    # nextln: 00071b: 0f 84 10 00 00 00               je 0x731
    # nextln: 000721: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000725: 83 c0 01                        add eax, 1
    # nextln: 000728: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00072c: e9 0b 00 00 00                  jmp 0x73c
    # nextln: 000731: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000735: 83 c0 01                        add eax, 1
    # nextln: 000738: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00073c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000746: ff d0                           call rax
    # nextln: 000748: 85 c0                           test eax, eax
    # nextln: 00074a: 0f 84 10 00 00 00               je 0x760
    # nextln: 000750: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000754: 83 c0 01                        add eax, 1
    # nextln: 000757: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00075b: e9 0b 00 00 00                  jmp 0x76b
    # nextln: 000760: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000764: 83 c0 01                        add eax, 1
    # nextln: 000767: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00076b: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000775: ff d0                           call rax
    # nextln: 000777: 85 c0                           test eax, eax
    # nextln: 000779: 0f 84 10 00 00 00               je 0x78f
    # nextln: 00077f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000783: 83 c0 01                        add eax, 1
    # nextln: 000786: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00078a: e9 0b 00 00 00                  jmp 0x79a
    # nextln: 00078f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000793: 83 c0 01                        add eax, 1
    # nextln: 000796: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00079a: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00079e: 48 89 c1                        mov rcx, rax
    # nextln: 0007a1: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0007a5: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0007a9: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0007ab: 48 63 ca                        movsxd rcx, edx
    # nextln: 0007ae: 48 3b cf                        cmp rcx, rdi
    # nextln: 0007b1: 0f 8d 23 3b 00 00               jge 0x42da
    # nextln: 0007b7: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0007bb: 48 03 c1                        add rax, rcx
    # nextln: 0007be: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0007c1: 85 c0                           test eax, eax
    # nextln: 0007c3: 0f 84 10 00 00 00               je 0x7d9
    # nextln: 0007c9: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0007cd: 83 c0 01                        add eax, 1
    # nextln: 0007d0: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0007d4: e9 0b 00 00 00                  jmp 0x7e4
    # nextln: 0007d9: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0007dd: 83 c0 01                        add eax, 1
    # nextln: 0007e0: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0007e4: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0007e8: 48 89 c1                        mov rcx, rax
    # nextln: 0007eb: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0007ef: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0007f3: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0007f5: 48 63 ca                        movsxd rcx, edx
    # nextln: 0007f8: 48 3b cf                        cmp rcx, rdi
    # nextln: 0007fb: 0f 8d cb 3a 00 00               jge 0x42cc
    # nextln: 000801: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000805: 48 03 c1                        add rax, rcx
    # nextln: 000808: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00080b: 85 c0                           test eax, eax
    # nextln: 00080d: 0f 84 10 00 00 00               je 0x823
    # nextln: 000813: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000817: 83 c0 01                        add eax, 1
    # nextln: 00081a: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00081e: e9 0b 00 00 00                  jmp 0x82e
    # nextln: 000823: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000827: 83 c0 01                        add eax, 1
    # nextln: 00082a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00082e: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000832: 48 89 c1                        mov rcx, rax
    # nextln: 000835: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000839: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 00083d: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 00083f: 48 63 cf                        movsxd rcx, edi
    # nextln: 000842: 48 3b ca                        cmp rcx, rdx
    # nextln: 000845: 0f 8d 73 3a 00 00               jge 0x42be
    # nextln: 00084b: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00084f: 48 03 c1                        add rax, rcx
    # nextln: 000852: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000855: 85 c0                           test eax, eax
    # nextln: 000857: 0f 84 10 00 00 00               je 0x86d
    # nextln: 00085d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000861: 83 c0 01                        add eax, 1
    # nextln: 000864: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000868: e9 0b 00 00 00                  jmp 0x878
    # nextln: 00086d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000871: 83 c0 01                        add eax, 1
    # nextln: 000874: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000878: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00087c: 48 89 c1                        mov rcx, rax
    # nextln: 00087f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000883: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000887: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000889: 48 63 cf                        movsxd rcx, edi
    # nextln: 00088c: 48 3b ca                        cmp rcx, rdx
    # nextln: 00088f: 0f 8d 1b 3a 00 00               jge 0x42b0
    # nextln: 000895: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000899: 48 03 c1                        add rax, rcx
    # nextln: 00089c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00089f: 85 c0                           test eax, eax
    # nextln: 0008a1: 0f 84 10 00 00 00               je 0x8b7
    # nextln: 0008a7: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0008ab: 83 c0 01                        add eax, 1
    # nextln: 0008ae: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0008b2: e9 0b 00 00 00                  jmp 0x8c2
    # nextln: 0008b7: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0008bb: 83 c0 01                        add eax, 1
    # nextln: 0008be: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0008c2: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0008c6: 48 89 c1                        mov rcx, rax
    # nextln: 0008c9: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0008cd: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0008d1: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0008d3: 48 63 ca                        movsxd rcx, edx
    # nextln: 0008d6: 48 3b cf                        cmp rcx, rdi
    # nextln: 0008d9: 0f 8d c3 39 00 00               jge 0x42a2
    # nextln: 0008df: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0008e3: 48 03 c1                        add rax, rcx
    # nextln: 0008e6: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0008e9: 85 c0                           test eax, eax
    # nextln: 0008eb: 0f 84 10 00 00 00               je 0x901
    # nextln: 0008f1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0008f5: 83 c0 01                        add eax, 1
    # nextln: 0008f8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0008fc: e9 0b 00 00 00                  jmp 0x90c
    # nextln: 000901: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000905: 83 c0 01                        add eax, 1
    # nextln: 000908: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00090c: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000910: 48 89 c1                        mov rcx, rax
    # nextln: 000913: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000917: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 00091b: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 00091d: 48 63 cf                        movsxd rcx, edi
    # nextln: 000920: 48 3b ca                        cmp rcx, rdx
    # nextln: 000923: 0f 8d 6b 39 00 00               jge 0x4294
    # nextln: 000929: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00092d: 48 03 c1                        add rax, rcx
    # nextln: 000930: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000933: 85 c0                           test eax, eax
    # nextln: 000935: 0f 84 10 00 00 00               je 0x94b
    # nextln: 00093b: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00093f: 83 c0 01                        add eax, 1
    # nextln: 000942: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000946: e9 0b 00 00 00                  jmp 0x956
    # nextln: 00094b: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00094f: 83 c0 01                        add eax, 1
    # nextln: 000952: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000956: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00095a: 48 89 c1                        mov rcx, rax
    # nextln: 00095d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000961: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000965: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000967: 48 63 cf                        movsxd rcx, edi
    # nextln: 00096a: 48 3b ca                        cmp rcx, rdx
    # nextln: 00096d: 0f 8d 13 39 00 00               jge 0x4286
    # nextln: 000973: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000977: 48 03 c1                        add rax, rcx
    # nextln: 00097a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00097d: 85 c0                           test eax, eax
    # nextln: 00097f: 0f 84 10 00 00 00               je 0x995
    # nextln: 000985: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000989: 83 c0 01                        add eax, 1
    # nextln: 00098c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000990: e9 0b 00 00 00                  jmp 0x9a0
    # nextln: 000995: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000999: 83 c0 01                        add eax, 1
    # nextln: 00099c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0009a0: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0009a4: 48 89 c1                        mov rcx, rax
    # nextln: 0009a7: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0009ab: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0009af: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0009b1: 48 63 ca                        movsxd rcx, edx
    # nextln: 0009b4: 48 3b cf                        cmp rcx, rdi
    # nextln: 0009b7: 0f 8d bb 38 00 00               jge 0x4278
    # nextln: 0009bd: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0009c1: 48 03 c1                        add rax, rcx
    # nextln: 0009c4: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0009c7: 85 c0                           test eax, eax
    # nextln: 0009c9: 0f 84 10 00 00 00               je 0x9df
    # nextln: 0009cf: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0009d3: 83 c0 01                        add eax, 1
    # nextln: 0009d6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0009da: e9 0b 00 00 00                  jmp 0x9ea
    # nextln: 0009df: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0009e3: 83 c0 01                        add eax, 1
    # nextln: 0009e6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0009ea: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0009ef: 48 89 c1                        mov rcx, rax
    # nextln: 0009f2: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0009f6: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 0009fa: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0009fc: 48 63 cf                        movsxd rcx, edi
    # nextln: 0009ff: 48 3b ca                        cmp rcx, rdx
    # nextln: 000a02: 0f 8d 62 38 00 00               jge 0x426a
    # nextln: 000a08: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000a0c: 48 03 c1                        add rax, rcx
    # nextln: 000a0f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000a12: 85 c0                           test eax, eax
    # nextln: 000a14: 0f 84 10 00 00 00               je 0xa2a
    # nextln: 000a1a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000a1e: 83 c0 01                        add eax, 1
    # nextln: 000a21: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000a25: e9 0b 00 00 00                  jmp 0xa35
    # nextln: 000a2a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000a2e: 83 c0 01                        add eax, 1
    # nextln: 000a31: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000a35: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000a3a: 48 89 c1                        mov rcx, rax
    # nextln: 000a3d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000a41: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 000a45: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000a47: 48 63 ca                        movsxd rcx, edx
    # nextln: 000a4a: 48 3b cf                        cmp rcx, rdi
    # nextln: 000a4d: 0f 8d 09 38 00 00               jge 0x425c
    # nextln: 000a53: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000a57: 48 03 c1                        add rax, rcx
    # nextln: 000a5a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000a5d: 85 c0                           test eax, eax
    # nextln: 000a5f: 0f 84 10 00 00 00               je 0xa75
    # nextln: 000a65: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000a69: 83 c0 01                        add eax, 1
    # nextln: 000a6c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000a70: e9 0b 00 00 00                  jmp 0xa80
    # nextln: 000a75: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000a79: 83 c0 01                        add eax, 1
    # nextln: 000a7c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000a80: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000a85: 48 89 c1                        mov rcx, rax
    # nextln: 000a88: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000a8c: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000a90: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000a92: 48 63 cf                        movsxd rcx, edi
    # nextln: 000a95: 48 3b ca                        cmp rcx, rdx
    # nextln: 000a98: 0f 8d b0 37 00 00               jge 0x424e
    # nextln: 000a9e: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000aa2: 48 03 c1                        add rax, rcx
    # nextln: 000aa5: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000aa8: 85 c0                           test eax, eax
    # nextln: 000aaa: 0f 84 10 00 00 00               je 0xac0
    # nextln: 000ab0: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000ab4: 83 c0 01                        add eax, 1
    # nextln: 000ab7: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000abb: e9 0b 00 00 00                  jmp 0xacb
    # nextln: 000ac0: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000ac4: 83 c0 01                        add eax, 1
    # nextln: 000ac7: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000acb: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000ad0: 48 89 c1                        mov rcx, rax
    # nextln: 000ad3: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000ad7: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 000adb: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000add: 48 63 ca                        movsxd rcx, edx
    # nextln: 000ae0: 48 3b cf                        cmp rcx, rdi
    # nextln: 000ae3: 0f 8d 57 37 00 00               jge 0x4240
    # nextln: 000ae9: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000aed: 48 03 c1                        add rax, rcx
    # nextln: 000af0: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000af3: 85 c0                           test eax, eax
    # nextln: 000af5: 0f 84 10 00 00 00               je 0xb0b
    # nextln: 000afb: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000aff: 83 c0 01                        add eax, 1
    # nextln: 000b02: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000b06: e9 0b 00 00 00                  jmp 0xb16
    # nextln: 000b0b: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000b0f: 83 c0 01                        add eax, 1
    # nextln: 000b12: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000b16: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000b1b: 48 89 c1                        mov rcx, rax
    # nextln: 000b1e: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000b22: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 000b26: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000b28: 48 63 ca                        movsxd rcx, edx
    # nextln: 000b2b: 48 3b cf                        cmp rcx, rdi
    # nextln: 000b2e: 0f 8d fe 36 00 00               jge 0x4232
    # nextln: 000b34: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000b38: 48 03 c1                        add rax, rcx
    # nextln: 000b3b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000b3e: 85 c0                           test eax, eax
    # nextln: 000b40: 0f 84 10 00 00 00               je 0xb56
    # nextln: 000b46: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000b4a: 83 c0 01                        add eax, 1
    # nextln: 000b4d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000b51: e9 0b 00 00 00                  jmp 0xb61
    # nextln: 000b56: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000b5a: 83 c0 01                        add eax, 1
    # nextln: 000b5d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000b61: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000b66: 48 89 c1                        mov rcx, rax
    # nextln: 000b69: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000b6d: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 000b71: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 000b73: 48 63 ca                        movsxd rcx, edx
    # nextln: 000b76: 48 3b cf                        cmp rcx, rdi
    # nextln: 000b79: 0f 8d a5 36 00 00               jge 0x4224
    # nextln: 000b7f: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000b83: 48 03 c1                        add rax, rcx
    # nextln: 000b86: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000b89: 85 c0                           test eax, eax
    # nextln: 000b8b: 0f 84 10 00 00 00               je 0xba1
    # nextln: 000b91: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000b95: 83 c0 01                        add eax, 1
    # nextln: 000b98: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000b9c: e9 0b 00 00 00                  jmp 0xbac
    # nextln: 000ba1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000ba5: 83 c0 01                        add eax, 1
    # nextln: 000ba8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000bac: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000bb1: 48 89 c1                        mov rcx, rax
    # nextln: 000bb4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000bb8: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000bbc: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000bbe: 48 63 cf                        movsxd rcx, edi
    # nextln: 000bc1: 48 3b ca                        cmp rcx, rdx
    # nextln: 000bc4: 0f 8d 4c 36 00 00               jge 0x4216
    # nextln: 000bca: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000bce: 48 03 c1                        add rax, rcx
    # nextln: 000bd1: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000bd4: 85 c0                           test eax, eax
    # nextln: 000bd6: 0f 84 10 00 00 00               je 0xbec
    # nextln: 000bdc: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000be0: 83 c0 01                        add eax, 1
    # nextln: 000be3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000be7: e9 0b 00 00 00                  jmp 0xbf7
    # nextln: 000bec: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000bf0: 83 c0 01                        add eax, 1
    # nextln: 000bf3: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000bf7: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000bfc: 48 89 c1                        mov rcx, rax
    # nextln: 000bff: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000c03: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000c07: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000c09: 48 63 cf                        movsxd rcx, edi
    # nextln: 000c0c: 48 3b ca                        cmp rcx, rdx
    # nextln: 000c0f: 0f 8d f3 35 00 00               jge 0x4208
    # nextln: 000c15: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000c19: 48 03 c1                        add rax, rcx
    # nextln: 000c1c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000c1f: 85 c0                           test eax, eax
    # nextln: 000c21: 0f 84 10 00 00 00               je 0xc37
    # nextln: 000c27: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000c2b: 83 c0 01                        add eax, 1
    # nextln: 000c2e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000c32: e9 0b 00 00 00                  jmp 0xc42
    # nextln: 000c37: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000c3b: 83 c0 01                        add eax, 1
    # nextln: 000c3e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000c42: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000c46: 83 c0 01                        add eax, 1
    # nextln: 000c49: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000c4d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000c51: 83 c0 01                        add eax, 1
    # nextln: 000c54: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000c58: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 000c5d: 85 c0                           test eax, eax
    # nextln: 000c5f: 0f 84 10 00 00 00               je 0xc75
    # nextln: 000c65: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000c69: 83 c0 01                        add eax, 1
    # nextln: 000c6c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000c70: e9 0b 00 00 00                  jmp 0xc80
    # nextln: 000c75: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000c79: 83 c0 01                        add eax, 1
    # nextln: 000c7c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000c80: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 000c83: 85 c0                           test eax, eax
    # nextln: 000c85: 0f 84 10 00 00 00               je 0xc9b
    # nextln: 000c8b: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000c8f: 83 c0 01                        add eax, 1
    # nextln: 000c92: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000c96: e9 0b 00 00 00                  jmp 0xca6
    # nextln: 000c9b: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000c9f: 83 c0 01                        add eax, 1
    # nextln: 000ca2: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000ca6: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000cab: 48 83 c0 20                     add rax, 0x20
    # nextln: 000caf: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000cb2: 85 c0                           test eax, eax
    # nextln: 000cb4: 0f 84 10 00 00 00               je 0xcca
    # nextln: 000cba: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000cbe: 83 c0 01                        add eax, 1
    # nextln: 000cc1: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000cc5: e9 0b 00 00 00                  jmp 0xcd5
    # nextln: 000cca: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000cce: 83 c0 01                        add eax, 1
    # nextln: 000cd1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000cd5: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000cdf: ff d0                           call rax
    # nextln: 000ce1: 85 c0                           test eax, eax
    # nextln: 000ce3: 0f 84 10 00 00 00               je 0xcf9
    # nextln: 000ce9: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000ced: 83 c0 01                        add eax, 1
    # nextln: 000cf0: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000cf4: e9 0b 00 00 00                  jmp 0xd04
    # nextln: 000cf9: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000cfd: 83 c0 01                        add eax, 1
    # nextln: 000d00: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000d04: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000d08: 48 89 c1                        mov rcx, rax
    # nextln: 000d0b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000d0f: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000d13: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000d15: 48 63 cf                        movsxd rcx, edi
    # nextln: 000d18: 48 3b ca                        cmp rcx, rdx
    # nextln: 000d1b: 0f 8d d9 34 00 00               jge 0x41fa
    # nextln: 000d21: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000d25: 48 03 c1                        add rax, rcx
    # nextln: 000d28: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000d2b: 85 c0                           test eax, eax
    # nextln: 000d2d: 0f 84 10 00 00 00               je 0xd43
    # nextln: 000d33: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000d37: 83 c0 01                        add eax, 1
    # nextln: 000d3a: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000d3e: e9 0b 00 00 00                  jmp 0xd4e
    # nextln: 000d43: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000d47: 83 c0 01                        add eax, 1
    # nextln: 000d4a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000d4e: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000d53: 48 89 c1                        mov rcx, rax
    # nextln: 000d56: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000d5a: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000d5e: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000d60: 48 63 cf                        movsxd rcx, edi
    # nextln: 000d63: 48 3b ca                        cmp rcx, rdx
    # nextln: 000d66: 0f 8d 80 34 00 00               jge 0x41ec
    # nextln: 000d6c: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000d70: 48 03 c1                        add rax, rcx
    # nextln: 000d73: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000d76: 85 c0                           test eax, eax
    # nextln: 000d78: 0f 84 10 00 00 00               je 0xd8e
    # nextln: 000d7e: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000d82: 83 c0 01                        add eax, 1
    # nextln: 000d85: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000d89: e9 0b 00 00 00                  jmp 0xd99
    # nextln: 000d8e: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000d92: 83 c0 01                        add eax, 1
    # nextln: 000d95: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000d99: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000d9d: 83 c0 01                        add eax, 1
    # nextln: 000da0: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000da4: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000da8: 83 c0 01                        add eax, 1
    # nextln: 000dab: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000daf: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 000db4: 85 c0                           test eax, eax
    # nextln: 000db6: 0f 84 10 00 00 00               je 0xdcc
    # nextln: 000dbc: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000dc0: 83 c0 01                        add eax, 1
    # nextln: 000dc3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000dc7: e9 0b 00 00 00                  jmp 0xdd7
    # nextln: 000dcc: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000dd0: 83 c0 01                        add eax, 1
    # nextln: 000dd3: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000dd7: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 000dda: 85 c0                           test eax, eax
    # nextln: 000ddc: 0f 84 10 00 00 00               je 0xdf2
    # nextln: 000de2: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000de6: 83 c0 01                        add eax, 1
    # nextln: 000de9: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000ded: e9 0b 00 00 00                  jmp 0xdfd
    # nextln: 000df2: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000df6: 83 c0 01                        add eax, 1
    # nextln: 000df9: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000dfd: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000e02: 48 83 c0 20                     add rax, 0x20
    # nextln: 000e06: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000e09: 85 c0                           test eax, eax
    # nextln: 000e0b: 0f 84 10 00 00 00               je 0xe21
    # nextln: 000e11: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000e15: 83 c0 01                        add eax, 1
    # nextln: 000e18: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000e1c: e9 0b 00 00 00                  jmp 0xe2c
    # nextln: 000e21: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000e25: 83 c0 01                        add eax, 1
    # nextln: 000e28: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000e2c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000e36: ff d0                           call rax
    # nextln: 000e38: 85 c0                           test eax, eax
    # nextln: 000e3a: 0f 84 10 00 00 00               je 0xe50
    # nextln: 000e40: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000e44: 83 c0 01                        add eax, 1
    # nextln: 000e47: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000e4b: e9 0b 00 00 00                  jmp 0xe5b
    # nextln: 000e50: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000e54: 83 c0 01                        add eax, 1
    # nextln: 000e57: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000e5b: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000e5f: 48 89 c1                        mov rcx, rax
    # nextln: 000e62: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000e66: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000e6a: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000e6c: 48 63 cf                        movsxd rcx, edi
    # nextln: 000e6f: 48 3b ca                        cmp rcx, rdx
    # nextln: 000e72: 0f 8d 66 33 00 00               jge 0x41de
    # nextln: 000e78: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000e7c: 48 03 c1                        add rax, rcx
    # nextln: 000e7f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000e82: 85 c0                           test eax, eax
    # nextln: 000e84: 0f 84 10 00 00 00               je 0xe9a
    # nextln: 000e8a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000e8e: 83 c0 01                        add eax, 1
    # nextln: 000e91: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000e95: e9 0b 00 00 00                  jmp 0xea5
    # nextln: 000e9a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000e9e: 83 c0 01                        add eax, 1
    # nextln: 000ea1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000ea5: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 000eaa: 48 89 c1                        mov rcx, rax
    # nextln: 000ead: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000eb1: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000eb5: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000eb7: 48 63 cf                        movsxd rcx, edi
    # nextln: 000eba: 48 3b ca                        cmp rcx, rdx
    # nextln: 000ebd: 0f 8d 0d 33 00 00               jge 0x41d0
    # nextln: 000ec3: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000ec7: 48 03 c1                        add rax, rcx
    # nextln: 000eca: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000ecd: 85 c0                           test eax, eax
    # nextln: 000ecf: 0f 84 10 00 00 00               je 0xee5
    # nextln: 000ed5: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000ed9: 83 c0 01                        add eax, 1
    # nextln: 000edc: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000ee0: e9 0b 00 00 00                  jmp 0xef0
    # nextln: 000ee5: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000ee9: 83 c0 01                        add eax, 1
    # nextln: 000eec: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000ef0: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000ef4: 83 c0 01                        add eax, 1
    # nextln: 000ef7: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000efb: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000eff: 83 c0 01                        add eax, 1
    # nextln: 000f02: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000f06: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 000f0b: 85 c0                           test eax, eax
    # nextln: 000f0d: 0f 84 10 00 00 00               je 0xf23
    # nextln: 000f13: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000f17: 83 c0 01                        add eax, 1
    # nextln: 000f1a: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000f1e: e9 0b 00 00 00                  jmp 0xf2e
    # nextln: 000f23: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000f27: 83 c0 01                        add eax, 1
    # nextln: 000f2a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000f2e: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 000f31: 85 c0                           test eax, eax
    # nextln: 000f33: 0f 84 10 00 00 00               je 0xf49
    # nextln: 000f39: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000f3d: 83 c0 01                        add eax, 1
    # nextln: 000f40: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000f44: e9 0b 00 00 00                  jmp 0xf54
    # nextln: 000f49: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000f4d: 83 c0 01                        add eax, 1
    # nextln: 000f50: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000f54: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 000f59: 48 83 c0 20                     add rax, 0x20
    # nextln: 000f5d: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000f60: 85 c0                           test eax, eax
    # nextln: 000f62: 0f 84 10 00 00 00               je 0xf78
    # nextln: 000f68: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000f6c: 83 c0 01                        add eax, 1
    # nextln: 000f6f: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000f73: e9 0b 00 00 00                  jmp 0xf83
    # nextln: 000f78: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000f7c: 83 c0 01                        add eax, 1
    # nextln: 000f7f: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000f83: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 000f8d: ff d0                           call rax
    # nextln: 000f8f: 85 c0                           test eax, eax
    # nextln: 000f91: 0f 84 10 00 00 00               je 0xfa7
    # nextln: 000f97: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000f9b: 83 c0 01                        add eax, 1
    # nextln: 000f9e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000fa2: e9 0b 00 00 00                  jmp 0xfb2
    # nextln: 000fa7: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000fab: 83 c0 01                        add eax, 1
    # nextln: 000fae: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000fb2: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 000fb6: 48 89 c1                        mov rcx, rax
    # nextln: 000fb9: 48 83 c1 20                     add rcx, 0x20
    # nextln: 000fbd: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 000fc1: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 000fc3: 48 63 cf                        movsxd rcx, edi
    # nextln: 000fc6: 48 3b ca                        cmp rcx, rdx
    # nextln: 000fc9: 0f 8d f3 31 00 00               jge 0x41c2
    # nextln: 000fcf: 48 83 c1 28                     add rcx, 0x28
    # nextln: 000fd3: 48 03 c1                        add rax, rcx
    # nextln: 000fd6: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 000fd9: 85 c0                           test eax, eax
    # nextln: 000fdb: 0f 84 10 00 00 00               je 0xff1
    # nextln: 000fe1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 000fe5: 83 c0 01                        add eax, 1
    # nextln: 000fe8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 000fec: e9 0b 00 00 00                  jmp 0xffc
    # nextln: 000ff1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 000ff5: 83 c0 01                        add eax, 1
    # nextln: 000ff8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 000ffc: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001001: 48 89 c1                        mov rcx, rax
    # nextln: 001004: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001008: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 00100c: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 00100e: 48 63 cf                        movsxd rcx, edi
    # nextln: 001011: 48 3b ca                        cmp rcx, rdx
    # nextln: 001014: 0f 8d 9a 31 00 00               jge 0x41b4
    # nextln: 00101a: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00101e: 48 03 c1                        add rax, rcx
    # nextln: 001021: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001024: 85 c0                           test eax, eax
    # nextln: 001026: 0f 84 10 00 00 00               je 0x103c
    # nextln: 00102c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001030: 83 c0 01                        add eax, 1
    # nextln: 001033: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001037: e9 0b 00 00 00                  jmp 0x1047
    # nextln: 00103c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001040: 83 c0 01                        add eax, 1
    # nextln: 001043: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001047: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00104b: 83 c0 01                        add eax, 1
    # nextln: 00104e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001052: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001056: 83 c0 01                        add eax, 1
    # nextln: 001059: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00105d: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001062: 85 c0                           test eax, eax
    # nextln: 001064: 0f 84 10 00 00 00               je 0x107a
    # nextln: 00106a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00106e: 83 c0 01                        add eax, 1
    # nextln: 001071: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001075: e9 0b 00 00 00                  jmp 0x1085
    # nextln: 00107a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00107e: 83 c0 01                        add eax, 1
    # nextln: 001081: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001085: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001088: 85 c0                           test eax, eax
    # nextln: 00108a: 0f 84 10 00 00 00               je 0x10a0
    # nextln: 001090: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001094: 83 c0 01                        add eax, 1
    # nextln: 001097: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00109b: e9 0b 00 00 00                  jmp 0x10ab
    # nextln: 0010a0: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0010a4: 83 c0 01                        add eax, 1
    # nextln: 0010a7: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0010ab: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0010b0: 48 83 c0 20                     add rax, 0x20
    # nextln: 0010b4: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0010b7: 85 c0                           test eax, eax
    # nextln: 0010b9: 0f 84 10 00 00 00               je 0x10cf
    # nextln: 0010bf: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0010c3: 83 c0 01                        add eax, 1
    # nextln: 0010c6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0010ca: e9 0b 00 00 00                  jmp 0x10da
    # nextln: 0010cf: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0010d3: 83 c0 01                        add eax, 1
    # nextln: 0010d6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0010da: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0010e4: ff d0                           call rax
    # nextln: 0010e6: 85 c0                           test eax, eax
    # nextln: 0010e8: 0f 84 10 00 00 00               je 0x10fe
    # nextln: 0010ee: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0010f2: 83 c0 01                        add eax, 1
    # nextln: 0010f5: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0010f9: e9 0b 00 00 00                  jmp 0x1109
    # nextln: 0010fe: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001102: 83 c0 01                        add eax, 1
    # nextln: 001105: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001109: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00110d: 48 89 c1                        mov rcx, rax
    # nextln: 001110: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001114: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 001118: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00111a: 48 63 ca                        movsxd rcx, edx
    # nextln: 00111d: 48 3b cf                        cmp rcx, rdi
    # nextln: 001120: 0f 8d 80 30 00 00               jge 0x41a6
    # nextln: 001126: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00112a: 48 03 c1                        add rax, rcx
    # nextln: 00112d: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001130: 85 c0                           test eax, eax
    # nextln: 001132: 0f 84 10 00 00 00               je 0x1148
    # nextln: 001138: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00113c: 83 c0 01                        add eax, 1
    # nextln: 00113f: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001143: e9 0b 00 00 00                  jmp 0x1153
    # nextln: 001148: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00114c: 83 c0 01                        add eax, 1
    # nextln: 00114f: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001153: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001158: 48 89 c1                        mov rcx, rax
    # nextln: 00115b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00115f: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 001163: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 001165: 48 63 cf                        movsxd rcx, edi
    # nextln: 001168: 48 3b ca                        cmp rcx, rdx
    # nextln: 00116b: 0f 8d 27 30 00 00               jge 0x4198
    # nextln: 001171: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001175: 48 03 c1                        add rax, rcx
    # nextln: 001178: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00117b: 85 c0                           test eax, eax
    # nextln: 00117d: 0f 84 10 00 00 00               je 0x1193
    # nextln: 001183: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001187: 83 c0 01                        add eax, 1
    # nextln: 00118a: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00118e: e9 0b 00 00 00                  jmp 0x119e
    # nextln: 001193: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001197: 83 c0 01                        add eax, 1
    # nextln: 00119a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00119e: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0011a2: 83 c0 01                        add eax, 1
    # nextln: 0011a5: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0011a9: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0011ad: 83 c0 01                        add eax, 1
    # nextln: 0011b0: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0011b4: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0011b9: 85 c0                           test eax, eax
    # nextln: 0011bb: 0f 84 10 00 00 00               je 0x11d1
    # nextln: 0011c1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0011c5: 83 c0 01                        add eax, 1
    # nextln: 0011c8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0011cc: e9 0b 00 00 00                  jmp 0x11dc
    # nextln: 0011d1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0011d5: 83 c0 01                        add eax, 1
    # nextln: 0011d8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0011dc: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0011df: 85 c0                           test eax, eax
    # nextln: 0011e1: 0f 84 10 00 00 00               je 0x11f7
    # nextln: 0011e7: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0011eb: 83 c0 01                        add eax, 1
    # nextln: 0011ee: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0011f2: e9 0b 00 00 00                  jmp 0x1202
    # nextln: 0011f7: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0011fb: 83 c0 01                        add eax, 1
    # nextln: 0011fe: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001202: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001207: 48 83 c0 20                     add rax, 0x20
    # nextln: 00120b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00120e: 85 c0                           test eax, eax
    # nextln: 001210: 0f 84 10 00 00 00               je 0x1226
    # nextln: 001216: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00121a: 83 c0 01                        add eax, 1
    # nextln: 00121d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001221: e9 0b 00 00 00                  jmp 0x1231
    # nextln: 001226: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00122a: 83 c0 01                        add eax, 1
    # nextln: 00122d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001231: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00123b: ff d0                           call rax
    # nextln: 00123d: 85 c0                           test eax, eax
    # nextln: 00123f: 0f 84 10 00 00 00               je 0x1255
    # nextln: 001245: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001249: 83 c0 01                        add eax, 1
    # nextln: 00124c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001250: e9 0b 00 00 00                  jmp 0x1260
    # nextln: 001255: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001259: 83 c0 01                        add eax, 1
    # nextln: 00125c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001260: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001264: 48 89 c1                        mov rcx, rax
    # nextln: 001267: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00126b: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 00126f: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001271: 48 63 ca                        movsxd rcx, edx
    # nextln: 001274: 48 3b cf                        cmp rcx, rdi
    # nextln: 001277: 0f 8d 0d 2f 00 00               jge 0x418a
    # nextln: 00127d: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001281: 48 03 c1                        add rax, rcx
    # nextln: 001284: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001287: 85 c0                           test eax, eax
    # nextln: 001289: 0f 84 10 00 00 00               je 0x129f
    # nextln: 00128f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001293: 83 c0 01                        add eax, 1
    # nextln: 001296: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00129a: e9 0b 00 00 00                  jmp 0x12aa
    # nextln: 00129f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0012a3: 83 c0 01                        add eax, 1
    # nextln: 0012a6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0012aa: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0012af: 48 89 c1                        mov rcx, rax
    # nextln: 0012b2: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0012b6: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0012ba: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0012bc: 48 63 ca                        movsxd rcx, edx
    # nextln: 0012bf: 48 3b cf                        cmp rcx, rdi
    # nextln: 0012c2: 0f 8d b4 2e 00 00               jge 0x417c
    # nextln: 0012c8: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0012cc: 48 03 c1                        add rax, rcx
    # nextln: 0012cf: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0012d2: 85 c0                           test eax, eax
    # nextln: 0012d4: 0f 84 10 00 00 00               je 0x12ea
    # nextln: 0012da: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0012de: 83 c0 01                        add eax, 1
    # nextln: 0012e1: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0012e5: e9 0b 00 00 00                  jmp 0x12f5
    # nextln: 0012ea: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0012ee: 83 c0 01                        add eax, 1
    # nextln: 0012f1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0012f5: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0012f9: 83 c0 01                        add eax, 1
    # nextln: 0012fc: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001300: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001304: 83 c0 01                        add eax, 1
    # nextln: 001307: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00130b: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001310: 85 c0                           test eax, eax
    # nextln: 001312: 0f 84 10 00 00 00               je 0x1328
    # nextln: 001318: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00131c: 83 c0 01                        add eax, 1
    # nextln: 00131f: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001323: e9 0b 00 00 00                  jmp 0x1333
    # nextln: 001328: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00132c: 83 c0 01                        add eax, 1
    # nextln: 00132f: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001333: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001336: 85 c0                           test eax, eax
    # nextln: 001338: 0f 84 10 00 00 00               je 0x134e
    # nextln: 00133e: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001342: 83 c0 01                        add eax, 1
    # nextln: 001345: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001349: e9 0b 00 00 00                  jmp 0x1359
    # nextln: 00134e: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001352: 83 c0 01                        add eax, 1
    # nextln: 001355: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001359: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00135e: 48 83 c0 20                     add rax, 0x20
    # nextln: 001362: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001365: 85 c0                           test eax, eax
    # nextln: 001367: 0f 84 10 00 00 00               je 0x137d
    # nextln: 00136d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001371: 83 c0 01                        add eax, 1
    # nextln: 001374: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001378: e9 0b 00 00 00                  jmp 0x1388
    # nextln: 00137d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001381: 83 c0 01                        add eax, 1
    # nextln: 001384: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001388: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001392: ff d0                           call rax
    # nextln: 001394: 85 c0                           test eax, eax
    # nextln: 001396: 0f 84 10 00 00 00               je 0x13ac
    # nextln: 00139c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0013a0: 83 c0 01                        add eax, 1
    # nextln: 0013a3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0013a7: e9 0b 00 00 00                  jmp 0x13b7
    # nextln: 0013ac: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0013b0: 83 c0 01                        add eax, 1
    # nextln: 0013b3: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0013b7: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0013bb: 48 89 c1                        mov rcx, rax
    # nextln: 0013be: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0013c2: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 0013c6: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0013c8: 48 63 cf                        movsxd rcx, edi
    # nextln: 0013cb: 48 3b ca                        cmp rcx, rdx
    # nextln: 0013ce: 0f 8d 9a 2d 00 00               jge 0x416e
    # nextln: 0013d4: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0013d8: 48 03 c1                        add rax, rcx
    # nextln: 0013db: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0013de: 85 c0                           test eax, eax
    # nextln: 0013e0: 0f 84 10 00 00 00               je 0x13f6
    # nextln: 0013e6: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0013ea: 83 c0 01                        add eax, 1
    # nextln: 0013ed: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0013f1: e9 0b 00 00 00                  jmp 0x1401
    # nextln: 0013f6: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0013fa: 83 c0 01                        add eax, 1
    # nextln: 0013fd: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001401: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001406: 48 89 c1                        mov rcx, rax
    # nextln: 001409: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00140d: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 001411: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 001413: 48 63 cf                        movsxd rcx, edi
    # nextln: 001416: 48 3b ca                        cmp rcx, rdx
    # nextln: 001419: 0f 8d 41 2d 00 00               jge 0x4160
    # nextln: 00141f: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001423: 48 03 c1                        add rax, rcx
    # nextln: 001426: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001429: 85 c0                           test eax, eax
    # nextln: 00142b: 0f 84 10 00 00 00               je 0x1441
    # nextln: 001431: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001435: 83 c0 01                        add eax, 1
    # nextln: 001438: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00143c: e9 0b 00 00 00                  jmp 0x144c
    # nextln: 001441: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001445: 83 c0 01                        add eax, 1
    # nextln: 001448: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00144c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001450: 83 c0 01                        add eax, 1
    # nextln: 001453: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001457: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00145b: 83 c0 01                        add eax, 1
    # nextln: 00145e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001462: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001467: 85 c0                           test eax, eax
    # nextln: 001469: 0f 84 10 00 00 00               je 0x147f
    # nextln: 00146f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001473: 83 c0 01                        add eax, 1
    # nextln: 001476: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00147a: e9 0b 00 00 00                  jmp 0x148a
    # nextln: 00147f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001483: 83 c0 01                        add eax, 1
    # nextln: 001486: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00148a: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 00148d: 85 c0                           test eax, eax
    # nextln: 00148f: 0f 84 10 00 00 00               je 0x14a5
    # nextln: 001495: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001499: 83 c0 01                        add eax, 1
    # nextln: 00149c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0014a0: e9 0b 00 00 00                  jmp 0x14b0
    # nextln: 0014a5: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0014a9: 83 c0 01                        add eax, 1
    # nextln: 0014ac: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0014b0: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0014b5: 48 83 c0 20                     add rax, 0x20
    # nextln: 0014b9: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0014bc: 85 c0                           test eax, eax
    # nextln: 0014be: 0f 84 10 00 00 00               je 0x14d4
    # nextln: 0014c4: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0014c8: 83 c0 01                        add eax, 1
    # nextln: 0014cb: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0014cf: e9 0b 00 00 00                  jmp 0x14df
    # nextln: 0014d4: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0014d8: 83 c0 01                        add eax, 1
    # nextln: 0014db: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0014df: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0014e9: ff d0                           call rax
    # nextln: 0014eb: 85 c0                           test eax, eax
    # nextln: 0014ed: 0f 84 10 00 00 00               je 0x1503
    # nextln: 0014f3: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0014f7: 83 c0 01                        add eax, 1
    # nextln: 0014fa: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0014fe: e9 0b 00 00 00                  jmp 0x150e
    # nextln: 001503: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001507: 83 c0 01                        add eax, 1
    # nextln: 00150a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00150e: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001512: 48 89 c1                        mov rcx, rax
    # nextln: 001515: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001519: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 00151d: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00151f: 48 63 ca                        movsxd rcx, edx
    # nextln: 001522: 48 3b cf                        cmp rcx, rdi
    # nextln: 001525: 0f 8d 27 2c 00 00               jge 0x4152
    # nextln: 00152b: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00152f: 48 03 c1                        add rax, rcx
    # nextln: 001532: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001535: 85 c0                           test eax, eax
    # nextln: 001537: 0f 84 10 00 00 00               je 0x154d
    # nextln: 00153d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001541: 83 c0 01                        add eax, 1
    # nextln: 001544: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001548: e9 0b 00 00 00                  jmp 0x1558
    # nextln: 00154d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001551: 83 c0 01                        add eax, 1
    # nextln: 001554: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001558: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 00155d: 48 89 c1                        mov rcx, rax
    # nextln: 001560: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001564: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 001568: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 00156a: 48 63 cf                        movsxd rcx, edi
    # nextln: 00156d: 48 3b ca                        cmp rcx, rdx
    # nextln: 001570: 0f 8d ce 2b 00 00               jge 0x4144
    # nextln: 001576: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00157a: 48 03 c1                        add rax, rcx
    # nextln: 00157d: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001580: 85 c0                           test eax, eax
    # nextln: 001582: 0f 84 10 00 00 00               je 0x1598
    # nextln: 001588: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00158c: 83 c0 01                        add eax, 1
    # nextln: 00158f: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001593: e9 0b 00 00 00                  jmp 0x15a3
    # nextln: 001598: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00159c: 83 c0 01                        add eax, 1
    # nextln: 00159f: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0015a3: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0015a7: 83 c0 01                        add eax, 1
    # nextln: 0015aa: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0015ae: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0015b2: 83 c0 01                        add eax, 1
    # nextln: 0015b5: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0015b9: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0015be: 85 c0                           test eax, eax
    # nextln: 0015c0: 0f 84 10 00 00 00               je 0x15d6
    # nextln: 0015c6: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0015ca: 83 c0 01                        add eax, 1
    # nextln: 0015cd: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0015d1: e9 0b 00 00 00                  jmp 0x15e1
    # nextln: 0015d6: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0015da: 83 c0 01                        add eax, 1
    # nextln: 0015dd: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0015e1: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0015e4: 85 c0                           test eax, eax
    # nextln: 0015e6: 0f 84 10 00 00 00               je 0x15fc
    # nextln: 0015ec: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0015f0: 83 c0 01                        add eax, 1
    # nextln: 0015f3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0015f7: e9 0b 00 00 00                  jmp 0x1607
    # nextln: 0015fc: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001600: 83 c0 01                        add eax, 1
    # nextln: 001603: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001607: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00160c: 48 83 c0 20                     add rax, 0x20
    # nextln: 001610: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001613: 85 c0                           test eax, eax
    # nextln: 001615: 0f 84 10 00 00 00               je 0x162b
    # nextln: 00161b: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00161f: 83 c0 01                        add eax, 1
    # nextln: 001622: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001626: e9 0b 00 00 00                  jmp 0x1636
    # nextln: 00162b: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00162f: 83 c0 01                        add eax, 1
    # nextln: 001632: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001636: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001640: ff d0                           call rax
    # nextln: 001642: 85 c0                           test eax, eax
    # nextln: 001644: 0f 84 10 00 00 00               je 0x165a
    # nextln: 00164a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00164e: 83 c0 01                        add eax, 1
    # nextln: 001651: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001655: e9 0b 00 00 00                  jmp 0x1665
    # nextln: 00165a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00165e: 83 c0 01                        add eax, 1
    # nextln: 001661: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001665: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001669: 48 89 c1                        mov rcx, rax
    # nextln: 00166c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001670: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 001674: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 001676: 48 63 cf                        movsxd rcx, edi
    # nextln: 001679: 48 3b ca                        cmp rcx, rdx
    # nextln: 00167c: 0f 8d b4 2a 00 00               jge 0x4136
    # nextln: 001682: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001686: 48 03 c1                        add rax, rcx
    # nextln: 001689: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00168c: 85 c0                           test eax, eax
    # nextln: 00168e: 0f 84 10 00 00 00               je 0x16a4
    # nextln: 001694: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001698: 83 c0 01                        add eax, 1
    # nextln: 00169b: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00169f: e9 0b 00 00 00                  jmp 0x16af
    # nextln: 0016a4: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0016a8: 83 c0 01                        add eax, 1
    # nextln: 0016ab: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0016af: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0016b4: 48 89 c1                        mov rcx, rax
    # nextln: 0016b7: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0016bb: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 0016bf: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0016c1: 48 63 cf                        movsxd rcx, edi
    # nextln: 0016c4: 48 3b ca                        cmp rcx, rdx
    # nextln: 0016c7: 0f 8d 5b 2a 00 00               jge 0x4128
    # nextln: 0016cd: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0016d1: 48 03 c1                        add rax, rcx
    # nextln: 0016d4: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0016d7: 85 c0                           test eax, eax
    # nextln: 0016d9: 0f 84 10 00 00 00               je 0x16ef
    # nextln: 0016df: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0016e3: 83 c0 01                        add eax, 1
    # nextln: 0016e6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0016ea: e9 0b 00 00 00                  jmp 0x16fa
    # nextln: 0016ef: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0016f3: 83 c0 01                        add eax, 1
    # nextln: 0016f6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0016fa: 45 85 e4                        test r12d, r12d
    # nextln: 0016fd: 45 85 e4                        test r12d, r12d
    # nextln: 001700: 0f 84 10 00 00 00               je 0x1716
    # nextln: 001706: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00170a: 83 c0 01                        add eax, 1
    # nextln: 00170d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001711: e9 0b 00 00 00                  jmp 0x1721
    # nextln: 001716: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00171a: 83 c0 01                        add eax, 1
    # nextln: 00171d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001721: 45 85 e4                        test r12d, r12d
    # nextln: 001724: 0f 84 10 00 00 00               je 0x173a
    # nextln: 00172a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00172e: 83 c0 01                        add eax, 1
    # nextln: 001731: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001735: e9 0b 00 00 00                  jmp 0x1745
    # nextln: 00173a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00173e: 83 c0 01                        add eax, 1
    # nextln: 001741: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001745: 45 85 e4                        test r12d, r12d
    # nextln: 001748: 0f 84 08 00 00 00               je 0x1756
    # nextln: 00174e: 4c 89 e0                        mov rax, r12
    # nextln: 001751: e9 05 00 00 00                  jmp 0x175b
    # nextln: 001756: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 00175b: 85 c0                           test eax, eax
    # nextln: 00175d: 0f 84 10 00 00 00               je 0x1773
    # nextln: 001763: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001767: 83 c0 01                        add eax, 1
    # nextln: 00176a: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00176e: e9 0b 00 00 00                  jmp 0x177e
    # nextln: 001773: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001777: 83 c0 01                        add eax, 1
    # nextln: 00177a: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00177e: 45 85 e4                        test r12d, r12d
    # nextln: 001781: 0f 84 08 00 00 00               je 0x178f
    # nextln: 001787: 4c 89 e0                        mov rax, r12
    # nextln: 00178a: e9 03 00 00 00                  jmp 0x1792
    # nextln: 00178f: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001792: 85 c0                           test eax, eax
    # nextln: 001794: 0f 84 10 00 00 00               je 0x17aa
    # nextln: 00179a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00179e: 83 c0 01                        add eax, 1
    # nextln: 0017a1: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0017a5: e9 0b 00 00 00                  jmp 0x17b5
    # nextln: 0017aa: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0017ae: 83 c0 01                        add eax, 1
    # nextln: 0017b1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0017b5: 45 85 e4                        test r12d, r12d
    # nextln: 0017b8: 0f 84 08 00 00 00               je 0x17c6
    # nextln: 0017be: 4c 89 e0                        mov rax, r12
    # nextln: 0017c1: e9 0c 00 00 00                  jmp 0x17d2
    # nextln: 0017c6: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0017cb: 48 83 c0 20                     add rax, 0x20
    # nextln: 0017cf: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0017d2: 85 c0                           test eax, eax
    # nextln: 0017d4: 0f 84 10 00 00 00               je 0x17ea
    # nextln: 0017da: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0017de: 83 c0 01                        add eax, 1
    # nextln: 0017e1: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0017e5: e9 0b 00 00 00                  jmp 0x17f5
    # nextln: 0017ea: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0017ee: 83 c0 01                        add eax, 1
    # nextln: 0017f1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0017f5: 45 85 e4                        test r12d, r12d
    # nextln: 0017f8: 0f 84 08 00 00 00               je 0x1806
    # nextln: 0017fe: 4c 89 e0                        mov rax, r12
    # nextln: 001801: e9 0c 00 00 00                  jmp 0x1812
    # nextln: 001806: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001810: ff d0                           call rax
    # nextln: 001812: 85 c0                           test eax, eax
    # nextln: 001814: 0f 84 10 00 00 00               je 0x182a
    # nextln: 00181a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00181e: 83 c0 01                        add eax, 1
    # nextln: 001821: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001825: e9 0b 00 00 00                  jmp 0x1835
    # nextln: 00182a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00182e: 83 c0 01                        add eax, 1
    # nextln: 001831: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001835: 45 85 e4                        test r12d, r12d
    # nextln: 001838: 0f 84 08 00 00 00               je 0x1846
    # nextln: 00183e: 4c 89 e0                        mov rax, r12
    # nextln: 001841: e9 27 00 00 00                  jmp 0x186d
    # nextln: 001846: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00184a: 48 89 c1                        mov rcx, rax
    # nextln: 00184d: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001851: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 001855: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001857: 48 63 ca                        movsxd rcx, edx
    # nextln: 00185a: 48 3b cf                        cmp rcx, rdi
    # nextln: 00185d: 0f 8d b7 28 00 00               jge 0x411a
    # nextln: 001863: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001867: 48 03 c1                        add rax, rcx
    # nextln: 00186a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00186d: 85 c0                           test eax, eax
    # nextln: 00186f: 0f 84 10 00 00 00               je 0x1885
    # nextln: 001875: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001879: 83 c0 01                        add eax, 1
    # nextln: 00187c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001880: e9 0b 00 00 00                  jmp 0x1890
    # nextln: 001885: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001889: 83 c0 01                        add eax, 1
    # nextln: 00188c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001890: 45 85 e4                        test r12d, r12d
    # nextln: 001893: 0f 84 08 00 00 00               je 0x18a1
    # nextln: 001899: 4c 89 e0                        mov rax, r12
    # nextln: 00189c: e9 28 00 00 00                  jmp 0x18c9
    # nextln: 0018a1: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0018a6: 48 89 c1                        mov rcx, rax
    # nextln: 0018a9: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0018ad: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0018b1: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0018b3: 48 63 ca                        movsxd rcx, edx
    # nextln: 0018b6: 48 3b cf                        cmp rcx, rdi
    # nextln: 0018b9: 0f 8d 4d 28 00 00               jge 0x410c
    # nextln: 0018bf: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0018c3: 48 03 c1                        add rax, rcx
    # nextln: 0018c6: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0018c9: 85 c0                           test eax, eax
    # nextln: 0018cb: 0f 84 10 00 00 00               je 0x18e1
    # nextln: 0018d1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0018d5: 83 c0 01                        add eax, 1
    # nextln: 0018d8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0018dc: e9 0b 00 00 00                  jmp 0x18ec
    # nextln: 0018e1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0018e5: 83 c0 01                        add eax, 1
    # nextln: 0018e8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0018ec: 45 85 f6                        test r14d, r14d
    # nextln: 0018ef: 0f 84 10 00 00 00               je 0x1905
    # nextln: 0018f5: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0018f9: 83 c0 01                        add eax, 1
    # nextln: 0018fc: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001900: e9 0b 00 00 00                  jmp 0x1910
    # nextln: 001905: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001909: 83 c0 01                        add eax, 1
    # nextln: 00190c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001910: 45 85 e4                        test r12d, r12d
    # nextln: 001913: 45 85 f6                        test r14d, r14d
    # nextln: 001916: 0f 84 10 00 00 00               je 0x192c
    # nextln: 00191c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001920: 83 c0 01                        add eax, 1
    # nextln: 001923: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001927: e9 0b 00 00 00                  jmp 0x1937
    # nextln: 00192c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001930: 83 c0 01                        add eax, 1
    # nextln: 001933: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001937: 45 85 e4                        test r12d, r12d
    # nextln: 00193a: 0f 84 08 00 00 00               je 0x1948
    # nextln: 001940: 4c 89 f0                        mov rax, r14
    # nextln: 001943: e9 05 00 00 00                  jmp 0x194d
    # nextln: 001948: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 00194d: 85 c0                           test eax, eax
    # nextln: 00194f: 0f 84 10 00 00 00               je 0x1965
    # nextln: 001955: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001959: 83 c0 01                        add eax, 1
    # nextln: 00195c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001960: e9 0b 00 00 00                  jmp 0x1970
    # nextln: 001965: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001969: 83 c0 01                        add eax, 1
    # nextln: 00196c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001970: 45 85 e4                        test r12d, r12d
    # nextln: 001973: 0f 84 08 00 00 00               je 0x1981
    # nextln: 001979: 4c 89 f0                        mov rax, r14
    # nextln: 00197c: e9 03 00 00 00                  jmp 0x1984
    # nextln: 001981: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001984: 85 c0                           test eax, eax
    # nextln: 001986: 0f 84 10 00 00 00               je 0x199c
    # nextln: 00198c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001990: 83 c0 01                        add eax, 1
    # nextln: 001993: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001997: e9 0b 00 00 00                  jmp 0x19a7
    # nextln: 00199c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0019a0: 83 c0 01                        add eax, 1
    # nextln: 0019a3: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0019a7: 45 85 e4                        test r12d, r12d
    # nextln: 0019aa: 0f 84 08 00 00 00               je 0x19b8
    # nextln: 0019b0: 4c 89 f0                        mov rax, r14
    # nextln: 0019b3: e9 0c 00 00 00                  jmp 0x19c4
    # nextln: 0019b8: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0019bd: 48 83 c0 20                     add rax, 0x20
    # nextln: 0019c1: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0019c4: 85 c0                           test eax, eax
    # nextln: 0019c6: 0f 84 10 00 00 00               je 0x19dc
    # nextln: 0019cc: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0019d0: 83 c0 01                        add eax, 1
    # nextln: 0019d3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0019d7: e9 0b 00 00 00                  jmp 0x19e7
    # nextln: 0019dc: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0019e0: 83 c0 01                        add eax, 1
    # nextln: 0019e3: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0019e7: 45 85 e4                        test r12d, r12d
    # nextln: 0019ea: 0f 84 08 00 00 00               je 0x19f8
    # nextln: 0019f0: 4c 89 f0                        mov rax, r14
    # nextln: 0019f3: e9 0c 00 00 00                  jmp 0x1a04
    # nextln: 0019f8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001a02: ff d0                           call rax
    # nextln: 001a04: 85 c0                           test eax, eax
    # nextln: 001a06: 0f 84 10 00 00 00               je 0x1a1c
    # nextln: 001a0c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001a10: 83 c0 01                        add eax, 1
    # nextln: 001a13: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001a17: e9 0b 00 00 00                  jmp 0x1a27
    # nextln: 001a1c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001a20: 83 c0 01                        add eax, 1
    # nextln: 001a23: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001a27: 45 85 e4                        test r12d, r12d
    # nextln: 001a2a: 0f 84 08 00 00 00               je 0x1a38
    # nextln: 001a30: 4c 89 f0                        mov rax, r14
    # nextln: 001a33: e9 27 00 00 00                  jmp 0x1a5f
    # nextln: 001a38: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001a3c: 48 89 c1                        mov rcx, rax
    # nextln: 001a3f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001a43: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 001a47: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001a49: 48 63 ca                        movsxd rcx, edx
    # nextln: 001a4c: 48 3b cf                        cmp rcx, rdi
    # nextln: 001a4f: 0f 8d a9 26 00 00               jge 0x40fe
    # nextln: 001a55: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001a59: 48 03 c1                        add rax, rcx
    # nextln: 001a5c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001a5f: 85 c0                           test eax, eax
    # nextln: 001a61: 0f 84 10 00 00 00               je 0x1a77
    # nextln: 001a67: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001a6b: 83 c0 01                        add eax, 1
    # nextln: 001a6e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001a72: e9 0b 00 00 00                  jmp 0x1a82
    # nextln: 001a77: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001a7b: 83 c0 01                        add eax, 1
    # nextln: 001a7e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001a82: 45 85 e4                        test r12d, r12d
    # nextln: 001a85: 0f 84 08 00 00 00               je 0x1a93
    # nextln: 001a8b: 4c 89 f0                        mov rax, r14
    # nextln: 001a8e: e9 28 00 00 00                  jmp 0x1abb
    # nextln: 001a93: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001a98: 48 89 c1                        mov rcx, rax
    # nextln: 001a9b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001a9f: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 001aa3: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 001aa5: 48 63 cf                        movsxd rcx, edi
    # nextln: 001aa8: 48 3b ca                        cmp rcx, rdx
    # nextln: 001aab: 0f 8d 3f 26 00 00               jge 0x40f0
    # nextln: 001ab1: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001ab5: 48 03 c1                        add rax, rcx
    # nextln: 001ab8: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001abb: 85 c0                           test eax, eax
    # nextln: 001abd: 0f 84 10 00 00 00               je 0x1ad3
    # nextln: 001ac3: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001ac7: 83 c0 01                        add eax, 1
    # nextln: 001aca: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001ace: e9 0b 00 00 00                  jmp 0x1ade
    # nextln: 001ad3: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001ad7: 83 c0 01                        add eax, 1
    # nextln: 001ada: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001ade: 45 85 e4                        test r12d, r12d
    # nextln: 001ae1: 0f 84 0a 00 00 00               je 0x1af1
    # nextln: 001ae7: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001aec: e9 03 00 00 00                  jmp 0x1af4
    # nextln: 001af1: 4c 89 e0                        mov rax, r12
    # nextln: 001af4: 85 c0                           test eax, eax
    # nextln: 001af6: 0f 84 10 00 00 00               je 0x1b0c
    # nextln: 001afc: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001b00: 83 c0 01                        add eax, 1
    # nextln: 001b03: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001b07: e9 0b 00 00 00                  jmp 0x1b17
    # nextln: 001b0c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001b10: 83 c0 01                        add eax, 1
    # nextln: 001b13: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001b17: 45 85 e4                        test r12d, r12d
    # nextln: 001b1a: 0f 84 0a 00 00 00               je 0x1b2a
    # nextln: 001b20: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001b25: e9 03 00 00 00                  jmp 0x1b2d
    # nextln: 001b2a: 4c 89 f0                        mov rax, r14
    # nextln: 001b2d: 85 c0                           test eax, eax
    # nextln: 001b2f: 0f 84 10 00 00 00               je 0x1b45
    # nextln: 001b35: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001b39: 83 c0 01                        add eax, 1
    # nextln: 001b3c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001b40: e9 0b 00 00 00                  jmp 0x1b50
    # nextln: 001b45: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001b49: 83 c0 01                        add eax, 1
    # nextln: 001b4c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001b50: 45 85 e4                        test r12d, r12d
    # nextln: 001b53: 0f 84 0a 00 00 00               je 0x1b63
    # nextln: 001b59: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001b5e: e9 05 00 00 00                  jmp 0x1b68
    # nextln: 001b63: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001b68: 85 c0                           test eax, eax
    # nextln: 001b6a: 0f 84 10 00 00 00               je 0x1b80
    # nextln: 001b70: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001b74: 83 c0 01                        add eax, 1
    # nextln: 001b77: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001b7b: e9 0b 00 00 00                  jmp 0x1b8b
    # nextln: 001b80: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001b84: 83 c0 01                        add eax, 1
    # nextln: 001b87: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001b8b: 45 85 e4                        test r12d, r12d
    # nextln: 001b8e: 0f 84 0a 00 00 00               je 0x1b9e
    # nextln: 001b94: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001b99: e9 03 00 00 00                  jmp 0x1ba1
    # nextln: 001b9e: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001ba1: 85 c0                           test eax, eax
    # nextln: 001ba3: 0f 84 10 00 00 00               je 0x1bb9
    # nextln: 001ba9: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001bad: 83 c0 01                        add eax, 1
    # nextln: 001bb0: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001bb4: e9 0b 00 00 00                  jmp 0x1bc4
    # nextln: 001bb9: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001bbd: 83 c0 01                        add eax, 1
    # nextln: 001bc0: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001bc4: 45 85 e4                        test r12d, r12d
    # nextln: 001bc7: 0f 84 0a 00 00 00               je 0x1bd7
    # nextln: 001bcd: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001bd2: e9 0c 00 00 00                  jmp 0x1be3
    # nextln: 001bd7: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001bdc: 48 83 c0 20                     add rax, 0x20
    # nextln: 001be0: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001be3: 85 c0                           test eax, eax
    # nextln: 001be5: 0f 84 10 00 00 00               je 0x1bfb
    # nextln: 001beb: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001bef: 83 c0 01                        add eax, 1
    # nextln: 001bf2: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001bf6: e9 0b 00 00 00                  jmp 0x1c06
    # nextln: 001bfb: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001bff: 83 c0 01                        add eax, 1
    # nextln: 001c02: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001c06: 45 85 e4                        test r12d, r12d
    # nextln: 001c09: 0f 84 0a 00 00 00               je 0x1c19
    # nextln: 001c0f: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001c14: e9 0c 00 00 00                  jmp 0x1c25
    # nextln: 001c19: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001c23: ff d0                           call rax
    # nextln: 001c25: 85 c0                           test eax, eax
    # nextln: 001c27: 0f 84 10 00 00 00               je 0x1c3d
    # nextln: 001c2d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001c31: 83 c0 01                        add eax, 1
    # nextln: 001c34: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001c38: e9 0b 00 00 00                  jmp 0x1c48
    # nextln: 001c3d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001c41: 83 c0 01                        add eax, 1
    # nextln: 001c44: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001c48: 45 85 e4                        test r12d, r12d
    # nextln: 001c4b: 0f 84 0a 00 00 00               je 0x1c5b
    # nextln: 001c51: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001c56: e9 27 00 00 00                  jmp 0x1c82
    # nextln: 001c5b: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001c5f: 48 89 c1                        mov rcx, rax
    # nextln: 001c62: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001c66: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 001c6a: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001c6c: 48 63 ca                        movsxd rcx, edx
    # nextln: 001c6f: 48 3b cf                        cmp rcx, rdi
    # nextln: 001c72: 0f 8d 6a 24 00 00               jge 0x40e2
    # nextln: 001c78: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001c7c: 48 03 c1                        add rax, rcx
    # nextln: 001c7f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001c82: 85 c0                           test eax, eax
    # nextln: 001c84: 0f 84 10 00 00 00               je 0x1c9a
    # nextln: 001c8a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001c8e: 83 c0 01                        add eax, 1
    # nextln: 001c91: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001c95: e9 0b 00 00 00                  jmp 0x1ca5
    # nextln: 001c9a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001c9e: 83 c0 01                        add eax, 1
    # nextln: 001ca1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001ca5: 45 85 e4                        test r12d, r12d
    # nextln: 001ca8: 0f 84 0a 00 00 00               je 0x1cb8
    # nextln: 001cae: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001cb3: e9 28 00 00 00                  jmp 0x1ce0
    # nextln: 001cb8: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001cbd: 48 89 c1                        mov rcx, rax
    # nextln: 001cc0: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001cc4: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 001cc8: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001cca: 48 63 ca                        movsxd rcx, edx
    # nextln: 001ccd: 48 3b cf                        cmp rcx, rdi
    # nextln: 001cd0: 0f 8d fe 23 00 00               jge 0x40d4
    # nextln: 001cd6: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001cda: 48 03 c1                        add rax, rcx
    # nextln: 001cdd: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001ce0: 85 c0                           test eax, eax
    # nextln: 001ce2: 0f 84 10 00 00 00               je 0x1cf8
    # nextln: 001ce8: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001cec: 83 c0 01                        add eax, 1
    # nextln: 001cef: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001cf3: e9 0b 00 00 00                  jmp 0x1d03
    # nextln: 001cf8: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001cfc: 83 c0 01                        add eax, 1
    # nextln: 001cff: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001d03: 45 85 e4                        test r12d, r12d
    # nextln: 001d06: 0f 84 08 00 00 00               je 0x1d14
    # nextln: 001d0c: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001d0f: e9 03 00 00 00                  jmp 0x1d17
    # nextln: 001d14: 4c 89 e0                        mov rax, r12
    # nextln: 001d17: 85 c0                           test eax, eax
    # nextln: 001d19: 0f 84 10 00 00 00               je 0x1d2f
    # nextln: 001d1f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001d23: 83 c0 01                        add eax, 1
    # nextln: 001d26: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001d2a: e9 0b 00 00 00                  jmp 0x1d3a
    # nextln: 001d2f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001d33: 83 c0 01                        add eax, 1
    # nextln: 001d36: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001d3a: 45 85 e4                        test r12d, r12d
    # nextln: 001d3d: 0f 84 08 00 00 00               je 0x1d4b
    # nextln: 001d43: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001d46: e9 03 00 00 00                  jmp 0x1d4e
    # nextln: 001d4b: 4c 89 f0                        mov rax, r14
    # nextln: 001d4e: 85 c0                           test eax, eax
    # nextln: 001d50: 0f 84 10 00 00 00               je 0x1d66
    # nextln: 001d56: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001d5a: 83 c0 01                        add eax, 1
    # nextln: 001d5d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001d61: e9 0b 00 00 00                  jmp 0x1d71
    # nextln: 001d66: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001d6a: 83 c0 01                        add eax, 1
    # nextln: 001d6d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001d71: 45 85 e4                        test r12d, r12d
    # nextln: 001d74: 0f 84 08 00 00 00               je 0x1d82
    # nextln: 001d7a: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001d7d: e9 05 00 00 00                  jmp 0x1d87
    # nextln: 001d82: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001d87: 85 c0                           test eax, eax
    # nextln: 001d89: 0f 84 10 00 00 00               je 0x1d9f
    # nextln: 001d8f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001d93: 83 c0 01                        add eax, 1
    # nextln: 001d96: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001d9a: e9 0b 00 00 00                  jmp 0x1daa
    # nextln: 001d9f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001da3: 83 c0 01                        add eax, 1
    # nextln: 001da6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001daa: 45 85 e4                        test r12d, r12d
    # nextln: 001dad: 0f 84 08 00 00 00               je 0x1dbb
    # nextln: 001db3: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001db6: e9 03 00 00 00                  jmp 0x1dbe
    # nextln: 001dbb: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001dbe: 85 c0                           test eax, eax
    # nextln: 001dc0: 0f 84 10 00 00 00               je 0x1dd6
    # nextln: 001dc6: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001dca: 83 c0 01                        add eax, 1
    # nextln: 001dcd: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001dd1: e9 0b 00 00 00                  jmp 0x1de1
    # nextln: 001dd6: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001dda: 83 c0 01                        add eax, 1
    # nextln: 001ddd: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001de1: 45 85 e4                        test r12d, r12d
    # nextln: 001de4: 0f 84 08 00 00 00               je 0x1df2
    # nextln: 001dea: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001ded: e9 0c 00 00 00                  jmp 0x1dfe
    # nextln: 001df2: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001df7: 48 83 c0 20                     add rax, 0x20
    # nextln: 001dfb: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001dfe: 85 c0                           test eax, eax
    # nextln: 001e00: 0f 84 10 00 00 00               je 0x1e16
    # nextln: 001e06: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001e0a: 83 c0 01                        add eax, 1
    # nextln: 001e0d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001e11: e9 0b 00 00 00                  jmp 0x1e21
    # nextln: 001e16: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001e1a: 83 c0 01                        add eax, 1
    # nextln: 001e1d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001e21: 45 85 e4                        test r12d, r12d
    # nextln: 001e24: 0f 84 08 00 00 00               je 0x1e32
    # nextln: 001e2a: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001e2d: e9 0c 00 00 00                  jmp 0x1e3e
    # nextln: 001e32: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 001e3c: ff d0                           call rax
    # nextln: 001e3e: 85 c0                           test eax, eax
    # nextln: 001e40: 0f 84 10 00 00 00               je 0x1e56
    # nextln: 001e46: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001e4a: 83 c0 01                        add eax, 1
    # nextln: 001e4d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001e51: e9 0b 00 00 00                  jmp 0x1e61
    # nextln: 001e56: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001e5a: 83 c0 01                        add eax, 1
    # nextln: 001e5d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001e61: 45 85 e4                        test r12d, r12d
    # nextln: 001e64: 0f 84 08 00 00 00               je 0x1e72
    # nextln: 001e6a: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001e6d: e9 27 00 00 00                  jmp 0x1e99
    # nextln: 001e72: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 001e76: 48 89 c1                        mov rcx, rax
    # nextln: 001e79: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001e7d: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 001e81: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 001e83: 48 63 ca                        movsxd rcx, edx
    # nextln: 001e86: 48 3b cf                        cmp rcx, rdi
    # nextln: 001e89: 0f 8d 37 22 00 00               jge 0x40c6
    # nextln: 001e8f: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001e93: 48 03 c1                        add rax, rcx
    # nextln: 001e96: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001e99: 85 c0                           test eax, eax
    # nextln: 001e9b: 0f 84 10 00 00 00               je 0x1eb1
    # nextln: 001ea1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001ea5: 83 c0 01                        add eax, 1
    # nextln: 001ea8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001eac: e9 0b 00 00 00                  jmp 0x1ebc
    # nextln: 001eb1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001eb5: 83 c0 01                        add eax, 1
    # nextln: 001eb8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001ebc: 45 85 e4                        test r12d, r12d
    # nextln: 001ebf: 0f 84 08 00 00 00               je 0x1ecd
    # nextln: 001ec5: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001ec8: e9 28 00 00 00                  jmp 0x1ef5
    # nextln: 001ecd: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 001ed2: 48 89 c1                        mov rcx, rax
    # nextln: 001ed5: 48 83 c1 20                     add rcx, 0x20
    # nextln: 001ed9: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 001edd: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 001edf: 48 63 cf                        movsxd rcx, edi
    # nextln: 001ee2: 48 3b ca                        cmp rcx, rdx
    # nextln: 001ee5: 0f 8d cd 21 00 00               jge 0x40b8
    # nextln: 001eeb: 48 83 c1 28                     add rcx, 0x28
    # nextln: 001eef: 48 03 c1                        add rax, rcx
    # nextln: 001ef2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001ef5: 85 c0                           test eax, eax
    # nextln: 001ef7: 0f 84 10 00 00 00               je 0x1f0d
    # nextln: 001efd: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001f01: 83 c0 01                        add eax, 1
    # nextln: 001f04: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001f08: e9 0b 00 00 00                  jmp 0x1f18
    # nextln: 001f0d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001f11: 83 c0 01                        add eax, 1
    # nextln: 001f14: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001f18: 45 85 e4                        test r12d, r12d
    # nextln: 001f1b: 0f 84 11 00 00 00               je 0x1f32
    # nextln: 001f21: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001f26: 48 83 c0 20                     add rax, 0x20
    # nextln: 001f2a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001f2d: e9 03 00 00 00                  jmp 0x1f35
    # nextln: 001f32: 4c 89 e0                        mov rax, r12
    # nextln: 001f35: 85 c0                           test eax, eax
    # nextln: 001f37: 0f 84 10 00 00 00               je 0x1f4d
    # nextln: 001f3d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001f41: 83 c0 01                        add eax, 1
    # nextln: 001f44: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001f48: e9 0b 00 00 00                  jmp 0x1f58
    # nextln: 001f4d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001f51: 83 c0 01                        add eax, 1
    # nextln: 001f54: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001f58: 45 85 e4                        test r12d, r12d
    # nextln: 001f5b: 0f 84 11 00 00 00               je 0x1f72
    # nextln: 001f61: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001f66: 48 83 c0 20                     add rax, 0x20
    # nextln: 001f6a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001f6d: e9 03 00 00 00                  jmp 0x1f75
    # nextln: 001f72: 4c 89 f0                        mov rax, r14
    # nextln: 001f75: 85 c0                           test eax, eax
    # nextln: 001f77: 0f 84 10 00 00 00               je 0x1f8d
    # nextln: 001f7d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001f81: 83 c0 01                        add eax, 1
    # nextln: 001f84: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001f88: e9 0b 00 00 00                  jmp 0x1f98
    # nextln: 001f8d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001f91: 83 c0 01                        add eax, 1
    # nextln: 001f94: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001f98: 45 85 e4                        test r12d, r12d
    # nextln: 001f9b: 0f 84 11 00 00 00               je 0x1fb2
    # nextln: 001fa1: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001fa6: 48 83 c0 20                     add rax, 0x20
    # nextln: 001faa: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001fad: e9 05 00 00 00                  jmp 0x1fb7
    # nextln: 001fb2: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 001fb7: 85 c0                           test eax, eax
    # nextln: 001fb9: 0f 84 10 00 00 00               je 0x1fcf
    # nextln: 001fbf: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 001fc3: 83 c0 01                        add eax, 1
    # nextln: 001fc6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 001fca: e9 0b 00 00 00                  jmp 0x1fda
    # nextln: 001fcf: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 001fd3: 83 c0 01                        add eax, 1
    # nextln: 001fd6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 001fda: 45 85 e4                        test r12d, r12d
    # nextln: 001fdd: 0f 84 11 00 00 00               je 0x1ff4
    # nextln: 001fe3: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001fe8: 48 83 c0 20                     add rax, 0x20
    # nextln: 001fec: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 001fef: e9 03 00 00 00                  jmp 0x1ff7
    # nextln: 001ff4: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 001ff7: 85 c0                           test eax, eax
    # nextln: 001ff9: 0f 84 10 00 00 00               je 0x200f
    # nextln: 001fff: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002003: 83 c0 01                        add eax, 1
    # nextln: 002006: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00200a: e9 0b 00 00 00                  jmp 0x201a
    # nextln: 00200f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002013: 83 c0 01                        add eax, 1
    # nextln: 002016: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00201a: 45 85 e4                        test r12d, r12d
    # nextln: 00201d: 0f 84 11 00 00 00               je 0x2034
    # nextln: 002023: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002028: 48 83 c0 20                     add rax, 0x20
    # nextln: 00202c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00202f: e9 0c 00 00 00                  jmp 0x2040
    # nextln: 002034: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002039: 48 83 c0 20                     add rax, 0x20
    # nextln: 00203d: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002040: 85 c0                           test eax, eax
    # nextln: 002042: 0f 84 10 00 00 00               je 0x2058
    # nextln: 002048: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00204c: 83 c0 01                        add eax, 1
    # nextln: 00204f: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002053: e9 0b 00 00 00                  jmp 0x2063
    # nextln: 002058: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00205c: 83 c0 01                        add eax, 1
    # nextln: 00205f: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002063: 45 85 e4                        test r12d, r12d
    # nextln: 002066: 0f 84 11 00 00 00               je 0x207d
    # nextln: 00206c: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002071: 48 83 c0 20                     add rax, 0x20
    # nextln: 002075: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002078: e9 0c 00 00 00                  jmp 0x2089
    # nextln: 00207d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002087: ff d0                           call rax
    # nextln: 002089: 85 c0                           test eax, eax
    # nextln: 00208b: 0f 84 10 00 00 00               je 0x20a1
    # nextln: 002091: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002095: 83 c0 01                        add eax, 1
    # nextln: 002098: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00209c: e9 0b 00 00 00                  jmp 0x20ac
    # nextln: 0020a1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0020a5: 83 c0 01                        add eax, 1
    # nextln: 0020a8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0020ac: 45 85 e4                        test r12d, r12d
    # nextln: 0020af: 0f 84 11 00 00 00               je 0x20c6
    # nextln: 0020b5: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0020ba: 48 83 c0 20                     add rax, 0x20
    # nextln: 0020be: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0020c1: e9 27 00 00 00                  jmp 0x20ed
    # nextln: 0020c6: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0020ca: 48 89 c1                        mov rcx, rax
    # nextln: 0020cd: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0020d1: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0020d5: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0020d7: 48 63 ca                        movsxd rcx, edx
    # nextln: 0020da: 48 3b cf                        cmp rcx, rdi
    # nextln: 0020dd: 0f 8d c7 1f 00 00               jge 0x40aa
    # nextln: 0020e3: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0020e7: 48 03 c1                        add rax, rcx
    # nextln: 0020ea: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0020ed: 85 c0                           test eax, eax
    # nextln: 0020ef: 0f 84 10 00 00 00               je 0x2105
    # nextln: 0020f5: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0020f9: 83 c0 01                        add eax, 1
    # nextln: 0020fc: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002100: e9 0b 00 00 00                  jmp 0x2110
    # nextln: 002105: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002109: 83 c0 01                        add eax, 1
    # nextln: 00210c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002110: 45 85 e4                        test r12d, r12d
    # nextln: 002113: 0f 84 11 00 00 00               je 0x212a
    # nextln: 002119: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00211e: 48 83 c0 20                     add rax, 0x20
    # nextln: 002122: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002125: e9 28 00 00 00                  jmp 0x2152
    # nextln: 00212a: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 00212f: 48 89 c1                        mov rcx, rax
    # nextln: 002132: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002136: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 00213a: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00213c: 48 63 ca                        movsxd rcx, edx
    # nextln: 00213f: 48 3b cf                        cmp rcx, rdi
    # nextln: 002142: 0f 8d 54 1f 00 00               jge 0x409c
    # nextln: 002148: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00214c: 48 03 c1                        add rax, rcx
    # nextln: 00214f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002152: 85 c0                           test eax, eax
    # nextln: 002154: 0f 84 10 00 00 00               je 0x216a
    # nextln: 00215a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00215e: 83 c0 01                        add eax, 1
    # nextln: 002161: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002165: e9 0b 00 00 00                  jmp 0x2175
    # nextln: 00216a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00216e: 83 c0 01                        add eax, 1
    # nextln: 002171: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002175: 45 85 e4                        test r12d, r12d
    # nextln: 002178: 0f 84 11 00 00 00               je 0x218f
    # nextln: 00217e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002188: ff d0                           call rax
    # nextln: 00218a: e9 03 00 00 00                  jmp 0x2192
    # nextln: 00218f: 4c 89 e0                        mov rax, r12
    # nextln: 002192: 85 c0                           test eax, eax
    # nextln: 002194: 0f 84 10 00 00 00               je 0x21aa
    # nextln: 00219a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00219e: 83 c0 01                        add eax, 1
    # nextln: 0021a1: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0021a5: e9 0b 00 00 00                  jmp 0x21b5
    # nextln: 0021aa: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0021ae: 83 c0 01                        add eax, 1
    # nextln: 0021b1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0021b5: 45 85 e4                        test r12d, r12d
    # nextln: 0021b8: 0f 84 11 00 00 00               je 0x21cf
    # nextln: 0021be: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0021c8: ff d0                           call rax
    # nextln: 0021ca: e9 03 00 00 00                  jmp 0x21d2
    # nextln: 0021cf: 4c 89 f0                        mov rax, r14
    # nextln: 0021d2: 85 c0                           test eax, eax
    # nextln: 0021d4: 0f 84 10 00 00 00               je 0x21ea
    # nextln: 0021da: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0021de: 83 c0 01                        add eax, 1
    # nextln: 0021e1: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0021e5: e9 0b 00 00 00                  jmp 0x21f5
    # nextln: 0021ea: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0021ee: 83 c0 01                        add eax, 1
    # nextln: 0021f1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0021f5: 45 85 e4                        test r12d, r12d
    # nextln: 0021f8: 0f 84 11 00 00 00               je 0x220f
    # nextln: 0021fe: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002208: ff d0                           call rax
    # nextln: 00220a: e9 05 00 00 00                  jmp 0x2214
    # nextln: 00220f: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002214: 85 c0                           test eax, eax
    # nextln: 002216: 0f 84 10 00 00 00               je 0x222c
    # nextln: 00221c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002220: 83 c0 01                        add eax, 1
    # nextln: 002223: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002227: e9 0b 00 00 00                  jmp 0x2237
    # nextln: 00222c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002230: 83 c0 01                        add eax, 1
    # nextln: 002233: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002237: 45 85 e4                        test r12d, r12d
    # nextln: 00223a: 0f 84 11 00 00 00               je 0x2251
    # nextln: 002240: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00224a: ff d0                           call rax
    # nextln: 00224c: e9 03 00 00 00                  jmp 0x2254
    # nextln: 002251: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 002254: 85 c0                           test eax, eax
    # nextln: 002256: 0f 84 10 00 00 00               je 0x226c
    # nextln: 00225c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002260: 83 c0 01                        add eax, 1
    # nextln: 002263: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002267: e9 0b 00 00 00                  jmp 0x2277
    # nextln: 00226c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002270: 83 c0 01                        add eax, 1
    # nextln: 002273: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002277: 45 85 e4                        test r12d, r12d
    # nextln: 00227a: 0f 84 11 00 00 00               je 0x2291
    # nextln: 002280: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00228a: ff d0                           call rax
    # nextln: 00228c: e9 0c 00 00 00                  jmp 0x229d
    # nextln: 002291: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002296: 48 83 c0 20                     add rax, 0x20
    # nextln: 00229a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00229d: 85 c0                           test eax, eax
    # nextln: 00229f: 0f 84 10 00 00 00               je 0x22b5
    # nextln: 0022a5: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0022a9: 83 c0 01                        add eax, 1
    # nextln: 0022ac: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0022b0: e9 0b 00 00 00                  jmp 0x22c0
    # nextln: 0022b5: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0022b9: 83 c0 01                        add eax, 1
    # nextln: 0022bc: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0022c0: 45 85 e4                        test r12d, r12d
    # nextln: 0022c3: 0f 84 11 00 00 00               je 0x22da
    # nextln: 0022c9: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0022d3: ff d0                           call rax
    # nextln: 0022d5: e9 0c 00 00 00                  jmp 0x22e6
    # nextln: 0022da: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0022e4: ff d0                           call rax
    # nextln: 0022e6: 85 c0                           test eax, eax
    # nextln: 0022e8: 0f 84 10 00 00 00               je 0x22fe
    # nextln: 0022ee: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0022f2: 83 c0 01                        add eax, 1
    # nextln: 0022f5: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0022f9: e9 0b 00 00 00                  jmp 0x2309
    # nextln: 0022fe: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002302: 83 c0 01                        add eax, 1
    # nextln: 002305: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002309: 45 85 e4                        test r12d, r12d
    # nextln: 00230c: 0f 84 11 00 00 00               je 0x2323
    # nextln: 002312: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00231c: ff d0                           call rax
    # nextln: 00231e: e9 27 00 00 00                  jmp 0x234a
    # nextln: 002323: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002327: 48 89 c1                        mov rcx, rax
    # nextln: 00232a: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00232e: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002332: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002334: 48 63 ca                        movsxd rcx, edx
    # nextln: 002337: 48 3b cf                        cmp rcx, rdi
    # nextln: 00233a: 0f 8d 4e 1d 00 00               jge 0x408e
    # nextln: 002340: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002344: 48 03 c1                        add rax, rcx
    # nextln: 002347: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00234a: 85 c0                           test eax, eax
    # nextln: 00234c: 0f 84 10 00 00 00               je 0x2362
    # nextln: 002352: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002356: 83 c0 01                        add eax, 1
    # nextln: 002359: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00235d: e9 0b 00 00 00                  jmp 0x236d
    # nextln: 002362: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002366: 83 c0 01                        add eax, 1
    # nextln: 002369: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00236d: 45 85 e4                        test r12d, r12d
    # nextln: 002370: 0f 84 11 00 00 00               je 0x2387
    # nextln: 002376: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002380: ff d0                           call rax
    # nextln: 002382: e9 28 00 00 00                  jmp 0x23af
    # nextln: 002387: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 00238c: 48 89 c1                        mov rcx, rax
    # nextln: 00238f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002393: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002397: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002399: 48 63 ca                        movsxd rcx, edx
    # nextln: 00239c: 48 3b cf                        cmp rcx, rdi
    # nextln: 00239f: 0f 8d db 1c 00 00               jge 0x4080
    # nextln: 0023a5: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0023a9: 48 03 c1                        add rax, rcx
    # nextln: 0023ac: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0023af: 85 c0                           test eax, eax
    # nextln: 0023b1: 0f 84 10 00 00 00               je 0x23c7
    # nextln: 0023b7: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0023bb: 83 c0 01                        add eax, 1
    # nextln: 0023be: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0023c2: e9 0b 00 00 00                  jmp 0x23d2
    # nextln: 0023c7: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0023cb: 83 c0 01                        add eax, 1
    # nextln: 0023ce: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0023d2: 45 85 e4                        test r12d, r12d
    # nextln: 0023d5: 0f 84 3a 00 00 00               je 0x2415
    # nextln: 0023db: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0023df: 48 89 c1                        mov rcx, rax
    # nextln: 0023e2: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0023e6: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 0023ea: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0023ec: 48 63 cf                        movsxd rcx, edi
    # nextln: 0023ef: 48 3b ca                        cmp rcx, rdx
    # nextln: 0023f2: 0f 8d 0f 00 00 00               jge 0x2407
    # nextln: 0023f8: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0023fc: 48 03 c1                        add rax, rcx
    # nextln: 0023ff: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002402: e9 11 00 00 00                  jmp 0x2418
    # nextln: 002407: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002411: ff d0                           call rax
    # nextln: 002413: 0f 0b                           ud2
    # nextln: 002415: 4c 89 e0                        mov rax, r12
    # nextln: 002418: 85 c0                           test eax, eax
    # nextln: 00241a: 0f 84 10 00 00 00               je 0x2430
    # nextln: 002420: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002424: 83 c0 01                        add eax, 1
    # nextln: 002427: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00242b: e9 0b 00 00 00                  jmp 0x243b
    # nextln: 002430: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002434: 83 c0 01                        add eax, 1
    # nextln: 002437: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00243b: 45 85 e4                        test r12d, r12d
    # nextln: 00243e: 0f 84 3a 00 00 00               je 0x247e
    # nextln: 002444: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002448: 48 89 c1                        mov rcx, rax
    # nextln: 00244b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00244f: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002453: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002455: 48 63 ca                        movsxd rcx, edx
    # nextln: 002458: 48 3b cf                        cmp rcx, rdi
    # nextln: 00245b: 0f 8d 0f 00 00 00               jge 0x2470
    # nextln: 002461: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002465: 48 03 c1                        add rax, rcx
    # nextln: 002468: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00246b: e9 11 00 00 00                  jmp 0x2481
    # nextln: 002470: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00247a: ff d0                           call rax
    # nextln: 00247c: 0f 0b                           ud2
    # nextln: 00247e: 4c 89 f0                        mov rax, r14
    # nextln: 002481: 85 c0                           test eax, eax
    # nextln: 002483: 0f 84 10 00 00 00               je 0x2499
    # nextln: 002489: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00248d: 83 c0 01                        add eax, 1
    # nextln: 002490: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002494: e9 0b 00 00 00                  jmp 0x24a4
    # nextln: 002499: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00249d: 83 c0 01                        add eax, 1
    # nextln: 0024a0: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0024a4: 45 85 e4                        test r12d, r12d
    # nextln: 0024a7: 0f 84 3a 00 00 00               je 0x24e7
    # nextln: 0024ad: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0024b1: 48 89 c1                        mov rcx, rax
    # nextln: 0024b4: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0024b8: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 0024bc: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0024be: 48 63 cf                        movsxd rcx, edi
    # nextln: 0024c1: 48 3b ca                        cmp rcx, rdx
    # nextln: 0024c4: 0f 8d 0f 00 00 00               jge 0x24d9
    # nextln: 0024ca: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0024ce: 48 03 c1                        add rax, rcx
    # nextln: 0024d1: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0024d4: e9 13 00 00 00                  jmp 0x24ec
    # nextln: 0024d9: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0024e3: ff d0                           call rax
    # nextln: 0024e5: 0f 0b                           ud2
    # nextln: 0024e7: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0024ec: 85 c0                           test eax, eax
    # nextln: 0024ee: 0f 84 10 00 00 00               je 0x2504
    # nextln: 0024f4: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0024f8: 83 c0 01                        add eax, 1
    # nextln: 0024fb: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0024ff: e9 0b 00 00 00                  jmp 0x250f
    # nextln: 002504: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002508: 83 c0 01                        add eax, 1
    # nextln: 00250b: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00250f: 45 85 e4                        test r12d, r12d
    # nextln: 002512: 0f 84 3a 00 00 00               je 0x2552
    # nextln: 002518: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 00251c: 48 89 c1                        mov rcx, rax
    # nextln: 00251f: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002523: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002527: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002529: 48 63 ca                        movsxd rcx, edx
    # nextln: 00252c: 48 3b cf                        cmp rcx, rdi
    # nextln: 00252f: 0f 8d 0f 00 00 00               jge 0x2544
    # nextln: 002535: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002539: 48 03 c1                        add rax, rcx
    # nextln: 00253c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00253f: e9 11 00 00 00                  jmp 0x2555
    # nextln: 002544: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00254e: ff d0                           call rax
    # nextln: 002550: 0f 0b                           ud2
    # nextln: 002552: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 002555: 85 c0                           test eax, eax
    # nextln: 002557: 0f 84 10 00 00 00               je 0x256d
    # nextln: 00255d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002561: 83 c0 01                        add eax, 1
    # nextln: 002564: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002568: e9 0b 00 00 00                  jmp 0x2578
    # nextln: 00256d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002571: 83 c0 01                        add eax, 1
    # nextln: 002574: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002578: 45 85 e4                        test r12d, r12d
    # nextln: 00257b: 0f 84 3a 00 00 00               je 0x25bb
    # nextln: 002581: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002585: 48 89 c1                        mov rcx, rax
    # nextln: 002588: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00258c: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 002590: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002592: 48 63 cf                        movsxd rcx, edi
    # nextln: 002595: 48 3b ca                        cmp rcx, rdx
    # nextln: 002598: 0f 8d 0f 00 00 00               jge 0x25ad
    # nextln: 00259e: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0025a2: 48 03 c1                        add rax, rcx
    # nextln: 0025a5: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0025a8: e9 1a 00 00 00                  jmp 0x25c7
    # nextln: 0025ad: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0025b7: ff d0                           call rax
    # nextln: 0025b9: 0f 0b                           ud2
    # nextln: 0025bb: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0025c0: 48 83 c0 20                     add rax, 0x20
    # nextln: 0025c4: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0025c7: 85 c0                           test eax, eax
    # nextln: 0025c9: 0f 84 10 00 00 00               je 0x25df
    # nextln: 0025cf: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0025d3: 83 c0 01                        add eax, 1
    # nextln: 0025d6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0025da: e9 0b 00 00 00                  jmp 0x25ea
    # nextln: 0025df: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0025e3: 83 c0 01                        add eax, 1
    # nextln: 0025e6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0025ea: 45 85 e4                        test r12d, r12d
    # nextln: 0025ed: 0f 84 3a 00 00 00               je 0x262d
    # nextln: 0025f3: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0025f7: 48 89 c1                        mov rcx, rax
    # nextln: 0025fa: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0025fe: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002602: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002604: 48 63 ca                        movsxd rcx, edx
    # nextln: 002607: 48 3b cf                        cmp rcx, rdi
    # nextln: 00260a: 0f 8d 0f 00 00 00               jge 0x261f
    # nextln: 002610: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002614: 48 03 c1                        add rax, rcx
    # nextln: 002617: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00261a: e9 1a 00 00 00                  jmp 0x2639
    # nextln: 00261f: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002629: ff d0                           call rax
    # nextln: 00262b: 0f 0b                           ud2
    # nextln: 00262d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002637: ff d0                           call rax
    # nextln: 002639: 85 c0                           test eax, eax
    # nextln: 00263b: 0f 84 10 00 00 00               je 0x2651
    # nextln: 002641: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002645: 83 c0 01                        add eax, 1
    # nextln: 002648: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00264c: e9 0b 00 00 00                  jmp 0x265c
    # nextln: 002651: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002655: 83 c0 01                        add eax, 1
    # nextln: 002658: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00265c: 45 85 e4                        test r12d, r12d
    # nextln: 00265f: 0f 84 3a 00 00 00               je 0x269f
    # nextln: 002665: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002669: 48 89 c1                        mov rcx, rax
    # nextln: 00266c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002670: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002674: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002676: 48 63 ca                        movsxd rcx, edx
    # nextln: 002679: 48 3b cf                        cmp rcx, rdi
    # nextln: 00267c: 0f 8d 0f 00 00 00               jge 0x2691
    # nextln: 002682: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002686: 48 03 c1                        add rax, rcx
    # nextln: 002689: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00268c: e9 35 00 00 00                  jmp 0x26c6
    # nextln: 002691: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00269b: ff d0                           call rax
    # nextln: 00269d: 0f 0b                           ud2
    # nextln: 00269f: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0026a3: 48 89 c1                        mov rcx, rax
    # nextln: 0026a6: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0026aa: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0026ae: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0026b0: 48 63 ca                        movsxd rcx, edx
    # nextln: 0026b3: 48 3b cf                        cmp rcx, rdi
    # nextln: 0026b6: 0f 8d b6 19 00 00               jge 0x4072
    # nextln: 0026bc: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0026c0: 48 03 c1                        add rax, rcx
    # nextln: 0026c3: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0026c6: 85 c0                           test eax, eax
    # nextln: 0026c8: 0f 84 10 00 00 00               je 0x26de
    # nextln: 0026ce: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0026d2: 83 c0 01                        add eax, 1
    # nextln: 0026d5: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0026d9: e9 0b 00 00 00                  jmp 0x26e9
    # nextln: 0026de: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0026e2: 83 c0 01                        add eax, 1
    # nextln: 0026e5: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0026e9: 45 85 e4                        test r12d, r12d
    # nextln: 0026ec: 0f 84 3a 00 00 00               je 0x272c
    # nextln: 0026f2: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0026f6: 48 89 c1                        mov rcx, rax
    # nextln: 0026f9: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0026fd: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 002701: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002703: 48 63 cf                        movsxd rcx, edi
    # nextln: 002706: 48 3b ca                        cmp rcx, rdx
    # nextln: 002709: 0f 8d 0f 00 00 00               jge 0x271e
    # nextln: 00270f: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002713: 48 03 c1                        add rax, rcx
    # nextln: 002716: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002719: e9 36 00 00 00                  jmp 0x2754
    # nextln: 00271e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002728: ff d0                           call rax
    # nextln: 00272a: 0f 0b                           ud2
    # nextln: 00272c: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002731: 48 89 c1                        mov rcx, rax
    # nextln: 002734: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002738: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 00273c: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00273e: 48 63 ca                        movsxd rcx, edx
    # nextln: 002741: 48 3b cf                        cmp rcx, rdi
    # nextln: 002744: 0f 8d 1a 19 00 00               jge 0x4064
    # nextln: 00274a: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00274e: 48 03 c1                        add rax, rcx
    # nextln: 002751: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002754: 85 c0                           test eax, eax
    # nextln: 002756: 0f 84 10 00 00 00               je 0x276c
    # nextln: 00275c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002760: 83 c0 01                        add eax, 1
    # nextln: 002763: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002767: e9 0b 00 00 00                  jmp 0x2777
    # nextln: 00276c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002770: 83 c0 01                        add eax, 1
    # nextln: 002773: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002777: 45 85 e4                        test r12d, r12d
    # nextln: 00277a: 0f 84 3b 00 00 00               je 0x27bb
    # nextln: 002780: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002785: 48 89 c1                        mov rcx, rax
    # nextln: 002788: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00278c: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 002790: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002792: 48 63 cf                        movsxd rcx, edi
    # nextln: 002795: 48 3b ca                        cmp rcx, rdx
    # nextln: 002798: 0f 8d 0f 00 00 00               jge 0x27ad
    # nextln: 00279e: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0027a2: 48 03 c1                        add rax, rcx
    # nextln: 0027a5: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0027a8: e9 11 00 00 00                  jmp 0x27be
    # nextln: 0027ad: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0027b7: ff d0                           call rax
    # nextln: 0027b9: 0f 0b                           ud2
    # nextln: 0027bb: 4c 89 e0                        mov rax, r12
    # nextln: 0027be: 85 c0                           test eax, eax
    # nextln: 0027c0: 0f 84 10 00 00 00               je 0x27d6
    # nextln: 0027c6: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0027ca: 83 c0 01                        add eax, 1
    # nextln: 0027cd: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0027d1: e9 0b 00 00 00                  jmp 0x27e1
    # nextln: 0027d6: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0027da: 83 c0 01                        add eax, 1
    # nextln: 0027dd: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0027e1: 45 85 e4                        test r12d, r12d
    # nextln: 0027e4: 0f 84 3b 00 00 00               je 0x2825
    # nextln: 0027ea: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0027ef: 48 89 c1                        mov rcx, rax
    # nextln: 0027f2: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0027f6: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0027fa: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0027fc: 48 63 ca                        movsxd rcx, edx
    # nextln: 0027ff: 48 3b cf                        cmp rcx, rdi
    # nextln: 002802: 0f 8d 0f 00 00 00               jge 0x2817
    # nextln: 002808: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00280c: 48 03 c1                        add rax, rcx
    # nextln: 00280f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002812: e9 11 00 00 00                  jmp 0x2828
    # nextln: 002817: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002821: ff d0                           call rax
    # nextln: 002823: 0f 0b                           ud2
    # nextln: 002825: 4c 89 f0                        mov rax, r14
    # nextln: 002828: 85 c0                           test eax, eax
    # nextln: 00282a: 0f 84 10 00 00 00               je 0x2840
    # nextln: 002830: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002834: 83 c0 01                        add eax, 1
    # nextln: 002837: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00283b: e9 0b 00 00 00                  jmp 0x284b
    # nextln: 002840: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002844: 83 c0 01                        add eax, 1
    # nextln: 002847: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00284b: 45 85 e4                        test r12d, r12d
    # nextln: 00284e: 0f 84 3b 00 00 00               je 0x288f
    # nextln: 002854: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002859: 48 89 c1                        mov rcx, rax
    # nextln: 00285c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002860: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002864: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002866: 48 63 ca                        movsxd rcx, edx
    # nextln: 002869: 48 3b cf                        cmp rcx, rdi
    # nextln: 00286c: 0f 8d 0f 00 00 00               jge 0x2881
    # nextln: 002872: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002876: 48 03 c1                        add rax, rcx
    # nextln: 002879: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00287c: e9 13 00 00 00                  jmp 0x2894
    # nextln: 002881: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00288b: ff d0                           call rax
    # nextln: 00288d: 0f 0b                           ud2
    # nextln: 00288f: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002894: 85 c0                           test eax, eax
    # nextln: 002896: 0f 84 10 00 00 00               je 0x28ac
    # nextln: 00289c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0028a0: 83 c0 01                        add eax, 1
    # nextln: 0028a3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0028a7: e9 0b 00 00 00                  jmp 0x28b7
    # nextln: 0028ac: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0028b0: 83 c0 01                        add eax, 1
    # nextln: 0028b3: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0028b7: 45 85 e4                        test r12d, r12d
    # nextln: 0028ba: 0f 84 3b 00 00 00               je 0x28fb
    # nextln: 0028c0: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0028c5: 48 89 c1                        mov rcx, rax
    # nextln: 0028c8: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0028cc: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 0028d0: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0028d2: 48 63 cf                        movsxd rcx, edi
    # nextln: 0028d5: 48 3b ca                        cmp rcx, rdx
    # nextln: 0028d8: 0f 8d 0f 00 00 00               jge 0x28ed
    # nextln: 0028de: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0028e2: 48 03 c1                        add rax, rcx
    # nextln: 0028e5: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0028e8: e9 11 00 00 00                  jmp 0x28fe
    # nextln: 0028ed: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0028f7: ff d0                           call rax
    # nextln: 0028f9: 0f 0b                           ud2
    # nextln: 0028fb: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0028fe: 85 c0                           test eax, eax
    # nextln: 002900: 0f 84 10 00 00 00               je 0x2916
    # nextln: 002906: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00290a: 83 c0 01                        add eax, 1
    # nextln: 00290d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002911: e9 0b 00 00 00                  jmp 0x2921
    # nextln: 002916: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00291a: 83 c0 01                        add eax, 1
    # nextln: 00291d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002921: 45 85 e4                        test r12d, r12d
    # nextln: 002924: 0f 84 3b 00 00 00               je 0x2965
    # nextln: 00292a: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 00292f: 48 89 c1                        mov rcx, rax
    # nextln: 002932: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002936: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 00293a: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00293c: 48 63 ca                        movsxd rcx, edx
    # nextln: 00293f: 48 3b cf                        cmp rcx, rdi
    # nextln: 002942: 0f 8d 0f 00 00 00               jge 0x2957
    # nextln: 002948: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00294c: 48 03 c1                        add rax, rcx
    # nextln: 00294f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002952: e9 1a 00 00 00                  jmp 0x2971
    # nextln: 002957: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002961: ff d0                           call rax
    # nextln: 002963: 0f 0b                           ud2
    # nextln: 002965: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00296a: 48 83 c0 20                     add rax, 0x20
    # nextln: 00296e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002971: 85 c0                           test eax, eax
    # nextln: 002973: 0f 84 10 00 00 00               je 0x2989
    # nextln: 002979: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00297d: 83 c0 01                        add eax, 1
    # nextln: 002980: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002984: e9 0b 00 00 00                  jmp 0x2994
    # nextln: 002989: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00298d: 83 c0 01                        add eax, 1
    # nextln: 002990: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002994: 45 85 e4                        test r12d, r12d
    # nextln: 002997: 0f 84 3b 00 00 00               je 0x29d8
    # nextln: 00299d: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0029a2: 48 89 c1                        mov rcx, rax
    # nextln: 0029a5: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0029a9: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0029ad: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0029af: 48 63 ca                        movsxd rcx, edx
    # nextln: 0029b2: 48 3b cf                        cmp rcx, rdi
    # nextln: 0029b5: 0f 8d 0f 00 00 00               jge 0x29ca
    # nextln: 0029bb: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0029bf: 48 03 c1                        add rax, rcx
    # nextln: 0029c2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0029c5: e9 1a 00 00 00                  jmp 0x29e4
    # nextln: 0029ca: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0029d4: ff d0                           call rax
    # nextln: 0029d6: 0f 0b                           ud2
    # nextln: 0029d8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0029e2: ff d0                           call rax
    # nextln: 0029e4: 85 c0                           test eax, eax
    # nextln: 0029e6: 0f 84 10 00 00 00               je 0x29fc
    # nextln: 0029ec: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0029f0: 83 c0 01                        add eax, 1
    # nextln: 0029f3: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0029f7: e9 0b 00 00 00                  jmp 0x2a07
    # nextln: 0029fc: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002a00: 83 c0 01                        add eax, 1
    # nextln: 002a03: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002a07: 45 85 e4                        test r12d, r12d
    # nextln: 002a0a: 0f 84 3b 00 00 00               je 0x2a4b
    # nextln: 002a10: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002a15: 48 89 c1                        mov rcx, rax
    # nextln: 002a18: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002a1c: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002a20: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002a22: 48 63 ca                        movsxd rcx, edx
    # nextln: 002a25: 48 3b cf                        cmp rcx, rdi
    # nextln: 002a28: 0f 8d 0f 00 00 00               jge 0x2a3d
    # nextln: 002a2e: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002a32: 48 03 c1                        add rax, rcx
    # nextln: 002a35: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002a38: e9 35 00 00 00                  jmp 0x2a72
    # nextln: 002a3d: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002a47: ff d0                           call rax
    # nextln: 002a49: 0f 0b                           ud2
    # nextln: 002a4b: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002a4f: 48 89 c1                        mov rcx, rax
    # nextln: 002a52: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002a56: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 002a5a: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002a5c: 48 63 cf                        movsxd rcx, edi
    # nextln: 002a5f: 48 3b ca                        cmp rcx, rdx
    # nextln: 002a62: 0f 8d ee 15 00 00               jge 0x4056
    # nextln: 002a68: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002a6c: 48 03 c1                        add rax, rcx
    # nextln: 002a6f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002a72: 85 c0                           test eax, eax
    # nextln: 002a74: 0f 84 10 00 00 00               je 0x2a8a
    # nextln: 002a7a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002a7e: 83 c0 01                        add eax, 1
    # nextln: 002a81: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002a85: e9 0b 00 00 00                  jmp 0x2a95
    # nextln: 002a8a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002a8e: 83 c0 01                        add eax, 1
    # nextln: 002a91: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002a95: 45 85 e4                        test r12d, r12d
    # nextln: 002a98: 0f 84 3b 00 00 00               je 0x2ad9
    # nextln: 002a9e: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002aa3: 48 89 c1                        mov rcx, rax
    # nextln: 002aa6: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002aaa: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 002aae: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002ab0: 48 63 cf                        movsxd rcx, edi
    # nextln: 002ab3: 48 3b ca                        cmp rcx, rdx
    # nextln: 002ab6: 0f 8d 0f 00 00 00               jge 0x2acb
    # nextln: 002abc: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002ac0: 48 03 c1                        add rax, rcx
    # nextln: 002ac3: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002ac6: e9 36 00 00 00                  jmp 0x2b01
    # nextln: 002acb: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 002ad5: ff d0                           call rax
    # nextln: 002ad7: 0f 0b                           ud2
    # nextln: 002ad9: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002ade: 48 89 c1                        mov rcx, rax
    # nextln: 002ae1: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002ae5: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002ae9: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002aeb: 48 63 ca                        movsxd rcx, edx
    # nextln: 002aee: 48 3b cf                        cmp rcx, rdi
    # nextln: 002af1: 0f 8d 51 15 00 00               jge 0x4048
    # nextln: 002af7: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002afb: 48 03 c1                        add rax, rcx
    # nextln: 002afe: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002b01: 85 c0                           test eax, eax
    # nextln: 002b03: 0f 84 10 00 00 00               je 0x2b19
    # nextln: 002b09: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002b0d: 83 c0 01                        add eax, 1
    # nextln: 002b10: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002b14: e9 0b 00 00 00                  jmp 0x2b24
    # nextln: 002b19: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002b1d: 83 c0 01                        add eax, 1
    # nextln: 002b20: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002b24: 45 85 f6                        test r14d, r14d
    # nextln: 002b27: 45 85 e4                        test r12d, r12d
    # nextln: 002b2a: 0f 84 10 00 00 00               je 0x2b40
    # nextln: 002b30: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002b34: 83 c0 01                        add eax, 1
    # nextln: 002b37: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002b3b: e9 0b 00 00 00                  jmp 0x2b4b
    # nextln: 002b40: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002b44: 83 c0 01                        add eax, 1
    # nextln: 002b47: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002b4b: 45 85 f6                        test r14d, r14d
    # nextln: 002b4e: 0f 84 10 00 00 00               je 0x2b64
    # nextln: 002b54: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002b58: 83 c0 01                        add eax, 1
    # nextln: 002b5b: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002b5f: e9 0b 00 00 00                  jmp 0x2b6f
    # nextln: 002b64: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002b68: 83 c0 01                        add eax, 1
    # nextln: 002b6b: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002b6f: 45 85 f6                        test r14d, r14d
    # nextln: 002b72: 0f 84 08 00 00 00               je 0x2b80
    # nextln: 002b78: 4c 89 e0                        mov rax, r12
    # nextln: 002b7b: e9 05 00 00 00                  jmp 0x2b85
    # nextln: 002b80: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002b85: 85 c0                           test eax, eax
    # nextln: 002b87: 0f 84 10 00 00 00               je 0x2b9d
    # nextln: 002b8d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002b91: 83 c0 01                        add eax, 1
    # nextln: 002b94: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002b98: e9 0b 00 00 00                  jmp 0x2ba8
    # nextln: 002b9d: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002ba1: 83 c0 01                        add eax, 1
    # nextln: 002ba4: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002ba8: 45 85 f6                        test r14d, r14d
    # nextln: 002bab: 0f 84 08 00 00 00               je 0x2bb9
    # nextln: 002bb1: 4c 89 e0                        mov rax, r12
    # nextln: 002bb4: e9 03 00 00 00                  jmp 0x2bbc
    # nextln: 002bb9: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 002bbc: 85 c0                           test eax, eax
    # nextln: 002bbe: 0f 84 10 00 00 00               je 0x2bd4
    # nextln: 002bc4: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002bc8: 83 c0 01                        add eax, 1
    # nextln: 002bcb: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002bcf: e9 0b 00 00 00                  jmp 0x2bdf
    # nextln: 002bd4: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002bd8: 83 c0 01                        add eax, 1
    # nextln: 002bdb: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002bdf: 45 85 f6                        test r14d, r14d
    # nextln: 002be2: 0f 84 08 00 00 00               je 0x2bf0
    # nextln: 002be8: 4c 89 e0                        mov rax, r12
    # nextln: 002beb: e9 0c 00 00 00                  jmp 0x2bfc
    # nextln: 002bf0: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002bf5: 48 83 c0 20                     add rax, 0x20
    # nextln: 002bf9: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002bfc: 85 c0                           test eax, eax
    # nextln: 002bfe: 0f 84 10 00 00 00               je 0x2c14
    # nextln: 002c04: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002c08: 83 c0 01                        add eax, 1
    # nextln: 002c0b: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002c0f: e9 0b 00 00 00                  jmp 0x2c1f
    # nextln: 002c14: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002c18: 83 c0 01                        add eax, 1
    # nextln: 002c1b: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002c1f: 45 85 f6                        test r14d, r14d
    # nextln: 002c22: 0f 84 08 00 00 00               je 0x2c30
    # nextln: 002c28: 4c 89 e0                        mov rax, r12
    # nextln: 002c2b: e9 0c 00 00 00                  jmp 0x2c3c
    # nextln: 002c30: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002c3a: ff d0                           call rax
    # nextln: 002c3c: 85 c0                           test eax, eax
    # nextln: 002c3e: 0f 84 10 00 00 00               je 0x2c54
    # nextln: 002c44: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002c48: 83 c0 01                        add eax, 1
    # nextln: 002c4b: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002c4f: e9 0b 00 00 00                  jmp 0x2c5f
    # nextln: 002c54: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002c58: 83 c0 01                        add eax, 1
    # nextln: 002c5b: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002c5f: 45 85 f6                        test r14d, r14d
    # nextln: 002c62: 0f 84 08 00 00 00               je 0x2c70
    # nextln: 002c68: 4c 89 e0                        mov rax, r12
    # nextln: 002c6b: e9 27 00 00 00                  jmp 0x2c97
    # nextln: 002c70: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002c74: 48 89 c1                        mov rcx, rax
    # nextln: 002c77: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002c7b: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 002c7f: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002c81: 48 63 cf                        movsxd rcx, edi
    # nextln: 002c84: 48 3b ca                        cmp rcx, rdx
    # nextln: 002c87: 0f 8d ad 13 00 00               jge 0x403a
    # nextln: 002c8d: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002c91: 48 03 c1                        add rax, rcx
    # nextln: 002c94: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002c97: 85 c0                           test eax, eax
    # nextln: 002c99: 0f 84 10 00 00 00               je 0x2caf
    # nextln: 002c9f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002ca3: 83 c0 01                        add eax, 1
    # nextln: 002ca6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002caa: e9 0b 00 00 00                  jmp 0x2cba
    # nextln: 002caf: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002cb3: 83 c0 01                        add eax, 1
    # nextln: 002cb6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002cba: 45 85 f6                        test r14d, r14d
    # nextln: 002cbd: 0f 84 08 00 00 00               je 0x2ccb
    # nextln: 002cc3: 4c 89 e0                        mov rax, r12
    # nextln: 002cc6: e9 28 00 00 00                  jmp 0x2cf3
    # nextln: 002ccb: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002cd0: 48 89 c1                        mov rcx, rax
    # nextln: 002cd3: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002cd7: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002cdb: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002cdd: 48 63 ca                        movsxd rcx, edx
    # nextln: 002ce0: 48 3b cf                        cmp rcx, rdi
    # nextln: 002ce3: 0f 8d 43 13 00 00               jge 0x402c
    # nextln: 002ce9: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002ced: 48 03 c1                        add rax, rcx
    # nextln: 002cf0: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002cf3: 85 c0                           test eax, eax
    # nextln: 002cf5: 0f 84 10 00 00 00               je 0x2d0b
    # nextln: 002cfb: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002cff: 83 c0 01                        add eax, 1
    # nextln: 002d02: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002d06: e9 0b 00 00 00                  jmp 0x2d16
    # nextln: 002d0b: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002d0f: 83 c0 01                        add eax, 1
    # nextln: 002d12: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002d16: 45 85 e4                        test r12d, r12d
    # nextln: 002d19: 0f 84 10 00 00 00               je 0x2d2f
    # nextln: 002d1f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002d23: 83 c0 01                        add eax, 1
    # nextln: 002d26: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002d2a: e9 0b 00 00 00                  jmp 0x2d3a
    # nextln: 002d2f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002d33: 83 c0 01                        add eax, 1
    # nextln: 002d36: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002d3a: 45 85 f6                        test r14d, r14d
    # nextln: 002d3d: 45 85 f6                        test r14d, r14d
    # nextln: 002d40: 0f 84 10 00 00 00               je 0x2d56
    # nextln: 002d46: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002d4a: 83 c0 01                        add eax, 1
    # nextln: 002d4d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002d51: e9 0b 00 00 00                  jmp 0x2d61
    # nextln: 002d56: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002d5a: 83 c0 01                        add eax, 1
    # nextln: 002d5d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002d61: 45 85 f6                        test r14d, r14d
    # nextln: 002d64: 0f 84 08 00 00 00               je 0x2d72
    # nextln: 002d6a: 4c 89 f0                        mov rax, r14
    # nextln: 002d6d: e9 05 00 00 00                  jmp 0x2d77
    # nextln: 002d72: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002d77: 85 c0                           test eax, eax
    # nextln: 002d79: 0f 84 10 00 00 00               je 0x2d8f
    # nextln: 002d7f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002d83: 83 c0 01                        add eax, 1
    # nextln: 002d86: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002d8a: e9 0b 00 00 00                  jmp 0x2d9a
    # nextln: 002d8f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002d93: 83 c0 01                        add eax, 1
    # nextln: 002d96: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002d9a: 45 85 f6                        test r14d, r14d
    # nextln: 002d9d: 0f 84 08 00 00 00               je 0x2dab
    # nextln: 002da3: 4c 89 f0                        mov rax, r14
    # nextln: 002da6: e9 03 00 00 00                  jmp 0x2dae
    # nextln: 002dab: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 002dae: 85 c0                           test eax, eax
    # nextln: 002db0: 0f 84 10 00 00 00               je 0x2dc6
    # nextln: 002db6: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002dba: 83 c0 01                        add eax, 1
    # nextln: 002dbd: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002dc1: e9 0b 00 00 00                  jmp 0x2dd1
    # nextln: 002dc6: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002dca: 83 c0 01                        add eax, 1
    # nextln: 002dcd: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002dd1: 45 85 f6                        test r14d, r14d
    # nextln: 002dd4: 0f 84 08 00 00 00               je 0x2de2
    # nextln: 002dda: 4c 89 f0                        mov rax, r14
    # nextln: 002ddd: e9 0c 00 00 00                  jmp 0x2dee
    # nextln: 002de2: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 002de7: 48 83 c0 20                     add rax, 0x20
    # nextln: 002deb: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002dee: 85 c0                           test eax, eax
    # nextln: 002df0: 0f 84 10 00 00 00               je 0x2e06
    # nextln: 002df6: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002dfa: 83 c0 01                        add eax, 1
    # nextln: 002dfd: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002e01: e9 0b 00 00 00                  jmp 0x2e11
    # nextln: 002e06: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002e0a: 83 c0 01                        add eax, 1
    # nextln: 002e0d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002e11: 45 85 f6                        test r14d, r14d
    # nextln: 002e14: 0f 84 08 00 00 00               je 0x2e22
    # nextln: 002e1a: 4c 89 f0                        mov rax, r14
    # nextln: 002e1d: e9 0c 00 00 00                  jmp 0x2e2e
    # nextln: 002e22: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 002e2c: ff d0                           call rax
    # nextln: 002e2e: 85 c0                           test eax, eax
    # nextln: 002e30: 0f 84 10 00 00 00               je 0x2e46
    # nextln: 002e36: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002e3a: 83 c0 01                        add eax, 1
    # nextln: 002e3d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002e41: e9 0b 00 00 00                  jmp 0x2e51
    # nextln: 002e46: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002e4a: 83 c0 01                        add eax, 1
    # nextln: 002e4d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002e51: 45 85 f6                        test r14d, r14d
    # nextln: 002e54: 0f 84 08 00 00 00               je 0x2e62
    # nextln: 002e5a: 4c 89 f0                        mov rax, r14
    # nextln: 002e5d: e9 27 00 00 00                  jmp 0x2e89
    # nextln: 002e62: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 002e66: 48 89 c1                        mov rcx, rax
    # nextln: 002e69: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002e6d: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 002e71: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 002e73: 48 63 cf                        movsxd rcx, edi
    # nextln: 002e76: 48 3b ca                        cmp rcx, rdx
    # nextln: 002e79: 0f 8d 9f 11 00 00               jge 0x401e
    # nextln: 002e7f: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002e83: 48 03 c1                        add rax, rcx
    # nextln: 002e86: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002e89: 85 c0                           test eax, eax
    # nextln: 002e8b: 0f 84 10 00 00 00               je 0x2ea1
    # nextln: 002e91: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002e95: 83 c0 01                        add eax, 1
    # nextln: 002e98: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002e9c: e9 0b 00 00 00                  jmp 0x2eac
    # nextln: 002ea1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002ea5: 83 c0 01                        add eax, 1
    # nextln: 002ea8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002eac: 45 85 f6                        test r14d, r14d
    # nextln: 002eaf: 0f 84 08 00 00 00               je 0x2ebd
    # nextln: 002eb5: 4c 89 f0                        mov rax, r14
    # nextln: 002eb8: e9 28 00 00 00                  jmp 0x2ee5
    # nextln: 002ebd: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 002ec2: 48 89 c1                        mov rcx, rax
    # nextln: 002ec5: 48 83 c1 20                     add rcx, 0x20
    # nextln: 002ec9: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 002ecd: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 002ecf: 48 63 ca                        movsxd rcx, edx
    # nextln: 002ed2: 48 3b cf                        cmp rcx, rdi
    # nextln: 002ed5: 0f 8d 35 11 00 00               jge 0x4010
    # nextln: 002edb: 48 83 c1 28                     add rcx, 0x28
    # nextln: 002edf: 48 03 c1                        add rax, rcx
    # nextln: 002ee2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 002ee5: 85 c0                           test eax, eax
    # nextln: 002ee7: 0f 84 10 00 00 00               je 0x2efd
    # nextln: 002eed: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002ef1: 83 c0 01                        add eax, 1
    # nextln: 002ef4: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002ef8: e9 0b 00 00 00                  jmp 0x2f08
    # nextln: 002efd: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002f01: 83 c0 01                        add eax, 1
    # nextln: 002f04: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002f08: 45 85 f6                        test r14d, r14d
    # nextln: 002f0b: 0f 84 0a 00 00 00               je 0x2f1b
    # nextln: 002f11: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002f16: e9 03 00 00 00                  jmp 0x2f1e
    # nextln: 002f1b: 4c 89 e0                        mov rax, r12
    # nextln: 002f1e: 85 c0                           test eax, eax
    # nextln: 002f20: 0f 84 10 00 00 00               je 0x2f36
    # nextln: 002f26: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002f2a: 83 c0 01                        add eax, 1
    # nextln: 002f2d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002f31: e9 0b 00 00 00                  jmp 0x2f41
    # nextln: 002f36: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002f3a: 83 c0 01                        add eax, 1
    # nextln: 002f3d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002f41: 45 85 f6                        test r14d, r14d
    # nextln: 002f44: 0f 84 0a 00 00 00               je 0x2f54
    # nextln: 002f4a: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002f4f: e9 03 00 00 00                  jmp 0x2f57
    # nextln: 002f54: 4c 89 f0                        mov rax, r14
    # nextln: 002f57: 85 c0                           test eax, eax
    # nextln: 002f59: 0f 84 10 00 00 00               je 0x2f6f
    # nextln: 002f5f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002f63: 83 c0 01                        add eax, 1
    # nextln: 002f66: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002f6a: e9 0b 00 00 00                  jmp 0x2f7a
    # nextln: 002f6f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002f73: 83 c0 01                        add eax, 1
    # nextln: 002f76: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002f7a: 45 85 f6                        test r14d, r14d
    # nextln: 002f7d: 0f 84 0a 00 00 00               je 0x2f8d
    # nextln: 002f83: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002f88: e9 05 00 00 00                  jmp 0x2f92
    # nextln: 002f8d: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002f92: 85 c0                           test eax, eax
    # nextln: 002f94: 0f 84 10 00 00 00               je 0x2faa
    # nextln: 002f9a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002f9e: 83 c0 01                        add eax, 1
    # nextln: 002fa1: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002fa5: e9 0b 00 00 00                  jmp 0x2fb5
    # nextln: 002faa: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002fae: 83 c0 01                        add eax, 1
    # nextln: 002fb1: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002fb5: 45 85 f6                        test r14d, r14d
    # nextln: 002fb8: 0f 84 0a 00 00 00               je 0x2fc8
    # nextln: 002fbe: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002fc3: e9 03 00 00 00                  jmp 0x2fcb
    # nextln: 002fc8: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 002fcb: 85 c0                           test eax, eax
    # nextln: 002fcd: 0f 84 10 00 00 00               je 0x2fe3
    # nextln: 002fd3: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 002fd7: 83 c0 01                        add eax, 1
    # nextln: 002fda: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 002fde: e9 0b 00 00 00                  jmp 0x2fee
    # nextln: 002fe3: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 002fe7: 83 c0 01                        add eax, 1
    # nextln: 002fea: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 002fee: 45 85 f6                        test r14d, r14d
    # nextln: 002ff1: 0f 84 0a 00 00 00               je 0x3001
    # nextln: 002ff7: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 002ffc: e9 0c 00 00 00                  jmp 0x300d
    # nextln: 003001: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003006: 48 83 c0 20                     add rax, 0x20
    # nextln: 00300a: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00300d: 85 c0                           test eax, eax
    # nextln: 00300f: 0f 84 10 00 00 00               je 0x3025
    # nextln: 003015: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003019: 83 c0 01                        add eax, 1
    # nextln: 00301c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003020: e9 0b 00 00 00                  jmp 0x3030
    # nextln: 003025: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003029: 83 c0 01                        add eax, 1
    # nextln: 00302c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003030: 45 85 f6                        test r14d, r14d
    # nextln: 003033: 0f 84 0a 00 00 00               je 0x3043
    # nextln: 003039: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 00303e: e9 0c 00 00 00                  jmp 0x304f
    # nextln: 003043: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00304d: ff d0                           call rax
    # nextln: 00304f: 85 c0                           test eax, eax
    # nextln: 003051: 0f 84 10 00 00 00               je 0x3067
    # nextln: 003057: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00305b: 83 c0 01                        add eax, 1
    # nextln: 00305e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003062: e9 0b 00 00 00                  jmp 0x3072
    # nextln: 003067: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00306b: 83 c0 01                        add eax, 1
    # nextln: 00306e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003072: 45 85 f6                        test r14d, r14d
    # nextln: 003075: 0f 84 0a 00 00 00               je 0x3085
    # nextln: 00307b: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 003080: e9 27 00 00 00                  jmp 0x30ac
    # nextln: 003085: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003089: 48 89 c1                        mov rcx, rax
    # nextln: 00308c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003090: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003094: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003096: 48 63 ca                        movsxd rcx, edx
    # nextln: 003099: 48 3b cf                        cmp rcx, rdi
    # nextln: 00309c: 0f 8d 60 0f 00 00               jge 0x4002
    # nextln: 0030a2: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0030a6: 48 03 c1                        add rax, rcx
    # nextln: 0030a9: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0030ac: 85 c0                           test eax, eax
    # nextln: 0030ae: 0f 84 10 00 00 00               je 0x30c4
    # nextln: 0030b4: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0030b8: 83 c0 01                        add eax, 1
    # nextln: 0030bb: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0030bf: e9 0b 00 00 00                  jmp 0x30cf
    # nextln: 0030c4: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0030c8: 83 c0 01                        add eax, 1
    # nextln: 0030cb: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0030cf: 45 85 f6                        test r14d, r14d
    # nextln: 0030d2: 0f 84 0a 00 00 00               je 0x30e2
    # nextln: 0030d8: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0030dd: e9 28 00 00 00                  jmp 0x310a
    # nextln: 0030e2: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0030e7: 48 89 c1                        mov rcx, rax
    # nextln: 0030ea: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0030ee: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0030f2: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0030f4: 48 63 ca                        movsxd rcx, edx
    # nextln: 0030f7: 48 3b cf                        cmp rcx, rdi
    # nextln: 0030fa: 0f 8d f4 0e 00 00               jge 0x3ff4
    # nextln: 003100: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003104: 48 03 c1                        add rax, rcx
    # nextln: 003107: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00310a: 85 c0                           test eax, eax
    # nextln: 00310c: 0f 84 10 00 00 00               je 0x3122
    # nextln: 003112: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003116: 83 c0 01                        add eax, 1
    # nextln: 003119: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00311d: e9 0b 00 00 00                  jmp 0x312d
    # nextln: 003122: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003126: 83 c0 01                        add eax, 1
    # nextln: 003129: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00312d: 45 85 f6                        test r14d, r14d
    # nextln: 003130: 0f 84 08 00 00 00               je 0x313e
    # nextln: 003136: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 003139: e9 03 00 00 00                  jmp 0x3141
    # nextln: 00313e: 4c 89 e0                        mov rax, r12
    # nextln: 003141: 85 c0                           test eax, eax
    # nextln: 003143: 0f 84 10 00 00 00               je 0x3159
    # nextln: 003149: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00314d: 83 c0 01                        add eax, 1
    # nextln: 003150: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003154: e9 0b 00 00 00                  jmp 0x3164
    # nextln: 003159: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00315d: 83 c0 01                        add eax, 1
    # nextln: 003160: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003164: 45 85 f6                        test r14d, r14d
    # nextln: 003167: 0f 84 08 00 00 00               je 0x3175
    # nextln: 00316d: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 003170: e9 03 00 00 00                  jmp 0x3178
    # nextln: 003175: 4c 89 f0                        mov rax, r14
    # nextln: 003178: 85 c0                           test eax, eax
    # nextln: 00317a: 0f 84 10 00 00 00               je 0x3190
    # nextln: 003180: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003184: 83 c0 01                        add eax, 1
    # nextln: 003187: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00318b: e9 0b 00 00 00                  jmp 0x319b
    # nextln: 003190: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003194: 83 c0 01                        add eax, 1
    # nextln: 003197: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00319b: 45 85 f6                        test r14d, r14d
    # nextln: 00319e: 0f 84 08 00 00 00               je 0x31ac
    # nextln: 0031a4: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0031a7: e9 05 00 00 00                  jmp 0x31b1
    # nextln: 0031ac: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0031b1: 85 c0                           test eax, eax
    # nextln: 0031b3: 0f 84 10 00 00 00               je 0x31c9
    # nextln: 0031b9: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0031bd: 83 c0 01                        add eax, 1
    # nextln: 0031c0: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0031c4: e9 0b 00 00 00                  jmp 0x31d4
    # nextln: 0031c9: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0031cd: 83 c0 01                        add eax, 1
    # nextln: 0031d0: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0031d4: 45 85 f6                        test r14d, r14d
    # nextln: 0031d7: 0f 84 08 00 00 00               je 0x31e5
    # nextln: 0031dd: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0031e0: e9 03 00 00 00                  jmp 0x31e8
    # nextln: 0031e5: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0031e8: 85 c0                           test eax, eax
    # nextln: 0031ea: 0f 84 10 00 00 00               je 0x3200
    # nextln: 0031f0: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0031f4: 83 c0 01                        add eax, 1
    # nextln: 0031f7: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0031fb: e9 0b 00 00 00                  jmp 0x320b
    # nextln: 003200: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003204: 83 c0 01                        add eax, 1
    # nextln: 003207: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00320b: 45 85 f6                        test r14d, r14d
    # nextln: 00320e: 0f 84 08 00 00 00               je 0x321c
    # nextln: 003214: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 003217: e9 0c 00 00 00                  jmp 0x3228
    # nextln: 00321c: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003221: 48 83 c0 20                     add rax, 0x20
    # nextln: 003225: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003228: 85 c0                           test eax, eax
    # nextln: 00322a: 0f 84 10 00 00 00               je 0x3240
    # nextln: 003230: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003234: 83 c0 01                        add eax, 1
    # nextln: 003237: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00323b: e9 0b 00 00 00                  jmp 0x324b
    # nextln: 003240: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003244: 83 c0 01                        add eax, 1
    # nextln: 003247: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00324b: 45 85 f6                        test r14d, r14d
    # nextln: 00324e: 0f 84 08 00 00 00               je 0x325c
    # nextln: 003254: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 003257: e9 0c 00 00 00                  jmp 0x3268
    # nextln: 00325c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003266: ff d0                           call rax
    # nextln: 003268: 85 c0                           test eax, eax
    # nextln: 00326a: 0f 84 10 00 00 00               je 0x3280
    # nextln: 003270: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003274: 83 c0 01                        add eax, 1
    # nextln: 003277: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00327b: e9 0b 00 00 00                  jmp 0x328b
    # nextln: 003280: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003284: 83 c0 01                        add eax, 1
    # nextln: 003287: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00328b: 45 85 f6                        test r14d, r14d
    # nextln: 00328e: 0f 84 08 00 00 00               je 0x329c
    # nextln: 003294: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 003297: e9 27 00 00 00                  jmp 0x32c3
    # nextln: 00329c: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0032a0: 48 89 c1                        mov rcx, rax
    # nextln: 0032a3: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0032a7: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0032ab: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0032ad: 48 63 ca                        movsxd rcx, edx
    # nextln: 0032b0: 48 3b cf                        cmp rcx, rdi
    # nextln: 0032b3: 0f 8d 2d 0d 00 00               jge 0x3fe6
    # nextln: 0032b9: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0032bd: 48 03 c1                        add rax, rcx
    # nextln: 0032c0: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0032c3: 85 c0                           test eax, eax
    # nextln: 0032c5: 0f 84 10 00 00 00               je 0x32db
    # nextln: 0032cb: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0032cf: 83 c0 01                        add eax, 1
    # nextln: 0032d2: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0032d6: e9 0b 00 00 00                  jmp 0x32e6
    # nextln: 0032db: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0032df: 83 c0 01                        add eax, 1
    # nextln: 0032e2: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0032e6: 45 85 f6                        test r14d, r14d
    # nextln: 0032e9: 0f 84 08 00 00 00               je 0x32f7
    # nextln: 0032ef: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 0032f2: e9 28 00 00 00                  jmp 0x331f
    # nextln: 0032f7: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0032fc: 48 89 c1                        mov rcx, rax
    # nextln: 0032ff: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003303: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003307: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003309: 48 63 cf                        movsxd rcx, edi
    # nextln: 00330c: 48 3b ca                        cmp rcx, rdx
    # nextln: 00330f: 0f 8d c3 0c 00 00               jge 0x3fd8
    # nextln: 003315: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003319: 48 03 c1                        add rax, rcx
    # nextln: 00331c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00331f: 85 c0                           test eax, eax
    # nextln: 003321: 0f 84 10 00 00 00               je 0x3337
    # nextln: 003327: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00332b: 83 c0 01                        add eax, 1
    # nextln: 00332e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003332: e9 0b 00 00 00                  jmp 0x3342
    # nextln: 003337: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00333b: 83 c0 01                        add eax, 1
    # nextln: 00333e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003342: 45 85 f6                        test r14d, r14d
    # nextln: 003345: 0f 84 11 00 00 00               je 0x335c
    # nextln: 00334b: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003350: 48 83 c0 20                     add rax, 0x20
    # nextln: 003354: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003357: e9 03 00 00 00                  jmp 0x335f
    # nextln: 00335c: 4c 89 e0                        mov rax, r12
    # nextln: 00335f: 85 c0                           test eax, eax
    # nextln: 003361: 0f 84 10 00 00 00               je 0x3377
    # nextln: 003367: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00336b: 83 c0 01                        add eax, 1
    # nextln: 00336e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003372: e9 0b 00 00 00                  jmp 0x3382
    # nextln: 003377: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00337b: 83 c0 01                        add eax, 1
    # nextln: 00337e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003382: 45 85 f6                        test r14d, r14d
    # nextln: 003385: 0f 84 11 00 00 00               je 0x339c
    # nextln: 00338b: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003390: 48 83 c0 20                     add rax, 0x20
    # nextln: 003394: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003397: e9 03 00 00 00                  jmp 0x339f
    # nextln: 00339c: 4c 89 f0                        mov rax, r14
    # nextln: 00339f: 85 c0                           test eax, eax
    # nextln: 0033a1: 0f 84 10 00 00 00               je 0x33b7
    # nextln: 0033a7: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0033ab: 83 c0 01                        add eax, 1
    # nextln: 0033ae: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0033b2: e9 0b 00 00 00                  jmp 0x33c2
    # nextln: 0033b7: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0033bb: 83 c0 01                        add eax, 1
    # nextln: 0033be: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0033c2: 45 85 f6                        test r14d, r14d
    # nextln: 0033c5: 0f 84 11 00 00 00               je 0x33dc
    # nextln: 0033cb: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0033d0: 48 83 c0 20                     add rax, 0x20
    # nextln: 0033d4: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0033d7: e9 05 00 00 00                  jmp 0x33e1
    # nextln: 0033dc: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 0033e1: 85 c0                           test eax, eax
    # nextln: 0033e3: 0f 84 10 00 00 00               je 0x33f9
    # nextln: 0033e9: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0033ed: 83 c0 01                        add eax, 1
    # nextln: 0033f0: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0033f4: e9 0b 00 00 00                  jmp 0x3404
    # nextln: 0033f9: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0033fd: 83 c0 01                        add eax, 1
    # nextln: 003400: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003404: 45 85 f6                        test r14d, r14d
    # nextln: 003407: 0f 84 11 00 00 00               je 0x341e
    # nextln: 00340d: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003412: 48 83 c0 20                     add rax, 0x20
    # nextln: 003416: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003419: e9 03 00 00 00                  jmp 0x3421
    # nextln: 00341e: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 003421: 85 c0                           test eax, eax
    # nextln: 003423: 0f 84 10 00 00 00               je 0x3439
    # nextln: 003429: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00342d: 83 c0 01                        add eax, 1
    # nextln: 003430: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003434: e9 0b 00 00 00                  jmp 0x3444
    # nextln: 003439: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00343d: 83 c0 01                        add eax, 1
    # nextln: 003440: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003444: 45 85 f6                        test r14d, r14d
    # nextln: 003447: 0f 84 11 00 00 00               je 0x345e
    # nextln: 00344d: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003452: 48 83 c0 20                     add rax, 0x20
    # nextln: 003456: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003459: e9 0c 00 00 00                  jmp 0x346a
    # nextln: 00345e: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003463: 48 83 c0 20                     add rax, 0x20
    # nextln: 003467: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00346a: 85 c0                           test eax, eax
    # nextln: 00346c: 0f 84 10 00 00 00               je 0x3482
    # nextln: 003472: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003476: 83 c0 01                        add eax, 1
    # nextln: 003479: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00347d: e9 0b 00 00 00                  jmp 0x348d
    # nextln: 003482: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003486: 83 c0 01                        add eax, 1
    # nextln: 003489: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00348d: 45 85 f6                        test r14d, r14d
    # nextln: 003490: 0f 84 11 00 00 00               je 0x34a7
    # nextln: 003496: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 00349b: 48 83 c0 20                     add rax, 0x20
    # nextln: 00349f: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0034a2: e9 0c 00 00 00                  jmp 0x34b3
    # nextln: 0034a7: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0034b1: ff d0                           call rax
    # nextln: 0034b3: 85 c0                           test eax, eax
    # nextln: 0034b5: 0f 84 10 00 00 00               je 0x34cb
    # nextln: 0034bb: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0034bf: 83 c0 01                        add eax, 1
    # nextln: 0034c2: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0034c6: e9 0b 00 00 00                  jmp 0x34d6
    # nextln: 0034cb: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0034cf: 83 c0 01                        add eax, 1
    # nextln: 0034d2: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0034d6: 45 85 f6                        test r14d, r14d
    # nextln: 0034d9: 0f 84 11 00 00 00               je 0x34f0
    # nextln: 0034df: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0034e4: 48 83 c0 20                     add rax, 0x20
    # nextln: 0034e8: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0034eb: e9 27 00 00 00                  jmp 0x3517
    # nextln: 0034f0: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0034f4: 48 89 c1                        mov rcx, rax
    # nextln: 0034f7: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0034fb: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0034ff: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003501: 48 63 ca                        movsxd rcx, edx
    # nextln: 003504: 48 3b cf                        cmp rcx, rdi
    # nextln: 003507: 0f 8d bd 0a 00 00               jge 0x3fca
    # nextln: 00350d: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003511: 48 03 c1                        add rax, rcx
    # nextln: 003514: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003517: 85 c0                           test eax, eax
    # nextln: 003519: 0f 84 10 00 00 00               je 0x352f
    # nextln: 00351f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003523: 83 c0 01                        add eax, 1
    # nextln: 003526: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00352a: e9 0b 00 00 00                  jmp 0x353a
    # nextln: 00352f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003533: 83 c0 01                        add eax, 1
    # nextln: 003536: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00353a: 45 85 f6                        test r14d, r14d
    # nextln: 00353d: 0f 84 11 00 00 00               je 0x3554
    # nextln: 003543: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003548: 48 83 c0 20                     add rax, 0x20
    # nextln: 00354c: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00354f: e9 28 00 00 00                  jmp 0x357c
    # nextln: 003554: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003559: 48 89 c1                        mov rcx, rax
    # nextln: 00355c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003560: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003564: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003566: 48 63 ca                        movsxd rcx, edx
    # nextln: 003569: 48 3b cf                        cmp rcx, rdi
    # nextln: 00356c: 0f 8d 4a 0a 00 00               jge 0x3fbc
    # nextln: 003572: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003576: 48 03 c1                        add rax, rcx
    # nextln: 003579: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00357c: 85 c0                           test eax, eax
    # nextln: 00357e: 0f 84 10 00 00 00               je 0x3594
    # nextln: 003584: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003588: 83 c0 01                        add eax, 1
    # nextln: 00358b: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00358f: e9 0b 00 00 00                  jmp 0x359f
    # nextln: 003594: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003598: 83 c0 01                        add eax, 1
    # nextln: 00359b: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00359f: 45 85 f6                        test r14d, r14d
    # nextln: 0035a2: 0f 84 11 00 00 00               je 0x35b9
    # nextln: 0035a8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0035b2: ff d0                           call rax
    # nextln: 0035b4: e9 03 00 00 00                  jmp 0x35bc
    # nextln: 0035b9: 4c 89 e0                        mov rax, r12
    # nextln: 0035bc: 85 c0                           test eax, eax
    # nextln: 0035be: 0f 84 10 00 00 00               je 0x35d4
    # nextln: 0035c4: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0035c8: 83 c0 01                        add eax, 1
    # nextln: 0035cb: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0035cf: e9 0b 00 00 00                  jmp 0x35df
    # nextln: 0035d4: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0035d8: 83 c0 01                        add eax, 1
    # nextln: 0035db: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0035df: 45 85 f6                        test r14d, r14d
    # nextln: 0035e2: 0f 84 11 00 00 00               je 0x35f9
    # nextln: 0035e8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0035f2: ff d0                           call rax
    # nextln: 0035f4: e9 03 00 00 00                  jmp 0x35fc
    # nextln: 0035f9: 4c 89 f0                        mov rax, r14
    # nextln: 0035fc: 85 c0                           test eax, eax
    # nextln: 0035fe: 0f 84 10 00 00 00               je 0x3614
    # nextln: 003604: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003608: 83 c0 01                        add eax, 1
    # nextln: 00360b: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 00360f: e9 0b 00 00 00                  jmp 0x361f
    # nextln: 003614: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003618: 83 c0 01                        add eax, 1
    # nextln: 00361b: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 00361f: 45 85 f6                        test r14d, r14d
    # nextln: 003622: 0f 84 11 00 00 00               je 0x3639
    # nextln: 003628: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003632: ff d0                           call rax
    # nextln: 003634: e9 05 00 00 00                  jmp 0x363e
    # nextln: 003639: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 00363e: 85 c0                           test eax, eax
    # nextln: 003640: 0f 84 10 00 00 00               je 0x3656
    # nextln: 003646: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00364a: 83 c0 01                        add eax, 1
    # nextln: 00364d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003651: e9 0b 00 00 00                  jmp 0x3661
    # nextln: 003656: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00365a: 83 c0 01                        add eax, 1
    # nextln: 00365d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003661: 45 85 f6                        test r14d, r14d
    # nextln: 003664: 0f 84 11 00 00 00               je 0x367b
    # nextln: 00366a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003674: ff d0                           call rax
    # nextln: 003676: e9 03 00 00 00                  jmp 0x367e
    # nextln: 00367b: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 00367e: 85 c0                           test eax, eax
    # nextln: 003680: 0f 84 10 00 00 00               je 0x3696
    # nextln: 003686: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00368a: 83 c0 01                        add eax, 1
    # nextln: 00368d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003691: e9 0b 00 00 00                  jmp 0x36a1
    # nextln: 003696: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00369a: 83 c0 01                        add eax, 1
    # nextln: 00369d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0036a1: 45 85 f6                        test r14d, r14d
    # nextln: 0036a4: 0f 84 11 00 00 00               je 0x36bb
    # nextln: 0036aa: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0036b4: ff d0                           call rax
    # nextln: 0036b6: e9 0c 00 00 00                  jmp 0x36c7
    # nextln: 0036bb: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0036c0: 48 83 c0 20                     add rax, 0x20
    # nextln: 0036c4: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0036c7: 85 c0                           test eax, eax
    # nextln: 0036c9: 0f 84 10 00 00 00               je 0x36df
    # nextln: 0036cf: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0036d3: 83 c0 01                        add eax, 1
    # nextln: 0036d6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0036da: e9 0b 00 00 00                  jmp 0x36ea
    # nextln: 0036df: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0036e3: 83 c0 01                        add eax, 1
    # nextln: 0036e6: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0036ea: 45 85 f6                        test r14d, r14d
    # nextln: 0036ed: 0f 84 11 00 00 00               je 0x3704
    # nextln: 0036f3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0036fd: ff d0                           call rax
    # nextln: 0036ff: e9 0c 00 00 00                  jmp 0x3710
    # nextln: 003704: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 00370e: ff d0                           call rax
    # nextln: 003710: 85 c0                           test eax, eax
    # nextln: 003712: 0f 84 10 00 00 00               je 0x3728
    # nextln: 003718: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00371c: 83 c0 01                        add eax, 1
    # nextln: 00371f: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003723: e9 0b 00 00 00                  jmp 0x3733
    # nextln: 003728: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00372c: 83 c0 01                        add eax, 1
    # nextln: 00372f: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003733: 45 85 f6                        test r14d, r14d
    # nextln: 003736: 0f 84 11 00 00 00               je 0x374d
    # nextln: 00373c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003746: ff d0                           call rax
    # nextln: 003748: e9 27 00 00 00                  jmp 0x3774
    # nextln: 00374d: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003751: 48 89 c1                        mov rcx, rax
    # nextln: 003754: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003758: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 00375c: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00375e: 48 63 ca                        movsxd rcx, edx
    # nextln: 003761: 48 3b cf                        cmp rcx, rdi
    # nextln: 003764: 0f 8d 44 08 00 00               jge 0x3fae
    # nextln: 00376a: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00376e: 48 03 c1                        add rax, rcx
    # nextln: 003771: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003774: 85 c0                           test eax, eax
    # nextln: 003776: 0f 84 10 00 00 00               je 0x378c
    # nextln: 00377c: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003780: 83 c0 01                        add eax, 1
    # nextln: 003783: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003787: e9 0b 00 00 00                  jmp 0x3797
    # nextln: 00378c: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003790: 83 c0 01                        add eax, 1
    # nextln: 003793: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003797: 45 85 f6                        test r14d, r14d
    # nextln: 00379a: 0f 84 11 00 00 00               je 0x37b1
    # nextln: 0037a0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 0037aa: ff d0                           call rax
    # nextln: 0037ac: e9 28 00 00 00                  jmp 0x37d9
    # nextln: 0037b1: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 0037b6: 48 89 c1                        mov rcx, rax
    # nextln: 0037b9: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0037bd: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0037c1: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0037c3: 48 63 ca                        movsxd rcx, edx
    # nextln: 0037c6: 48 3b cf                        cmp rcx, rdi
    # nextln: 0037c9: 0f 8d d1 07 00 00               jge 0x3fa0
    # nextln: 0037cf: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0037d3: 48 03 c1                        add rax, rcx
    # nextln: 0037d6: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0037d9: 85 c0                           test eax, eax
    # nextln: 0037db: 0f 84 10 00 00 00               je 0x37f1
    # nextln: 0037e1: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0037e5: 83 c0 01                        add eax, 1
    # nextln: 0037e8: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0037ec: e9 0b 00 00 00                  jmp 0x37fc
    # nextln: 0037f1: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0037f5: 83 c0 01                        add eax, 1
    # nextln: 0037f8: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0037fc: 45 85 f6                        test r14d, r14d
    # nextln: 0037ff: 0f 84 3a 00 00 00               je 0x383f
    # nextln: 003805: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003809: 48 89 c1                        mov rcx, rax
    # nextln: 00380c: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003810: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003814: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003816: 48 63 ca                        movsxd rcx, edx
    # nextln: 003819: 48 3b cf                        cmp rcx, rdi
    # nextln: 00381c: 0f 8d 0f 00 00 00               jge 0x3831
    # nextln: 003822: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003826: 48 03 c1                        add rax, rcx
    # nextln: 003829: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 00382c: e9 11 00 00 00                  jmp 0x3842
    # nextln: 003831: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00383b: ff d0                           call rax
    # nextln: 00383d: 0f 0b                           ud2
    # nextln: 00383f: 4c 89 e0                        mov rax, r12
    # nextln: 003842: 85 c0                           test eax, eax
    # nextln: 003844: 0f 84 10 00 00 00               je 0x385a
    # nextln: 00384a: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00384e: 83 c0 01                        add eax, 1
    # nextln: 003851: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003855: e9 0b 00 00 00                  jmp 0x3865
    # nextln: 00385a: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00385e: 83 c0 01                        add eax, 1
    # nextln: 003861: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003865: 45 85 f6                        test r14d, r14d
    # nextln: 003868: 0f 84 3a 00 00 00               je 0x38a8
    # nextln: 00386e: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003872: 48 89 c1                        mov rcx, rax
    # nextln: 003875: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003879: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 00387d: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 00387f: 48 63 ca                        movsxd rcx, edx
    # nextln: 003882: 48 3b cf                        cmp rcx, rdi
    # nextln: 003885: 0f 8d 0f 00 00 00               jge 0x389a
    # nextln: 00388b: 48 83 c1 28                     add rcx, 0x28
    # nextln: 00388f: 48 03 c1                        add rax, rcx
    # nextln: 003892: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003895: e9 11 00 00 00                  jmp 0x38ab
    # nextln: 00389a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0038a4: ff d0                           call rax
    # nextln: 0038a6: 0f 0b                           ud2
    # nextln: 0038a8: 4c 89 f0                        mov rax, r14
    # nextln: 0038ab: 85 c0                           test eax, eax
    # nextln: 0038ad: 0f 84 10 00 00 00               je 0x38c3
    # nextln: 0038b3: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0038b7: 83 c0 01                        add eax, 1
    # nextln: 0038ba: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 0038be: e9 0b 00 00 00                  jmp 0x38ce
    # nextln: 0038c3: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 0038c7: 83 c0 01                        add eax, 1
    # nextln: 0038ca: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0038ce: 45 85 f6                        test r14d, r14d
    # nextln: 0038d1: 0f 84 3a 00 00 00               je 0x3911
    # nextln: 0038d7: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0038db: 48 89 c1                        mov rcx, rax
    # nextln: 0038de: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0038e2: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 0038e6: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 0038e8: 48 63 ca                        movsxd rcx, edx
    # nextln: 0038eb: 48 3b cf                        cmp rcx, rdi
    # nextln: 0038ee: 0f 8d 0f 00 00 00               jge 0x3903
    # nextln: 0038f4: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0038f8: 48 03 c1                        add rax, rcx
    # nextln: 0038fb: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0038fe: e9 13 00 00 00                  jmp 0x3916
    # nextln: 003903: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00390d: ff d0                           call rax
    # nextln: 00390f: 0f 0b                           ud2
    # nextln: 003911: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 003916: 85 c0                           test eax, eax
    # nextln: 003918: 0f 84 10 00 00 00               je 0x392e
    # nextln: 00391e: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003922: 83 c0 01                        add eax, 1
    # nextln: 003925: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003929: e9 0b 00 00 00                  jmp 0x3939
    # nextln: 00392e: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003932: 83 c0 01                        add eax, 1
    # nextln: 003935: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003939: 45 85 f6                        test r14d, r14d
    # nextln: 00393c: 0f 84 3a 00 00 00               je 0x397c
    # nextln: 003942: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003946: 48 89 c1                        mov rcx, rax
    # nextln: 003949: 48 83 c1 20                     add rcx, 0x20
    # nextln: 00394d: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003951: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003953: 48 63 cf                        movsxd rcx, edi
    # nextln: 003956: 48 3b ca                        cmp rcx, rdx
    # nextln: 003959: 0f 8d 0f 00 00 00               jge 0x396e
    # nextln: 00395f: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003963: 48 03 c1                        add rax, rcx
    # nextln: 003966: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003969: e9 11 00 00 00                  jmp 0x397f
    # nextln: 00396e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003978: ff d0                           call rax
    # nextln: 00397a: 0f 0b                           ud2
    # nextln: 00397c: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 00397f: 85 c0                           test eax, eax
    # nextln: 003981: 0f 84 10 00 00 00               je 0x3997
    # nextln: 003987: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 00398b: 83 c0 01                        add eax, 1
    # nextln: 00398e: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003992: e9 0b 00 00 00                  jmp 0x39a2
    # nextln: 003997: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 00399b: 83 c0 01                        add eax, 1
    # nextln: 00399e: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 0039a2: 45 85 f6                        test r14d, r14d
    # nextln: 0039a5: 0f 84 3a 00 00 00               je 0x39e5
    # nextln: 0039ab: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 0039af: 48 89 c1                        mov rcx, rax
    # nextln: 0039b2: 48 83 c1 20                     add rcx, 0x20
    # nextln: 0039b6: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 0039ba: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 0039bc: 48 63 cf                        movsxd rcx, edi
    # nextln: 0039bf: 48 3b ca                        cmp rcx, rdx
    # nextln: 0039c2: 0f 8d 0f 00 00 00               jge 0x39d7
    # nextln: 0039c8: 48 83 c1 28                     add rcx, 0x28
    # nextln: 0039cc: 48 03 c1                        add rax, rcx
    # nextln: 0039cf: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0039d2: e9 1a 00 00 00                  jmp 0x39f1
    # nextln: 0039d7: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0039e1: ff d0                           call rax
    # nextln: 0039e3: 0f 0b                           ud2
    # nextln: 0039e5: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0039ea: 48 83 c0 20                     add rax, 0x20
    # nextln: 0039ee: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 0039f1: 85 c0                           test eax, eax
    # nextln: 0039f3: 0f 84 10 00 00 00               je 0x3a09
    # nextln: 0039f9: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 0039fd: 83 c0 01                        add eax, 1
    # nextln: 003a00: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003a04: e9 0b 00 00 00                  jmp 0x3a14
    # nextln: 003a09: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003a0d: 83 c0 01                        add eax, 1
    # nextln: 003a10: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003a14: 45 85 f6                        test r14d, r14d
    # nextln: 003a17: 0f 84 3a 00 00 00               je 0x3a57
    # nextln: 003a1d: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003a21: 48 89 c1                        mov rcx, rax
    # nextln: 003a24: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003a28: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003a2c: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003a2e: 48 63 cf                        movsxd rcx, edi
    # nextln: 003a31: 48 3b ca                        cmp rcx, rdx
    # nextln: 003a34: 0f 8d 0f 00 00 00               jge 0x3a49
    # nextln: 003a3a: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003a3e: 48 03 c1                        add rax, rcx
    # nextln: 003a41: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003a44: e9 1a 00 00 00                  jmp 0x3a63
    # nextln: 003a49: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003a53: ff d0                           call rax
    # nextln: 003a55: 0f 0b                           ud2
    # nextln: 003a57: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003a61: ff d0                           call rax
    # nextln: 003a63: 85 c0                           test eax, eax
    # nextln: 003a65: 0f 84 10 00 00 00               je 0x3a7b
    # nextln: 003a6b: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003a6f: 83 c0 01                        add eax, 1
    # nextln: 003a72: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003a76: e9 0b 00 00 00                  jmp 0x3a86
    # nextln: 003a7b: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003a7f: 83 c0 01                        add eax, 1
    # nextln: 003a82: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003a86: 45 85 f6                        test r14d, r14d
    # nextln: 003a89: 0f 84 3a 00 00 00               je 0x3ac9
    # nextln: 003a8f: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003a93: 48 89 c1                        mov rcx, rax
    # nextln: 003a96: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003a9a: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003a9e: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003aa0: 48 63 ca                        movsxd rcx, edx
    # nextln: 003aa3: 48 3b cf                        cmp rcx, rdi
    # nextln: 003aa6: 0f 8d 0f 00 00 00               jge 0x3abb
    # nextln: 003aac: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003ab0: 48 03 c1                        add rax, rcx
    # nextln: 003ab3: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003ab6: e9 35 00 00 00                  jmp 0x3af0
    # nextln: 003abb: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003ac5: ff d0                           call rax
    # nextln: 003ac7: 0f 0b                           ud2
    # nextln: 003ac9: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003acd: 48 89 c1                        mov rcx, rax
    # nextln: 003ad0: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003ad4: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003ad8: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003ada: 48 63 cf                        movsxd rcx, edi
    # nextln: 003add: 48 3b ca                        cmp rcx, rdx
    # nextln: 003ae0: 0f 8d ac 04 00 00               jge 0x3f92
    # nextln: 003ae6: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003aea: 48 03 c1                        add rax, rcx
    # nextln: 003aed: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003af0: 85 c0                           test eax, eax
    # nextln: 003af2: 0f 84 10 00 00 00               je 0x3b08
    # nextln: 003af8: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003afc: 83 c0 01                        add eax, 1
    # nextln: 003aff: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003b03: e9 0b 00 00 00                  jmp 0x3b13
    # nextln: 003b08: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003b0c: 83 c0 01                        add eax, 1
    # nextln: 003b0f: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003b13: 45 85 f6                        test r14d, r14d
    # nextln: 003b16: 0f 84 3a 00 00 00               je 0x3b56
    # nextln: 003b1c: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003b20: 48 89 c1                        mov rcx, rax
    # nextln: 003b23: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003b27: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003b2b: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003b2d: 48 63 cf                        movsxd rcx, edi
    # nextln: 003b30: 48 3b ca                        cmp rcx, rdx
    # nextln: 003b33: 0f 8d 0f 00 00 00               jge 0x3b48
    # nextln: 003b39: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003b3d: 48 03 c1                        add rax, rcx
    # nextln: 003b40: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003b43: e9 36 00 00 00                  jmp 0x3b7e
    # nextln: 003b48: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003b52: ff d0                           call rax
    # nextln: 003b54: 0f 0b                           ud2
    # nextln: 003b56: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003b5b: 48 89 c1                        mov rcx, rax
    # nextln: 003b5e: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003b62: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003b66: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003b68: 48 63 cf                        movsxd rcx, edi
    # nextln: 003b6b: 48 3b ca                        cmp rcx, rdx
    # nextln: 003b6e: 0f 8d 10 04 00 00               jge 0x3f84
    # nextln: 003b74: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003b78: 48 03 c1                        add rax, rcx
    # nextln: 003b7b: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003b7e: 85 c0                           test eax, eax
    # nextln: 003b80: 0f 84 10 00 00 00               je 0x3b96
    # nextln: 003b86: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003b8a: 83 c0 01                        add eax, 1
    # nextln: 003b8d: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003b91: e9 0b 00 00 00                  jmp 0x3ba1
    # nextln: 003b96: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003b9a: 83 c0 01                        add eax, 1
    # nextln: 003b9d: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003ba1: 45 85 f6                        test r14d, r14d
    # nextln: 003ba4: 0f 84 3c 00 00 00               je 0x3be6
    # nextln: 003baa: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003baf: 48 89 c1                        mov rcx, rax
    # nextln: 003bb2: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003bb6: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003bba: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003bbc: 48 63 cf                        movsxd rcx, edi
    # nextln: 003bbf: 48 3b ca                        cmp rcx, rdx
    # nextln: 003bc2: 0f 8d 10 00 00 00               jge 0x3bd8
    # nextln: 003bc8: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003bcc: 48 03 c1                        add rax, rcx
    # nextln: 003bcf: 44 0f b6 20                     movzx r12d, byte ptr [rax]
    # nextln: 003bd3: e9 0e 00 00 00                  jmp 0x3be6
    # nextln: 003bd8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003be2: ff d0                           call rax
    # nextln: 003be4: 0f 0b                           ud2
    # nextln: 003be6: 45 85 e4                        test r12d, r12d
    # nextln: 003be9: 0f 84 10 00 00 00               je 0x3bff
    # nextln: 003bef: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003bf3: 83 c0 01                        add eax, 1
    # nextln: 003bf6: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003bfa: e9 0b 00 00 00                  jmp 0x3c0a
    # nextln: 003bff: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003c03: 83 c0 01                        add eax, 1
    # nextln: 003c06: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003c0a: 45 85 f6                        test r14d, r14d
    # nextln: 003c0d: 0f 84 3b 00 00 00               je 0x3c4e
    # nextln: 003c13: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003c18: 48 89 c1                        mov rcx, rax
    # nextln: 003c1b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003c1f: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003c23: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003c25: 48 63 ca                        movsxd rcx, edx
    # nextln: 003c28: 48 3b cf                        cmp rcx, rdi
    # nextln: 003c2b: 0f 8d 0f 00 00 00               jge 0x3c40
    # nextln: 003c31: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003c35: 48 03 c1                        add rax, rcx
    # nextln: 003c38: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003c3b: e9 11 00 00 00                  jmp 0x3c51
    # nextln: 003c40: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003c4a: ff d0                           call rax
    # nextln: 003c4c: 0f 0b                           ud2
    # nextln: 003c4e: 4c 89 f0                        mov rax, r14
    # nextln: 003c51: 85 c0                           test eax, eax
    # nextln: 003c53: 0f 84 10 00 00 00               je 0x3c69
    # nextln: 003c59: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003c5d: 83 c0 01                        add eax, 1
    # nextln: 003c60: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003c64: e9 0b 00 00 00                  jmp 0x3c74
    # nextln: 003c69: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003c6d: 83 c0 01                        add eax, 1
    # nextln: 003c70: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003c74: 45 85 f6                        test r14d, r14d
    # nextln: 003c77: 0f 84 3b 00 00 00               je 0x3cb8
    # nextln: 003c7d: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003c82: 48 89 c1                        mov rcx, rax
    # nextln: 003c85: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003c89: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003c8d: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003c8f: 48 63 ca                        movsxd rcx, edx
    # nextln: 003c92: 48 3b cf                        cmp rcx, rdi
    # nextln: 003c95: 0f 8d 0f 00 00 00               jge 0x3caa
    # nextln: 003c9b: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003c9f: 48 03 c1                        add rax, rcx
    # nextln: 003ca2: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003ca5: e9 13 00 00 00                  jmp 0x3cbd
    # nextln: 003caa: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003cb4: ff d0                           call rax
    # nextln: 003cb6: 0f 0b                           ud2
    # nextln: 003cb8: 0f b6 44 24 24                  movzx eax, byte ptr [rsp + 0x24]
    # nextln: 003cbd: 85 c0                           test eax, eax
    # nextln: 003cbf: 0f 84 10 00 00 00               je 0x3cd5
    # nextln: 003cc5: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003cc9: 83 c0 01                        add eax, 1
    # nextln: 003ccc: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003cd0: e9 0b 00 00 00                  jmp 0x3ce0
    # nextln: 003cd5: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003cd9: 83 c0 01                        add eax, 1
    # nextln: 003cdc: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003ce0: 45 85 f6                        test r14d, r14d
    # nextln: 003ce3: 0f 84 3b 00 00 00               je 0x3d24
    # nextln: 003ce9: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003cee: 48 89 c1                        mov rcx, rax
    # nextln: 003cf1: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003cf5: 8b 7c 24 1c                     mov edi, dword ptr [rsp + 0x1c]
    # nextln: 003cf9: 8b 11                           mov edx, dword ptr [rcx]
    # nextln: 003cfb: 48 63 cf                        movsxd rcx, edi
    # nextln: 003cfe: 48 3b ca                        cmp rcx, rdx
    # nextln: 003d01: 0f 8d 0f 00 00 00               jge 0x3d16
    # nextln: 003d07: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003d0b: 48 03 c1                        add rax, rcx
    # nextln: 003d0e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003d11: e9 11 00 00 00                  jmp 0x3d27
    # nextln: 003d16: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003d20: ff d0                           call rax
    # nextln: 003d22: 0f 0b                           ud2
    # nextln: 003d24: 0f b6 03                        movzx eax, byte ptr [rbx]
    # nextln: 003d27: 85 c0                           test eax, eax
    # nextln: 003d29: 0f 84 10 00 00 00               je 0x3d3f
    # nextln: 003d2f: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003d33: 83 c0 01                        add eax, 1
    # nextln: 003d36: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003d3a: e9 0b 00 00 00                  jmp 0x3d4a
    # nextln: 003d3f: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003d43: 83 c0 01                        add eax, 1
    # nextln: 003d46: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003d4a: 45 85 f6                        test r14d, r14d
    # nextln: 003d4d: 0f 84 3b 00 00 00               je 0x3d8e
    # nextln: 003d53: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003d58: 48 89 c1                        mov rcx, rax
    # nextln: 003d5b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003d5f: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003d63: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003d65: 48 63 ca                        movsxd rcx, edx
    # nextln: 003d68: 48 3b cf                        cmp rcx, rdi
    # nextln: 003d6b: 0f 8d 0f 00 00 00               jge 0x3d80
    # nextln: 003d71: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003d75: 48 03 c1                        add rax, rcx
    # nextln: 003d78: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003d7b: e9 1a 00 00 00                  jmp 0x3d9a
    # nextln: 003d80: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003d8a: ff d0                           call rax
    # nextln: 003d8c: 0f 0b                           ud2
    # nextln: 003d8e: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 003d93: 48 83 c0 20                     add rax, 0x20
    # nextln: 003d97: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003d9a: 85 c0                           test eax, eax
    # nextln: 003d9c: 0f 84 10 00 00 00               je 0x3db2
    # nextln: 003da2: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003da6: 83 c0 01                        add eax, 1
    # nextln: 003da9: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003dad: e9 0b 00 00 00                  jmp 0x3dbd
    # nextln: 003db2: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003db6: 83 c0 01                        add eax, 1
    # nextln: 003db9: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003dbd: 45 85 f6                        test r14d, r14d
    # nextln: 003dc0: 0f 84 3b 00 00 00               je 0x3e01
    # nextln: 003dc6: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003dcb: 48 89 c1                        mov rcx, rax
    # nextln: 003dce: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003dd2: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003dd6: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003dd8: 48 63 ca                        movsxd rcx, edx
    # nextln: 003ddb: 48 3b cf                        cmp rcx, rdi
    # nextln: 003dde: 0f 8d 0f 00 00 00               jge 0x3df3
    # nextln: 003de4: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003de8: 48 03 c1                        add rax, rcx
    # nextln: 003deb: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003dee: e9 1a 00 00 00                  jmp 0x3e0d
    # nextln: 003df3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003dfd: ff d0                           call rax
    # nextln: 003dff: 0f 0b                           ud2
    # nextln: 003e01: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" + 0
    # nextln: 003e0b: ff d0                           call rax
    # nextln: 003e0d: 85 c0                           test eax, eax
    # nextln: 003e0f: 0f 84 10 00 00 00               je 0x3e25
    # nextln: 003e15: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003e19: 83 c0 01                        add eax, 1
    # nextln: 003e1c: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003e20: e9 0b 00 00 00                  jmp 0x3e30
    # nextln: 003e25: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003e29: 83 c0 01                        add eax, 1
    # nextln: 003e2c: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003e30: 45 85 f6                        test r14d, r14d
    # nextln: 003e33: 0f 84 3b 00 00 00               je 0x3e74
    # nextln: 003e39: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003e3e: 48 89 c1                        mov rcx, rax
    # nextln: 003e41: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003e45: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003e49: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003e4b: 48 63 ca                        movsxd rcx, edx
    # nextln: 003e4e: 48 3b cf                        cmp rcx, rdi
    # nextln: 003e51: 0f 8d 0f 00 00 00               jge 0x3e66
    # nextln: 003e57: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003e5b: 48 03 c1                        add rax, rcx
    # nextln: 003e5e: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003e61: e9 35 00 00 00                  jmp 0x3e9b
    # nextln: 003e66: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003e70: ff d0                           call rax
    # nextln: 003e72: 0f 0b                           ud2
    # nextln: 003e74: 48 8b 04 24                     mov rax, qword ptr [rsp]
    # nextln: 003e78: 48 89 c1                        mov rcx, rax
    # nextln: 003e7b: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003e7f: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003e83: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003e85: 48 63 ca                        movsxd rcx, edx
    # nextln: 003e88: 48 3b cf                        cmp rcx, rdi
    # nextln: 003e8b: 0f 8d e5 00 00 00               jge 0x3f76
    # nextln: 003e91: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003e95: 48 03 c1                        add rax, rcx
    # nextln: 003e98: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003e9b: 85 c0                           test eax, eax
    # nextln: 003e9d: 0f 84 10 00 00 00               je 0x3eb3
    # nextln: 003ea3: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003ea7: 83 c0 01                        add eax, 1
    # nextln: 003eaa: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003eae: e9 0b 00 00 00                  jmp 0x3ebe
    # nextln: 003eb3: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003eb7: 83 c0 01                        add eax, 1
    # nextln: 003eba: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003ebe: 45 85 f6                        test r14d, r14d
    # nextln: 003ec1: 0f 84 3b 00 00 00               je 0x3f02
    # nextln: 003ec7: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003ecc: 48 89 c1                        mov rcx, rax
    # nextln: 003ecf: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003ed3: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003ed7: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003ed9: 48 63 ca                        movsxd rcx, edx
    # nextln: 003edc: 48 3b cf                        cmp rcx, rdi
    # nextln: 003edf: 0f 8d 0f 00 00 00               jge 0x3ef4
    # nextln: 003ee5: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003ee9: 48 03 c1                        add rax, rcx
    # nextln: 003eec: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003eef: e9 36 00 00 00                  jmp 0x3f2a
    # nextln: 003ef4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003efe: ff d0                           call rax
    # nextln: 003f00: 0f 0b                           ud2
    # nextln: 003f02: 48 8b 44 24 08                  mov rax, qword ptr [rsp + 8]
    # nextln: 003f07: 48 89 c1                        mov rcx, rax
    # nextln: 003f0a: 48 83 c1 20                     add rcx, 0x20
    # nextln: 003f0e: 8b 54 24 1c                     mov edx, dword ptr [rsp + 0x1c]
    # nextln: 003f12: 8b 39                           mov edi, dword ptr [rcx]
    # nextln: 003f14: 48 63 ca                        movsxd rcx, edx
    # nextln: 003f17: 48 3b cf                        cmp rcx, rdi
    # nextln: 003f1a: 0f 8d 48 00 00 00               jge 0x3f68
    # nextln: 003f20: 48 83 c1 28                     add rcx, 0x28
    # nextln: 003f24: 48 03 c1                        add rax, rcx
    # nextln: 003f27: 0f b6 00                        movzx eax, byte ptr [rax]
    # nextln: 003f2a: 85 c0                           test eax, eax
    # nextln: 003f2c: 0f 84 10 00 00 00               je 0x3f42
    # nextln: 003f32: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003f36: 83 c0 01                        add eax, 1
    # nextln: 003f39: 89 44 24 18                     mov dword ptr [rsp + 0x18], eax
    # nextln: 003f3d: e9 0b 00 00 00                  jmp 0x3f4d
    # nextln: 003f42: 8b 44 24 20                     mov eax, dword ptr [rsp + 0x20]
    # nextln: 003f46: 83 c0 01                        add eax, 1
    # nextln: 003f49: 89 44 24 20                     mov dword ptr [rsp + 0x20], eax
    # nextln: 003f4d: 8b 44 24 18                     mov eax, dword ptr [rsp + 0x18]
    # nextln: 003f51: d1 e0                           shl eax, 1
    # nextln: 003f53: 8b 4c 24 20                     mov ecx, dword ptr [rsp + 0x20]
    # nextln: 003f57: 2b c1                           sub eax, ecx
    # nextln: 003f59: 48 83 c4 38                     add rsp, 0x38
    # nextln: 003f5d: 5b                              pop rbx
    # nextln: 003f5e: 41 5c                           pop r12
    # nextln: 003f60: 41 5d                           pop r13
    # nextln: 003f62: 41 5e                           pop r14
    # nextln: 003f64: 41 5f                           pop r15
    # nextln: 003f66: 5d                              pop rbp
    # nextln: 003f67: c3                              ret
    # nextln: 003f68: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003f72: ff d0                           call rax
    # nextln: 003f74: 0f 0b                           ud2
    # nextln: 003f76: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003f80: ff d0                           call rax
    # nextln: 003f82: 0f 0b                           ud2
    # nextln: 003f84: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003f8e: ff d0                           call rax
    # nextln: 003f90: 0f 0b                           ud2
    # nextln: 003f92: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003f9c: ff d0                           call rax
    # nextln: 003f9e: 0f 0b                           ud2
    # nextln: 003fa0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003faa: ff d0                           call rax
    # nextln: 003fac: 0f 0b                           ud2
    # nextln: 003fae: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003fb8: ff d0                           call rax
    # nextln: 003fba: 0f 0b                           ud2
    # nextln: 003fbc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003fc6: ff d0                           call rax
    # nextln: 003fc8: 0f 0b                           ud2
    # nextln: 003fca: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003fd4: ff d0                           call rax
    # nextln: 003fd6: 0f 0b                           ud2
    # nextln: 003fd8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003fe2: ff d0                           call rax
    # nextln: 003fe4: 0f 0b                           ud2
    # nextln: 003fe6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003ff0: ff d0                           call rax
    # nextln: 003ff2: 0f 0b                           ud2
    # nextln: 003ff4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 003ffe: ff d0                           call rax
    # nextln: 004000: 0f 0b                           ud2
    # nextln: 004002: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00400c: ff d0                           call rax
    # nextln: 00400e: 0f 0b                           ud2
    # nextln: 004010: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00401a: ff d0                           call rax
    # nextln: 00401c: 0f 0b                           ud2
    # nextln: 00401e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004028: ff d0                           call rax
    # nextln: 00402a: 0f 0b                           ud2
    # nextln: 00402c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004036: ff d0                           call rax
    # nextln: 004038: 0f 0b                           ud2
    # nextln: 00403a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004044: ff d0                           call rax
    # nextln: 004046: 0f 0b                           ud2
    # nextln: 004048: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004052: ff d0                           call rax
    # nextln: 004054: 0f 0b                           ud2
    # nextln: 004056: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004060: ff d0                           call rax
    # nextln: 004062: 0f 0b                           ud2
    # nextln: 004064: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00406e: ff d0                           call rax
    # nextln: 004070: 0f 0b                           ud2
    # nextln: 004072: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00407c: ff d0                           call rax
    # nextln: 00407e: 0f 0b                           ud2
    # nextln: 004080: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00408a: ff d0                           call rax
    # nextln: 00408c: 0f 0b                           ud2
    # nextln: 00408e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004098: ff d0                           call rax
    # nextln: 00409a: 0f 0b                           ud2
    # nextln: 00409c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040a6: ff d0                           call rax
    # nextln: 0040a8: 0f 0b                           ud2
    # nextln: 0040aa: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040b4: ff d0                           call rax
    # nextln: 0040b6: 0f 0b                           ud2
    # nextln: 0040b8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040c2: ff d0                           call rax
    # nextln: 0040c4: 0f 0b                           ud2
    # nextln: 0040c6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040d0: ff d0                           call rax
    # nextln: 0040d2: 0f 0b                           ud2
    # nextln: 0040d4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040de: ff d0                           call rax
    # nextln: 0040e0: 0f 0b                           ud2
    # nextln: 0040e2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040ec: ff d0                           call rax
    # nextln: 0040ee: 0f 0b                           ud2
    # nextln: 0040f0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0040fa: ff d0                           call rax
    # nextln: 0040fc: 0f 0b                           ud2
    # nextln: 0040fe: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004108: ff d0                           call rax
    # nextln: 00410a: 0f 0b                           ud2
    # nextln: 00410c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004116: ff d0                           call rax
    # nextln: 004118: 0f 0b                           ud2
    # nextln: 00411a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004124: ff d0                           call rax
    # nextln: 004126: 0f 0b                           ud2
    # nextln: 004128: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004132: ff d0                           call rax
    # nextln: 004134: 0f 0b                           ud2
    # nextln: 004136: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004140: ff d0                           call rax
    # nextln: 004142: 0f 0b                           ud2
    # nextln: 004144: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00414e: ff d0                           call rax
    # nextln: 004150: 0f 0b                           ud2
    # nextln: 004152: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00415c: ff d0                           call rax
    # nextln: 00415e: 0f 0b                           ud2
    # nextln: 004160: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00416a: ff d0                           call rax
    # nextln: 00416c: 0f 0b                           ud2
    # nextln: 00416e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004178: ff d0                           call rax
    # nextln: 00417a: 0f 0b                           ud2
    # nextln: 00417c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004186: ff d0                           call rax
    # nextln: 004188: 0f 0b                           ud2
    # nextln: 00418a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004194: ff d0                           call rax
    # nextln: 004196: 0f 0b                           ud2
    # nextln: 004198: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041a2: ff d0                           call rax
    # nextln: 0041a4: 0f 0b                           ud2
    # nextln: 0041a6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041b0: ff d0                           call rax
    # nextln: 0041b2: 0f 0b                           ud2
    # nextln: 0041b4: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041be: ff d0                           call rax
    # nextln: 0041c0: 0f 0b                           ud2
    # nextln: 0041c2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041cc: ff d0                           call rax
    # nextln: 0041ce: 0f 0b                           ud2
    # nextln: 0041d0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041da: ff d0                           call rax
    # nextln: 0041dc: 0f 0b                           ud2
    # nextln: 0041de: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041e8: ff d0                           call rax
    # nextln: 0041ea: 0f 0b                           ud2
    # nextln: 0041ec: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0041f6: ff d0                           call rax
    # nextln: 0041f8: 0f 0b                           ud2
    # nextln: 0041fa: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004204: ff d0                           call rax
    # nextln: 004206: 0f 0b                           ud2
    # nextln: 004208: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004212: ff d0                           call rax
    # nextln: 004214: 0f 0b                           ud2
    # nextln: 004216: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004220: ff d0                           call rax
    # nextln: 004222: 0f 0b                           ud2
    # nextln: 004224: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00422e: ff d0                           call rax
    # nextln: 004230: 0f 0b                           ud2
    # nextln: 004232: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00423c: ff d0                           call rax
    # nextln: 00423e: 0f 0b                           ud2
    # nextln: 004240: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00424a: ff d0                           call rax
    # nextln: 00424c: 0f 0b                           ud2
    # nextln: 00424e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004258: ff d0                           call rax
    # nextln: 00425a: 0f 0b                           ud2
    # nextln: 00425c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004266: ff d0                           call rax
    # nextln: 004268: 0f 0b                           ud2
    # nextln: 00426a: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004274: ff d0                           call rax
    # nextln: 004276: 0f 0b                           ud2
    # nextln: 004278: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004282: ff d0                           call rax
    # nextln: 004284: 0f 0b                           ud2
    # nextln: 004286: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004290: ff d0                           call rax
    # nextln: 004292: 0f 0b                           ud2
    # nextln: 004294: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00429e: ff d0                           call rax
    # nextln: 0042a0: 0f 0b                           ud2
    # nextln: 0042a2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0042ac: ff d0                           call rax
    # nextln: 0042ae: 0f 0b                           ud2
    # nextln: 0042b0: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0042ba: ff d0                           call rax
    # nextln: 0042bc: 0f 0b                           ud2
    # nextln: 0042be: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0042c8: ff d0                           call rax
    # nextln: 0042ca: 0f 0b                           ud2
    # nextln: 0042cc: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0042d6: ff d0                           call rax
    # nextln: 0042d8: 0f 0b                           ud2
    # nextln: 0042da: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0042e4: ff d0                           call rax
    # nextln: 0042e6: 0f 0b                           ud2
    # nextln: 0042e8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 0042f2: ff d0                           call rax
    # nextln: 0042f4: 0f 0b                           ud2
    # nextln: 0042f6: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 004300: ff d0                           call rax
    # nextln: 004302: 0f 0b                           ud2
    # nextln: 004304: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @throw_index_out_of_range_exception + 0
    # nextln: 00430e: ff d0                           call rax
    # nextln: 004310: 0f 0b                           ud2

    %0:ctrl = entry
    %6:ptr = stackslot 4:4
    %7:ptr = stackslot 4:4
    %12:ptr = stackslot 8:8
    %13:ptr = stackslot 4:4
    %28:ptr = stackslot 8:8
    %29:ptr = stackslot 8:8
    %31:ptr = stackslot 1:1
    %8:i32 = iconst 1
    %17:i64 = iconst 40
    %11:i64 = iconst 32
    %20:i32 = iconst 0
    %21:ctrl = store.4 %0, %20, %7
    %22:ctrl = store.4 %21, %20, %6
    %23:ctrl = store.4 %22, %20, %13
    %30:ptr = iconst 105690555220944
    %32:ctrl = store.1 %23, %20, %31
    %33:i64 = iconst 34
    %34:i64 = iconst 33
    %35:ptr = iconst 105690555221008
    %36:ptr = iconst 105690555220976
    %8176:i64 = iconst 42
    %8174:i64 = iconst 2
    %8177:i64 = iconst 41
    %8175:i64 = iconst 1
    %8178:i64 = iconst 0
    %8179:i64 = iconst 3
    %8180:i64 = iconst 51
    %43:ptr = iconst 106721347401152
    %44:i64 = iconst 35
    %45:ptr = iconst 106721347409152
    %46:ptr = iconst 0
    %47:ctrl = store.8 %32, %46, %29
    %48:ctrl = store.8 %47, %46, %12
    %49:ctrl = store.8 %48, %46, %28
    %52:ctrl = store.4 %49, %20, %7
    %53:ctrl = store.4 %52, %20, %6
    %54:ctrl = store.4 %53, %8, %13
    %55:ctrl = store.1 %54, %8, %31
    %56:ctrl, %57:ptr = call @gc_new %55, %45, %44
    %58:ctrl = call @"System.Void Tests.Bool_No_Op::.ctor()" %56, %57
    %59:ctrl = store.8 %58, %57, %29
    %60:ctrl, %61:ptr = call @gc_new %59, %43, %8180
    %62:ptr = ptroff %61, %11
    %63:ctrl = store.4 %60, %8179, %62
    %64:ctrl = store.8 %63, %61, %12
    %65:ctrl, %66:ptr = call @gc_new %64, %43, %8180
    %67:ptr = ptroff %66, %11
    %68:ctrl = store.4 %65, %8179, %67
    %69:ctrl = store.8 %68, %66, %28
    %70:ctrl, %71:ptr = load.8 %69, %28
    %83:ptr = ptroff %71, %17
    %72:ptr = ptroff %71, %11
    %73:ctrl, %74:i64 = load.4 %70, %72
    %75:i64 = icmp slt %8178, %74
    %76:ctrl, %77:ctrl = brcond %73, %75
    %84:ctrl = store.1 %76, %8, %83
    %85:ctrl, %86:ptr = load.8 %84, %28
    %98:ptr = ptroff %86, %8177
    %87:ptr = ptroff %86, %11
    %88:ctrl, %89:i64 = load.4 %85, %87
    %90:i64 = icmp slt %8175, %89
    %91:ctrl, %92:ctrl = brcond %88, %90
    %99:ctrl = store.1 %91, %8, %98
    %100:ctrl, %101:ptr = load.8 %99, %28
    %113:ptr = ptroff %101, %8176
    %102:ptr = ptroff %101, %11
    %103:ctrl, %104:i64 = load.4 %100, %102
    %105:i64 = icmp slt %8174, %104
    %106:ctrl, %107:ctrl = brcond %103, %105
    %114:ctrl = store.1 %106, %8, %113
    %115:ctrl = store.1 %114, %8, %30
    %116:ctrl = store.1 %115, %20, %36
    %117:ctrl = store.1 %116, %8, %35
    %118:ctrl, %119:ptr = load.8 %117, %29
    %120:ptr = ptroff %119, %11
    %121:ctrl = store.1 %118, %8, %120
    %122:ctrl, %123:ptr = load.8 %121, %29
    %124:ptr = ptroff %123, %34
    %125:ctrl = store.1 %122, %20, %124
    %126:ctrl, %127:ptr = load.8 %125, %29
    %128:ptr = ptroff %127, %33
    %129:ctrl = store.1 %126, %8, %128
    %130:ctrl, %131:i32 = load.4 %129, %7
    %132:i32 = iadd %131, %8
    %133:ctrl = store.4 %130, %132, %7
    %134:ctrl, %135:i32 = load.4 %133, %7
    %136:i32 = iadd %135, %8
    %137:ctrl = store.4 %134, %136, %7
    %138:ctrl, %139:i32 = load.4 %137, %7
    %140:i32 = iadd %139, %8
    %141:ctrl = store.4 %138, %140, %7
    %142:ctrl, %143:i32 = load.4 %141, %7
    %144:i32 = iadd %143, %8
    %145:ctrl = store.4 %142, %144, %7
    %146:ctrl, %147:i32 = load.4 %145, %7
    %148:i32 = iadd %147, %8
    %149:ctrl = store.4 %146, %148, %7
    %150:ctrl, %151:i32 = load.4 %149, %7
    %152:i32 = iadd %151, %8
    %153:ctrl = store.4 %150, %152, %7
    %154:ctrl, %155:i32 = load.4 %153, %7
    %156:i32 = iadd %155, %8
    %157:ctrl = store.4 %154, %156, %7
    %158:ctrl, %159:i32 = load.4 %157, %7
    %160:i32 = iadd %159, %8
    %161:ctrl = store.4 %158, %160, %7
    %162:ctrl, %163:i32 = load.4 %161, %6
    %164:i32 = iadd %163, %8
    %165:ctrl = store.4 %162, %164, %6
    %166:ctrl, %167:i32 = load.4 %165, %6
    %168:i32 = iadd %167, %8
    %169:ctrl = store.4 %166, %168, %6
    %170:ctrl, %171:i32 = load.4 %169, %6
    %172:i32 = iadd %171, %8
    %173:ctrl = store.4 %170, %172, %6
    %174:ctrl, %175:i32 = load.4 %173, %6
    %176:i32 = iadd %175, %8
    %177:ctrl = store.4 %174, %176, %6
    %178:ctrl, %179:i32 = load.4 %177, %6
    %180:i32 = iadd %179, %8
    %181:ctrl = store.4 %178, %180, %6
    %182:ctrl, %183:i32 = load.4 %181, %6
    %184:i32 = iadd %183, %8
    %185:ctrl = store.4 %182, %184, %6
    %186:ctrl, %187:i32 = load.4 %185, %6
    %188:i32 = iadd %187, %8
    %189:ctrl = store.4 %186, %188, %6
    %190:ctrl, %191:i32 = load.4 %189, %6
    %192:i32 = iadd %191, %8
    %193:ctrl = store.4 %190, %192, %6
    %194:ctrl, %195:i32 = load.1 %193, %31
    %196:ctrl, %197:ctrl = brcond %194, %195
    %200:ctrl, %201:i32 = load.4 %196, %7
    %202:i32 = iadd %201, %8
    %203:ctrl = store.4 %200, %202, %7
    %206:ctrl, %207:i32 = load.4 %197, %6
    %208:i32 = iadd %207, %8
    %209:ctrl = store.4 %206, %208, %6
    %210:ctrl, %211:phisel = region %203, %209
    %212:ctrl, %213:i32 = load.1 %210, %31
    %214:ctrl, %215:ctrl = brcond %212, %213
    %218:ctrl, %219:i32 = load.4 %214, %7
    %220:i32 = iadd %219, %8
    %221:ctrl = store.4 %218, %220, %7
    %224:ctrl, %225:i32 = load.4 %215, %6
    %226:i32 = iadd %225, %8
    %227:ctrl = store.4 %224, %226, %6
    %228:ctrl, %229:phisel = region %221, %227
    %230:ctrl, %231:i32 = load.1 %228, %31
    %232:ctrl, %233:ctrl = brcond %230, %231
    %236:ctrl, %237:i32 = load.4 %232, %7
    %238:i32 = iadd %237, %8
    %239:ctrl = store.4 %236, %238, %7
    %242:ctrl, %243:i32 = load.4 %233, %6
    %244:i32 = iadd %243, %8
    %245:ctrl = store.4 %242, %244, %6
    %246:ctrl, %247:phisel = region %239, %245
    %248:ctrl, %249:i32 = load.1 %246, %31
    %250:ctrl, %251:ctrl = brcond %248, %249
    %254:ctrl, %255:i32 = load.4 %250, %7
    %256:i32 = iadd %255, %8
    %257:ctrl = store.4 %254, %256, %7
    %260:ctrl, %261:i32 = load.4 %251, %6
    %262:i32 = iadd %261, %8
    %263:ctrl = store.4 %260, %262, %6
    %264:ctrl, %265:phisel = region %257, %263
    %266:ctrl, %267:i32 = load.1 %264, %31
    %268:ctrl, %269:ctrl = brcond %266, %267
    %272:ctrl, %273:i32 = load.4 %268, %7
    %274:i32 = iadd %273, %8
    %275:ctrl = store.4 %272, %274, %7
    %278:ctrl, %279:i32 = load.4 %269, %6
    %280:i32 = iadd %279, %8
    %281:ctrl = store.4 %278, %280, %6
    %282:ctrl, %283:phisel = region %275, %281
    %284:ctrl, %285:i32 = load.1 %282, %31
    %286:ctrl, %287:ctrl = brcond %284, %285
    %290:ctrl, %291:i32 = load.4 %286, %7
    %292:i32 = iadd %291, %8
    %293:ctrl = store.4 %290, %292, %7
    %296:ctrl, %297:i32 = load.4 %287, %6
    %298:i32 = iadd %297, %8
    %299:ctrl = store.4 %296, %298, %6
    %300:ctrl, %301:phisel = region %293, %299
    %302:ctrl, %303:i32 = load.1 %300, %31
    %304:ctrl, %305:ctrl = brcond %302, %303
    %308:ctrl, %309:i32 = load.4 %304, %7
    %310:i32 = iadd %309, %8
    %311:ctrl = store.4 %308, %310, %7
    %314:ctrl, %315:i32 = load.4 %305, %6
    %316:i32 = iadd %315, %8
    %317:ctrl = store.4 %314, %316, %6
    %318:ctrl, %319:phisel = region %311, %317
    %320:ctrl, %321:i32 = load.1 %318, %31
    %322:ctrl, %323:ctrl = brcond %320, %321
    %326:ctrl, %327:i32 = load.4 %322, %7
    %328:i32 = iadd %327, %8
    %329:ctrl = store.4 %326, %328, %7
    %332:ctrl, %333:i32 = load.4 %323, %6
    %334:i32 = iadd %333, %8
    %335:ctrl = store.4 %332, %334, %6
    %336:ctrl, %337:phisel = region %329, %335
    %338:ctrl, %339:i32 = load.1 %336, %30
    %340:ctrl, %341:ctrl = brcond %338, %339
    %344:ctrl, %345:i32 = load.4 %340, %7
    %346:i32 = iadd %345, %8
    %347:ctrl = store.4 %344, %346, %7
    %350:ctrl, %351:i32 = load.4 %341, %6
    %352:i32 = iadd %351, %8
    %353:ctrl = store.4 %350, %352, %6
    %354:ctrl, %355:phisel = region %347, %353
    %356:ctrl, %357:i32 = load.1 %354, %30
    %358:ctrl, %359:ctrl = brcond %356, %357
    %362:ctrl, %363:i32 = load.4 %358, %7
    %364:i32 = iadd %363, %8
    %365:ctrl = store.4 %362, %364, %7
    %368:ctrl, %369:i32 = load.4 %359, %6
    %370:i32 = iadd %369, %8
    %371:ctrl = store.4 %368, %370, %6
    %372:ctrl, %373:phisel = region %365, %371
    %374:ctrl, %375:i32 = load.1 %372, %30
    %376:ctrl, %377:ctrl = brcond %374, %375
    %380:ctrl, %381:i32 = load.4 %376, %7
    %382:i32 = iadd %381, %8
    %383:ctrl = store.4 %380, %382, %7
    %386:ctrl, %387:i32 = load.4 %377, %6
    %388:i32 = iadd %387, %8
    %389:ctrl = store.4 %386, %388, %6
    %390:ctrl, %391:phisel = region %383, %389
    %392:ctrl, %393:i32 = load.1 %390, %30
    %394:ctrl, %395:ctrl = brcond %392, %393
    %398:ctrl, %399:i32 = load.4 %394, %7
    %400:i32 = iadd %399, %8
    %401:ctrl = store.4 %398, %400, %7
    %404:ctrl, %405:i32 = load.4 %395, %6
    %406:i32 = iadd %405, %8
    %407:ctrl = store.4 %404, %406, %6
    %408:ctrl, %409:phisel = region %401, %407
    %410:ctrl, %411:i32 = load.1 %408, %30
    %412:ctrl, %413:ctrl = brcond %410, %411
    %416:ctrl, %417:i32 = load.4 %412, %7
    %418:i32 = iadd %417, %8
    %419:ctrl = store.4 %416, %418, %7
    %422:ctrl, %423:i32 = load.4 %413, %6
    %424:i32 = iadd %423, %8
    %425:ctrl = store.4 %422, %424, %6
    %426:ctrl, %427:phisel = region %419, %425
    %428:ctrl, %429:i32 = load.1 %426, %30
    %430:ctrl, %431:ctrl = brcond %428, %429
    %434:ctrl, %435:i32 = load.4 %430, %7
    %436:i32 = iadd %435, %8
    %437:ctrl = store.4 %434, %436, %7
    %440:ctrl, %441:i32 = load.4 %431, %6
    %442:i32 = iadd %441, %8
    %443:ctrl = store.4 %440, %442, %6
    %444:ctrl, %445:phisel = region %437, %443
    %446:ctrl, %447:i32 = load.1 %444, %30
    %448:ctrl, %449:ctrl = brcond %446, %447
    %452:ctrl, %453:i32 = load.4 %448, %7
    %454:i32 = iadd %453, %8
    %455:ctrl = store.4 %452, %454, %7
    %458:ctrl, %459:i32 = load.4 %449, %6
    %460:i32 = iadd %459, %8
    %461:ctrl = store.4 %458, %460, %6
    %462:ctrl, %463:phisel = region %455, %461
    %464:ctrl, %465:i32 = load.1 %462, %30
    %466:ctrl, %467:ctrl = brcond %464, %465
    %470:ctrl, %471:i32 = load.4 %466, %7
    %472:i32 = iadd %471, %8
    %473:ctrl = store.4 %470, %472, %7
    %476:ctrl, %477:i32 = load.4 %467, %6
    %478:i32 = iadd %477, %8
    %479:ctrl = store.4 %476, %478, %6
    %480:ctrl, %481:phisel = region %473, %479
    %482:ctrl, %483:ptr = load.8 %480, %29
    %484:ptr = ptroff %483, %11
    %485:ctrl, %486:i32 = load.1 %482, %484
    %487:ctrl, %488:ctrl = brcond %485, %486
    %491:ctrl, %492:i32 = load.4 %487, %7
    %493:i32 = iadd %492, %8
    %494:ctrl = store.4 %491, %493, %7
    %497:ctrl, %498:i32 = load.4 %488, %6
    %499:i32 = iadd %498, %8
    %500:ctrl = store.4 %497, %499, %6
    %501:ctrl, %502:phisel = region %494, %500
    %503:ctrl, %504:ptr = load.8 %501, %29
    %505:ptr = ptroff %504, %11
    %506:ctrl, %507:i32 = load.1 %503, %505
    %508:ctrl, %509:ctrl = brcond %506, %507
    %512:ctrl, %513:i32 = load.4 %508, %7
    %514:i32 = iadd %513, %8
    %515:ctrl = store.4 %512, %514, %7
    %518:ctrl, %519:i32 = load.4 %509, %6
    %520:i32 = iadd %519, %8
    %521:ctrl = store.4 %518, %520, %6
    %522:ctrl, %523:phisel = region %515, %521
    %524:ctrl, %525:ptr = load.8 %522, %29
    %526:ptr = ptroff %525, %11
    %527:ctrl, %528:i32 = load.1 %524, %526
    %529:ctrl, %530:ctrl = brcond %527, %528
    %533:ctrl, %534:i32 = load.4 %529, %7
    %535:i32 = iadd %534, %8
    %536:ctrl = store.4 %533, %535, %7
    %539:ctrl, %540:i32 = load.4 %530, %6
    %541:i32 = iadd %540, %8
    %542:ctrl = store.4 %539, %541, %6
    %543:ctrl, %544:phisel = region %536, %542
    %545:ctrl, %546:ptr = load.8 %543, %29
    %547:ptr = ptroff %546, %11
    %548:ctrl, %549:i32 = load.1 %545, %547
    %550:ctrl, %551:ctrl = brcond %548, %549
    %554:ctrl, %555:i32 = load.4 %550, %7
    %556:i32 = iadd %555, %8
    %557:ctrl = store.4 %554, %556, %7
    %560:ctrl, %561:i32 = load.4 %551, %6
    %562:i32 = iadd %561, %8
    %563:ctrl = store.4 %560, %562, %6
    %564:ctrl, %565:phisel = region %557, %563
    %566:ctrl, %567:ptr = load.8 %564, %29
    %568:ptr = ptroff %567, %11
    %569:ctrl, %570:i32 = load.1 %566, %568
    %571:ctrl, %572:ctrl = brcond %569, %570
    %575:ctrl, %576:i32 = load.4 %571, %7
    %577:i32 = iadd %576, %8
    %578:ctrl = store.4 %575, %577, %7
    %581:ctrl, %582:i32 = load.4 %572, %6
    %583:i32 = iadd %582, %8
    %584:ctrl = store.4 %581, %583, %6
    %585:ctrl, %586:phisel = region %578, %584
    %587:ctrl, %588:ptr = load.8 %585, %29
    %589:ptr = ptroff %588, %11
    %590:ctrl, %591:i32 = load.1 %587, %589
    %592:ctrl, %593:ctrl = brcond %590, %591
    %596:ctrl, %597:i32 = load.4 %592, %7
    %598:i32 = iadd %597, %8
    %599:ctrl = store.4 %596, %598, %7
    %602:ctrl, %603:i32 = load.4 %593, %6
    %604:i32 = iadd %603, %8
    %605:ctrl = store.4 %602, %604, %6
    %606:ctrl, %607:phisel = region %599, %605
    %608:ctrl, %609:ptr = load.8 %606, %29
    %610:ptr = ptroff %609, %11
    %611:ctrl, %612:i32 = load.1 %608, %610
    %613:ctrl, %614:ctrl = brcond %611, %612
    %617:ctrl, %618:i32 = load.4 %613, %7
    %619:i32 = iadd %618, %8
    %620:ctrl = store.4 %617, %619, %7
    %623:ctrl, %624:i32 = load.4 %614, %6
    %625:i32 = iadd %624, %8
    %626:ctrl = store.4 %623, %625, %6
    %627:ctrl, %628:phisel = region %620, %626
    %629:ctrl, %630:ptr = load.8 %627, %29
    %631:ptr = ptroff %630, %11
    %632:ctrl, %633:i32 = load.1 %629, %631
    %634:ctrl, %635:ctrl = brcond %632, %633
    %638:ctrl, %639:i32 = load.4 %634, %7
    %640:i32 = iadd %639, %8
    %641:ctrl = store.4 %638, %640, %7
    %644:ctrl, %645:i32 = load.4 %635, %6
    %646:i32 = iadd %645, %8
    %647:ctrl = store.4 %644, %646, %6
    %648:ctrl, %649:phisel = region %641, %647
    %650:ctrl, %651:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %648
    %652:ctrl, %653:ctrl = brcond %650, %651
    %656:ctrl, %657:i32 = load.4 %652, %7
    %658:i32 = iadd %657, %8
    %659:ctrl = store.4 %656, %658, %7
    %662:ctrl, %663:i32 = load.4 %653, %6
    %664:i32 = iadd %663, %8
    %665:ctrl = store.4 %662, %664, %6
    %666:ctrl, %667:phisel = region %659, %665
    %668:ctrl, %669:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %666
    %670:ctrl, %671:ctrl = brcond %668, %669
    %674:ctrl, %675:i32 = load.4 %670, %7
    %676:i32 = iadd %675, %8
    %677:ctrl = store.4 %674, %676, %7
    %680:ctrl, %681:i32 = load.4 %671, %6
    %682:i32 = iadd %681, %8
    %683:ctrl = store.4 %680, %682, %6
    %684:ctrl, %685:phisel = region %677, %683
    %686:ctrl, %687:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %684
    %688:ctrl, %689:ctrl = brcond %686, %687
    %692:ctrl, %693:i32 = load.4 %688, %7
    %694:i32 = iadd %693, %8
    %695:ctrl = store.4 %692, %694, %7
    %698:ctrl, %699:i32 = load.4 %689, %6
    %700:i32 = iadd %699, %8
    %701:ctrl = store.4 %698, %700, %6
    %702:ctrl, %703:phisel = region %695, %701
    %704:ctrl, %705:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %702
    %706:ctrl, %707:ctrl = brcond %704, %705
    %710:ctrl, %711:i32 = load.4 %706, %7
    %712:i32 = iadd %711, %8
    %713:ctrl = store.4 %710, %712, %7
    %716:ctrl, %717:i32 = load.4 %707, %6
    %718:i32 = iadd %717, %8
    %719:ctrl = store.4 %716, %718, %6
    %720:ctrl, %721:phisel = region %713, %719
    %722:ctrl, %723:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %720
    %724:ctrl, %725:ctrl = brcond %722, %723
    %728:ctrl, %729:i32 = load.4 %724, %7
    %730:i32 = iadd %729, %8
    %731:ctrl = store.4 %728, %730, %7
    %734:ctrl, %735:i32 = load.4 %725, %6
    %736:i32 = iadd %735, %8
    %737:ctrl = store.4 %734, %736, %6
    %738:ctrl, %739:phisel = region %731, %737
    %740:ctrl, %741:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %738
    %742:ctrl, %743:ctrl = brcond %740, %741
    %746:ctrl, %747:i32 = load.4 %742, %7
    %748:i32 = iadd %747, %8
    %749:ctrl = store.4 %746, %748, %7
    %752:ctrl, %753:i32 = load.4 %743, %6
    %754:i32 = iadd %753, %8
    %755:ctrl = store.4 %752, %754, %6
    %756:ctrl, %757:phisel = region %749, %755
    %758:ctrl, %759:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %756
    %760:ctrl, %761:ctrl = brcond %758, %759
    %764:ctrl, %765:i32 = load.4 %760, %7
    %766:i32 = iadd %765, %8
    %767:ctrl = store.4 %764, %766, %7
    %770:ctrl, %771:i32 = load.4 %761, %6
    %772:i32 = iadd %771, %8
    %773:ctrl = store.4 %770, %772, %6
    %774:ctrl, %775:phisel = region %767, %773
    %776:ctrl, %777:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %774
    %778:ctrl, %779:ctrl = brcond %776, %777
    %782:ctrl, %783:i32 = load.4 %778, %7
    %784:i32 = iadd %783, %8
    %785:ctrl = store.4 %782, %784, %7
    %788:ctrl, %789:i32 = load.4 %779, %6
    %790:i32 = iadd %789, %8
    %791:ctrl = store.4 %788, %790, %6
    %792:ctrl, %793:phisel = region %785, %791
    %794:ctrl, %795:ptr = load.8 %792, %28
    %796:ctrl, %797:i32 = load.4 %794, %13
    %798:i64 = iext %797
    %799:i64 = sfill 32 %798
    %801:i64 = iadd %799, %17
    %813:ptr = ptroff %795, %801
    %802:ptr = ptroff %795, %11
    %803:ctrl, %804:i64 = load.4 %796, %802
    %805:i64 = icmp slt %799, %804
    %806:ctrl, %807:ctrl = brcond %803, %805
    %814:ctrl, %815:i32 = load.1 %806, %813
    %816:ctrl, %817:ctrl = brcond %814, %815
    %820:ctrl, %821:i32 = load.4 %816, %7
    %822:i32 = iadd %821, %8
    %823:ctrl = store.4 %820, %822, %7
    %826:ctrl, %827:i32 = load.4 %817, %6
    %828:i32 = iadd %827, %8
    %829:ctrl = store.4 %826, %828, %6
    %830:ctrl, %831:phisel = region %823, %829
    %832:ctrl, %833:ptr = load.8 %830, %28
    %834:ctrl, %835:i32 = load.4 %832, %13
    %836:i64 = iext %835
    %837:i64 = sfill 32 %836
    %839:i64 = iadd %837, %17
    %851:ptr = ptroff %833, %839
    %840:ptr = ptroff %833, %11
    %841:ctrl, %842:i64 = load.4 %834, %840
    %843:i64 = icmp slt %837, %842
    %844:ctrl, %845:ctrl = brcond %841, %843
    %852:ctrl, %853:i32 = load.1 %844, %851
    %854:ctrl, %855:ctrl = brcond %852, %853
    %858:ctrl, %859:i32 = load.4 %854, %7
    %860:i32 = iadd %859, %8
    %861:ctrl = store.4 %858, %860, %7
    %864:ctrl, %865:i32 = load.4 %855, %6
    %866:i32 = iadd %865, %8
    %867:ctrl = store.4 %864, %866, %6
    %868:ctrl, %869:phisel = region %861, %867
    %870:ctrl, %871:ptr = load.8 %868, %28
    %872:ctrl, %873:i32 = load.4 %870, %13
    %874:i64 = iext %873
    %875:i64 = sfill 32 %874
    %877:i64 = iadd %875, %17
    %889:ptr = ptroff %871, %877
    %878:ptr = ptroff %871, %11
    %879:ctrl, %880:i64 = load.4 %872, %878
    %881:i64 = icmp slt %875, %880
    %882:ctrl, %883:ctrl = brcond %879, %881
    %890:ctrl, %891:i32 = load.1 %882, %889
    %892:ctrl, %893:ctrl = brcond %890, %891
    %896:ctrl, %897:i32 = load.4 %892, %7
    %898:i32 = iadd %897, %8
    %899:ctrl = store.4 %896, %898, %7
    %902:ctrl, %903:i32 = load.4 %893, %6
    %904:i32 = iadd %903, %8
    %905:ctrl = store.4 %902, %904, %6
    %906:ctrl, %907:phisel = region %899, %905
    %908:ctrl, %909:ptr = load.8 %906, %28
    %910:ctrl, %911:i32 = load.4 %908, %13
    %912:i64 = iext %911
    %913:i64 = sfill 32 %912
    %915:i64 = iadd %913, %17
    %927:ptr = ptroff %909, %915
    %916:ptr = ptroff %909, %11
    %917:ctrl, %918:i64 = load.4 %910, %916
    %919:i64 = icmp slt %913, %918
    %920:ctrl, %921:ctrl = brcond %917, %919
    %928:ctrl, %929:i32 = load.1 %920, %927
    %930:ctrl, %931:ctrl = brcond %928, %929
    %934:ctrl, %935:i32 = load.4 %930, %7
    %936:i32 = iadd %935, %8
    %937:ctrl = store.4 %934, %936, %7
    %940:ctrl, %941:i32 = load.4 %931, %6
    %942:i32 = iadd %941, %8
    %943:ctrl = store.4 %940, %942, %6
    %944:ctrl, %945:phisel = region %937, %943
    %946:ctrl, %947:ptr = load.8 %944, %28
    %948:ctrl, %949:i32 = load.4 %946, %13
    %950:i64 = iext %949
    %951:i64 = sfill 32 %950
    %953:i64 = iadd %951, %17
    %965:ptr = ptroff %947, %953
    %954:ptr = ptroff %947, %11
    %955:ctrl, %956:i64 = load.4 %948, %954
    %957:i64 = icmp slt %951, %956
    %958:ctrl, %959:ctrl = brcond %955, %957
    %966:ctrl, %967:i32 = load.1 %958, %965
    %968:ctrl, %969:ctrl = brcond %966, %967
    %972:ctrl, %973:i32 = load.4 %968, %7
    %974:i32 = iadd %973, %8
    %975:ctrl = store.4 %972, %974, %7
    %978:ctrl, %979:i32 = load.4 %969, %6
    %980:i32 = iadd %979, %8
    %981:ctrl = store.4 %978, %980, %6
    %982:ctrl, %983:phisel = region %975, %981
    %984:ctrl, %985:ptr = load.8 %982, %28
    %986:ctrl, %987:i32 = load.4 %984, %13
    %988:i64 = iext %987
    %989:i64 = sfill 32 %988
    %991:i64 = iadd %989, %17
    %1003:ptr = ptroff %985, %991
    %992:ptr = ptroff %985, %11
    %993:ctrl, %994:i64 = load.4 %986, %992
    %995:i64 = icmp slt %989, %994
    %996:ctrl, %997:ctrl = brcond %993, %995
    %1004:ctrl, %1005:i32 = load.1 %996, %1003
    %1006:ctrl, %1007:ctrl = brcond %1004, %1005
    %1010:ctrl, %1011:i32 = load.4 %1006, %7
    %1012:i32 = iadd %1011, %8
    %1013:ctrl = store.4 %1010, %1012, %7
    %1016:ctrl, %1017:i32 = load.4 %1007, %6
    %1018:i32 = iadd %1017, %8
    %1019:ctrl = store.4 %1016, %1018, %6
    %1020:ctrl, %1021:phisel = region %1013, %1019
    %1022:ctrl, %1023:ptr = load.8 %1020, %28
    %1024:ctrl, %1025:i32 = load.4 %1022, %13
    %1026:i64 = iext %1025
    %1027:i64 = sfill 32 %1026
    %1029:i64 = iadd %1027, %17
    %1041:ptr = ptroff %1023, %1029
    %1030:ptr = ptroff %1023, %11
    %1031:ctrl, %1032:i64 = load.4 %1024, %1030
    %1033:i64 = icmp slt %1027, %1032
    %1034:ctrl, %1035:ctrl = brcond %1031, %1033
    %1042:ctrl, %1043:i32 = load.1 %1034, %1041
    %1044:ctrl, %1045:ctrl = brcond %1042, %1043
    %1048:ctrl, %1049:i32 = load.4 %1044, %7
    %1050:i32 = iadd %1049, %8
    %1051:ctrl = store.4 %1048, %1050, %7
    %1054:ctrl, %1055:i32 = load.4 %1045, %6
    %1056:i32 = iadd %1055, %8
    %1057:ctrl = store.4 %1054, %1056, %6
    %1058:ctrl, %1059:phisel = region %1051, %1057
    %1060:ctrl, %1061:ptr = load.8 %1058, %28
    %1062:ctrl, %1063:i32 = load.4 %1060, %13
    %1064:i64 = iext %1063
    %1065:i64 = sfill 32 %1064
    %1067:i64 = iadd %1065, %17
    %1079:ptr = ptroff %1061, %1067
    %1068:ptr = ptroff %1061, %11
    %1069:ctrl, %1070:i64 = load.4 %1062, %1068
    %1071:i64 = icmp slt %1065, %1070
    %1072:ctrl, %1073:ctrl = brcond %1069, %1071
    %1080:ctrl, %1081:i32 = load.1 %1072, %1079
    %1082:ctrl, %1083:ctrl = brcond %1080, %1081
    %1086:ctrl, %1087:i32 = load.4 %1082, %7
    %1088:i32 = iadd %1087, %8
    %1089:ctrl = store.4 %1086, %1088, %7
    %1092:ctrl, %1093:i32 = load.4 %1083, %6
    %1094:i32 = iadd %1093, %8
    %1095:ctrl = store.4 %1092, %1094, %6
    %1096:ctrl, %1097:phisel = region %1089, %1095
    %1098:ctrl, %1099:ptr = load.8 %1096, %12
    %1100:ctrl, %1101:i32 = load.4 %1098, %13
    %1102:i64 = iext %1101
    %1103:i64 = sfill 32 %1102
    %1105:i64 = iadd %1103, %17
    %1117:ptr = ptroff %1099, %1105
    %1106:ptr = ptroff %1099, %11
    %1107:ctrl, %1108:i64 = load.4 %1100, %1106
    %1109:i64 = icmp slt %1103, %1108
    %1110:ctrl, %1111:ctrl = brcond %1107, %1109
    %1118:ctrl, %1119:i32 = load.1 %1110, %1117
    %1120:ctrl, %1121:ctrl = brcond %1118, %1119
    %1124:ctrl, %1125:i32 = load.4 %1120, %7
    %1126:i32 = iadd %1125, %8
    %1127:ctrl = store.4 %1124, %1126, %7
    %1130:ctrl, %1131:i32 = load.4 %1121, %6
    %1132:i32 = iadd %1131, %8
    %1133:ctrl = store.4 %1130, %1132, %6
    %1134:ctrl, %1135:phisel = region %1127, %1133
    %1136:ctrl, %1137:ptr = load.8 %1134, %12
    %1138:ctrl, %1139:i32 = load.4 %1136, %13
    %1140:i64 = iext %1139
    %1141:i64 = sfill 32 %1140
    %1143:i64 = iadd %1141, %17
    %1155:ptr = ptroff %1137, %1143
    %1144:ptr = ptroff %1137, %11
    %1145:ctrl, %1146:i64 = load.4 %1138, %1144
    %1147:i64 = icmp slt %1141, %1146
    %1148:ctrl, %1149:ctrl = brcond %1145, %1147
    %1156:ctrl, %1157:i32 = load.1 %1148, %1155
    %1158:ctrl, %1159:ctrl = brcond %1156, %1157
    %1162:ctrl, %1163:i32 = load.4 %1158, %7
    %1164:i32 = iadd %1163, %8
    %1165:ctrl = store.4 %1162, %1164, %7
    %1168:ctrl, %1169:i32 = load.4 %1159, %6
    %1170:i32 = iadd %1169, %8
    %1171:ctrl = store.4 %1168, %1170, %6
    %1172:ctrl, %1173:phisel = region %1165, %1171
    %1174:ctrl, %1175:ptr = load.8 %1172, %12
    %1176:ctrl, %1177:i32 = load.4 %1174, %13
    %1178:i64 = iext %1177
    %1179:i64 = sfill 32 %1178
    %1181:i64 = iadd %1179, %17
    %1193:ptr = ptroff %1175, %1181
    %1182:ptr = ptroff %1175, %11
    %1183:ctrl, %1184:i64 = load.4 %1176, %1182
    %1185:i64 = icmp slt %1179, %1184
    %1186:ctrl, %1187:ctrl = brcond %1183, %1185
    %1194:ctrl, %1195:i32 = load.1 %1186, %1193
    %1196:ctrl, %1197:ctrl = brcond %1194, %1195
    %1200:ctrl, %1201:i32 = load.4 %1196, %7
    %1202:i32 = iadd %1201, %8
    %1203:ctrl = store.4 %1200, %1202, %7
    %1206:ctrl, %1207:i32 = load.4 %1197, %6
    %1208:i32 = iadd %1207, %8
    %1209:ctrl = store.4 %1206, %1208, %6
    %1210:ctrl, %1211:phisel = region %1203, %1209
    %1212:ctrl, %1213:ptr = load.8 %1210, %12
    %1214:ctrl, %1215:i32 = load.4 %1212, %13
    %1216:i64 = iext %1215
    %1217:i64 = sfill 32 %1216
    %1219:i64 = iadd %1217, %17
    %1231:ptr = ptroff %1213, %1219
    %1220:ptr = ptroff %1213, %11
    %1221:ctrl, %1222:i64 = load.4 %1214, %1220
    %1223:i64 = icmp slt %1217, %1222
    %1224:ctrl, %1225:ctrl = brcond %1221, %1223
    %1232:ctrl, %1233:i32 = load.1 %1224, %1231
    %1234:ctrl, %1235:ctrl = brcond %1232, %1233
    %1238:ctrl, %1239:i32 = load.4 %1234, %7
    %1240:i32 = iadd %1239, %8
    %1241:ctrl = store.4 %1238, %1240, %7
    %1244:ctrl, %1245:i32 = load.4 %1235, %6
    %1246:i32 = iadd %1245, %8
    %1247:ctrl = store.4 %1244, %1246, %6
    %1248:ctrl, %1249:phisel = region %1241, %1247
    %1250:ctrl, %1251:ptr = load.8 %1248, %12
    %1252:ctrl, %1253:i32 = load.4 %1250, %13
    %1254:i64 = iext %1253
    %1255:i64 = sfill 32 %1254
    %1257:i64 = iadd %1255, %17
    %1269:ptr = ptroff %1251, %1257
    %1258:ptr = ptroff %1251, %11
    %1259:ctrl, %1260:i64 = load.4 %1252, %1258
    %1261:i64 = icmp slt %1255, %1260
    %1262:ctrl, %1263:ctrl = brcond %1259, %1261
    %1270:ctrl, %1271:i32 = load.1 %1262, %1269
    %1272:ctrl, %1273:ctrl = brcond %1270, %1271
    %1276:ctrl, %1277:i32 = load.4 %1272, %7
    %1278:i32 = iadd %1277, %8
    %1279:ctrl = store.4 %1276, %1278, %7
    %1282:ctrl, %1283:i32 = load.4 %1273, %6
    %1284:i32 = iadd %1283, %8
    %1285:ctrl = store.4 %1282, %1284, %6
    %1286:ctrl, %1287:phisel = region %1279, %1285
    %1288:ctrl, %1289:ptr = load.8 %1286, %12
    %1290:ctrl, %1291:i32 = load.4 %1288, %13
    %1292:i64 = iext %1291
    %1293:i64 = sfill 32 %1292
    %1295:i64 = iadd %1293, %17
    %1307:ptr = ptroff %1289, %1295
    %1296:ptr = ptroff %1289, %11
    %1297:ctrl, %1298:i64 = load.4 %1290, %1296
    %1299:i64 = icmp slt %1293, %1298
    %1300:ctrl, %1301:ctrl = brcond %1297, %1299
    %1308:ctrl, %1309:i32 = load.1 %1300, %1307
    %1310:ctrl, %1311:ctrl = brcond %1308, %1309
    %1314:ctrl, %1315:i32 = load.4 %1310, %7
    %1316:i32 = iadd %1315, %8
    %1317:ctrl = store.4 %1314, %1316, %7
    %1320:ctrl, %1321:i32 = load.4 %1311, %6
    %1322:i32 = iadd %1321, %8
    %1323:ctrl = store.4 %1320, %1322, %6
    %1324:ctrl, %1325:phisel = region %1317, %1323
    %1326:ctrl, %1327:ptr = load.8 %1324, %12
    %1328:ctrl, %1329:i32 = load.4 %1326, %13
    %1330:i64 = iext %1329
    %1331:i64 = sfill 32 %1330
    %1333:i64 = iadd %1331, %17
    %1345:ptr = ptroff %1327, %1333
    %1334:ptr = ptroff %1327, %11
    %1335:ctrl, %1336:i64 = load.4 %1328, %1334
    %1337:i64 = icmp slt %1331, %1336
    %1338:ctrl, %1339:ctrl = brcond %1335, %1337
    %1346:ctrl, %1347:i32 = load.1 %1338, %1345
    %1348:ctrl, %1349:ctrl = brcond %1346, %1347
    %1352:ctrl, %1353:i32 = load.4 %1348, %7
    %1354:i32 = iadd %1353, %8
    %1355:ctrl = store.4 %1352, %1354, %7
    %1358:ctrl, %1359:i32 = load.4 %1349, %6
    %1360:i32 = iadd %1359, %8
    %1361:ctrl = store.4 %1358, %1360, %6
    %1362:ctrl, %1363:phisel = region %1355, %1361
    %1364:ctrl, %1365:ptr = load.8 %1362, %12
    %1366:ctrl, %1367:i32 = load.4 %1364, %13
    %1368:i64 = iext %1367
    %1369:i64 = sfill 32 %1368
    %1371:i64 = iadd %1369, %17
    %1383:ptr = ptroff %1365, %1371
    %1372:ptr = ptroff %1365, %11
    %1373:ctrl, %1374:i64 = load.4 %1366, %1372
    %1375:i64 = icmp slt %1369, %1374
    %1376:ctrl, %1377:ctrl = brcond %1373, %1375
    %1384:ctrl, %1385:i32 = load.1 %1376, %1383
    %1386:ctrl, %1387:ctrl = brcond %1384, %1385
    %1390:ctrl, %1391:i32 = load.4 %1386, %7
    %1392:i32 = iadd %1391, %8
    %1393:ctrl = store.4 %1390, %1392, %7
    %1396:ctrl, %1397:i32 = load.4 %1387, %6
    %1398:i32 = iadd %1397, %8
    %1399:ctrl = store.4 %1396, %1398, %6
    %1400:ctrl, %1401:phisel = region %1393, %1399
    %1402:ctrl, %1403:i32 = load.4 %1400, %7
    %1404:i32 = iadd %1403, %8
    %1405:ctrl = store.4 %1402, %1404, %7
    %1406:ctrl, %1407:i32 = load.4 %1405, %6
    %1408:i32 = iadd %1407, %8
    %1409:ctrl = store.4 %1406, %1408, %6
    %1410:ctrl, %1411:i32 = load.1 %1409, %31
    %1412:ctrl, %1413:ctrl = brcond %1410, %1411
    %1416:ctrl, %1417:i32 = load.4 %1412, %7
    %1418:i32 = iadd %1417, %8
    %1419:ctrl = store.4 %1416, %1418, %7
    %1422:ctrl, %1423:i32 = load.4 %1413, %6
    %1424:i32 = iadd %1423, %8
    %1425:ctrl = store.4 %1422, %1424, %6
    %1426:ctrl, %1427:phisel = region %1419, %1425
    %1428:ctrl, %1429:i32 = load.1 %1426, %30
    %1430:ctrl, %1431:ctrl = brcond %1428, %1429
    %1434:ctrl, %1435:i32 = load.4 %1430, %7
    %1436:i32 = iadd %1435, %8
    %1437:ctrl = store.4 %1434, %1436, %7
    %1440:ctrl, %1441:i32 = load.4 %1431, %6
    %1442:i32 = iadd %1441, %8
    %1443:ctrl = store.4 %1440, %1442, %6
    %1444:ctrl, %1445:phisel = region %1437, %1443
    %1446:ctrl, %1447:ptr = load.8 %1444, %29
    %1448:ptr = ptroff %1447, %11
    %1449:ctrl, %1450:i32 = load.1 %1446, %1448
    %1451:ctrl, %1452:ctrl = brcond %1449, %1450
    %1455:ctrl, %1456:i32 = load.4 %1451, %7
    %1457:i32 = iadd %1456, %8
    %1458:ctrl = store.4 %1455, %1457, %7
    %1461:ctrl, %1462:i32 = load.4 %1452, %6
    %1463:i32 = iadd %1462, %8
    %1464:ctrl = store.4 %1461, %1463, %6
    %1465:ctrl, %1466:phisel = region %1458, %1464
    %1467:ctrl, %1468:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1465
    %1469:ctrl, %1470:ctrl = brcond %1467, %1468
    %1473:ctrl, %1474:i32 = load.4 %1469, %7
    %1475:i32 = iadd %1474, %8
    %1476:ctrl = store.4 %1473, %1475, %7
    %1479:ctrl, %1480:i32 = load.4 %1470, %6
    %1481:i32 = iadd %1480, %8
    %1482:ctrl = store.4 %1479, %1481, %6
    %1483:ctrl, %1484:phisel = region %1476, %1482
    %1485:ctrl, %1486:ptr = load.8 %1483, %28
    %1487:ctrl, %1488:i32 = load.4 %1485, %13
    %1489:i64 = iext %1488
    %1490:i64 = sfill 32 %1489
    %1492:i64 = iadd %1490, %17
    %1504:ptr = ptroff %1486, %1492
    %1493:ptr = ptroff %1486, %11
    %1494:ctrl, %1495:i64 = load.4 %1487, %1493
    %1496:i64 = icmp slt %1490, %1495
    %1497:ctrl, %1498:ctrl = brcond %1494, %1496
    %1505:ctrl, %1506:i32 = load.1 %1497, %1504
    %1507:ctrl, %1508:ctrl = brcond %1505, %1506
    %1511:ctrl, %1512:i32 = load.4 %1507, %7
    %1513:i32 = iadd %1512, %8
    %1514:ctrl = store.4 %1511, %1513, %7
    %1517:ctrl, %1518:i32 = load.4 %1508, %6
    %1519:i32 = iadd %1518, %8
    %1520:ctrl = store.4 %1517, %1519, %6
    %1521:ctrl, %1522:phisel = region %1514, %1520
    %1523:ctrl, %1524:ptr = load.8 %1521, %12
    %1525:ctrl, %1526:i32 = load.4 %1523, %13
    %1527:i64 = iext %1526
    %1528:i64 = sfill 32 %1527
    %1530:i64 = iadd %1528, %17
    %1542:ptr = ptroff %1524, %1530
    %1531:ptr = ptroff %1524, %11
    %1532:ctrl, %1533:i64 = load.4 %1525, %1531
    %1534:i64 = icmp slt %1528, %1533
    %1535:ctrl, %1536:ctrl = brcond %1532, %1534
    %1543:ctrl, %1544:i32 = load.1 %1535, %1542
    %1545:ctrl, %1546:ctrl = brcond %1543, %1544
    %1549:ctrl, %1550:i32 = load.4 %1545, %7
    %1551:i32 = iadd %1550, %8
    %1552:ctrl = store.4 %1549, %1551, %7
    %1555:ctrl, %1556:i32 = load.4 %1546, %6
    %1557:i32 = iadd %1556, %8
    %1558:ctrl = store.4 %1555, %1557, %6
    %1559:ctrl, %1560:phisel = region %1552, %1558
    %1561:ctrl, %1562:i32 = load.4 %1559, %7
    %1563:i32 = iadd %1562, %8
    %1564:ctrl = store.4 %1561, %1563, %7
    %1565:ctrl, %1566:i32 = load.4 %1564, %6
    %1567:i32 = iadd %1566, %8
    %1568:ctrl = store.4 %1565, %1567, %6
    %1569:ctrl, %1570:i32 = load.1 %1568, %31
    %1571:ctrl, %1572:ctrl = brcond %1569, %1570
    %1575:ctrl, %1576:i32 = load.4 %1571, %7
    %1577:i32 = iadd %1576, %8
    %1578:ctrl = store.4 %1575, %1577, %7
    %1581:ctrl, %1582:i32 = load.4 %1572, %6
    %1583:i32 = iadd %1582, %8
    %1584:ctrl = store.4 %1581, %1583, %6
    %1585:ctrl, %1586:phisel = region %1578, %1584
    %1587:ctrl, %1588:i32 = load.1 %1585, %30
    %1589:ctrl, %1590:ctrl = brcond %1587, %1588
    %1593:ctrl, %1594:i32 = load.4 %1589, %7
    %1595:i32 = iadd %1594, %8
    %1596:ctrl = store.4 %1593, %1595, %7
    %1599:ctrl, %1600:i32 = load.4 %1590, %6
    %1601:i32 = iadd %1600, %8
    %1602:ctrl = store.4 %1599, %1601, %6
    %1603:ctrl, %1604:phisel = region %1596, %1602
    %1605:ctrl, %1606:ptr = load.8 %1603, %29
    %1607:ptr = ptroff %1606, %11
    %1608:ctrl, %1609:i32 = load.1 %1605, %1607
    %1610:ctrl, %1611:ctrl = brcond %1608, %1609
    %1614:ctrl, %1615:i32 = load.4 %1610, %7
    %1616:i32 = iadd %1615, %8
    %1617:ctrl = store.4 %1614, %1616, %7
    %1620:ctrl, %1621:i32 = load.4 %1611, %6
    %1622:i32 = iadd %1621, %8
    %1623:ctrl = store.4 %1620, %1622, %6
    %1624:ctrl, %1625:phisel = region %1617, %1623
    %1626:ctrl, %1627:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1624
    %1628:ctrl, %1629:ctrl = brcond %1626, %1627
    %1632:ctrl, %1633:i32 = load.4 %1628, %7
    %1634:i32 = iadd %1633, %8
    %1635:ctrl = store.4 %1632, %1634, %7
    %1638:ctrl, %1639:i32 = load.4 %1629, %6
    %1640:i32 = iadd %1639, %8
    %1641:ctrl = store.4 %1638, %1640, %6
    %1642:ctrl, %1643:phisel = region %1635, %1641
    %1644:ctrl, %1645:ptr = load.8 %1642, %28
    %1646:ctrl, %1647:i32 = load.4 %1644, %13
    %1648:i64 = iext %1647
    %1649:i64 = sfill 32 %1648
    %1651:i64 = iadd %1649, %17
    %1663:ptr = ptroff %1645, %1651
    %1652:ptr = ptroff %1645, %11
    %1653:ctrl, %1654:i64 = load.4 %1646, %1652
    %1655:i64 = icmp slt %1649, %1654
    %1656:ctrl, %1657:ctrl = brcond %1653, %1655
    %1664:ctrl, %1665:i32 = load.1 %1656, %1663
    %1666:ctrl, %1667:ctrl = brcond %1664, %1665
    %1670:ctrl, %1671:i32 = load.4 %1666, %7
    %1672:i32 = iadd %1671, %8
    %1673:ctrl = store.4 %1670, %1672, %7
    %1676:ctrl, %1677:i32 = load.4 %1667, %6
    %1678:i32 = iadd %1677, %8
    %1679:ctrl = store.4 %1676, %1678, %6
    %1680:ctrl, %1681:phisel = region %1673, %1679
    %1682:ctrl, %1683:ptr = load.8 %1680, %12
    %1684:ctrl, %1685:i32 = load.4 %1682, %13
    %1686:i64 = iext %1685
    %1687:i64 = sfill 32 %1686
    %1689:i64 = iadd %1687, %17
    %1701:ptr = ptroff %1683, %1689
    %1690:ptr = ptroff %1683, %11
    %1691:ctrl, %1692:i64 = load.4 %1684, %1690
    %1693:i64 = icmp slt %1687, %1692
    %1694:ctrl, %1695:ctrl = brcond %1691, %1693
    %1702:ctrl, %1703:i32 = load.1 %1694, %1701
    %1704:ctrl, %1705:ctrl = brcond %1702, %1703
    %1708:ctrl, %1709:i32 = load.4 %1704, %7
    %1710:i32 = iadd %1709, %8
    %1711:ctrl = store.4 %1708, %1710, %7
    %1714:ctrl, %1715:i32 = load.4 %1705, %6
    %1716:i32 = iadd %1715, %8
    %1717:ctrl = store.4 %1714, %1716, %6
    %1718:ctrl, %1719:phisel = region %1711, %1717
    %1720:ctrl, %1721:i32 = load.4 %1718, %7
    %1722:i32 = iadd %1721, %8
    %1723:ctrl = store.4 %1720, %1722, %7
    %1724:ctrl, %1725:i32 = load.4 %1723, %6
    %1726:i32 = iadd %1725, %8
    %1727:ctrl = store.4 %1724, %1726, %6
    %1728:ctrl, %1729:i32 = load.1 %1727, %31
    %1730:ctrl, %1731:ctrl = brcond %1728, %1729
    %1734:ctrl, %1735:i32 = load.4 %1730, %7
    %1736:i32 = iadd %1735, %8
    %1737:ctrl = store.4 %1734, %1736, %7
    %1740:ctrl, %1741:i32 = load.4 %1731, %6
    %1742:i32 = iadd %1741, %8
    %1743:ctrl = store.4 %1740, %1742, %6
    %1744:ctrl, %1745:phisel = region %1737, %1743
    %1746:ctrl, %1747:i32 = load.1 %1744, %30
    %1748:ctrl, %1749:ctrl = brcond %1746, %1747
    %1752:ctrl, %1753:i32 = load.4 %1748, %7
    %1754:i32 = iadd %1753, %8
    %1755:ctrl = store.4 %1752, %1754, %7
    %1758:ctrl, %1759:i32 = load.4 %1749, %6
    %1760:i32 = iadd %1759, %8
    %1761:ctrl = store.4 %1758, %1760, %6
    %1762:ctrl, %1763:phisel = region %1755, %1761
    %1764:ctrl, %1765:ptr = load.8 %1762, %29
    %1766:ptr = ptroff %1765, %11
    %1767:ctrl, %1768:i32 = load.1 %1764, %1766
    %1769:ctrl, %1770:ctrl = brcond %1767, %1768
    %1773:ctrl, %1774:i32 = load.4 %1769, %7
    %1775:i32 = iadd %1774, %8
    %1776:ctrl = store.4 %1773, %1775, %7
    %1779:ctrl, %1780:i32 = load.4 %1770, %6
    %1781:i32 = iadd %1780, %8
    %1782:ctrl = store.4 %1779, %1781, %6
    %1783:ctrl, %1784:phisel = region %1776, %1782
    %1785:ctrl, %1786:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1783
    %1787:ctrl, %1788:ctrl = brcond %1785, %1786
    %1791:ctrl, %1792:i32 = load.4 %1787, %7
    %1793:i32 = iadd %1792, %8
    %1794:ctrl = store.4 %1791, %1793, %7
    %1797:ctrl, %1798:i32 = load.4 %1788, %6
    %1799:i32 = iadd %1798, %8
    %1800:ctrl = store.4 %1797, %1799, %6
    %1801:ctrl, %1802:phisel = region %1794, %1800
    %1803:ctrl, %1804:ptr = load.8 %1801, %28
    %1805:ctrl, %1806:i32 = load.4 %1803, %13
    %1807:i64 = iext %1806
    %1808:i64 = sfill 32 %1807
    %1810:i64 = iadd %1808, %17
    %1822:ptr = ptroff %1804, %1810
    %1811:ptr = ptroff %1804, %11
    %1812:ctrl, %1813:i64 = load.4 %1805, %1811
    %1814:i64 = icmp slt %1808, %1813
    %1815:ctrl, %1816:ctrl = brcond %1812, %1814
    %1823:ctrl, %1824:i32 = load.1 %1815, %1822
    %1825:ctrl, %1826:ctrl = brcond %1823, %1824
    %1829:ctrl, %1830:i32 = load.4 %1825, %7
    %1831:i32 = iadd %1830, %8
    %1832:ctrl = store.4 %1829, %1831, %7
    %1835:ctrl, %1836:i32 = load.4 %1826, %6
    %1837:i32 = iadd %1836, %8
    %1838:ctrl = store.4 %1835, %1837, %6
    %1839:ctrl, %1840:phisel = region %1832, %1838
    %1841:ctrl, %1842:ptr = load.8 %1839, %12
    %1843:ctrl, %1844:i32 = load.4 %1841, %13
    %1845:i64 = iext %1844
    %1846:i64 = sfill 32 %1845
    %1848:i64 = iadd %1846, %17
    %1860:ptr = ptroff %1842, %1848
    %1849:ptr = ptroff %1842, %11
    %1850:ctrl, %1851:i64 = load.4 %1843, %1849
    %1852:i64 = icmp slt %1846, %1851
    %1853:ctrl, %1854:ctrl = brcond %1850, %1852
    %1861:ctrl, %1862:i32 = load.1 %1853, %1860
    %1863:ctrl, %1864:ctrl = brcond %1861, %1862
    %1867:ctrl, %1868:i32 = load.4 %1863, %7
    %1869:i32 = iadd %1868, %8
    %1870:ctrl = store.4 %1867, %1869, %7
    %1873:ctrl, %1874:i32 = load.4 %1864, %6
    %1875:i32 = iadd %1874, %8
    %1876:ctrl = store.4 %1873, %1875, %6
    %1877:ctrl, %1878:phisel = region %1870, %1876
    %1879:ctrl, %1880:i32 = load.4 %1877, %7
    %1881:i32 = iadd %1880, %8
    %1882:ctrl = store.4 %1879, %1881, %7
    %1883:ctrl, %1884:i32 = load.4 %1882, %6
    %1885:i32 = iadd %1884, %8
    %1886:ctrl = store.4 %1883, %1885, %6
    %1887:ctrl, %1888:i32 = load.1 %1886, %31
    %1889:ctrl, %1890:ctrl = brcond %1887, %1888
    %1893:ctrl, %1894:i32 = load.4 %1889, %7
    %1895:i32 = iadd %1894, %8
    %1896:ctrl = store.4 %1893, %1895, %7
    %1899:ctrl, %1900:i32 = load.4 %1890, %6
    %1901:i32 = iadd %1900, %8
    %1902:ctrl = store.4 %1899, %1901, %6
    %1903:ctrl, %1904:phisel = region %1896, %1902
    %1905:ctrl, %1906:i32 = load.1 %1903, %30
    %1907:ctrl, %1908:ctrl = brcond %1905, %1906
    %1911:ctrl, %1912:i32 = load.4 %1907, %7
    %1913:i32 = iadd %1912, %8
    %1914:ctrl = store.4 %1911, %1913, %7
    %1917:ctrl, %1918:i32 = load.4 %1908, %6
    %1919:i32 = iadd %1918, %8
    %1920:ctrl = store.4 %1917, %1919, %6
    %1921:ctrl, %1922:phisel = region %1914, %1920
    %1923:ctrl, %1924:ptr = load.8 %1921, %29
    %1925:ptr = ptroff %1924, %11
    %1926:ctrl, %1927:i32 = load.1 %1923, %1925
    %1928:ctrl, %1929:ctrl = brcond %1926, %1927
    %1932:ctrl, %1933:i32 = load.4 %1928, %7
    %1934:i32 = iadd %1933, %8
    %1935:ctrl = store.4 %1932, %1934, %7
    %1938:ctrl, %1939:i32 = load.4 %1929, %6
    %1940:i32 = iadd %1939, %8
    %1941:ctrl = store.4 %1938, %1940, %6
    %1942:ctrl, %1943:phisel = region %1935, %1941
    %1944:ctrl, %1945:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %1942
    %1946:ctrl, %1947:ctrl = brcond %1944, %1945
    %1950:ctrl, %1951:i32 = load.4 %1946, %7
    %1952:i32 = iadd %1951, %8
    %1953:ctrl = store.4 %1950, %1952, %7
    %1956:ctrl, %1957:i32 = load.4 %1947, %6
    %1958:i32 = iadd %1957, %8
    %1959:ctrl = store.4 %1956, %1958, %6
    %1960:ctrl, %1961:phisel = region %1953, %1959
    %1962:ctrl, %1963:ptr = load.8 %1960, %28
    %1964:ctrl, %1965:i32 = load.4 %1962, %13
    %1966:i64 = iext %1965
    %1967:i64 = sfill 32 %1966
    %1969:i64 = iadd %1967, %17
    %1981:ptr = ptroff %1963, %1969
    %1970:ptr = ptroff %1963, %11
    %1971:ctrl, %1972:i64 = load.4 %1964, %1970
    %1973:i64 = icmp slt %1967, %1972
    %1974:ctrl, %1975:ctrl = brcond %1971, %1973
    %1982:ctrl, %1983:i32 = load.1 %1974, %1981
    %1984:ctrl, %1985:ctrl = brcond %1982, %1983
    %1988:ctrl, %1989:i32 = load.4 %1984, %7
    %1990:i32 = iadd %1989, %8
    %1991:ctrl = store.4 %1988, %1990, %7
    %1994:ctrl, %1995:i32 = load.4 %1985, %6
    %1996:i32 = iadd %1995, %8
    %1997:ctrl = store.4 %1994, %1996, %6
    %1998:ctrl, %1999:phisel = region %1991, %1997
    %2000:ctrl, %2001:ptr = load.8 %1998, %12
    %2002:ctrl, %2003:i32 = load.4 %2000, %13
    %2004:i64 = iext %2003
    %2005:i64 = sfill 32 %2004
    %2007:i64 = iadd %2005, %17
    %2019:ptr = ptroff %2001, %2007
    %2008:ptr = ptroff %2001, %11
    %2009:ctrl, %2010:i64 = load.4 %2002, %2008
    %2011:i64 = icmp slt %2005, %2010
    %2012:ctrl, %2013:ctrl = brcond %2009, %2011
    %2020:ctrl, %2021:i32 = load.1 %2012, %2019
    %2022:ctrl, %2023:ctrl = brcond %2020, %2021
    %2026:ctrl, %2027:i32 = load.4 %2022, %7
    %2028:i32 = iadd %2027, %8
    %2029:ctrl = store.4 %2026, %2028, %7
    %2032:ctrl, %2033:i32 = load.4 %2023, %6
    %2034:i32 = iadd %2033, %8
    %2035:ctrl = store.4 %2032, %2034, %6
    %2036:ctrl, %2037:phisel = region %2029, %2035
    %2038:ctrl, %2039:i32 = load.4 %2036, %7
    %2040:i32 = iadd %2039, %8
    %2041:ctrl = store.4 %2038, %2040, %7
    %2042:ctrl, %2043:i32 = load.4 %2041, %6
    %2044:i32 = iadd %2043, %8
    %2045:ctrl = store.4 %2042, %2044, %6
    %2046:ctrl, %2047:i32 = load.1 %2045, %31
    %2048:ctrl, %2049:ctrl = brcond %2046, %2047
    %2052:ctrl, %2053:i32 = load.4 %2048, %7
    %2054:i32 = iadd %2053, %8
    %2055:ctrl = store.4 %2052, %2054, %7
    %2058:ctrl, %2059:i32 = load.4 %2049, %6
    %2060:i32 = iadd %2059, %8
    %2061:ctrl = store.4 %2058, %2060, %6
    %2062:ctrl, %2063:phisel = region %2055, %2061
    %2064:ctrl, %2065:i32 = load.1 %2062, %30
    %2066:ctrl, %2067:ctrl = brcond %2064, %2065
    %2070:ctrl, %2071:i32 = load.4 %2066, %7
    %2072:i32 = iadd %2071, %8
    %2073:ctrl = store.4 %2070, %2072, %7
    %2076:ctrl, %2077:i32 = load.4 %2067, %6
    %2078:i32 = iadd %2077, %8
    %2079:ctrl = store.4 %2076, %2078, %6
    %2080:ctrl, %2081:phisel = region %2073, %2079
    %2082:ctrl, %2083:ptr = load.8 %2080, %29
    %2084:ptr = ptroff %2083, %11
    %2085:ctrl, %2086:i32 = load.1 %2082, %2084
    %2087:ctrl, %2088:ctrl = brcond %2085, %2086
    %2091:ctrl, %2092:i32 = load.4 %2087, %7
    %2093:i32 = iadd %2092, %8
    %2094:ctrl = store.4 %2091, %2093, %7
    %2097:ctrl, %2098:i32 = load.4 %2088, %6
    %2099:i32 = iadd %2098, %8
    %2100:ctrl = store.4 %2097, %2099, %6
    %2101:ctrl, %2102:phisel = region %2094, %2100
    %2103:ctrl, %2104:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2101
    %2105:ctrl, %2106:ctrl = brcond %2103, %2104
    %2109:ctrl, %2110:i32 = load.4 %2105, %7
    %2111:i32 = iadd %2110, %8
    %2112:ctrl = store.4 %2109, %2111, %7
    %2115:ctrl, %2116:i32 = load.4 %2106, %6
    %2117:i32 = iadd %2116, %8
    %2118:ctrl = store.4 %2115, %2117, %6
    %2119:ctrl, %2120:phisel = region %2112, %2118
    %2121:ctrl, %2122:ptr = load.8 %2119, %28
    %2123:ctrl, %2124:i32 = load.4 %2121, %13
    %2125:i64 = iext %2124
    %2126:i64 = sfill 32 %2125
    %2128:i64 = iadd %2126, %17
    %2140:ptr = ptroff %2122, %2128
    %2129:ptr = ptroff %2122, %11
    %2130:ctrl, %2131:i64 = load.4 %2123, %2129
    %2132:i64 = icmp slt %2126, %2131
    %2133:ctrl, %2134:ctrl = brcond %2130, %2132
    %2141:ctrl, %2142:i32 = load.1 %2133, %2140
    %2143:ctrl, %2144:ctrl = brcond %2141, %2142
    %2147:ctrl, %2148:i32 = load.4 %2143, %7
    %2149:i32 = iadd %2148, %8
    %2150:ctrl = store.4 %2147, %2149, %7
    %2153:ctrl, %2154:i32 = load.4 %2144, %6
    %2155:i32 = iadd %2154, %8
    %2156:ctrl = store.4 %2153, %2155, %6
    %2157:ctrl, %2158:phisel = region %2150, %2156
    %2159:ctrl, %2160:ptr = load.8 %2157, %12
    %2161:ctrl, %2162:i32 = load.4 %2159, %13
    %2163:i64 = iext %2162
    %2164:i64 = sfill 32 %2163
    %2166:i64 = iadd %2164, %17
    %2178:ptr = ptroff %2160, %2166
    %2167:ptr = ptroff %2160, %11
    %2168:ctrl, %2169:i64 = load.4 %2161, %2167
    %2170:i64 = icmp slt %2164, %2169
    %2171:ctrl, %2172:ctrl = brcond %2168, %2170
    %2179:ctrl, %2180:i32 = load.1 %2171, %2178
    %2181:ctrl, %2182:ctrl = brcond %2179, %2180
    %2185:ctrl, %2186:i32 = load.4 %2181, %7
    %2187:i32 = iadd %2186, %8
    %2188:ctrl = store.4 %2185, %2187, %7
    %2191:ctrl, %2192:i32 = load.4 %2182, %6
    %2193:i32 = iadd %2192, %8
    %2194:ctrl = store.4 %2191, %2193, %6
    %2195:ctrl, %2196:phisel = region %2188, %2194
    %2197:ctrl, %2198:i32 = load.4 %2195, %7
    %2199:i32 = iadd %2198, %8
    %2200:ctrl = store.4 %2197, %2199, %7
    %2201:ctrl, %2202:i32 = load.4 %2200, %6
    %2203:i32 = iadd %2202, %8
    %2204:ctrl = store.4 %2201, %2203, %6
    %2205:ctrl, %2206:i32 = load.1 %2204, %31
    %2207:ctrl, %2208:ctrl = brcond %2205, %2206
    %2211:ctrl, %2212:i32 = load.4 %2207, %7
    %2213:i32 = iadd %2212, %8
    %2214:ctrl = store.4 %2211, %2213, %7
    %2217:ctrl, %2218:i32 = load.4 %2208, %6
    %2219:i32 = iadd %2218, %8
    %2220:ctrl = store.4 %2217, %2219, %6
    %2221:ctrl, %2222:phisel = region %2214, %2220
    %2223:ctrl, %2224:i32 = load.1 %2221, %30
    %2225:ctrl, %2226:ctrl = brcond %2223, %2224
    %2229:ctrl, %2230:i32 = load.4 %2225, %7
    %2231:i32 = iadd %2230, %8
    %2232:ctrl = store.4 %2229, %2231, %7
    %2235:ctrl, %2236:i32 = load.4 %2226, %6
    %2237:i32 = iadd %2236, %8
    %2238:ctrl = store.4 %2235, %2237, %6
    %2239:ctrl, %2240:phisel = region %2232, %2238
    %2241:ctrl, %2242:ptr = load.8 %2239, %29
    %2243:ptr = ptroff %2242, %11
    %2244:ctrl, %2245:i32 = load.1 %2241, %2243
    %2246:ctrl, %2247:ctrl = brcond %2244, %2245
    %2250:ctrl, %2251:i32 = load.4 %2246, %7
    %2252:i32 = iadd %2251, %8
    %2253:ctrl = store.4 %2250, %2252, %7
    %2256:ctrl, %2257:i32 = load.4 %2247, %6
    %2258:i32 = iadd %2257, %8
    %2259:ctrl = store.4 %2256, %2258, %6
    %2260:ctrl, %2261:phisel = region %2253, %2259
    %2262:ctrl, %2263:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2260
    %2264:ctrl, %2265:ctrl = brcond %2262, %2263
    %2268:ctrl, %2269:i32 = load.4 %2264, %7
    %2270:i32 = iadd %2269, %8
    %2271:ctrl = store.4 %2268, %2270, %7
    %2274:ctrl, %2275:i32 = load.4 %2265, %6
    %2276:i32 = iadd %2275, %8
    %2277:ctrl = store.4 %2274, %2276, %6
    %2278:ctrl, %2279:phisel = region %2271, %2277
    %2280:ctrl, %2281:ptr = load.8 %2278, %28
    %2282:ctrl, %2283:i32 = load.4 %2280, %13
    %2284:i64 = iext %2283
    %2285:i64 = sfill 32 %2284
    %2287:i64 = iadd %2285, %17
    %2299:ptr = ptroff %2281, %2287
    %2288:ptr = ptroff %2281, %11
    %2289:ctrl, %2290:i64 = load.4 %2282, %2288
    %2291:i64 = icmp slt %2285, %2290
    %2292:ctrl, %2293:ctrl = brcond %2289, %2291
    %2300:ctrl, %2301:i32 = load.1 %2292, %2299
    %2302:ctrl, %2303:ctrl = brcond %2300, %2301
    %2306:ctrl, %2307:i32 = load.4 %2302, %7
    %2308:i32 = iadd %2307, %8
    %2309:ctrl = store.4 %2306, %2308, %7
    %2312:ctrl, %2313:i32 = load.4 %2303, %6
    %2314:i32 = iadd %2313, %8
    %2315:ctrl = store.4 %2312, %2314, %6
    %2316:ctrl, %2317:phisel = region %2309, %2315
    %2318:ctrl, %2319:ptr = load.8 %2316, %12
    %2320:ctrl, %2321:i32 = load.4 %2318, %13
    %2322:i64 = iext %2321
    %2323:i64 = sfill 32 %2322
    %2325:i64 = iadd %2323, %17
    %2337:ptr = ptroff %2319, %2325
    %2326:ptr = ptroff %2319, %11
    %2327:ctrl, %2328:i64 = load.4 %2320, %2326
    %2329:i64 = icmp slt %2323, %2328
    %2330:ctrl, %2331:ctrl = brcond %2327, %2329
    %2338:ctrl, %2339:i32 = load.1 %2330, %2337
    %2340:ctrl, %2341:ctrl = brcond %2338, %2339
    %2344:ctrl, %2345:i32 = load.4 %2340, %7
    %2346:i32 = iadd %2345, %8
    %2347:ctrl = store.4 %2344, %2346, %7
    %2350:ctrl, %2351:i32 = load.4 %2341, %6
    %2352:i32 = iadd %2351, %8
    %2353:ctrl = store.4 %2350, %2352, %6
    %2354:ctrl, %2355:phisel = region %2347, %2353
    %2356:ctrl, %2357:i32 = load.4 %2354, %7
    %2358:i32 = iadd %2357, %8
    %2359:ctrl = store.4 %2356, %2358, %7
    %2360:ctrl, %2361:i32 = load.4 %2359, %6
    %2362:i32 = iadd %2361, %8
    %2363:ctrl = store.4 %2360, %2362, %6
    %2364:ctrl, %2365:i32 = load.1 %2363, %31
    %2366:ctrl, %2367:ctrl = brcond %2364, %2365
    %2370:ctrl, %2371:i32 = load.4 %2366, %7
    %2372:i32 = iadd %2371, %8
    %2373:ctrl = store.4 %2370, %2372, %7
    %2376:ctrl, %2377:i32 = load.4 %2367, %6
    %2378:i32 = iadd %2377, %8
    %2379:ctrl = store.4 %2376, %2378, %6
    %2380:ctrl, %2381:phisel = region %2373, %2379
    %2382:ctrl, %2383:i32 = load.1 %2380, %30
    %2384:ctrl, %2385:ctrl = brcond %2382, %2383
    %2388:ctrl, %2389:i32 = load.4 %2384, %7
    %2390:i32 = iadd %2389, %8
    %2391:ctrl = store.4 %2388, %2390, %7
    %2394:ctrl, %2395:i32 = load.4 %2385, %6
    %2396:i32 = iadd %2395, %8
    %2397:ctrl = store.4 %2394, %2396, %6
    %2398:ctrl, %2399:phisel = region %2391, %2397
    %2400:ctrl, %2401:ptr = load.8 %2398, %29
    %2402:ptr = ptroff %2401, %11
    %2403:ctrl, %2404:i32 = load.1 %2400, %2402
    %2405:ctrl, %2406:ctrl = brcond %2403, %2404
    %2409:ctrl, %2410:i32 = load.4 %2405, %7
    %2411:i32 = iadd %2410, %8
    %2412:ctrl = store.4 %2409, %2411, %7
    %2415:ctrl, %2416:i32 = load.4 %2406, %6
    %2417:i32 = iadd %2416, %8
    %2418:ctrl = store.4 %2415, %2417, %6
    %2419:ctrl, %2420:phisel = region %2412, %2418
    %2421:ctrl, %2422:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2419
    %2423:ctrl, %2424:ctrl = brcond %2421, %2422
    %2427:ctrl, %2428:i32 = load.4 %2423, %7
    %2429:i32 = iadd %2428, %8
    %2430:ctrl = store.4 %2427, %2429, %7
    %2433:ctrl, %2434:i32 = load.4 %2424, %6
    %2435:i32 = iadd %2434, %8
    %2436:ctrl = store.4 %2433, %2435, %6
    %2437:ctrl, %2438:phisel = region %2430, %2436
    %2439:ctrl, %2440:ptr = load.8 %2437, %28
    %2441:ctrl, %2442:i32 = load.4 %2439, %13
    %2443:i64 = iext %2442
    %2444:i64 = sfill 32 %2443
    %2446:i64 = iadd %2444, %17
    %2458:ptr = ptroff %2440, %2446
    %2447:ptr = ptroff %2440, %11
    %2448:ctrl, %2449:i64 = load.4 %2441, %2447
    %2450:i64 = icmp slt %2444, %2449
    %2451:ctrl, %2452:ctrl = brcond %2448, %2450
    %2459:ctrl, %2460:i32 = load.1 %2451, %2458
    %2461:ctrl, %2462:ctrl = brcond %2459, %2460
    %2465:ctrl, %2466:i32 = load.4 %2461, %7
    %2467:i32 = iadd %2466, %8
    %2468:ctrl = store.4 %2465, %2467, %7
    %2471:ctrl, %2472:i32 = load.4 %2462, %6
    %2473:i32 = iadd %2472, %8
    %2474:ctrl = store.4 %2471, %2473, %6
    %2475:ctrl, %2476:phisel = region %2468, %2474
    %2477:ctrl, %2478:ptr = load.8 %2475, %12
    %2479:ctrl, %2480:i32 = load.4 %2477, %13
    %2481:i64 = iext %2480
    %2482:i64 = sfill 32 %2481
    %2484:i64 = iadd %2482, %17
    %2496:ptr = ptroff %2478, %2484
    %2485:ptr = ptroff %2478, %11
    %2486:ctrl, %2487:i64 = load.4 %2479, %2485
    %2488:i64 = icmp slt %2482, %2487
    %2489:ctrl, %2490:ctrl = brcond %2486, %2488
    %2497:ctrl, %2498:i32 = load.1 %2489, %2496
    %2499:ctrl, %2500:ctrl = brcond %2497, %2498
    %2503:ctrl, %2504:i32 = load.4 %2499, %7
    %2505:i32 = iadd %2504, %8
    %2506:ctrl = store.4 %2503, %2505, %7
    %2509:ctrl, %2510:i32 = load.4 %2500, %6
    %2511:i32 = iadd %2510, %8
    %2512:ctrl = store.4 %2509, %2511, %6
    %2513:ctrl, %2514:phisel = region %2506, %2512
    %2515:ctrl, %2516:i32 = load.4 %2513, %7
    %2517:i32 = iadd %2516, %8
    %2518:ctrl = store.4 %2515, %2517, %7
    %2519:ctrl, %2520:i32 = load.4 %2518, %6
    %2521:i32 = iadd %2520, %8
    %2522:ctrl = store.4 %2519, %2521, %6
    %2523:ctrl, %2524:i32 = load.1 %2522, %31
    %2525:ctrl, %2526:ctrl = brcond %2523, %2524
    %2529:ctrl, %2530:i32 = load.4 %2525, %7
    %2531:i32 = iadd %2530, %8
    %2532:ctrl = store.4 %2529, %2531, %7
    %2535:ctrl, %2536:i32 = load.4 %2526, %6
    %2537:i32 = iadd %2536, %8
    %2538:ctrl = store.4 %2535, %2537, %6
    %2539:ctrl, %2540:phisel = region %2532, %2538
    %2541:ctrl, %2542:i32 = load.1 %2539, %30
    %2543:ctrl, %2544:ctrl = brcond %2541, %2542
    %2547:ctrl, %2548:i32 = load.4 %2543, %7
    %2549:i32 = iadd %2548, %8
    %2550:ctrl = store.4 %2547, %2549, %7
    %2553:ctrl, %2554:i32 = load.4 %2544, %6
    %2555:i32 = iadd %2554, %8
    %2556:ctrl = store.4 %2553, %2555, %6
    %2557:ctrl, %2558:phisel = region %2550, %2556
    %2559:ctrl, %2560:ptr = load.8 %2557, %29
    %2561:ptr = ptroff %2560, %11
    %2562:ctrl, %2563:i32 = load.1 %2559, %2561
    %2564:ctrl, %2565:ctrl = brcond %2562, %2563
    %2568:ctrl, %2569:i32 = load.4 %2564, %7
    %2570:i32 = iadd %2569, %8
    %2571:ctrl = store.4 %2568, %2570, %7
    %2574:ctrl, %2575:i32 = load.4 %2565, %6
    %2576:i32 = iadd %2575, %8
    %2577:ctrl = store.4 %2574, %2576, %6
    %2578:ctrl, %2579:phisel = region %2571, %2577
    %2580:ctrl, %2581:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %2578
    %2582:ctrl, %2583:ctrl = brcond %2580, %2581
    %2586:ctrl, %2587:i32 = load.4 %2582, %7
    %2588:i32 = iadd %2587, %8
    %2589:ctrl = store.4 %2586, %2588, %7
    %2592:ctrl, %2593:i32 = load.4 %2583, %6
    %2594:i32 = iadd %2593, %8
    %2595:ctrl = store.4 %2592, %2594, %6
    %2596:ctrl, %2597:phisel = region %2589, %2595
    %2598:ctrl, %2599:ptr = load.8 %2596, %28
    %2600:ctrl, %2601:i32 = load.4 %2598, %13
    %2602:i64 = iext %2601
    %2603:i64 = sfill 32 %2602
    %2605:i64 = iadd %2603, %17
    %2617:ptr = ptroff %2599, %2605
    %2606:ptr = ptroff %2599, %11
    %2607:ctrl, %2608:i64 = load.4 %2600, %2606
    %2609:i64 = icmp slt %2603, %2608
    %2610:ctrl, %2611:ctrl = brcond %2607, %2609
    %2618:ctrl, %2619:i32 = load.1 %2610, %2617
    %2620:ctrl, %2621:ctrl = brcond %2618, %2619
    %2624:ctrl, %2625:i32 = load.4 %2620, %7
    %2626:i32 = iadd %2625, %8
    %2627:ctrl = store.4 %2624, %2626, %7
    %2630:ctrl, %2631:i32 = load.4 %2621, %6
    %2632:i32 = iadd %2631, %8
    %2633:ctrl = store.4 %2630, %2632, %6
    %2634:ctrl, %2635:phisel = region %2627, %2633
    %2636:ctrl, %2637:ptr = load.8 %2634, %12
    %2638:ctrl, %2639:i32 = load.4 %2636, %13
    %2640:i64 = iext %2639
    %2641:i64 = sfill 32 %2640
    %2643:i64 = iadd %2641, %17
    %2655:ptr = ptroff %2637, %2643
    %2644:ptr = ptroff %2637, %11
    %2645:ctrl, %2646:i64 = load.4 %2638, %2644
    %2647:i64 = icmp slt %2641, %2646
    %2648:ctrl, %2649:ctrl = brcond %2645, %2647
    %2656:ctrl, %2657:i32 = load.1 %2648, %2655
    %2658:ctrl, %2659:ctrl = brcond %2656, %2657
    %2662:ctrl, %2663:i32 = load.4 %2658, %7
    %2664:i32 = iadd %2663, %8
    %2665:ctrl = store.4 %2662, %2664, %7
    %2668:ctrl, %2669:i32 = load.4 %2659, %6
    %2670:i32 = iadd %2669, %8
    %2671:ctrl = store.4 %2668, %2670, %6
    %2672:ctrl, %2673:phisel = region %2665, %2671
    %2866:ctrl, %2867:ctrl = brcond %2672, %8
    %2872:ctrl, %2873:phisel = region %2867, %2866
    %2877:ctrl, %2878:ctrl = brcond %2872, %8
    %2881:ctrl, %2882:i32 = load.4 %2877, %7
    %2883:i32 = iadd %2882, %8
    %2884:ctrl = store.4 %2881, %2883, %7
    %2887:ctrl, %2888:i32 = load.4 %2878, %6
    %2889:i32 = iadd %2888, %8
    %2890:ctrl = store.4 %2887, %2889, %6
    %2891:ctrl, %2892:phisel = region %2884, %2890
    %2896:ctrl, %2897:ctrl = brcond %2891, %8
    %2900:ctrl, %2901:i32 = load.4 %2896, %7
    %2902:i32 = iadd %2901, %8
    %2903:ctrl = store.4 %2900, %2902, %7
    %2906:ctrl, %2907:i32 = load.4 %2897, %6
    %2908:i32 = iadd %2907, %8
    %2909:ctrl = store.4 %2906, %2908, %6
    %2910:ctrl, %2911:phisel = region %2903, %2909
    %2914:ctrl, %2915:ctrl = brcond %2910, %8
    %2920:ctrl, %2921:i32 = load.1 %2915, %31
    %2922:ctrl, %2923:phisel = region %2920, %2914
    %2926:i32 = phi %2923, %2921, %8
    %2927:ctrl, %2928:ctrl = brcond %2922, %2926
    %2931:ctrl, %2932:i32 = load.4 %2927, %7
    %2933:i32 = iadd %2932, %8
    %2934:ctrl = store.4 %2931, %2933, %7
    %2937:ctrl, %2938:i32 = load.4 %2928, %6
    %2939:i32 = iadd %2938, %8
    %2940:ctrl = store.4 %2937, %2939, %6
    %2941:ctrl, %2942:phisel = region %2934, %2940
    %2945:ctrl, %2946:ctrl = brcond %2941, %8
    %2951:ctrl, %2952:i32 = load.1 %2946, %30
    %2953:ctrl, %2954:phisel = region %2951, %2945
    %2957:i32 = phi %2954, %2952, %8
    %2958:ctrl, %2959:ctrl = brcond %2953, %2957
    %2962:ctrl, %2963:i32 = load.4 %2958, %7
    %2964:i32 = iadd %2963, %8
    %2965:ctrl = store.4 %2962, %2964, %7
    %2968:ctrl, %2969:i32 = load.4 %2959, %6
    %2970:i32 = iadd %2969, %8
    %2971:ctrl = store.4 %2968, %2970, %6
    %2972:ctrl, %2973:phisel = region %2965, %2971
    %2976:ctrl, %2977:ctrl = brcond %2972, %8
    %2982:ctrl, %2983:ptr = load.8 %2977, %29
    %2984:ptr = ptroff %2983, %11
    %2985:ctrl, %2986:i32 = load.1 %2982, %2984
    %2987:ctrl, %2988:phisel = region %2985, %2976
    %2991:i32 = phi %2988, %2986, %8
    %2992:ctrl, %2993:ctrl = brcond %2987, %2991
    %2996:ctrl, %2997:i32 = load.4 %2992, %7
    %2998:i32 = iadd %2997, %8
    %2999:ctrl = store.4 %2996, %2998, %7
    %3002:ctrl, %3003:i32 = load.4 %2993, %6
    %3004:i32 = iadd %3003, %8
    %3005:ctrl = store.4 %3002, %3004, %6
    %3006:ctrl, %3007:phisel = region %2999, %3005
    %3010:ctrl, %3011:ctrl = brcond %3006, %8
    %3016:ctrl, %3017:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3011
    %3018:ctrl, %3019:phisel = region %3016, %3010
    %3022:i32 = phi %3019, %3017, %8
    %3023:ctrl, %3024:ctrl = brcond %3018, %3022
    %3027:ctrl, %3028:i32 = load.4 %3023, %7
    %3029:i32 = iadd %3028, %8
    %3030:ctrl = store.4 %3027, %3029, %7
    %3033:ctrl, %3034:i32 = load.4 %3024, %6
    %3035:i32 = iadd %3034, %8
    %3036:ctrl = store.4 %3033, %3035, %6
    %3037:ctrl, %3038:phisel = region %3030, %3036
    %3041:ctrl, %3042:ctrl = brcond %3037, %8
    %3047:ctrl, %3048:ptr = load.8 %3042, %28
    %3049:ctrl, %3050:i32 = load.4 %3047, %13
    %3051:i64 = iext %3050
    %3052:i64 = sfill 32 %3051
    %3054:i64 = iadd %3052, %17
    %3066:ptr = ptroff %3048, %3054
    %3055:ptr = ptroff %3048, %11
    %3056:ctrl, %3057:i64 = load.4 %3049, %3055
    %3058:i64 = icmp slt %3052, %3057
    %3059:ctrl, %3060:ctrl = brcond %3056, %3058
    %3067:ctrl, %3068:i32 = load.1 %3059, %3066
    %3069:ctrl, %3070:phisel = region %3067, %3041
    %3073:i32 = phi %3070, %3068, %8
    %3074:ctrl, %3075:ctrl = brcond %3069, %3073
    %3078:ctrl, %3079:i32 = load.4 %3074, %7
    %3080:i32 = iadd %3079, %8
    %3081:ctrl = store.4 %3078, %3080, %7
    %3084:ctrl, %3085:i32 = load.4 %3075, %6
    %3086:i32 = iadd %3085, %8
    %3087:ctrl = store.4 %3084, %3086, %6
    %3088:ctrl, %3089:phisel = region %3081, %3087
    %3092:ctrl, %3093:ctrl = brcond %3088, %8
    %3098:ctrl, %3099:ptr = load.8 %3093, %12
    %3100:ctrl, %3101:i32 = load.4 %3098, %13
    %3102:i64 = iext %3101
    %3103:i64 = sfill 32 %3102
    %3105:i64 = iadd %3103, %17
    %3117:ptr = ptroff %3099, %3105
    %3106:ptr = ptroff %3099, %11
    %3107:ctrl, %3108:i64 = load.4 %3100, %3106
    %3109:i64 = icmp slt %3103, %3108
    %3110:ctrl, %3111:ctrl = brcond %3107, %3109
    %3118:ctrl, %3119:i32 = load.1 %3110, %3117
    %3120:ctrl, %3121:phisel = region %3118, %3092
    %3124:i32 = phi %3121, %3119, %8
    %3125:ctrl, %3126:ctrl = brcond %3120, %3124
    %3129:ctrl, %3130:i32 = load.4 %3125, %7
    %3131:i32 = iadd %3130, %8
    %3132:ctrl = store.4 %3129, %3131, %7
    %3135:ctrl, %3136:i32 = load.4 %3126, %6
    %3137:i32 = iadd %3136, %8
    %3138:ctrl = store.4 %3135, %3137, %6
    %3139:ctrl, %3140:phisel = region %3132, %3138
    %3144:ctrl, %3145:ctrl = brcond %3139, %20
    %3148:ctrl, %3149:i32 = load.4 %3144, %7
    %3150:i32 = iadd %3149, %8
    %3151:ctrl = store.4 %3148, %3150, %7
    %3154:ctrl, %3155:i32 = load.4 %3145, %6
    %3156:i32 = iadd %3155, %8
    %3157:ctrl = store.4 %3154, %3156, %6
    %3158:ctrl, %3159:phisel = region %3151, %3157
    %3162:ctrl, %3163:ctrl = brcond %3158, %8
    %3168:ctrl, %3169:phisel = region %3163, %3162
    %3173:ctrl, %3174:ctrl = brcond %3168, %20
    %3177:ctrl, %3178:i32 = load.4 %3173, %7
    %3179:i32 = iadd %3178, %8
    %3180:ctrl = store.4 %3177, %3179, %7
    %3183:ctrl, %3184:i32 = load.4 %3174, %6
    %3185:i32 = iadd %3184, %8
    %3186:ctrl = store.4 %3183, %3185, %6
    %3187:ctrl, %3188:phisel = region %3180, %3186
    %3191:ctrl, %3192:ctrl = brcond %3187, %8
    %3197:ctrl, %3198:i32 = load.1 %3192, %31
    %3199:ctrl, %3200:phisel = region %3197, %3191
    %3203:i32 = phi %3200, %3198, %20
    %3204:ctrl, %3205:ctrl = brcond %3199, %3203
    %3208:ctrl, %3209:i32 = load.4 %3204, %7
    %3210:i32 = iadd %3209, %8
    %3211:ctrl = store.4 %3208, %3210, %7
    %3214:ctrl, %3215:i32 = load.4 %3205, %6
    %3216:i32 = iadd %3215, %8
    %3217:ctrl = store.4 %3214, %3216, %6
    %3218:ctrl, %3219:phisel = region %3211, %3217
    %3222:ctrl, %3223:ctrl = brcond %3218, %8
    %3228:ctrl, %3229:i32 = load.1 %3223, %30
    %3230:ctrl, %3231:phisel = region %3228, %3222
    %3234:i32 = phi %3231, %3229, %20
    %3235:ctrl, %3236:ctrl = brcond %3230, %3234
    %3239:ctrl, %3240:i32 = load.4 %3235, %7
    %3241:i32 = iadd %3240, %8
    %3242:ctrl = store.4 %3239, %3241, %7
    %3245:ctrl, %3246:i32 = load.4 %3236, %6
    %3247:i32 = iadd %3246, %8
    %3248:ctrl = store.4 %3245, %3247, %6
    %3249:ctrl, %3250:phisel = region %3242, %3248
    %3253:ctrl, %3254:ctrl = brcond %3249, %8
    %3259:ctrl, %3260:ptr = load.8 %3254, %29
    %3261:ptr = ptroff %3260, %11
    %3262:ctrl, %3263:i32 = load.1 %3259, %3261
    %3264:ctrl, %3265:phisel = region %3262, %3253
    %3268:i32 = phi %3265, %3263, %20
    %3269:ctrl, %3270:ctrl = brcond %3264, %3268
    %3273:ctrl, %3274:i32 = load.4 %3269, %7
    %3275:i32 = iadd %3274, %8
    %3276:ctrl = store.4 %3273, %3275, %7
    %3279:ctrl, %3280:i32 = load.4 %3270, %6
    %3281:i32 = iadd %3280, %8
    %3282:ctrl = store.4 %3279, %3281, %6
    %3283:ctrl, %3284:phisel = region %3276, %3282
    %3287:ctrl, %3288:ctrl = brcond %3283, %8
    %3293:ctrl, %3294:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3288
    %3295:ctrl, %3296:phisel = region %3293, %3287
    %3299:i32 = phi %3296, %3294, %20
    %3300:ctrl, %3301:ctrl = brcond %3295, %3299
    %3304:ctrl, %3305:i32 = load.4 %3300, %7
    %3306:i32 = iadd %3305, %8
    %3307:ctrl = store.4 %3304, %3306, %7
    %3310:ctrl, %3311:i32 = load.4 %3301, %6
    %3312:i32 = iadd %3311, %8
    %3313:ctrl = store.4 %3310, %3312, %6
    %3314:ctrl, %3315:phisel = region %3307, %3313
    %3318:ctrl, %3319:ctrl = brcond %3314, %8
    %3324:ctrl, %3325:ptr = load.8 %3319, %28
    %3326:ctrl, %3327:i32 = load.4 %3324, %13
    %3328:i64 = iext %3327
    %3329:i64 = sfill 32 %3328
    %3331:i64 = iadd %3329, %17
    %3343:ptr = ptroff %3325, %3331
    %3332:ptr = ptroff %3325, %11
    %3333:ctrl, %3334:i64 = load.4 %3326, %3332
    %3335:i64 = icmp slt %3329, %3334
    %3336:ctrl, %3337:ctrl = brcond %3333, %3335
    %3344:ctrl, %3345:i32 = load.1 %3336, %3343
    %3346:ctrl, %3347:phisel = region %3344, %3318
    %3350:i32 = phi %3347, %3345, %20
    %3351:ctrl, %3352:ctrl = brcond %3346, %3350
    %3355:ctrl, %3356:i32 = load.4 %3351, %7
    %3357:i32 = iadd %3356, %8
    %3358:ctrl = store.4 %3355, %3357, %7
    %3361:ctrl, %3362:i32 = load.4 %3352, %6
    %3363:i32 = iadd %3362, %8
    %3364:ctrl = store.4 %3361, %3363, %6
    %3365:ctrl, %3366:phisel = region %3358, %3364
    %3369:ctrl, %3370:ctrl = brcond %3365, %8
    %3375:ctrl, %3376:ptr = load.8 %3370, %12
    %3377:ctrl, %3378:i32 = load.4 %3375, %13
    %3379:i64 = iext %3378
    %3380:i64 = sfill 32 %3379
    %3382:i64 = iadd %3380, %17
    %3394:ptr = ptroff %3376, %3382
    %3383:ptr = ptroff %3376, %11
    %3384:ctrl, %3385:i64 = load.4 %3377, %3383
    %3386:i64 = icmp slt %3380, %3385
    %3387:ctrl, %3388:ctrl = brcond %3384, %3386
    %3395:ctrl, %3396:i32 = load.1 %3387, %3394
    %3397:ctrl, %3398:phisel = region %3395, %3369
    %3401:i32 = phi %3398, %3396, %20
    %3402:ctrl, %3403:ctrl = brcond %3397, %3401
    %3406:ctrl, %3407:i32 = load.4 %3402, %7
    %3408:i32 = iadd %3407, %8
    %3409:ctrl = store.4 %3406, %3408, %7
    %3412:ctrl, %3413:i32 = load.4 %3403, %6
    %3414:i32 = iadd %3413, %8
    %3415:ctrl = store.4 %3412, %3414, %6
    %3416:ctrl, %3417:phisel = region %3409, %3415
    %3420:ctrl, %3421:ctrl = brcond %3416, %8
    %3424:ctrl, %3425:i32 = load.1 %3420, %31
    %3428:ctrl, %3429:phisel = region %3421, %3424
    %3432:i32 = phi %3429, %8, %3425
    %3433:ctrl, %3434:ctrl = brcond %3428, %3432
    %3437:ctrl, %3438:i32 = load.4 %3433, %7
    %3439:i32 = iadd %3438, %8
    %3440:ctrl = store.4 %3437, %3439, %7
    %3443:ctrl, %3444:i32 = load.4 %3434, %6
    %3445:i32 = iadd %3444, %8
    %3446:ctrl = store.4 %3443, %3445, %6
    %3447:ctrl, %3448:phisel = region %3440, %3446
    %3451:ctrl, %3452:ctrl = brcond %3447, %8
    %3455:ctrl, %3456:i32 = load.1 %3451, %31
    %3459:ctrl, %3460:phisel = region %3452, %3455
    %3463:i32 = phi %3460, %20, %3456
    %3464:ctrl, %3465:ctrl = brcond %3459, %3463
    %3468:ctrl, %3469:i32 = load.4 %3464, %7
    %3470:i32 = iadd %3469, %8
    %3471:ctrl = store.4 %3468, %3470, %7
    %3474:ctrl, %3475:i32 = load.4 %3465, %6
    %3476:i32 = iadd %3475, %8
    %3477:ctrl = store.4 %3474, %3476, %6
    %3478:ctrl, %3479:phisel = region %3471, %3477
    %3482:ctrl, %3483:ctrl = brcond %3478, %8
    %3486:ctrl, %3487:i32 = load.1 %3482, %31
    %3490:ctrl, %3491:i32 = load.1 %3483, %31
    %3492:ctrl, %3493:phisel = region %3490, %3486
    %3496:i32 = phi %3493, %3491, %3487
    %3497:ctrl, %3498:ctrl = brcond %3492, %3496
    %3501:ctrl, %3502:i32 = load.4 %3497, %7
    %3503:i32 = iadd %3502, %8
    %3504:ctrl = store.4 %3501, %3503, %7
    %3507:ctrl, %3508:i32 = load.4 %3498, %6
    %3509:i32 = iadd %3508, %8
    %3510:ctrl = store.4 %3507, %3509, %6
    %3511:ctrl, %3512:phisel = region %3504, %3510
    %3515:ctrl, %3516:ctrl = brcond %3511, %8
    %3519:ctrl, %3520:i32 = load.1 %3515, %31
    %3523:ctrl, %3524:i32 = load.1 %3516, %30
    %3525:ctrl, %3526:phisel = region %3523, %3519
    %3529:i32 = phi %3526, %3524, %3520
    %3530:ctrl, %3531:ctrl = brcond %3525, %3529
    %3534:ctrl, %3535:i32 = load.4 %3530, %7
    %3536:i32 = iadd %3535, %8
    %3537:ctrl = store.4 %3534, %3536, %7
    %3540:ctrl, %3541:i32 = load.4 %3531, %6
    %3542:i32 = iadd %3541, %8
    %3543:ctrl = store.4 %3540, %3542, %6
    %3544:ctrl, %3545:phisel = region %3537, %3543
    %3548:ctrl, %3549:ctrl = brcond %3544, %8
    %3552:ctrl, %3553:i32 = load.1 %3548, %31
    %3556:ctrl, %3557:ptr = load.8 %3549, %29
    %3558:ptr = ptroff %3557, %11
    %3559:ctrl, %3560:i32 = load.1 %3556, %3558
    %3561:ctrl, %3562:phisel = region %3559, %3552
    %3565:i32 = phi %3562, %3560, %3553
    %3566:ctrl, %3567:ctrl = brcond %3561, %3565
    %3570:ctrl, %3571:i32 = load.4 %3566, %7
    %3572:i32 = iadd %3571, %8
    %3573:ctrl = store.4 %3570, %3572, %7
    %3576:ctrl, %3577:i32 = load.4 %3567, %6
    %3578:i32 = iadd %3577, %8
    %3579:ctrl = store.4 %3576, %3578, %6
    %3580:ctrl, %3581:phisel = region %3573, %3579
    %3584:ctrl, %3585:ctrl = brcond %3580, %8
    %3588:ctrl, %3589:i32 = load.1 %3584, %31
    %3592:ctrl, %3593:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3585
    %3594:ctrl, %3595:phisel = region %3592, %3588
    %3598:i32 = phi %3595, %3593, %3589
    %3599:ctrl, %3600:ctrl = brcond %3594, %3598
    %3603:ctrl, %3604:i32 = load.4 %3599, %7
    %3605:i32 = iadd %3604, %8
    %3606:ctrl = store.4 %3603, %3605, %7
    %3609:ctrl, %3610:i32 = load.4 %3600, %6
    %3611:i32 = iadd %3610, %8
    %3612:ctrl = store.4 %3609, %3611, %6
    %3613:ctrl, %3614:phisel = region %3606, %3612
    %3617:ctrl, %3618:ctrl = brcond %3613, %8
    %3621:ctrl, %3622:i32 = load.1 %3617, %31
    %3625:ctrl, %3626:ptr = load.8 %3618, %28
    %3627:ctrl, %3628:i32 = load.4 %3625, %13
    %3629:i64 = iext %3628
    %3630:i64 = sfill 32 %3629
    %3632:i64 = iadd %3630, %17
    %3644:ptr = ptroff %3626, %3632
    %3633:ptr = ptroff %3626, %11
    %3634:ctrl, %3635:i64 = load.4 %3627, %3633
    %3636:i64 = icmp slt %3630, %3635
    %3637:ctrl, %3638:ctrl = brcond %3634, %3636
    %3645:ctrl, %3646:i32 = load.1 %3637, %3644
    %3647:ctrl, %3648:phisel = region %3645, %3621
    %3651:i32 = phi %3648, %3646, %3622
    %3652:ctrl, %3653:ctrl = brcond %3647, %3651
    %3656:ctrl, %3657:i32 = load.4 %3652, %7
    %3658:i32 = iadd %3657, %8
    %3659:ctrl = store.4 %3656, %3658, %7
    %3662:ctrl, %3663:i32 = load.4 %3653, %6
    %3664:i32 = iadd %3663, %8
    %3665:ctrl = store.4 %3662, %3664, %6
    %3666:ctrl, %3667:phisel = region %3659, %3665
    %3670:ctrl, %3671:ctrl = brcond %3666, %8
    %3674:ctrl, %3675:i32 = load.1 %3670, %31
    %3678:ctrl, %3679:ptr = load.8 %3671, %12
    %3680:ctrl, %3681:i32 = load.4 %3678, %13
    %3682:i64 = iext %3681
    %3683:i64 = sfill 32 %3682
    %3685:i64 = iadd %3683, %17
    %3697:ptr = ptroff %3679, %3685
    %3686:ptr = ptroff %3679, %11
    %3687:ctrl, %3688:i64 = load.4 %3680, %3686
    %3689:i64 = icmp slt %3683, %3688
    %3690:ctrl, %3691:ctrl = brcond %3687, %3689
    %3698:ctrl, %3699:i32 = load.1 %3690, %3697
    %3700:ctrl, %3701:phisel = region %3698, %3674
    %3704:i32 = phi %3701, %3699, %3675
    %3705:ctrl, %3706:ctrl = brcond %3700, %3704
    %3709:ctrl, %3710:i32 = load.4 %3705, %7
    %3711:i32 = iadd %3710, %8
    %3712:ctrl = store.4 %3709, %3711, %7
    %3715:ctrl, %3716:i32 = load.4 %3706, %6
    %3717:i32 = iadd %3716, %8
    %3718:ctrl = store.4 %3715, %3717, %6
    %3719:ctrl, %3720:phisel = region %3712, %3718
    %3723:ctrl, %3724:ctrl = brcond %3719, %8
    %3727:ctrl, %3728:i32 = load.1 %3723, %30
    %3731:ctrl, %3732:phisel = region %3724, %3727
    %3735:i32 = phi %3732, %8, %3728
    %3736:ctrl, %3737:ctrl = brcond %3731, %3735
    %3740:ctrl, %3741:i32 = load.4 %3736, %7
    %3742:i32 = iadd %3741, %8
    %3743:ctrl = store.4 %3740, %3742, %7
    %3746:ctrl, %3747:i32 = load.4 %3737, %6
    %3748:i32 = iadd %3747, %8
    %3749:ctrl = store.4 %3746, %3748, %6
    %3750:ctrl, %3751:phisel = region %3743, %3749
    %3754:ctrl, %3755:ctrl = brcond %3750, %8
    %3758:ctrl, %3759:i32 = load.1 %3754, %30
    %3762:ctrl, %3763:phisel = region %3755, %3758
    %3766:i32 = phi %3763, %20, %3759
    %3767:ctrl, %3768:ctrl = brcond %3762, %3766
    %3771:ctrl, %3772:i32 = load.4 %3767, %7
    %3773:i32 = iadd %3772, %8
    %3774:ctrl = store.4 %3771, %3773, %7
    %3777:ctrl, %3778:i32 = load.4 %3768, %6
    %3779:i32 = iadd %3778, %8
    %3780:ctrl = store.4 %3777, %3779, %6
    %3781:ctrl, %3782:phisel = region %3774, %3780
    %3785:ctrl, %3786:ctrl = brcond %3781, %8
    %3789:ctrl, %3790:i32 = load.1 %3785, %30
    %3793:ctrl, %3794:i32 = load.1 %3786, %31
    %3795:ctrl, %3796:phisel = region %3793, %3789
    %3799:i32 = phi %3796, %3794, %3790
    %3800:ctrl, %3801:ctrl = brcond %3795, %3799
    %3804:ctrl, %3805:i32 = load.4 %3800, %7
    %3806:i32 = iadd %3805, %8
    %3807:ctrl = store.4 %3804, %3806, %7
    %3810:ctrl, %3811:i32 = load.4 %3801, %6
    %3812:i32 = iadd %3811, %8
    %3813:ctrl = store.4 %3810, %3812, %6
    %3814:ctrl, %3815:phisel = region %3807, %3813
    %3818:ctrl, %3819:ctrl = brcond %3814, %8
    %3822:ctrl, %3823:i32 = load.1 %3818, %30
    %3826:ctrl, %3827:i32 = load.1 %3819, %30
    %3828:ctrl, %3829:phisel = region %3826, %3822
    %3832:i32 = phi %3829, %3827, %3823
    %3833:ctrl, %3834:ctrl = brcond %3828, %3832
    %3837:ctrl, %3838:i32 = load.4 %3833, %7
    %3839:i32 = iadd %3838, %8
    %3840:ctrl = store.4 %3837, %3839, %7
    %3843:ctrl, %3844:i32 = load.4 %3834, %6
    %3845:i32 = iadd %3844, %8
    %3846:ctrl = store.4 %3843, %3845, %6
    %3847:ctrl, %3848:phisel = region %3840, %3846
    %3851:ctrl, %3852:ctrl = brcond %3847, %8
    %3855:ctrl, %3856:i32 = load.1 %3851, %30
    %3859:ctrl, %3860:ptr = load.8 %3852, %29
    %3861:ptr = ptroff %3860, %11
    %3862:ctrl, %3863:i32 = load.1 %3859, %3861
    %3864:ctrl, %3865:phisel = region %3862, %3855
    %3868:i32 = phi %3865, %3863, %3856
    %3869:ctrl, %3870:ctrl = brcond %3864, %3868
    %3873:ctrl, %3874:i32 = load.4 %3869, %7
    %3875:i32 = iadd %3874, %8
    %3876:ctrl = store.4 %3873, %3875, %7
    %3879:ctrl, %3880:i32 = load.4 %3870, %6
    %3881:i32 = iadd %3880, %8
    %3882:ctrl = store.4 %3879, %3881, %6
    %3883:ctrl, %3884:phisel = region %3876, %3882
    %3887:ctrl, %3888:ctrl = brcond %3883, %8
    %3891:ctrl, %3892:i32 = load.1 %3887, %30
    %3895:ctrl, %3896:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %3888
    %3897:ctrl, %3898:phisel = region %3895, %3891
    %3901:i32 = phi %3898, %3896, %3892
    %3902:ctrl, %3903:ctrl = brcond %3897, %3901
    %3906:ctrl, %3907:i32 = load.4 %3902, %7
    %3908:i32 = iadd %3907, %8
    %3909:ctrl = store.4 %3906, %3908, %7
    %3912:ctrl, %3913:i32 = load.4 %3903, %6
    %3914:i32 = iadd %3913, %8
    %3915:ctrl = store.4 %3912, %3914, %6
    %3916:ctrl, %3917:phisel = region %3909, %3915
    %3920:ctrl, %3921:ctrl = brcond %3916, %8
    %3924:ctrl, %3925:i32 = load.1 %3920, %30
    %3928:ctrl, %3929:ptr = load.8 %3921, %28
    %3930:ctrl, %3931:i32 = load.4 %3928, %13
    %3932:i64 = iext %3931
    %3933:i64 = sfill 32 %3932
    %3935:i64 = iadd %3933, %17
    %3947:ptr = ptroff %3929, %3935
    %3936:ptr = ptroff %3929, %11
    %3937:ctrl, %3938:i64 = load.4 %3930, %3936
    %3939:i64 = icmp slt %3933, %3938
    %3940:ctrl, %3941:ctrl = brcond %3937, %3939
    %3948:ctrl, %3949:i32 = load.1 %3940, %3947
    %3950:ctrl, %3951:phisel = region %3948, %3924
    %3954:i32 = phi %3951, %3949, %3925
    %3955:ctrl, %3956:ctrl = brcond %3950, %3954
    %3959:ctrl, %3960:i32 = load.4 %3955, %7
    %3961:i32 = iadd %3960, %8
    %3962:ctrl = store.4 %3959, %3961, %7
    %3965:ctrl, %3966:i32 = load.4 %3956, %6
    %3967:i32 = iadd %3966, %8
    %3968:ctrl = store.4 %3965, %3967, %6
    %3969:ctrl, %3970:phisel = region %3962, %3968
    %3973:ctrl, %3974:ctrl = brcond %3969, %8
    %3977:ctrl, %3978:i32 = load.1 %3973, %30
    %3981:ctrl, %3982:ptr = load.8 %3974, %12
    %3983:ctrl, %3984:i32 = load.4 %3981, %13
    %3985:i64 = iext %3984
    %3986:i64 = sfill 32 %3985
    %3988:i64 = iadd %3986, %17
    %4000:ptr = ptroff %3982, %3988
    %3989:ptr = ptroff %3982, %11
    %3990:ctrl, %3991:i64 = load.4 %3983, %3989
    %3992:i64 = icmp slt %3986, %3991
    %3993:ctrl, %3994:ctrl = brcond %3990, %3992
    %4001:ctrl, %4002:i32 = load.1 %3993, %4000
    %4003:ctrl, %4004:phisel = region %4001, %3977
    %4007:i32 = phi %4004, %4002, %3978
    %4008:ctrl, %4009:ctrl = brcond %4003, %4007
    %4012:ctrl, %4013:i32 = load.4 %4008, %7
    %4014:i32 = iadd %4013, %8
    %4015:ctrl = store.4 %4012, %4014, %7
    %4018:ctrl, %4019:i32 = load.4 %4009, %6
    %4020:i32 = iadd %4019, %8
    %4021:ctrl = store.4 %4018, %4020, %6
    %4022:ctrl, %4023:phisel = region %4015, %4021
    %4026:ctrl, %4027:ctrl = brcond %4022, %8
    %4030:ctrl, %4031:ptr = load.8 %4026, %29
    %4032:ptr = ptroff %4031, %11
    %4033:ctrl, %4034:i32 = load.1 %4030, %4032
    %4037:ctrl, %4038:phisel = region %4027, %4033
    %4041:i32 = phi %4038, %8, %4034
    %4042:ctrl, %4043:ctrl = brcond %4037, %4041
    %4046:ctrl, %4047:i32 = load.4 %4042, %7
    %4048:i32 = iadd %4047, %8
    %4049:ctrl = store.4 %4046, %4048, %7
    %4052:ctrl, %4053:i32 = load.4 %4043, %6
    %4054:i32 = iadd %4053, %8
    %4055:ctrl = store.4 %4052, %4054, %6
    %4056:ctrl, %4057:phisel = region %4049, %4055
    %4060:ctrl, %4061:ctrl = brcond %4056, %8
    %4064:ctrl, %4065:ptr = load.8 %4060, %29
    %4066:ptr = ptroff %4065, %11
    %4067:ctrl, %4068:i32 = load.1 %4064, %4066
    %4071:ctrl, %4072:phisel = region %4061, %4067
    %4075:i32 = phi %4072, %20, %4068
    %4076:ctrl, %4077:ctrl = brcond %4071, %4075
    %4080:ctrl, %4081:i32 = load.4 %4076, %7
    %4082:i32 = iadd %4081, %8
    %4083:ctrl = store.4 %4080, %4082, %7
    %4086:ctrl, %4087:i32 = load.4 %4077, %6
    %4088:i32 = iadd %4087, %8
    %4089:ctrl = store.4 %4086, %4088, %6
    %4090:ctrl, %4091:phisel = region %4083, %4089
    %4094:ctrl, %4095:ctrl = brcond %4090, %8
    %4098:ctrl, %4099:ptr = load.8 %4094, %29
    %4100:ptr = ptroff %4099, %11
    %4101:ctrl, %4102:i32 = load.1 %4098, %4100
    %4105:ctrl, %4106:i32 = load.1 %4095, %31
    %4107:ctrl, %4108:phisel = region %4105, %4101
    %4111:i32 = phi %4108, %4106, %4102
    %4112:ctrl, %4113:ctrl = brcond %4107, %4111
    %4116:ctrl, %4117:i32 = load.4 %4112, %7
    %4118:i32 = iadd %4117, %8
    %4119:ctrl = store.4 %4116, %4118, %7
    %4122:ctrl, %4123:i32 = load.4 %4113, %6
    %4124:i32 = iadd %4123, %8
    %4125:ctrl = store.4 %4122, %4124, %6
    %4126:ctrl, %4127:phisel = region %4119, %4125
    %4130:ctrl, %4131:ctrl = brcond %4126, %8
    %4134:ctrl, %4135:ptr = load.8 %4130, %29
    %4136:ptr = ptroff %4135, %11
    %4137:ctrl, %4138:i32 = load.1 %4134, %4136
    %4141:ctrl, %4142:i32 = load.1 %4131, %30
    %4143:ctrl, %4144:phisel = region %4141, %4137
    %4147:i32 = phi %4144, %4142, %4138
    %4148:ctrl, %4149:ctrl = brcond %4143, %4147
    %4152:ctrl, %4153:i32 = load.4 %4148, %7
    %4154:i32 = iadd %4153, %8
    %4155:ctrl = store.4 %4152, %4154, %7
    %4158:ctrl, %4159:i32 = load.4 %4149, %6
    %4160:i32 = iadd %4159, %8
    %4161:ctrl = store.4 %4158, %4160, %6
    %4162:ctrl, %4163:phisel = region %4155, %4161
    %4166:ctrl, %4167:ctrl = brcond %4162, %8
    %4170:ctrl, %4171:ptr = load.8 %4166, %29
    %4172:ptr = ptroff %4171, %11
    %4173:ctrl, %4174:i32 = load.1 %4170, %4172
    %4177:ctrl, %4178:ptr = load.8 %4167, %29
    %4179:ptr = ptroff %4178, %11
    %4180:ctrl, %4181:i32 = load.1 %4177, %4179
    %4182:ctrl, %4183:phisel = region %4180, %4173
    %4186:i32 = phi %4183, %4181, %4174
    %4187:ctrl, %4188:ctrl = brcond %4182, %4186
    %4191:ctrl, %4192:i32 = load.4 %4187, %7
    %4193:i32 = iadd %4192, %8
    %4194:ctrl = store.4 %4191, %4193, %7
    %4197:ctrl, %4198:i32 = load.4 %4188, %6
    %4199:i32 = iadd %4198, %8
    %4200:ctrl = store.4 %4197, %4199, %6
    %4201:ctrl, %4202:phisel = region %4194, %4200
    %4205:ctrl, %4206:ctrl = brcond %4201, %8
    %4209:ctrl, %4210:ptr = load.8 %4205, %29
    %4211:ptr = ptroff %4210, %11
    %4212:ctrl, %4213:i32 = load.1 %4209, %4211
    %4216:ctrl, %4217:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4206
    %4218:ctrl, %4219:phisel = region %4216, %4212
    %4222:i32 = phi %4219, %4217, %4213
    %4223:ctrl, %4224:ctrl = brcond %4218, %4222
    %4227:ctrl, %4228:i32 = load.4 %4223, %7
    %4229:i32 = iadd %4228, %8
    %4230:ctrl = store.4 %4227, %4229, %7
    %4233:ctrl, %4234:i32 = load.4 %4224, %6
    %4235:i32 = iadd %4234, %8
    %4236:ctrl = store.4 %4233, %4235, %6
    %4237:ctrl, %4238:phisel = region %4230, %4236
    %4241:ctrl, %4242:ctrl = brcond %4237, %8
    %4245:ctrl, %4246:ptr = load.8 %4241, %29
    %4247:ptr = ptroff %4246, %11
    %4248:ctrl, %4249:i32 = load.1 %4245, %4247
    %4252:ctrl, %4253:ptr = load.8 %4242, %28
    %4254:ctrl, %4255:i32 = load.4 %4252, %13
    %4256:i64 = iext %4255
    %4257:i64 = sfill 32 %4256
    %4259:i64 = iadd %4257, %17
    %4271:ptr = ptroff %4253, %4259
    %4260:ptr = ptroff %4253, %11
    %4261:ctrl, %4262:i64 = load.4 %4254, %4260
    %4263:i64 = icmp slt %4257, %4262
    %4264:ctrl, %4265:ctrl = brcond %4261, %4263
    %4272:ctrl, %4273:i32 = load.1 %4264, %4271
    %4274:ctrl, %4275:phisel = region %4272, %4248
    %4278:i32 = phi %4275, %4273, %4249
    %4279:ctrl, %4280:ctrl = brcond %4274, %4278
    %4283:ctrl, %4284:i32 = load.4 %4279, %7
    %4285:i32 = iadd %4284, %8
    %4286:ctrl = store.4 %4283, %4285, %7
    %4289:ctrl, %4290:i32 = load.4 %4280, %6
    %4291:i32 = iadd %4290, %8
    %4292:ctrl = store.4 %4289, %4291, %6
    %4293:ctrl, %4294:phisel = region %4286, %4292
    %4297:ctrl, %4298:ctrl = brcond %4293, %8
    %4301:ctrl, %4302:ptr = load.8 %4297, %29
    %4303:ptr = ptroff %4302, %11
    %4304:ctrl, %4305:i32 = load.1 %4301, %4303
    %4308:ctrl, %4309:ptr = load.8 %4298, %12
    %4310:ctrl, %4311:i32 = load.4 %4308, %13
    %4312:i64 = iext %4311
    %4313:i64 = sfill 32 %4312
    %4315:i64 = iadd %4313, %17
    %4327:ptr = ptroff %4309, %4315
    %4316:ptr = ptroff %4309, %11
    %4317:ctrl, %4318:i64 = load.4 %4310, %4316
    %4319:i64 = icmp slt %4313, %4318
    %4320:ctrl, %4321:ctrl = brcond %4317, %4319
    %4328:ctrl, %4329:i32 = load.1 %4320, %4327
    %4330:ctrl, %4331:phisel = region %4328, %4304
    %4334:i32 = phi %4331, %4329, %4305
    %4335:ctrl, %4336:ctrl = brcond %4330, %4334
    %4339:ctrl, %4340:i32 = load.4 %4335, %7
    %4341:i32 = iadd %4340, %8
    %4342:ctrl = store.4 %4339, %4341, %7
    %4345:ctrl, %4346:i32 = load.4 %4336, %6
    %4347:i32 = iadd %4346, %8
    %4348:ctrl = store.4 %4345, %4347, %6
    %4349:ctrl, %4350:phisel = region %4342, %4348
    %4353:ctrl, %4354:ctrl = brcond %4349, %8
    %4357:ctrl, %4358:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4353
    %4361:ctrl, %4362:phisel = region %4354, %4357
    %4365:i32 = phi %4362, %8, %4358
    %4366:ctrl, %4367:ctrl = brcond %4361, %4365
    %4370:ctrl, %4371:i32 = load.4 %4366, %7
    %4372:i32 = iadd %4371, %8
    %4373:ctrl = store.4 %4370, %4372, %7
    %4376:ctrl, %4377:i32 = load.4 %4367, %6
    %4378:i32 = iadd %4377, %8
    %4379:ctrl = store.4 %4376, %4378, %6
    %4380:ctrl, %4381:phisel = region %4373, %4379
    %4384:ctrl, %4385:ctrl = brcond %4380, %8
    %4388:ctrl, %4389:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4384
    %4392:ctrl, %4393:phisel = region %4385, %4388
    %4396:i32 = phi %4393, %20, %4389
    %4397:ctrl, %4398:ctrl = brcond %4392, %4396
    %4401:ctrl, %4402:i32 = load.4 %4397, %7
    %4403:i32 = iadd %4402, %8
    %4404:ctrl = store.4 %4401, %4403, %7
    %4407:ctrl, %4408:i32 = load.4 %4398, %6
    %4409:i32 = iadd %4408, %8
    %4410:ctrl = store.4 %4407, %4409, %6
    %4411:ctrl, %4412:phisel = region %4404, %4410
    %4415:ctrl, %4416:ctrl = brcond %4411, %8
    %4419:ctrl, %4420:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4415
    %4423:ctrl, %4424:i32 = load.1 %4416, %31
    %4425:ctrl, %4426:phisel = region %4423, %4419
    %4429:i32 = phi %4426, %4424, %4420
    %4430:ctrl, %4431:ctrl = brcond %4425, %4429
    %4434:ctrl, %4435:i32 = load.4 %4430, %7
    %4436:i32 = iadd %4435, %8
    %4437:ctrl = store.4 %4434, %4436, %7
    %4440:ctrl, %4441:i32 = load.4 %4431, %6
    %4442:i32 = iadd %4441, %8
    %4443:ctrl = store.4 %4440, %4442, %6
    %4444:ctrl, %4445:phisel = region %4437, %4443
    %4448:ctrl, %4449:ctrl = brcond %4444, %8
    %4452:ctrl, %4453:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4448
    %4456:ctrl, %4457:i32 = load.1 %4449, %30
    %4458:ctrl, %4459:phisel = region %4456, %4452
    %4462:i32 = phi %4459, %4457, %4453
    %4463:ctrl, %4464:ctrl = brcond %4458, %4462
    %4467:ctrl, %4468:i32 = load.4 %4463, %7
    %4469:i32 = iadd %4468, %8
    %4470:ctrl = store.4 %4467, %4469, %7
    %4473:ctrl, %4474:i32 = load.4 %4464, %6
    %4475:i32 = iadd %4474, %8
    %4476:ctrl = store.4 %4473, %4475, %6
    %4477:ctrl, %4478:phisel = region %4470, %4476
    %4481:ctrl, %4482:ctrl = brcond %4477, %8
    %4485:ctrl, %4486:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4481
    %4489:ctrl, %4490:ptr = load.8 %4482, %29
    %4491:ptr = ptroff %4490, %11
    %4492:ctrl, %4493:i32 = load.1 %4489, %4491
    %4494:ctrl, %4495:phisel = region %4492, %4485
    %4498:i32 = phi %4495, %4493, %4486
    %4499:ctrl, %4500:ctrl = brcond %4494, %4498
    %4503:ctrl, %4504:i32 = load.4 %4499, %7
    %4505:i32 = iadd %4504, %8
    %4506:ctrl = store.4 %4503, %4505, %7
    %4509:ctrl, %4510:i32 = load.4 %4500, %6
    %4511:i32 = iadd %4510, %8
    %4512:ctrl = store.4 %4509, %4511, %6
    %4513:ctrl, %4514:phisel = region %4506, %4512
    %4517:ctrl, %4518:ctrl = brcond %4513, %8
    %4521:ctrl, %4522:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4517
    %4525:ctrl, %4526:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4518
    %4527:ctrl, %4528:phisel = region %4525, %4521
    %4531:i32 = phi %4528, %4526, %4522
    %4532:ctrl, %4533:ctrl = brcond %4527, %4531
    %4536:ctrl, %4537:i32 = load.4 %4532, %7
    %4538:i32 = iadd %4537, %8
    %4539:ctrl = store.4 %4536, %4538, %7
    %4542:ctrl, %4543:i32 = load.4 %4533, %6
    %4544:i32 = iadd %4543, %8
    %4545:ctrl = store.4 %4542, %4544, %6
    %4546:ctrl, %4547:phisel = region %4539, %4545
    %4550:ctrl, %4551:ctrl = brcond %4546, %8
    %4554:ctrl, %4555:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4550
    %4558:ctrl, %4559:ptr = load.8 %4551, %28
    %4560:ctrl, %4561:i32 = load.4 %4558, %13
    %4562:i64 = iext %4561
    %4563:i64 = sfill 32 %4562
    %4565:i64 = iadd %4563, %17
    %4577:ptr = ptroff %4559, %4565
    %4566:ptr = ptroff %4559, %11
    %4567:ctrl, %4568:i64 = load.4 %4560, %4566
    %4569:i64 = icmp slt %4563, %4568
    %4570:ctrl, %4571:ctrl = brcond %4567, %4569
    %4578:ctrl, %4579:i32 = load.1 %4570, %4577
    %4580:ctrl, %4581:phisel = region %4578, %4554
    %4584:i32 = phi %4581, %4579, %4555
    %4585:ctrl, %4586:ctrl = brcond %4580, %4584
    %4589:ctrl, %4590:i32 = load.4 %4585, %7
    %4591:i32 = iadd %4590, %8
    %4592:ctrl = store.4 %4589, %4591, %7
    %4595:ctrl, %4596:i32 = load.4 %4586, %6
    %4597:i32 = iadd %4596, %8
    %4598:ctrl = store.4 %4595, %4597, %6
    %4599:ctrl, %4600:phisel = region %4592, %4598
    %4603:ctrl, %4604:ctrl = brcond %4599, %8
    %4607:ctrl, %4608:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4603
    %4611:ctrl, %4612:ptr = load.8 %4604, %12
    %4613:ctrl, %4614:i32 = load.4 %4611, %13
    %4615:i64 = iext %4614
    %4616:i64 = sfill 32 %4615
    %4618:i64 = iadd %4616, %17
    %4630:ptr = ptroff %4612, %4618
    %4619:ptr = ptroff %4612, %11
    %4620:ctrl, %4621:i64 = load.4 %4613, %4619
    %4622:i64 = icmp slt %4616, %4621
    %4623:ctrl, %4624:ctrl = brcond %4620, %4622
    %4631:ctrl, %4632:i32 = load.1 %4623, %4630
    %4633:ctrl, %4634:phisel = region %4631, %4607
    %4637:i32 = phi %4634, %4632, %4608
    %4638:ctrl, %4639:ctrl = brcond %4633, %4637
    %4642:ctrl, %4643:i32 = load.4 %4638, %7
    %4644:i32 = iadd %4643, %8
    %4645:ctrl = store.4 %4642, %4644, %7
    %4648:ctrl, %4649:i32 = load.4 %4639, %6
    %4650:i32 = iadd %4649, %8
    %4651:ctrl = store.4 %4648, %4650, %6
    %4652:ctrl, %4653:phisel = region %4645, %4651
    %4656:ctrl, %4657:ctrl = brcond %4652, %8
    %4660:ctrl, %4661:ptr = load.8 %4656, %28
    %4662:ctrl, %4663:i32 = load.4 %4660, %13
    %4664:i64 = iext %4663
    %4665:i64 = sfill 32 %4664
    %4667:i64 = iadd %4665, %17
    %4679:ptr = ptroff %4661, %4667
    %4668:ptr = ptroff %4661, %11
    %4669:ctrl, %4670:i64 = load.4 %4662, %4668
    %4671:i64 = icmp slt %4665, %4670
    %4672:ctrl, %4673:ctrl = brcond %4669, %4671
    %4680:ctrl, %4681:i32 = load.1 %4672, %4679
    %4678:ctrl = call @throw_index_out_of_range_exception %4673
    unreachable %4678
    %4684:ctrl, %4685:phisel = region %4657, %4680
    %4688:i32 = phi %4685, %8, %4681
    %4689:ctrl, %4690:ctrl = brcond %4684, %4688
    %4693:ctrl, %4694:i32 = load.4 %4689, %7
    %4695:i32 = iadd %4694, %8
    %4696:ctrl = store.4 %4693, %4695, %7
    %4699:ctrl, %4700:i32 = load.4 %4690, %6
    %4701:i32 = iadd %4700, %8
    %4702:ctrl = store.4 %4699, %4701, %6
    %4703:ctrl, %4704:phisel = region %4696, %4702
    %4707:ctrl, %4708:ctrl = brcond %4703, %8
    %4711:ctrl, %4712:ptr = load.8 %4707, %28
    %4713:ctrl, %4714:i32 = load.4 %4711, %13
    %4715:i64 = iext %4714
    %4716:i64 = sfill 32 %4715
    %4718:i64 = iadd %4716, %17
    %4730:ptr = ptroff %4712, %4718
    %4719:ptr = ptroff %4712, %11
    %4720:ctrl, %4721:i64 = load.4 %4713, %4719
    %4722:i64 = icmp slt %4716, %4721
    %4723:ctrl, %4724:ctrl = brcond %4720, %4722
    %4731:ctrl, %4732:i32 = load.1 %4723, %4730
    %4729:ctrl = call @throw_index_out_of_range_exception %4724
    unreachable %4729
    %4735:ctrl, %4736:phisel = region %4708, %4731
    %4739:i32 = phi %4736, %20, %4732
    %4740:ctrl, %4741:ctrl = brcond %4735, %4739
    %4744:ctrl, %4745:i32 = load.4 %4740, %7
    %4746:i32 = iadd %4745, %8
    %4747:ctrl = store.4 %4744, %4746, %7
    %4750:ctrl, %4751:i32 = load.4 %4741, %6
    %4752:i32 = iadd %4751, %8
    %4753:ctrl = store.4 %4750, %4752, %6
    %4754:ctrl, %4755:phisel = region %4747, %4753
    %4758:ctrl, %4759:ctrl = brcond %4754, %8
    %4762:ctrl, %4763:ptr = load.8 %4758, %28
    %4764:ctrl, %4765:i32 = load.4 %4762, %13
    %4766:i64 = iext %4765
    %4767:i64 = sfill 32 %4766
    %4769:i64 = iadd %4767, %17
    %4781:ptr = ptroff %4763, %4769
    %4770:ptr = ptroff %4763, %11
    %4771:ctrl, %4772:i64 = load.4 %4764, %4770
    %4773:i64 = icmp slt %4767, %4772
    %4774:ctrl, %4775:ctrl = brcond %4771, %4773
    %4782:ctrl, %4783:i32 = load.1 %4774, %4781
    %4780:ctrl = call @throw_index_out_of_range_exception %4775
    unreachable %4780
    %4786:ctrl, %4787:i32 = load.1 %4759, %31
    %4788:ctrl, %4789:phisel = region %4786, %4782
    %4792:i32 = phi %4789, %4787, %4783
    %4793:ctrl, %4794:ctrl = brcond %4788, %4792
    %4797:ctrl, %4798:i32 = load.4 %4793, %7
    %4799:i32 = iadd %4798, %8
    %4800:ctrl = store.4 %4797, %4799, %7
    %4803:ctrl, %4804:i32 = load.4 %4794, %6
    %4805:i32 = iadd %4804, %8
    %4806:ctrl = store.4 %4803, %4805, %6
    %4807:ctrl, %4808:phisel = region %4800, %4806
    %4811:ctrl, %4812:ctrl = brcond %4807, %8
    %4815:ctrl, %4816:ptr = load.8 %4811, %28
    %4817:ctrl, %4818:i32 = load.4 %4815, %13
    %4819:i64 = iext %4818
    %4820:i64 = sfill 32 %4819
    %4822:i64 = iadd %4820, %17
    %4834:ptr = ptroff %4816, %4822
    %4823:ptr = ptroff %4816, %11
    %4824:ctrl, %4825:i64 = load.4 %4817, %4823
    %4826:i64 = icmp slt %4820, %4825
    %4827:ctrl, %4828:ctrl = brcond %4824, %4826
    %4835:ctrl, %4836:i32 = load.1 %4827, %4834
    %4833:ctrl = call @throw_index_out_of_range_exception %4828
    unreachable %4833
    %4839:ctrl, %4840:i32 = load.1 %4812, %30
    %4841:ctrl, %4842:phisel = region %4839, %4835
    %4845:i32 = phi %4842, %4840, %4836
    %4846:ctrl, %4847:ctrl = brcond %4841, %4845
    %4850:ctrl, %4851:i32 = load.4 %4846, %7
    %4852:i32 = iadd %4851, %8
    %4853:ctrl = store.4 %4850, %4852, %7
    %4856:ctrl, %4857:i32 = load.4 %4847, %6
    %4858:i32 = iadd %4857, %8
    %4859:ctrl = store.4 %4856, %4858, %6
    %4860:ctrl, %4861:phisel = region %4853, %4859
    %4864:ctrl, %4865:ctrl = brcond %4860, %8
    %4868:ctrl, %4869:ptr = load.8 %4864, %28
    %4870:ctrl, %4871:i32 = load.4 %4868, %13
    %4872:i64 = iext %4871
    %4873:i64 = sfill 32 %4872
    %4875:i64 = iadd %4873, %17
    %4887:ptr = ptroff %4869, %4875
    %4876:ptr = ptroff %4869, %11
    %4877:ctrl, %4878:i64 = load.4 %4870, %4876
    %4879:i64 = icmp slt %4873, %4878
    %4880:ctrl, %4881:ctrl = brcond %4877, %4879
    %4888:ctrl, %4889:i32 = load.1 %4880, %4887
    %4886:ctrl = call @throw_index_out_of_range_exception %4881
    unreachable %4886
    %4892:ctrl, %4893:ptr = load.8 %4865, %29
    %4894:ptr = ptroff %4893, %11
    %4895:ctrl, %4896:i32 = load.1 %4892, %4894
    %4897:ctrl, %4898:phisel = region %4895, %4888
    %4901:i32 = phi %4898, %4896, %4889
    %4902:ctrl, %4903:ctrl = brcond %4897, %4901
    %4906:ctrl, %4907:i32 = load.4 %4902, %7
    %4908:i32 = iadd %4907, %8
    %4909:ctrl = store.4 %4906, %4908, %7
    %4912:ctrl, %4913:i32 = load.4 %4903, %6
    %4914:i32 = iadd %4913, %8
    %4915:ctrl = store.4 %4912, %4914, %6
    %4916:ctrl, %4917:phisel = region %4909, %4915
    %4920:ctrl, %4921:ctrl = brcond %4916, %8
    %4924:ctrl, %4925:ptr = load.8 %4920, %28
    %4926:ctrl, %4927:i32 = load.4 %4924, %13
    %4928:i64 = iext %4927
    %4929:i64 = sfill 32 %4928
    %4931:i64 = iadd %4929, %17
    %4943:ptr = ptroff %4925, %4931
    %4932:ptr = ptroff %4925, %11
    %4933:ctrl, %4934:i64 = load.4 %4926, %4932
    %4935:i64 = icmp slt %4929, %4934
    %4936:ctrl, %4937:ctrl = brcond %4933, %4935
    %4944:ctrl, %4945:i32 = load.1 %4936, %4943
    %4942:ctrl = call @throw_index_out_of_range_exception %4937
    unreachable %4942
    %4948:ctrl, %4949:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %4921
    %4950:ctrl, %4951:phisel = region %4948, %4944
    %4954:i32 = phi %4951, %4949, %4945
    %4955:ctrl, %4956:ctrl = brcond %4950, %4954
    %4959:ctrl, %4960:i32 = load.4 %4955, %7
    %4961:i32 = iadd %4960, %8
    %4962:ctrl = store.4 %4959, %4961, %7
    %4965:ctrl, %4966:i32 = load.4 %4956, %6
    %4967:i32 = iadd %4966, %8
    %4968:ctrl = store.4 %4965, %4967, %6
    %4969:ctrl, %4970:phisel = region %4962, %4968
    %4973:ctrl, %4974:ctrl = brcond %4969, %8
    %4977:ctrl, %4978:ptr = load.8 %4973, %28
    %4979:ctrl, %4980:i32 = load.4 %4977, %13
    %4981:i64 = iext %4980
    %4982:i64 = sfill 32 %4981
    %4984:i64 = iadd %4982, %17
    %4996:ptr = ptroff %4978, %4984
    %4985:ptr = ptroff %4978, %11
    %4986:ctrl, %4987:i64 = load.4 %4979, %4985
    %4988:i64 = icmp slt %4982, %4987
    %4989:ctrl, %4990:ctrl = brcond %4986, %4988
    %4997:ctrl, %4998:i32 = load.1 %4989, %4996
    %4995:ctrl = call @throw_index_out_of_range_exception %4990
    unreachable %4995
    %5001:ctrl, %5002:ptr = load.8 %4974, %28
    %5003:ctrl, %5004:i32 = load.4 %5001, %13
    %5005:i64 = iext %5004
    %5006:i64 = sfill 32 %5005
    %5008:i64 = iadd %5006, %17
    %5020:ptr = ptroff %5002, %5008
    %5009:ptr = ptroff %5002, %11
    %5010:ctrl, %5011:i64 = load.4 %5003, %5009
    %5012:i64 = icmp slt %5006, %5011
    %5013:ctrl, %5014:ctrl = brcond %5010, %5012
    %5021:ctrl, %5022:i32 = load.1 %5013, %5020
    %5023:ctrl, %5024:phisel = region %5021, %4997
    %5027:i32 = phi %5024, %5022, %4998
    %5028:ctrl, %5029:ctrl = brcond %5023, %5027
    %5032:ctrl, %5033:i32 = load.4 %5028, %7
    %5034:i32 = iadd %5033, %8
    %5035:ctrl = store.4 %5032, %5034, %7
    %5038:ctrl, %5039:i32 = load.4 %5029, %6
    %5040:i32 = iadd %5039, %8
    %5041:ctrl = store.4 %5038, %5040, %6
    %5042:ctrl, %5043:phisel = region %5035, %5041
    %5046:ctrl, %5047:ctrl = brcond %5042, %8
    %5050:ctrl, %5051:ptr = load.8 %5046, %28
    %5052:ctrl, %5053:i32 = load.4 %5050, %13
    %5054:i64 = iext %5053
    %5055:i64 = sfill 32 %5054
    %5057:i64 = iadd %5055, %17
    %5069:ptr = ptroff %5051, %5057
    %5058:ptr = ptroff %5051, %11
    %5059:ctrl, %5060:i64 = load.4 %5052, %5058
    %5061:i64 = icmp slt %5055, %5060
    %5062:ctrl, %5063:ctrl = brcond %5059, %5061
    %5070:ctrl, %5071:i32 = load.1 %5062, %5069
    %5068:ctrl = call @throw_index_out_of_range_exception %5063
    unreachable %5068
    %5074:ctrl, %5075:ptr = load.8 %5047, %12
    %5076:ctrl, %5077:i32 = load.4 %5074, %13
    %5078:i64 = iext %5077
    %5079:i64 = sfill 32 %5078
    %5081:i64 = iadd %5079, %17
    %5093:ptr = ptroff %5075, %5081
    %5082:ptr = ptroff %5075, %11
    %5083:ctrl, %5084:i64 = load.4 %5076, %5082
    %5085:i64 = icmp slt %5079, %5084
    %5086:ctrl, %5087:ctrl = brcond %5083, %5085
    %5094:ctrl, %5095:i32 = load.1 %5086, %5093
    %5096:ctrl, %5097:phisel = region %5094, %5070
    %5100:i32 = phi %5097, %5095, %5071
    %5101:ctrl, %5102:ctrl = brcond %5096, %5100
    %5105:ctrl, %5106:i32 = load.4 %5101, %7
    %5107:i32 = iadd %5106, %8
    %5108:ctrl = store.4 %5105, %5107, %7
    %5111:ctrl, %5112:i32 = load.4 %5102, %6
    %5113:i32 = iadd %5112, %8
    %5114:ctrl = store.4 %5111, %5113, %6
    %5115:ctrl, %5116:phisel = region %5108, %5114
    %5119:ctrl, %5120:ctrl = brcond %5115, %8
    %5123:ctrl, %5124:ptr = load.8 %5119, %12
    %5125:ctrl, %5126:i32 = load.4 %5123, %13
    %5127:i64 = iext %5126
    %5128:i64 = sfill 32 %5127
    %5130:i64 = iadd %5128, %17
    %5142:ptr = ptroff %5124, %5130
    %5131:ptr = ptroff %5124, %11
    %5132:ctrl, %5133:i64 = load.4 %5125, %5131
    %5134:i64 = icmp slt %5128, %5133
    %5135:ctrl, %5136:ctrl = brcond %5132, %5134
    %5143:ctrl, %5144:i32 = load.1 %5135, %5142
    %5141:ctrl = call @throw_index_out_of_range_exception %5136
    unreachable %5141
    %5147:ctrl, %5148:phisel = region %5120, %5143
    %5151:i32 = phi %5148, %8, %5144
    %5152:ctrl, %5153:ctrl = brcond %5147, %5151
    %5156:ctrl, %5157:i32 = load.4 %5152, %7
    %5158:i32 = iadd %5157, %8
    %5159:ctrl = store.4 %5156, %5158, %7
    %5162:ctrl, %5163:i32 = load.4 %5153, %6
    %5164:i32 = iadd %5163, %8
    %5165:ctrl = store.4 %5162, %5164, %6
    %5166:ctrl, %5167:phisel = region %5159, %5165
    %5170:ctrl, %5171:ctrl = brcond %5166, %8
    %5174:ctrl, %5175:ptr = load.8 %5170, %12
    %5176:ctrl, %5177:i32 = load.4 %5174, %13
    %5178:i64 = iext %5177
    %5179:i64 = sfill 32 %5178
    %5181:i64 = iadd %5179, %17
    %5193:ptr = ptroff %5175, %5181
    %5182:ptr = ptroff %5175, %11
    %5183:ctrl, %5184:i64 = load.4 %5176, %5182
    %5185:i64 = icmp slt %5179, %5184
    %5186:ctrl, %5187:ctrl = brcond %5183, %5185
    %5194:ctrl, %5195:i32 = load.1 %5186, %5193
    %5192:ctrl = call @throw_index_out_of_range_exception %5187
    unreachable %5192
    %5198:ctrl, %5199:phisel = region %5171, %5194
    %5202:i32 = phi %5199, %20, %5195
    %5203:ctrl, %5204:ctrl = brcond %5198, %5202
    %5207:ctrl, %5208:i32 = load.4 %5203, %7
    %5209:i32 = iadd %5208, %8
    %5210:ctrl = store.4 %5207, %5209, %7
    %5213:ctrl, %5214:i32 = load.4 %5204, %6
    %5215:i32 = iadd %5214, %8
    %5216:ctrl = store.4 %5213, %5215, %6
    %5217:ctrl, %5218:phisel = region %5210, %5216
    %5221:ctrl, %5222:ctrl = brcond %5217, %8
    %5225:ctrl, %5226:ptr = load.8 %5221, %12
    %5227:ctrl, %5228:i32 = load.4 %5225, %13
    %5229:i64 = iext %5228
    %5230:i64 = sfill 32 %5229
    %5232:i64 = iadd %5230, %17
    %5244:ptr = ptroff %5226, %5232
    %5233:ptr = ptroff %5226, %11
    %5234:ctrl, %5235:i64 = load.4 %5227, %5233
    %5236:i64 = icmp slt %5230, %5235
    %5237:ctrl, %5238:ctrl = brcond %5234, %5236
    %5245:ctrl, %5246:i32 = load.1 %5237, %5244
    %5243:ctrl = call @throw_index_out_of_range_exception %5238
    unreachable %5243
    %5249:ctrl, %5250:i32 = load.1 %5222, %31
    %5251:ctrl, %5252:phisel = region %5249, %5245
    %5255:i32 = phi %5252, %5250, %5246
    %5256:ctrl, %5257:ctrl = brcond %5251, %5255
    %5260:ctrl, %5261:i32 = load.4 %5256, %7
    %5262:i32 = iadd %5261, %8
    %5263:ctrl = store.4 %5260, %5262, %7
    %5266:ctrl, %5267:i32 = load.4 %5257, %6
    %5268:i32 = iadd %5267, %8
    %5269:ctrl = store.4 %5266, %5268, %6
    %5270:ctrl, %5271:phisel = region %5263, %5269
    %5274:ctrl, %5275:ctrl = brcond %5270, %8
    %5278:ctrl, %5279:ptr = load.8 %5274, %12
    %5280:ctrl, %5281:i32 = load.4 %5278, %13
    %5282:i64 = iext %5281
    %5283:i64 = sfill 32 %5282
    %5285:i64 = iadd %5283, %17
    %5297:ptr = ptroff %5279, %5285
    %5286:ptr = ptroff %5279, %11
    %5287:ctrl, %5288:i64 = load.4 %5280, %5286
    %5289:i64 = icmp slt %5283, %5288
    %5290:ctrl, %5291:ctrl = brcond %5287, %5289
    %5298:ctrl, %5299:i32 = load.1 %5290, %5297
    %5296:ctrl = call @throw_index_out_of_range_exception %5291
    unreachable %5296
    %5302:ctrl, %5303:i32 = load.1 %5275, %30
    %5304:ctrl, %5305:phisel = region %5302, %5298
    %5308:i32 = phi %5305, %5303, %5299
    %5309:ctrl, %5310:ctrl = brcond %5304, %5308
    %5313:ctrl, %5314:i32 = load.4 %5309, %7
    %5315:i32 = iadd %5314, %8
    %5316:ctrl = store.4 %5313, %5315, %7
    %5319:ctrl, %5320:i32 = load.4 %5310, %6
    %5321:i32 = iadd %5320, %8
    %5322:ctrl = store.4 %5319, %5321, %6
    %5323:ctrl, %5324:phisel = region %5316, %5322
    %5327:ctrl, %5328:ctrl = brcond %5323, %8
    %5331:ctrl, %5332:ptr = load.8 %5327, %12
    %5333:ctrl, %5334:i32 = load.4 %5331, %13
    %5335:i64 = iext %5334
    %5336:i64 = sfill 32 %5335
    %5338:i64 = iadd %5336, %17
    %5350:ptr = ptroff %5332, %5338
    %5339:ptr = ptroff %5332, %11
    %5340:ctrl, %5341:i64 = load.4 %5333, %5339
    %5342:i64 = icmp slt %5336, %5341
    %5343:ctrl, %5344:ctrl = brcond %5340, %5342
    %5351:ctrl, %5352:i32 = load.1 %5343, %5350
    %5349:ctrl = call @throw_index_out_of_range_exception %5344
    unreachable %5349
    %5355:ctrl, %5356:ptr = load.8 %5328, %29
    %5357:ptr = ptroff %5356, %11
    %5358:ctrl, %5359:i32 = load.1 %5355, %5357
    %5360:ctrl, %5361:phisel = region %5358, %5351
    %5364:i32 = phi %5361, %5359, %5352
    %5365:ctrl, %5366:ctrl = brcond %5360, %5364
    %5369:ctrl, %5370:i32 = load.4 %5365, %7
    %5371:i32 = iadd %5370, %8
    %5372:ctrl = store.4 %5369, %5371, %7
    %5375:ctrl, %5376:i32 = load.4 %5366, %6
    %5377:i32 = iadd %5376, %8
    %5378:ctrl = store.4 %5375, %5377, %6
    %5379:ctrl, %5380:phisel = region %5372, %5378
    %5383:ctrl, %5384:ctrl = brcond %5379, %8
    %5387:ctrl, %5388:ptr = load.8 %5383, %12
    %5389:ctrl, %5390:i32 = load.4 %5387, %13
    %5391:i64 = iext %5390
    %5392:i64 = sfill 32 %5391
    %5394:i64 = iadd %5392, %17
    %5406:ptr = ptroff %5388, %5394
    %5395:ptr = ptroff %5388, %11
    %5396:ctrl, %5397:i64 = load.4 %5389, %5395
    %5398:i64 = icmp slt %5392, %5397
    %5399:ctrl, %5400:ctrl = brcond %5396, %5398
    %5407:ctrl, %5408:i32 = load.1 %5399, %5406
    %5405:ctrl = call @throw_index_out_of_range_exception %5400
    unreachable %5405
    %5411:ctrl, %5412:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5384
    %5413:ctrl, %5414:phisel = region %5411, %5407
    %5417:i32 = phi %5414, %5412, %5408
    %5418:ctrl, %5419:ctrl = brcond %5413, %5417
    %5422:ctrl, %5423:i32 = load.4 %5418, %7
    %5424:i32 = iadd %5423, %8
    %5425:ctrl = store.4 %5422, %5424, %7
    %5428:ctrl, %5429:i32 = load.4 %5419, %6
    %5430:i32 = iadd %5429, %8
    %5431:ctrl = store.4 %5428, %5430, %6
    %5432:ctrl, %5433:phisel = region %5425, %5431
    %5436:ctrl, %5437:ctrl = brcond %5432, %8
    %5440:ctrl, %5441:ptr = load.8 %5436, %12
    %5442:ctrl, %5443:i32 = load.4 %5440, %13
    %5444:i64 = iext %5443
    %5445:i64 = sfill 32 %5444
    %5447:i64 = iadd %5445, %17
    %5459:ptr = ptroff %5441, %5447
    %5448:ptr = ptroff %5441, %11
    %5449:ctrl, %5450:i64 = load.4 %5442, %5448
    %5451:i64 = icmp slt %5445, %5450
    %5452:ctrl, %5453:ctrl = brcond %5449, %5451
    %5460:ctrl, %5461:i32 = load.1 %5452, %5459
    %5458:ctrl = call @throw_index_out_of_range_exception %5453
    unreachable %5458
    %5464:ctrl, %5465:ptr = load.8 %5437, %28
    %5466:ctrl, %5467:i32 = load.4 %5464, %13
    %5468:i64 = iext %5467
    %5469:i64 = sfill 32 %5468
    %5471:i64 = iadd %5469, %17
    %5483:ptr = ptroff %5465, %5471
    %5472:ptr = ptroff %5465, %11
    %5473:ctrl, %5474:i64 = load.4 %5466, %5472
    %5475:i64 = icmp slt %5469, %5474
    %5476:ctrl, %5477:ctrl = brcond %5473, %5475
    %5484:ctrl, %5485:i32 = load.1 %5476, %5483
    %5486:ctrl, %5487:phisel = region %5484, %5460
    %5490:i32 = phi %5487, %5485, %5461
    %5491:ctrl, %5492:ctrl = brcond %5486, %5490
    %5495:ctrl, %5496:i32 = load.4 %5491, %7
    %5497:i32 = iadd %5496, %8
    %5498:ctrl = store.4 %5495, %5497, %7
    %5501:ctrl, %5502:i32 = load.4 %5492, %6
    %5503:i32 = iadd %5502, %8
    %5504:ctrl = store.4 %5501, %5503, %6
    %5505:ctrl, %5506:phisel = region %5498, %5504
    %5509:ctrl, %5510:ctrl = brcond %5505, %8
    %5513:ctrl, %5514:ptr = load.8 %5509, %12
    %5515:ctrl, %5516:i32 = load.4 %5513, %13
    %5517:i64 = iext %5516
    %5518:i64 = sfill 32 %5517
    %5520:i64 = iadd %5518, %17
    %5532:ptr = ptroff %5514, %5520
    %5521:ptr = ptroff %5514, %11
    %5522:ctrl, %5523:i64 = load.4 %5515, %5521
    %5524:i64 = icmp slt %5518, %5523
    %5525:ctrl, %5526:ctrl = brcond %5522, %5524
    %5533:ctrl, %5534:i32 = load.1 %5525, %5532
    %5531:ctrl = call @throw_index_out_of_range_exception %5526
    unreachable %5531
    %5537:ctrl, %5538:ptr = load.8 %5510, %12
    %5539:ctrl, %5540:i32 = load.4 %5537, %13
    %5541:i64 = iext %5540
    %5542:i64 = sfill 32 %5541
    %5544:i64 = iadd %5542, %17
    %5556:ptr = ptroff %5538, %5544
    %5545:ptr = ptroff %5538, %11
    %5546:ctrl, %5547:i64 = load.4 %5539, %5545
    %5548:i64 = icmp slt %5542, %5547
    %5549:ctrl, %5550:ctrl = brcond %5546, %5548
    %5557:ctrl, %5558:i32 = load.1 %5549, %5556
    %5559:ctrl, %5560:phisel = region %5557, %5533
    %5562:i32 = phi %5560, %5558, %5534
    %5563:ctrl, %5564:ctrl = brcond %5559, %5562
    %5567:ctrl, %5568:i32 = load.4 %5563, %7
    %5569:i32 = iadd %5568, %8
    %5570:ctrl = store.4 %5567, %5569, %7
    %5573:ctrl, %5574:i32 = load.4 %5564, %6
    %5575:i32 = iadd %5574, %8
    %5576:ctrl = store.4 %5573, %5575, %6
    %5577:ctrl, %5578:phisel = region %5570, %5576
    %5580:ctrl, %5581:ctrl = brcond %5577, %20
    %5586:ctrl, %5587:phisel = region %5581, %5580
    %5590:ctrl, %5591:ctrl = brcond %5586, %8
    %5594:ctrl, %5595:i32 = load.4 %5590, %7
    %5596:i32 = iadd %5595, %8
    %5597:ctrl = store.4 %5594, %5596, %7
    %5600:ctrl, %5601:i32 = load.4 %5591, %6
    %5602:i32 = iadd %5601, %8
    %5603:ctrl = store.4 %5600, %5602, %6
    %5604:ctrl, %5605:phisel = region %5597, %5603
    %5608:ctrl, %5609:ctrl = brcond %5604, %20
    %5612:ctrl, %5613:i32 = load.4 %5608, %7
    %5614:i32 = iadd %5613, %8
    %5615:ctrl = store.4 %5612, %5614, %7
    %5618:ctrl, %5619:i32 = load.4 %5609, %6
    %5620:i32 = iadd %5619, %8
    %5621:ctrl = store.4 %5618, %5620, %6
    %5622:ctrl, %5623:phisel = region %5615, %5621
    %5625:ctrl, %5626:ctrl = brcond %5622, %20
    %5631:ctrl, %5632:i32 = load.1 %5626, %31
    %5633:ctrl, %5634:phisel = region %5631, %5625
    %5636:i32 = phi %5634, %5632, %8
    %5637:ctrl, %5638:ctrl = brcond %5633, %5636
    %5641:ctrl, %5642:i32 = load.4 %5637, %7
    %5643:i32 = iadd %5642, %8
    %5644:ctrl = store.4 %5641, %5643, %7
    %5647:ctrl, %5648:i32 = load.4 %5638, %6
    %5649:i32 = iadd %5648, %8
    %5650:ctrl = store.4 %5647, %5649, %6
    %5651:ctrl, %5652:phisel = region %5644, %5650
    %5654:ctrl, %5655:ctrl = brcond %5651, %20
    %5660:ctrl, %5661:i32 = load.1 %5655, %30
    %5662:ctrl, %5663:phisel = region %5660, %5654
    %5665:i32 = phi %5663, %5661, %8
    %5666:ctrl, %5667:ctrl = brcond %5662, %5665
    %5670:ctrl, %5671:i32 = load.4 %5666, %7
    %5672:i32 = iadd %5671, %8
    %5673:ctrl = store.4 %5670, %5672, %7
    %5676:ctrl, %5677:i32 = load.4 %5667, %6
    %5678:i32 = iadd %5677, %8
    %5679:ctrl = store.4 %5676, %5678, %6
    %5680:ctrl, %5681:phisel = region %5673, %5679
    %5683:ctrl, %5684:ctrl = brcond %5680, %20
    %5689:ctrl, %5690:ptr = load.8 %5684, %29
    %5691:ptr = ptroff %5690, %11
    %5692:ctrl, %5693:i32 = load.1 %5689, %5691
    %5694:ctrl, %5695:phisel = region %5692, %5683
    %5697:i32 = phi %5695, %5693, %8
    %5698:ctrl, %5699:ctrl = brcond %5694, %5697
    %5702:ctrl, %5703:i32 = load.4 %5698, %7
    %5704:i32 = iadd %5703, %8
    %5705:ctrl = store.4 %5702, %5704, %7
    %5708:ctrl, %5709:i32 = load.4 %5699, %6
    %5710:i32 = iadd %5709, %8
    %5711:ctrl = store.4 %5708, %5710, %6
    %5712:ctrl, %5713:phisel = region %5705, %5711
    %5715:ctrl, %5716:ctrl = brcond %5712, %20
    %5721:ctrl, %5722:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5716
    %5723:ctrl, %5724:phisel = region %5721, %5715
    %5726:i32 = phi %5724, %5722, %8
    %5727:ctrl, %5728:ctrl = brcond %5723, %5726
    %5731:ctrl, %5732:i32 = load.4 %5727, %7
    %5733:i32 = iadd %5732, %8
    %5734:ctrl = store.4 %5731, %5733, %7
    %5737:ctrl, %5738:i32 = load.4 %5728, %6
    %5739:i32 = iadd %5738, %8
    %5740:ctrl = store.4 %5737, %5739, %6
    %5741:ctrl, %5742:phisel = region %5734, %5740
    %5744:ctrl, %5745:ctrl = brcond %5741, %20
    %5750:ctrl, %5751:ptr = load.8 %5745, %28
    %5752:ctrl, %5753:i32 = load.4 %5750, %13
    %5754:i64 = iext %5753
    %5755:i64 = sfill 32 %5754
    %5757:i64 = iadd %5755, %17
    %5769:ptr = ptroff %5751, %5757
    %5758:ptr = ptroff %5751, %11
    %5759:ctrl, %5760:i64 = load.4 %5752, %5758
    %5761:i64 = icmp slt %5755, %5760
    %5762:ctrl, %5763:ctrl = brcond %5759, %5761
    %5770:ctrl, %5771:i32 = load.1 %5762, %5769
    %5772:ctrl, %5773:phisel = region %5770, %5744
    %5775:i32 = phi %5773, %5771, %8
    %5776:ctrl, %5777:ctrl = brcond %5772, %5775
    %5780:ctrl, %5781:i32 = load.4 %5776, %7
    %5782:i32 = iadd %5781, %8
    %5783:ctrl = store.4 %5780, %5782, %7
    %5786:ctrl, %5787:i32 = load.4 %5777, %6
    %5788:i32 = iadd %5787, %8
    %5789:ctrl = store.4 %5786, %5788, %6
    %5790:ctrl, %5791:phisel = region %5783, %5789
    %5793:ctrl, %5794:ctrl = brcond %5790, %20
    %5799:ctrl, %5800:ptr = load.8 %5794, %12
    %5801:ctrl, %5802:i32 = load.4 %5799, %13
    %5803:i64 = iext %5802
    %5804:i64 = sfill 32 %5803
    %5806:i64 = iadd %5804, %17
    %5818:ptr = ptroff %5800, %5806
    %5807:ptr = ptroff %5800, %11
    %5808:ctrl, %5809:i64 = load.4 %5801, %5807
    %5810:i64 = icmp slt %5804, %5809
    %5811:ctrl, %5812:ctrl = brcond %5808, %5810
    %5819:ctrl, %5820:i32 = load.1 %5811, %5818
    %5821:ctrl, %5822:phisel = region %5819, %5793
    %5824:i32 = phi %5822, %5820, %8
    %5825:ctrl, %5826:ctrl = brcond %5821, %5824
    %5829:ctrl, %5830:i32 = load.4 %5825, %7
    %5831:i32 = iadd %5830, %8
    %5832:ctrl = store.4 %5829, %5831, %7
    %5835:ctrl, %5836:i32 = load.4 %5826, %6
    %5837:i32 = iadd %5836, %8
    %5838:ctrl = store.4 %5835, %5837, %6
    %5839:ctrl, %5840:phisel = region %5832, %5838
    %5843:ctrl, %5844:ctrl = brcond %5839, %8
    %5847:ctrl, %5848:i32 = load.4 %5843, %7
    %5849:i32 = iadd %5848, %8
    %5850:ctrl = store.4 %5847, %5849, %7
    %5853:ctrl, %5854:i32 = load.4 %5844, %6
    %5855:i32 = iadd %5854, %8
    %5856:ctrl = store.4 %5853, %5855, %6
    %5857:ctrl, %5858:phisel = region %5850, %5856
    %5860:ctrl, %5861:ctrl = brcond %5857, %20
    %5866:ctrl, %5867:phisel = region %5861, %5860
    %5870:ctrl, %5871:ctrl = brcond %5866, %20
    %5874:ctrl, %5875:i32 = load.4 %5870, %7
    %5876:i32 = iadd %5875, %8
    %5877:ctrl = store.4 %5874, %5876, %7
    %5880:ctrl, %5881:i32 = load.4 %5871, %6
    %5882:i32 = iadd %5881, %8
    %5883:ctrl = store.4 %5880, %5882, %6
    %5884:ctrl, %5885:phisel = region %5877, %5883
    %5887:ctrl, %5888:ctrl = brcond %5884, %20
    %5893:ctrl, %5894:i32 = load.1 %5888, %31
    %5895:ctrl, %5896:phisel = region %5893, %5887
    %5898:i32 = phi %5896, %5894, %20
    %5899:ctrl, %5900:ctrl = brcond %5895, %5898
    %5903:ctrl, %5904:i32 = load.4 %5899, %7
    %5905:i32 = iadd %5904, %8
    %5906:ctrl = store.4 %5903, %5905, %7
    %5909:ctrl, %5910:i32 = load.4 %5900, %6
    %5911:i32 = iadd %5910, %8
    %5912:ctrl = store.4 %5909, %5911, %6
    %5913:ctrl, %5914:phisel = region %5906, %5912
    %5916:ctrl, %5917:ctrl = brcond %5913, %20
    %5922:ctrl, %5923:i32 = load.1 %5917, %30
    %5924:ctrl, %5925:phisel = region %5922, %5916
    %5927:i32 = phi %5925, %5923, %20
    %5928:ctrl, %5929:ctrl = brcond %5924, %5927
    %5932:ctrl, %5933:i32 = load.4 %5928, %7
    %5934:i32 = iadd %5933, %8
    %5935:ctrl = store.4 %5932, %5934, %7
    %5938:ctrl, %5939:i32 = load.4 %5929, %6
    %5940:i32 = iadd %5939, %8
    %5941:ctrl = store.4 %5938, %5940, %6
    %5942:ctrl, %5943:phisel = region %5935, %5941
    %5945:ctrl, %5946:ctrl = brcond %5942, %20
    %5951:ctrl, %5952:ptr = load.8 %5946, %29
    %5953:ptr = ptroff %5952, %11
    %5954:ctrl, %5955:i32 = load.1 %5951, %5953
    %5956:ctrl, %5957:phisel = region %5954, %5945
    %5959:i32 = phi %5957, %5955, %20
    %5960:ctrl, %5961:ctrl = brcond %5956, %5959
    %5964:ctrl, %5965:i32 = load.4 %5960, %7
    %5966:i32 = iadd %5965, %8
    %5967:ctrl = store.4 %5964, %5966, %7
    %5970:ctrl, %5971:i32 = load.4 %5961, %6
    %5972:i32 = iadd %5971, %8
    %5973:ctrl = store.4 %5970, %5972, %6
    %5974:ctrl, %5975:phisel = region %5967, %5973
    %5977:ctrl, %5978:ctrl = brcond %5974, %20
    %5983:ctrl, %5984:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %5978
    %5985:ctrl, %5986:phisel = region %5983, %5977
    %5988:i32 = phi %5986, %5984, %20
    %5989:ctrl, %5990:ctrl = brcond %5985, %5988
    %5993:ctrl, %5994:i32 = load.4 %5989, %7
    %5995:i32 = iadd %5994, %8
    %5996:ctrl = store.4 %5993, %5995, %7
    %5999:ctrl, %6000:i32 = load.4 %5990, %6
    %6001:i32 = iadd %6000, %8
    %6002:ctrl = store.4 %5999, %6001, %6
    %6003:ctrl, %6004:phisel = region %5996, %6002
    %6006:ctrl, %6007:ctrl = brcond %6003, %20
    %6012:ctrl, %6013:ptr = load.8 %6007, %28
    %6014:ctrl, %6015:i32 = load.4 %6012, %13
    %6016:i64 = iext %6015
    %6017:i64 = sfill 32 %6016
    %6019:i64 = iadd %6017, %17
    %6031:ptr = ptroff %6013, %6019
    %6020:ptr = ptroff %6013, %11
    %6021:ctrl, %6022:i64 = load.4 %6014, %6020
    %6023:i64 = icmp slt %6017, %6022
    %6024:ctrl, %6025:ctrl = brcond %6021, %6023
    %6032:ctrl, %6033:i32 = load.1 %6024, %6031
    %6034:ctrl, %6035:phisel = region %6032, %6006
    %6037:i32 = phi %6035, %6033, %20
    %6038:ctrl, %6039:ctrl = brcond %6034, %6037
    %6042:ctrl, %6043:i32 = load.4 %6038, %7
    %6044:i32 = iadd %6043, %8
    %6045:ctrl = store.4 %6042, %6044, %7
    %6048:ctrl, %6049:i32 = load.4 %6039, %6
    %6050:i32 = iadd %6049, %8
    %6051:ctrl = store.4 %6048, %6050, %6
    %6052:ctrl, %6053:phisel = region %6045, %6051
    %6055:ctrl, %6056:ctrl = brcond %6052, %20
    %6061:ctrl, %6062:ptr = load.8 %6056, %12
    %6063:ctrl, %6064:i32 = load.4 %6061, %13
    %6065:i64 = iext %6064
    %6066:i64 = sfill 32 %6065
    %6068:i64 = iadd %6066, %17
    %6080:ptr = ptroff %6062, %6068
    %6069:ptr = ptroff %6062, %11
    %6070:ctrl, %6071:i64 = load.4 %6063, %6069
    %6072:i64 = icmp slt %6066, %6071
    %6073:ctrl, %6074:ctrl = brcond %6070, %6072
    %6081:ctrl, %6082:i32 = load.1 %6073, %6080
    %6083:ctrl, %6084:phisel = region %6081, %6055
    %6086:i32 = phi %6084, %6082, %20
    %6087:ctrl, %6088:ctrl = brcond %6083, %6086
    %6091:ctrl, %6092:i32 = load.4 %6087, %7
    %6093:i32 = iadd %6092, %8
    %6094:ctrl = store.4 %6091, %6093, %7
    %6097:ctrl, %6098:i32 = load.4 %6088, %6
    %6099:i32 = iadd %6098, %8
    %6100:ctrl = store.4 %6097, %6099, %6
    %6101:ctrl, %6102:phisel = region %6094, %6100
    %6104:ctrl, %6105:ctrl = brcond %6101, %20
    %6108:ctrl, %6109:i32 = load.1 %6104, %31
    %6112:ctrl, %6113:phisel = region %6105, %6108
    %6115:i32 = phi %6113, %8, %6109
    %6116:ctrl, %6117:ctrl = brcond %6112, %6115
    %6120:ctrl, %6121:i32 = load.4 %6116, %7
    %6122:i32 = iadd %6121, %8
    %6123:ctrl = store.4 %6120, %6122, %7
    %6126:ctrl, %6127:i32 = load.4 %6117, %6
    %6128:i32 = iadd %6127, %8
    %6129:ctrl = store.4 %6126, %6128, %6
    %6130:ctrl, %6131:phisel = region %6123, %6129
    %6133:ctrl, %6134:ctrl = brcond %6130, %20
    %6137:ctrl, %6138:i32 = load.1 %6133, %31
    %6141:ctrl, %6142:phisel = region %6134, %6137
    %6144:i32 = phi %6142, %20, %6138
    %6145:ctrl, %6146:ctrl = brcond %6141, %6144
    %6149:ctrl, %6150:i32 = load.4 %6145, %7
    %6151:i32 = iadd %6150, %8
    %6152:ctrl = store.4 %6149, %6151, %7
    %6155:ctrl, %6156:i32 = load.4 %6146, %6
    %6157:i32 = iadd %6156, %8
    %6158:ctrl = store.4 %6155, %6157, %6
    %6159:ctrl, %6160:phisel = region %6152, %6158
    %6162:ctrl, %6163:ctrl = brcond %6159, %20
    %6166:ctrl, %6167:i32 = load.1 %6162, %31
    %6170:ctrl, %6171:i32 = load.1 %6163, %31
    %6172:ctrl, %6173:phisel = region %6170, %6166
    %6175:i32 = phi %6173, %6171, %6167
    %6176:ctrl, %6177:ctrl = brcond %6172, %6175
    %6180:ctrl, %6181:i32 = load.4 %6176, %7
    %6182:i32 = iadd %6181, %8
    %6183:ctrl = store.4 %6180, %6182, %7
    %6186:ctrl, %6187:i32 = load.4 %6177, %6
    %6188:i32 = iadd %6187, %8
    %6189:ctrl = store.4 %6186, %6188, %6
    %6190:ctrl, %6191:phisel = region %6183, %6189
    %6193:ctrl, %6194:ctrl = brcond %6190, %20
    %6197:ctrl, %6198:i32 = load.1 %6193, %31
    %6201:ctrl, %6202:i32 = load.1 %6194, %30
    %6203:ctrl, %6204:phisel = region %6201, %6197
    %6206:i32 = phi %6204, %6202, %6198
    %6207:ctrl, %6208:ctrl = brcond %6203, %6206
    %6211:ctrl, %6212:i32 = load.4 %6207, %7
    %6213:i32 = iadd %6212, %8
    %6214:ctrl = store.4 %6211, %6213, %7
    %6217:ctrl, %6218:i32 = load.4 %6208, %6
    %6219:i32 = iadd %6218, %8
    %6220:ctrl = store.4 %6217, %6219, %6
    %6221:ctrl, %6222:phisel = region %6214, %6220
    %6224:ctrl, %6225:ctrl = brcond %6221, %20
    %6228:ctrl, %6229:i32 = load.1 %6224, %31
    %6232:ctrl, %6233:ptr = load.8 %6225, %29
    %6234:ptr = ptroff %6233, %11
    %6235:ctrl, %6236:i32 = load.1 %6232, %6234
    %6237:ctrl, %6238:phisel = region %6235, %6228
    %6240:i32 = phi %6238, %6236, %6229
    %6241:ctrl, %6242:ctrl = brcond %6237, %6240
    %6245:ctrl, %6246:i32 = load.4 %6241, %7
    %6247:i32 = iadd %6246, %8
    %6248:ctrl = store.4 %6245, %6247, %7
    %6251:ctrl, %6252:i32 = load.4 %6242, %6
    %6253:i32 = iadd %6252, %8
    %6254:ctrl = store.4 %6251, %6253, %6
    %6255:ctrl, %6256:phisel = region %6248, %6254
    %6258:ctrl, %6259:ctrl = brcond %6255, %20
    %6262:ctrl, %6263:i32 = load.1 %6258, %31
    %6266:ctrl, %6267:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6259
    %6268:ctrl, %6269:phisel = region %6266, %6262
    %6271:i32 = phi %6269, %6267, %6263
    %6272:ctrl, %6273:ctrl = brcond %6268, %6271
    %6276:ctrl, %6277:i32 = load.4 %6272, %7
    %6278:i32 = iadd %6277, %8
    %6279:ctrl = store.4 %6276, %6278, %7
    %6282:ctrl, %6283:i32 = load.4 %6273, %6
    %6284:i32 = iadd %6283, %8
    %6285:ctrl = store.4 %6282, %6284, %6
    %6286:ctrl, %6287:phisel = region %6279, %6285
    %6289:ctrl, %6290:ctrl = brcond %6286, %20
    %6293:ctrl, %6294:i32 = load.1 %6289, %31
    %6297:ctrl, %6298:ptr = load.8 %6290, %28
    %6299:ctrl, %6300:i32 = load.4 %6297, %13
    %6301:i64 = iext %6300
    %6302:i64 = sfill 32 %6301
    %6304:i64 = iadd %6302, %17
    %6316:ptr = ptroff %6298, %6304
    %6305:ptr = ptroff %6298, %11
    %6306:ctrl, %6307:i64 = load.4 %6299, %6305
    %6308:i64 = icmp slt %6302, %6307
    %6309:ctrl, %6310:ctrl = brcond %6306, %6308
    %6317:ctrl, %6318:i32 = load.1 %6309, %6316
    %6319:ctrl, %6320:phisel = region %6317, %6293
    %6322:i32 = phi %6320, %6318, %6294
    %6323:ctrl, %6324:ctrl = brcond %6319, %6322
    %6327:ctrl, %6328:i32 = load.4 %6323, %7
    %6329:i32 = iadd %6328, %8
    %6330:ctrl = store.4 %6327, %6329, %7
    %6333:ctrl, %6334:i32 = load.4 %6324, %6
    %6335:i32 = iadd %6334, %8
    %6336:ctrl = store.4 %6333, %6335, %6
    %6337:ctrl, %6338:phisel = region %6330, %6336
    %6340:ctrl, %6341:ctrl = brcond %6337, %20
    %6344:ctrl, %6345:i32 = load.1 %6340, %31
    %6348:ctrl, %6349:ptr = load.8 %6341, %12
    %6350:ctrl, %6351:i32 = load.4 %6348, %13
    %6352:i64 = iext %6351
    %6353:i64 = sfill 32 %6352
    %6355:i64 = iadd %6353, %17
    %6367:ptr = ptroff %6349, %6355
    %6356:ptr = ptroff %6349, %11
    %6357:ctrl, %6358:i64 = load.4 %6350, %6356
    %6359:i64 = icmp slt %6353, %6358
    %6360:ctrl, %6361:ctrl = brcond %6357, %6359
    %6368:ctrl, %6369:i32 = load.1 %6360, %6367
    %6370:ctrl, %6371:phisel = region %6368, %6344
    %6373:i32 = phi %6371, %6369, %6345
    %6374:ctrl, %6375:ctrl = brcond %6370, %6373
    %6378:ctrl, %6379:i32 = load.4 %6374, %7
    %6380:i32 = iadd %6379, %8
    %6381:ctrl = store.4 %6378, %6380, %7
    %6384:ctrl, %6385:i32 = load.4 %6375, %6
    %6386:i32 = iadd %6385, %8
    %6387:ctrl = store.4 %6384, %6386, %6
    %6388:ctrl, %6389:phisel = region %6381, %6387
    %6391:ctrl, %6392:ctrl = brcond %6388, %20
    %6395:ctrl, %6396:i32 = load.1 %6391, %30
    %6399:ctrl, %6400:phisel = region %6392, %6395
    %6402:i32 = phi %6400, %8, %6396
    %6403:ctrl, %6404:ctrl = brcond %6399, %6402
    %6407:ctrl, %6408:i32 = load.4 %6403, %7
    %6409:i32 = iadd %6408, %8
    %6410:ctrl = store.4 %6407, %6409, %7
    %6413:ctrl, %6414:i32 = load.4 %6404, %6
    %6415:i32 = iadd %6414, %8
    %6416:ctrl = store.4 %6413, %6415, %6
    %6417:ctrl, %6418:phisel = region %6410, %6416
    %6420:ctrl, %6421:ctrl = brcond %6417, %20
    %6424:ctrl, %6425:i32 = load.1 %6420, %30
    %6428:ctrl, %6429:phisel = region %6421, %6424
    %6431:i32 = phi %6429, %20, %6425
    %6432:ctrl, %6433:ctrl = brcond %6428, %6431
    %6436:ctrl, %6437:i32 = load.4 %6432, %7
    %6438:i32 = iadd %6437, %8
    %6439:ctrl = store.4 %6436, %6438, %7
    %6442:ctrl, %6443:i32 = load.4 %6433, %6
    %6444:i32 = iadd %6443, %8
    %6445:ctrl = store.4 %6442, %6444, %6
    %6446:ctrl, %6447:phisel = region %6439, %6445
    %6449:ctrl, %6450:ctrl = brcond %6446, %20
    %6453:ctrl, %6454:i32 = load.1 %6449, %30
    %6457:ctrl, %6458:i32 = load.1 %6450, %31
    %6459:ctrl, %6460:phisel = region %6457, %6453
    %6462:i32 = phi %6460, %6458, %6454
    %6463:ctrl, %6464:ctrl = brcond %6459, %6462
    %6467:ctrl, %6468:i32 = load.4 %6463, %7
    %6469:i32 = iadd %6468, %8
    %6470:ctrl = store.4 %6467, %6469, %7
    %6473:ctrl, %6474:i32 = load.4 %6464, %6
    %6475:i32 = iadd %6474, %8
    %6476:ctrl = store.4 %6473, %6475, %6
    %6477:ctrl, %6478:phisel = region %6470, %6476
    %6480:ctrl, %6481:ctrl = brcond %6477, %20
    %6484:ctrl, %6485:i32 = load.1 %6480, %30
    %6488:ctrl, %6489:i32 = load.1 %6481, %30
    %6490:ctrl, %6491:phisel = region %6488, %6484
    %6493:i32 = phi %6491, %6489, %6485
    %6494:ctrl, %6495:ctrl = brcond %6490, %6493
    %6498:ctrl, %6499:i32 = load.4 %6494, %7
    %6500:i32 = iadd %6499, %8
    %6501:ctrl = store.4 %6498, %6500, %7
    %6504:ctrl, %6505:i32 = load.4 %6495, %6
    %6506:i32 = iadd %6505, %8
    %6507:ctrl = store.4 %6504, %6506, %6
    %6508:ctrl, %6509:phisel = region %6501, %6507
    %6511:ctrl, %6512:ctrl = brcond %6508, %20
    %6515:ctrl, %6516:i32 = load.1 %6511, %30
    %6519:ctrl, %6520:ptr = load.8 %6512, %29
    %6521:ptr = ptroff %6520, %11
    %6522:ctrl, %6523:i32 = load.1 %6519, %6521
    %6524:ctrl, %6525:phisel = region %6522, %6515
    %6527:i32 = phi %6525, %6523, %6516
    %6528:ctrl, %6529:ctrl = brcond %6524, %6527
    %6532:ctrl, %6533:i32 = load.4 %6528, %7
    %6534:i32 = iadd %6533, %8
    %6535:ctrl = store.4 %6532, %6534, %7
    %6538:ctrl, %6539:i32 = load.4 %6529, %6
    %6540:i32 = iadd %6539, %8
    %6541:ctrl = store.4 %6538, %6540, %6
    %6542:ctrl, %6543:phisel = region %6535, %6541
    %6545:ctrl, %6546:ctrl = brcond %6542, %20
    %6549:ctrl, %6550:i32 = load.1 %6545, %30
    %6553:ctrl, %6554:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6546
    %6555:ctrl, %6556:phisel = region %6553, %6549
    %6558:i32 = phi %6556, %6554, %6550
    %6559:ctrl, %6560:ctrl = brcond %6555, %6558
    %6563:ctrl, %6564:i32 = load.4 %6559, %7
    %6565:i32 = iadd %6564, %8
    %6566:ctrl = store.4 %6563, %6565, %7
    %6569:ctrl, %6570:i32 = load.4 %6560, %6
    %6571:i32 = iadd %6570, %8
    %6572:ctrl = store.4 %6569, %6571, %6
    %6573:ctrl, %6574:phisel = region %6566, %6572
    %6576:ctrl, %6577:ctrl = brcond %6573, %20
    %6580:ctrl, %6581:i32 = load.1 %6576, %30
    %6584:ctrl, %6585:ptr = load.8 %6577, %28
    %6586:ctrl, %6587:i32 = load.4 %6584, %13
    %6588:i64 = iext %6587
    %6589:i64 = sfill 32 %6588
    %6591:i64 = iadd %6589, %17
    %6603:ptr = ptroff %6585, %6591
    %6592:ptr = ptroff %6585, %11
    %6593:ctrl, %6594:i64 = load.4 %6586, %6592
    %6595:i64 = icmp slt %6589, %6594
    %6596:ctrl, %6597:ctrl = brcond %6593, %6595
    %6604:ctrl, %6605:i32 = load.1 %6596, %6603
    %6606:ctrl, %6607:phisel = region %6604, %6580
    %6609:i32 = phi %6607, %6605, %6581
    %6610:ctrl, %6611:ctrl = brcond %6606, %6609
    %6614:ctrl, %6615:i32 = load.4 %6610, %7
    %6616:i32 = iadd %6615, %8
    %6617:ctrl = store.4 %6614, %6616, %7
    %6620:ctrl, %6621:i32 = load.4 %6611, %6
    %6622:i32 = iadd %6621, %8
    %6623:ctrl = store.4 %6620, %6622, %6
    %6624:ctrl, %6625:phisel = region %6617, %6623
    %6627:ctrl, %6628:ctrl = brcond %6624, %20
    %6631:ctrl, %6632:i32 = load.1 %6627, %30
    %6635:ctrl, %6636:ptr = load.8 %6628, %12
    %6637:ctrl, %6638:i32 = load.4 %6635, %13
    %6639:i64 = iext %6638
    %6640:i64 = sfill 32 %6639
    %6642:i64 = iadd %6640, %17
    %6654:ptr = ptroff %6636, %6642
    %6643:ptr = ptroff %6636, %11
    %6644:ctrl, %6645:i64 = load.4 %6637, %6643
    %6646:i64 = icmp slt %6640, %6645
    %6647:ctrl, %6648:ctrl = brcond %6644, %6646
    %6655:ctrl, %6656:i32 = load.1 %6647, %6654
    %6657:ctrl, %6658:phisel = region %6655, %6631
    %6660:i32 = phi %6658, %6656, %6632
    %6661:ctrl, %6662:ctrl = brcond %6657, %6660
    %6665:ctrl, %6666:i32 = load.4 %6661, %7
    %6667:i32 = iadd %6666, %8
    %6668:ctrl = store.4 %6665, %6667, %7
    %6671:ctrl, %6672:i32 = load.4 %6662, %6
    %6673:i32 = iadd %6672, %8
    %6674:ctrl = store.4 %6671, %6673, %6
    %6675:ctrl, %6676:phisel = region %6668, %6674
    %6678:ctrl, %6679:ctrl = brcond %6675, %20
    %6682:ctrl, %6683:ptr = load.8 %6678, %29
    %6684:ptr = ptroff %6683, %11
    %6685:ctrl, %6686:i32 = load.1 %6682, %6684
    %6689:ctrl, %6690:phisel = region %6679, %6685
    %6692:i32 = phi %6690, %8, %6686
    %6693:ctrl, %6694:ctrl = brcond %6689, %6692
    %6697:ctrl, %6698:i32 = load.4 %6693, %7
    %6699:i32 = iadd %6698, %8
    %6700:ctrl = store.4 %6697, %6699, %7
    %6703:ctrl, %6704:i32 = load.4 %6694, %6
    %6705:i32 = iadd %6704, %8
    %6706:ctrl = store.4 %6703, %6705, %6
    %6707:ctrl, %6708:phisel = region %6700, %6706
    %6710:ctrl, %6711:ctrl = brcond %6707, %20
    %6714:ctrl, %6715:ptr = load.8 %6710, %29
    %6716:ptr = ptroff %6715, %11
    %6717:ctrl, %6718:i32 = load.1 %6714, %6716
    %6721:ctrl, %6722:phisel = region %6711, %6717
    %6724:i32 = phi %6722, %20, %6718
    %6725:ctrl, %6726:ctrl = brcond %6721, %6724
    %6729:ctrl, %6730:i32 = load.4 %6725, %7
    %6731:i32 = iadd %6730, %8
    %6732:ctrl = store.4 %6729, %6731, %7
    %6735:ctrl, %6736:i32 = load.4 %6726, %6
    %6737:i32 = iadd %6736, %8
    %6738:ctrl = store.4 %6735, %6737, %6
    %6739:ctrl, %6740:phisel = region %6732, %6738
    %6742:ctrl, %6743:ctrl = brcond %6739, %20
    %6746:ctrl, %6747:ptr = load.8 %6742, %29
    %6748:ptr = ptroff %6747, %11
    %6749:ctrl, %6750:i32 = load.1 %6746, %6748
    %6753:ctrl, %6754:i32 = load.1 %6743, %31
    %6755:ctrl, %6756:phisel = region %6753, %6749
    %6758:i32 = phi %6756, %6754, %6750
    %6759:ctrl, %6760:ctrl = brcond %6755, %6758
    %6763:ctrl, %6764:i32 = load.4 %6759, %7
    %6765:i32 = iadd %6764, %8
    %6766:ctrl = store.4 %6763, %6765, %7
    %6769:ctrl, %6770:i32 = load.4 %6760, %6
    %6771:i32 = iadd %6770, %8
    %6772:ctrl = store.4 %6769, %6771, %6
    %6773:ctrl, %6774:phisel = region %6766, %6772
    %6776:ctrl, %6777:ctrl = brcond %6773, %20
    %6780:ctrl, %6781:ptr = load.8 %6776, %29
    %6782:ptr = ptroff %6781, %11
    %6783:ctrl, %6784:i32 = load.1 %6780, %6782
    %6787:ctrl, %6788:i32 = load.1 %6777, %30
    %6789:ctrl, %6790:phisel = region %6787, %6783
    %6792:i32 = phi %6790, %6788, %6784
    %6793:ctrl, %6794:ctrl = brcond %6789, %6792
    %6797:ctrl, %6798:i32 = load.4 %6793, %7
    %6799:i32 = iadd %6798, %8
    %6800:ctrl = store.4 %6797, %6799, %7
    %6803:ctrl, %6804:i32 = load.4 %6794, %6
    %6805:i32 = iadd %6804, %8
    %6806:ctrl = store.4 %6803, %6805, %6
    %6807:ctrl, %6808:phisel = region %6800, %6806
    %6810:ctrl, %6811:ctrl = brcond %6807, %20
    %6814:ctrl, %6815:ptr = load.8 %6810, %29
    %6816:ptr = ptroff %6815, %11
    %6817:ctrl, %6818:i32 = load.1 %6814, %6816
    %6821:ctrl, %6822:ptr = load.8 %6811, %29
    %6823:ptr = ptroff %6822, %11
    %6824:ctrl, %6825:i32 = load.1 %6821, %6823
    %6826:ctrl, %6827:phisel = region %6824, %6817
    %6829:i32 = phi %6827, %6825, %6818
    %6830:ctrl, %6831:ctrl = brcond %6826, %6829
    %6834:ctrl, %6835:i32 = load.4 %6830, %7
    %6836:i32 = iadd %6835, %8
    %6837:ctrl = store.4 %6834, %6836, %7
    %6840:ctrl, %6841:i32 = load.4 %6831, %6
    %6842:i32 = iadd %6841, %8
    %6843:ctrl = store.4 %6840, %6842, %6
    %6844:ctrl, %6845:phisel = region %6837, %6843
    %6847:ctrl, %6848:ctrl = brcond %6844, %20
    %6851:ctrl, %6852:ptr = load.8 %6847, %29
    %6853:ptr = ptroff %6852, %11
    %6854:ctrl, %6855:i32 = load.1 %6851, %6853
    %6858:ctrl, %6859:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6848
    %6860:ctrl, %6861:phisel = region %6858, %6854
    %6863:i32 = phi %6861, %6859, %6855
    %6864:ctrl, %6865:ctrl = brcond %6860, %6863
    %6868:ctrl, %6869:i32 = load.4 %6864, %7
    %6870:i32 = iadd %6869, %8
    %6871:ctrl = store.4 %6868, %6870, %7
    %6874:ctrl, %6875:i32 = load.4 %6865, %6
    %6876:i32 = iadd %6875, %8
    %6877:ctrl = store.4 %6874, %6876, %6
    %6878:ctrl, %6879:phisel = region %6871, %6877
    %6881:ctrl, %6882:ctrl = brcond %6878, %20
    %6885:ctrl, %6886:ptr = load.8 %6881, %29
    %6887:ptr = ptroff %6886, %11
    %6888:ctrl, %6889:i32 = load.1 %6885, %6887
    %6892:ctrl, %6893:ptr = load.8 %6882, %28
    %6894:ctrl, %6895:i32 = load.4 %6892, %13
    %6896:i64 = iext %6895
    %6897:i64 = sfill 32 %6896
    %6899:i64 = iadd %6897, %17
    %6911:ptr = ptroff %6893, %6899
    %6900:ptr = ptroff %6893, %11
    %6901:ctrl, %6902:i64 = load.4 %6894, %6900
    %6903:i64 = icmp slt %6897, %6902
    %6904:ctrl, %6905:ctrl = brcond %6901, %6903
    %6912:ctrl, %6913:i32 = load.1 %6904, %6911
    %6914:ctrl, %6915:phisel = region %6912, %6888
    %6917:i32 = phi %6915, %6913, %6889
    %6918:ctrl, %6919:ctrl = brcond %6914, %6917
    %6922:ctrl, %6923:i32 = load.4 %6918, %7
    %6924:i32 = iadd %6923, %8
    %6925:ctrl = store.4 %6922, %6924, %7
    %6928:ctrl, %6929:i32 = load.4 %6919, %6
    %6930:i32 = iadd %6929, %8
    %6931:ctrl = store.4 %6928, %6930, %6
    %6932:ctrl, %6933:phisel = region %6925, %6931
    %6935:ctrl, %6936:ctrl = brcond %6932, %20
    %6939:ctrl, %6940:ptr = load.8 %6935, %29
    %6941:ptr = ptroff %6940, %11
    %6942:ctrl, %6943:i32 = load.1 %6939, %6941
    %6946:ctrl, %6947:ptr = load.8 %6936, %12
    %6948:ctrl, %6949:i32 = load.4 %6946, %13
    %6950:i64 = iext %6949
    %6951:i64 = sfill 32 %6950
    %6953:i64 = iadd %6951, %17
    %6965:ptr = ptroff %6947, %6953
    %6954:ptr = ptroff %6947, %11
    %6955:ctrl, %6956:i64 = load.4 %6948, %6954
    %6957:i64 = icmp slt %6951, %6956
    %6958:ctrl, %6959:ctrl = brcond %6955, %6957
    %6966:ctrl, %6967:i32 = load.1 %6958, %6965
    %6968:ctrl, %6969:phisel = region %6966, %6942
    %6971:i32 = phi %6969, %6967, %6943
    %6972:ctrl, %6973:ctrl = brcond %6968, %6971
    %6976:ctrl, %6977:i32 = load.4 %6972, %7
    %6978:i32 = iadd %6977, %8
    %6979:ctrl = store.4 %6976, %6978, %7
    %6982:ctrl, %6983:i32 = load.4 %6973, %6
    %6984:i32 = iadd %6983, %8
    %6985:ctrl = store.4 %6982, %6984, %6
    %6986:ctrl, %6987:phisel = region %6979, %6985
    %6989:ctrl, %6990:ctrl = brcond %6986, %20
    %6993:ctrl, %6994:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %6989
    %6997:ctrl, %6998:phisel = region %6990, %6993
    %7000:i32 = phi %6998, %8, %6994
    %7001:ctrl, %7002:ctrl = brcond %6997, %7000
    %7005:ctrl, %7006:i32 = load.4 %7001, %7
    %7007:i32 = iadd %7006, %8
    %7008:ctrl = store.4 %7005, %7007, %7
    %7011:ctrl, %7012:i32 = load.4 %7002, %6
    %7013:i32 = iadd %7012, %8
    %7014:ctrl = store.4 %7011, %7013, %6
    %7015:ctrl, %7016:phisel = region %7008, %7014
    %7018:ctrl, %7019:ctrl = brcond %7015, %20
    %7022:ctrl, %7023:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7018
    %7026:ctrl, %7027:phisel = region %7019, %7022
    %7029:i32 = phi %7027, %20, %7023
    %7030:ctrl, %7031:ctrl = brcond %7026, %7029
    %7034:ctrl, %7035:i32 = load.4 %7030, %7
    %7036:i32 = iadd %7035, %8
    %7037:ctrl = store.4 %7034, %7036, %7
    %7040:ctrl, %7041:i32 = load.4 %7031, %6
    %7042:i32 = iadd %7041, %8
    %7043:ctrl = store.4 %7040, %7042, %6
    %7044:ctrl, %7045:phisel = region %7037, %7043
    %7047:ctrl, %7048:ctrl = brcond %7044, %20
    %7051:ctrl, %7052:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7047
    %7055:ctrl, %7056:i32 = load.1 %7048, %31
    %7057:ctrl, %7058:phisel = region %7055, %7051
    %7060:i32 = phi %7058, %7056, %7052
    %7061:ctrl, %7062:ctrl = brcond %7057, %7060
    %7065:ctrl, %7066:i32 = load.4 %7061, %7
    %7067:i32 = iadd %7066, %8
    %7068:ctrl = store.4 %7065, %7067, %7
    %7071:ctrl, %7072:i32 = load.4 %7062, %6
    %7073:i32 = iadd %7072, %8
    %7074:ctrl = store.4 %7071, %7073, %6
    %7075:ctrl, %7076:phisel = region %7068, %7074
    %7078:ctrl, %7079:ctrl = brcond %7075, %20
    %7082:ctrl, %7083:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7078
    %7086:ctrl, %7087:i32 = load.1 %7079, %30
    %7088:ctrl, %7089:phisel = region %7086, %7082
    %7091:i32 = phi %7089, %7087, %7083
    %7092:ctrl, %7093:ctrl = brcond %7088, %7091
    %7096:ctrl, %7097:i32 = load.4 %7092, %7
    %7098:i32 = iadd %7097, %8
    %7099:ctrl = store.4 %7096, %7098, %7
    %7102:ctrl, %7103:i32 = load.4 %7093, %6
    %7104:i32 = iadd %7103, %8
    %7105:ctrl = store.4 %7102, %7104, %6
    %7106:ctrl, %7107:phisel = region %7099, %7105
    %7109:ctrl, %7110:ctrl = brcond %7106, %20
    %7113:ctrl, %7114:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7109
    %7117:ctrl, %7118:ptr = load.8 %7110, %29
    %7119:ptr = ptroff %7118, %11
    %7120:ctrl, %7121:i32 = load.1 %7117, %7119
    %7122:ctrl, %7123:phisel = region %7120, %7113
    %7125:i32 = phi %7123, %7121, %7114
    %7126:ctrl, %7127:ctrl = brcond %7122, %7125
    %7130:ctrl, %7131:i32 = load.4 %7126, %7
    %7132:i32 = iadd %7131, %8
    %7133:ctrl = store.4 %7130, %7132, %7
    %7136:ctrl, %7137:i32 = load.4 %7127, %6
    %7138:i32 = iadd %7137, %8
    %7139:ctrl = store.4 %7136, %7138, %6
    %7140:ctrl, %7141:phisel = region %7133, %7139
    %7143:ctrl, %7144:ctrl = brcond %7140, %20
    %7147:ctrl, %7148:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7143
    %7151:ctrl, %7152:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7144
    %7153:ctrl, %7154:phisel = region %7151, %7147
    %7156:i32 = phi %7154, %7152, %7148
    %7157:ctrl, %7158:ctrl = brcond %7153, %7156
    %7161:ctrl, %7162:i32 = load.4 %7157, %7
    %7163:i32 = iadd %7162, %8
    %7164:ctrl = store.4 %7161, %7163, %7
    %7167:ctrl, %7168:i32 = load.4 %7158, %6
    %7169:i32 = iadd %7168, %8
    %7170:ctrl = store.4 %7167, %7169, %6
    %7171:ctrl, %7172:phisel = region %7164, %7170
    %7174:ctrl, %7175:ctrl = brcond %7171, %20
    %7178:ctrl, %7179:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7174
    %7182:ctrl, %7183:ptr = load.8 %7175, %28
    %7184:ctrl, %7185:i32 = load.4 %7182, %13
    %7186:i64 = iext %7185
    %7187:i64 = sfill 32 %7186
    %7189:i64 = iadd %7187, %17
    %7201:ptr = ptroff %7183, %7189
    %7190:ptr = ptroff %7183, %11
    %7191:ctrl, %7192:i64 = load.4 %7184, %7190
    %7193:i64 = icmp slt %7187, %7192
    %7194:ctrl, %7195:ctrl = brcond %7191, %7193
    %7202:ctrl, %7203:i32 = load.1 %7194, %7201
    %7204:ctrl, %7205:phisel = region %7202, %7178
    %7207:i32 = phi %7205, %7203, %7179
    %7208:ctrl, %7209:ctrl = brcond %7204, %7207
    %7212:ctrl, %7213:i32 = load.4 %7208, %7
    %7214:i32 = iadd %7213, %8
    %7215:ctrl = store.4 %7212, %7214, %7
    %7218:ctrl, %7219:i32 = load.4 %7209, %6
    %7220:i32 = iadd %7219, %8
    %7221:ctrl = store.4 %7218, %7220, %6
    %7222:ctrl, %7223:phisel = region %7215, %7221
    %7225:ctrl, %7226:ctrl = brcond %7222, %20
    %7229:ctrl, %7230:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7225
    %7233:ctrl, %7234:ptr = load.8 %7226, %12
    %7235:ctrl, %7236:i32 = load.4 %7233, %13
    %7237:i64 = iext %7236
    %7238:i64 = sfill 32 %7237
    %7240:i64 = iadd %7238, %17
    %7252:ptr = ptroff %7234, %7240
    %7241:ptr = ptroff %7234, %11
    %7242:ctrl, %7243:i64 = load.4 %7235, %7241
    %7244:i64 = icmp slt %7238, %7243
    %7245:ctrl, %7246:ctrl = brcond %7242, %7244
    %7253:ctrl, %7254:i32 = load.1 %7245, %7252
    %7255:ctrl, %7256:phisel = region %7253, %7229
    %7258:i32 = phi %7256, %7254, %7230
    %7259:ctrl, %7260:ctrl = brcond %7255, %7258
    %7263:ctrl, %7264:i32 = load.4 %7259, %7
    %7265:i32 = iadd %7264, %8
    %7266:ctrl = store.4 %7263, %7265, %7
    %7269:ctrl, %7270:i32 = load.4 %7260, %6
    %7271:i32 = iadd %7270, %8
    %7272:ctrl = store.4 %7269, %7271, %6
    %7273:ctrl, %7274:phisel = region %7266, %7272
    %7276:ctrl, %7277:ctrl = brcond %7273, %20
    %7280:ctrl, %7281:ptr = load.8 %7276, %28
    %7282:ctrl, %7283:i32 = load.4 %7280, %13
    %7284:i64 = iext %7283
    %7285:i64 = sfill 32 %7284
    %7287:i64 = iadd %7285, %17
    %7299:ptr = ptroff %7281, %7287
    %7288:ptr = ptroff %7281, %11
    %7289:ctrl, %7290:i64 = load.4 %7282, %7288
    %7291:i64 = icmp slt %7285, %7290
    %7292:ctrl, %7293:ctrl = brcond %7289, %7291
    %7300:ctrl, %7301:i32 = load.1 %7292, %7299
    %7298:ctrl = call @throw_index_out_of_range_exception %7293
    unreachable %7298
    %7304:ctrl, %7305:phisel = region %7277, %7300
    %7307:i32 = phi %7305, %8, %7301
    %7308:ctrl, %7309:ctrl = brcond %7304, %7307
    %7312:ctrl, %7313:i32 = load.4 %7308, %7
    %7314:i32 = iadd %7313, %8
    %7315:ctrl = store.4 %7312, %7314, %7
    %7318:ctrl, %7319:i32 = load.4 %7309, %6
    %7320:i32 = iadd %7319, %8
    %7321:ctrl = store.4 %7318, %7320, %6
    %7322:ctrl, %7323:phisel = region %7315, %7321
    %7325:ctrl, %7326:ctrl = brcond %7322, %20
    %7329:ctrl, %7330:ptr = load.8 %7325, %28
    %7331:ctrl, %7332:i32 = load.4 %7329, %13
    %7333:i64 = iext %7332
    %7334:i64 = sfill 32 %7333
    %7336:i64 = iadd %7334, %17
    %7348:ptr = ptroff %7330, %7336
    %7337:ptr = ptroff %7330, %11
    %7338:ctrl, %7339:i64 = load.4 %7331, %7337
    %7340:i64 = icmp slt %7334, %7339
    %7341:ctrl, %7342:ctrl = brcond %7338, %7340
    %7349:ctrl, %7350:i32 = load.1 %7341, %7348
    %7347:ctrl = call @throw_index_out_of_range_exception %7342
    unreachable %7347
    %7353:ctrl, %7354:phisel = region %7326, %7349
    %7356:i32 = phi %7354, %20, %7350
    %7357:ctrl, %7358:ctrl = brcond %7353, %7356
    %7361:ctrl, %7362:i32 = load.4 %7357, %7
    %7363:i32 = iadd %7362, %8
    %7364:ctrl = store.4 %7361, %7363, %7
    %7367:ctrl, %7368:i32 = load.4 %7358, %6
    %7369:i32 = iadd %7368, %8
    %7370:ctrl = store.4 %7367, %7369, %6
    %7371:ctrl, %7372:phisel = region %7364, %7370
    %7374:ctrl, %7375:ctrl = brcond %7371, %20
    %7378:ctrl, %7379:ptr = load.8 %7374, %28
    %7380:ctrl, %7381:i32 = load.4 %7378, %13
    %7382:i64 = iext %7381
    %7383:i64 = sfill 32 %7382
    %7385:i64 = iadd %7383, %17
    %7397:ptr = ptroff %7379, %7385
    %7386:ptr = ptroff %7379, %11
    %7387:ctrl, %7388:i64 = load.4 %7380, %7386
    %7389:i64 = icmp slt %7383, %7388
    %7390:ctrl, %7391:ctrl = brcond %7387, %7389
    %7398:ctrl, %7399:i32 = load.1 %7390, %7397
    %7396:ctrl = call @throw_index_out_of_range_exception %7391
    unreachable %7396
    %7402:ctrl, %7403:i32 = load.1 %7375, %31
    %7404:ctrl, %7405:phisel = region %7402, %7398
    %7407:i32 = phi %7405, %7403, %7399
    %7408:ctrl, %7409:ctrl = brcond %7404, %7407
    %7412:ctrl, %7413:i32 = load.4 %7408, %7
    %7414:i32 = iadd %7413, %8
    %7415:ctrl = store.4 %7412, %7414, %7
    %7418:ctrl, %7419:i32 = load.4 %7409, %6
    %7420:i32 = iadd %7419, %8
    %7421:ctrl = store.4 %7418, %7420, %6
    %7422:ctrl, %7423:phisel = region %7415, %7421
    %7425:ctrl, %7426:ctrl = brcond %7422, %20
    %7429:ctrl, %7430:ptr = load.8 %7425, %28
    %7431:ctrl, %7432:i32 = load.4 %7429, %13
    %7433:i64 = iext %7432
    %7434:i64 = sfill 32 %7433
    %7436:i64 = iadd %7434, %17
    %7448:ptr = ptroff %7430, %7436
    %7437:ptr = ptroff %7430, %11
    %7438:ctrl, %7439:i64 = load.4 %7431, %7437
    %7440:i64 = icmp slt %7434, %7439
    %7441:ctrl, %7442:ctrl = brcond %7438, %7440
    %7449:ctrl, %7450:i32 = load.1 %7441, %7448
    %7447:ctrl = call @throw_index_out_of_range_exception %7442
    unreachable %7447
    %7453:ctrl, %7454:i32 = load.1 %7426, %30
    %7455:ctrl, %7456:phisel = region %7453, %7449
    %7458:i32 = phi %7456, %7454, %7450
    %7459:ctrl, %7460:ctrl = brcond %7455, %7458
    %7463:ctrl, %7464:i32 = load.4 %7459, %7
    %7465:i32 = iadd %7464, %8
    %7466:ctrl = store.4 %7463, %7465, %7
    %7469:ctrl, %7470:i32 = load.4 %7460, %6
    %7471:i32 = iadd %7470, %8
    %7472:ctrl = store.4 %7469, %7471, %6
    %7473:ctrl, %7474:phisel = region %7466, %7472
    %7476:ctrl, %7477:ctrl = brcond %7473, %20
    %7480:ctrl, %7481:ptr = load.8 %7476, %28
    %7482:ctrl, %7483:i32 = load.4 %7480, %13
    %7484:i64 = iext %7483
    %7485:i64 = sfill 32 %7484
    %7487:i64 = iadd %7485, %17
    %7499:ptr = ptroff %7481, %7487
    %7488:ptr = ptroff %7481, %11
    %7489:ctrl, %7490:i64 = load.4 %7482, %7488
    %7491:i64 = icmp slt %7485, %7490
    %7492:ctrl, %7493:ctrl = brcond %7489, %7491
    %7500:ctrl, %7501:i32 = load.1 %7492, %7499
    %7498:ctrl = call @throw_index_out_of_range_exception %7493
    unreachable %7498
    %7504:ctrl, %7505:ptr = load.8 %7477, %29
    %7506:ptr = ptroff %7505, %11
    %7507:ctrl, %7508:i32 = load.1 %7504, %7506
    %7509:ctrl, %7510:phisel = region %7507, %7500
    %7512:i32 = phi %7510, %7508, %7501
    %7513:ctrl, %7514:ctrl = brcond %7509, %7512
    %7517:ctrl, %7518:i32 = load.4 %7513, %7
    %7519:i32 = iadd %7518, %8
    %7520:ctrl = store.4 %7517, %7519, %7
    %7523:ctrl, %7524:i32 = load.4 %7514, %6
    %7525:i32 = iadd %7524, %8
    %7526:ctrl = store.4 %7523, %7525, %6
    %7527:ctrl, %7528:phisel = region %7520, %7526
    %7530:ctrl, %7531:ctrl = brcond %7527, %20
    %7534:ctrl, %7535:ptr = load.8 %7530, %28
    %7536:ctrl, %7537:i32 = load.4 %7534, %13
    %7538:i64 = iext %7537
    %7539:i64 = sfill 32 %7538
    %7541:i64 = iadd %7539, %17
    %7553:ptr = ptroff %7535, %7541
    %7542:ptr = ptroff %7535, %11
    %7543:ctrl, %7544:i64 = load.4 %7536, %7542
    %7545:i64 = icmp slt %7539, %7544
    %7546:ctrl, %7547:ctrl = brcond %7543, %7545
    %7554:ctrl, %7555:i32 = load.1 %7546, %7553
    %7552:ctrl = call @throw_index_out_of_range_exception %7547
    unreachable %7552
    %7558:ctrl, %7559:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7531
    %7560:ctrl, %7561:phisel = region %7558, %7554
    %7563:i32 = phi %7561, %7559, %7555
    %7564:ctrl, %7565:ctrl = brcond %7560, %7563
    %7568:ctrl, %7569:i32 = load.4 %7564, %7
    %7570:i32 = iadd %7569, %8
    %7571:ctrl = store.4 %7568, %7570, %7
    %7574:ctrl, %7575:i32 = load.4 %7565, %6
    %7576:i32 = iadd %7575, %8
    %7577:ctrl = store.4 %7574, %7576, %6
    %7578:ctrl, %7579:phisel = region %7571, %7577
    %7581:ctrl, %7582:ctrl = brcond %7578, %20
    %7585:ctrl, %7586:ptr = load.8 %7581, %28
    %7587:ctrl, %7588:i32 = load.4 %7585, %13
    %7589:i64 = iext %7588
    %7590:i64 = sfill 32 %7589
    %7592:i64 = iadd %7590, %17
    %7604:ptr = ptroff %7586, %7592
    %7593:ptr = ptroff %7586, %11
    %7594:ctrl, %7595:i64 = load.4 %7587, %7593
    %7596:i64 = icmp slt %7590, %7595
    %7597:ctrl, %7598:ctrl = brcond %7594, %7596
    %7605:ctrl, %7606:i32 = load.1 %7597, %7604
    %7603:ctrl = call @throw_index_out_of_range_exception %7598
    unreachable %7603
    %7609:ctrl, %7610:ptr = load.8 %7582, %28
    %7611:ctrl, %7612:i32 = load.4 %7609, %13
    %7613:i64 = iext %7612
    %7614:i64 = sfill 32 %7613
    %7616:i64 = iadd %7614, %17
    %7628:ptr = ptroff %7610, %7616
    %7617:ptr = ptroff %7610, %11
    %7618:ctrl, %7619:i64 = load.4 %7611, %7617
    %7620:i64 = icmp slt %7614, %7619
    %7621:ctrl, %7622:ctrl = brcond %7618, %7620
    %7629:ctrl, %7630:i32 = load.1 %7621, %7628
    %7631:ctrl, %7632:phisel = region %7629, %7605
    %7634:i32 = phi %7632, %7630, %7606
    %7635:ctrl, %7636:ctrl = brcond %7631, %7634
    %7639:ctrl, %7640:i32 = load.4 %7635, %7
    %7641:i32 = iadd %7640, %8
    %7642:ctrl = store.4 %7639, %7641, %7
    %7645:ctrl, %7646:i32 = load.4 %7636, %6
    %7647:i32 = iadd %7646, %8
    %7648:ctrl = store.4 %7645, %7647, %6
    %7649:ctrl, %7650:phisel = region %7642, %7648
    %7652:ctrl, %7653:ctrl = brcond %7649, %20
    %7656:ctrl, %7657:ptr = load.8 %7652, %28
    %7658:ctrl, %7659:i32 = load.4 %7656, %13
    %7660:i64 = iext %7659
    %7661:i64 = sfill 32 %7660
    %7663:i64 = iadd %7661, %17
    %7675:ptr = ptroff %7657, %7663
    %7664:ptr = ptroff %7657, %11
    %7665:ctrl, %7666:i64 = load.4 %7658, %7664
    %7667:i64 = icmp slt %7661, %7666
    %7668:ctrl, %7669:ctrl = brcond %7665, %7667
    %7676:ctrl, %7677:i32 = load.1 %7668, %7675
    %7674:ctrl = call @throw_index_out_of_range_exception %7669
    unreachable %7674
    %7680:ctrl, %7681:ptr = load.8 %7653, %12
    %7682:ctrl, %7683:i32 = load.4 %7680, %13
    %7684:i64 = iext %7683
    %7685:i64 = sfill 32 %7684
    %7687:i64 = iadd %7685, %17
    %7699:ptr = ptroff %7681, %7687
    %7688:ptr = ptroff %7681, %11
    %7689:ctrl, %7690:i64 = load.4 %7682, %7688
    %7691:i64 = icmp slt %7685, %7690
    %7692:ctrl, %7693:ctrl = brcond %7689, %7691
    %7700:ctrl, %7701:i32 = load.1 %7692, %7699
    %7702:ctrl, %7703:phisel = region %7700, %7676
    %7705:i32 = phi %7703, %7701, %7677
    %7706:ctrl, %7707:ctrl = brcond %7702, %7705
    %7710:ctrl, %7711:i32 = load.4 %7706, %7
    %7712:i32 = iadd %7711, %8
    %7713:ctrl = store.4 %7710, %7712, %7
    %7716:ctrl, %7717:i32 = load.4 %7707, %6
    %7718:i32 = iadd %7717, %8
    %7719:ctrl = store.4 %7716, %7718, %6
    %7720:ctrl, %7721:phisel = region %7713, %7719
    %7723:ctrl, %7724:ctrl = brcond %7720, %20
    %7727:ctrl, %7728:ptr = load.8 %7723, %12
    %7729:ctrl, %7730:i32 = load.4 %7727, %13
    %7731:i64 = iext %7730
    %7732:i64 = sfill 32 %7731
    %7734:i64 = iadd %7732, %17
    %7746:ptr = ptroff %7728, %7734
    %7735:ptr = ptroff %7728, %11
    %7736:ctrl, %7737:i64 = load.4 %7729, %7735
    %7738:i64 = icmp slt %7732, %7737
    %7739:ctrl, %7740:ctrl = brcond %7736, %7738
    %7747:ctrl, %7748:i32 = load.1 %7739, %7746
    %7745:ctrl = call @throw_index_out_of_range_exception %7740
    unreachable %7745
    %7751:ctrl, %7752:phisel = region %7724, %7747
    %7754:i32 = phi %7752, %8, %7748
    %7755:ctrl, %7756:ctrl = brcond %7751, %7754
    %7759:ctrl, %7760:i32 = load.4 %7755, %7
    %7761:i32 = iadd %7760, %8
    %7762:ctrl = store.4 %7759, %7761, %7
    %7765:ctrl, %7766:i32 = load.4 %7756, %6
    %7767:i32 = iadd %7766, %8
    %7768:ctrl = store.4 %7765, %7767, %6
    %7769:ctrl, %7770:phisel = region %7762, %7768
    %7772:ctrl, %7773:ctrl = brcond %7769, %20
    %7776:ctrl, %7777:ptr = load.8 %7772, %12
    %7778:ctrl, %7779:i32 = load.4 %7776, %13
    %7780:i64 = iext %7779
    %7781:i64 = sfill 32 %7780
    %7783:i64 = iadd %7781, %17
    %7795:ptr = ptroff %7777, %7783
    %7784:ptr = ptroff %7777, %11
    %7785:ctrl, %7786:i64 = load.4 %7778, %7784
    %7787:i64 = icmp slt %7781, %7786
    %7788:ctrl, %7789:ctrl = brcond %7785, %7787
    %7796:ctrl, %7797:i32 = load.1 %7788, %7795
    %7794:ctrl = call @throw_index_out_of_range_exception %7789
    unreachable %7794
    %7800:ctrl, %7801:phisel = region %7773, %7796
    %7803:i32 = phi %7801, %20, %7797
    %7804:ctrl, %7805:ctrl = brcond %7800, %7803
    %7808:ctrl, %7809:i32 = load.4 %7804, %7
    %7810:i32 = iadd %7809, %8
    %7811:ctrl = store.4 %7808, %7810, %7
    %7814:ctrl, %7815:i32 = load.4 %7805, %6
    %7816:i32 = iadd %7815, %8
    %7817:ctrl = store.4 %7814, %7816, %6
    %7818:ctrl, %7819:phisel = region %7811, %7817
    %7821:ctrl, %7822:ctrl = brcond %7818, %20
    %7825:ctrl, %7826:ptr = load.8 %7821, %12
    %7827:ctrl, %7828:i32 = load.4 %7825, %13
    %7829:i64 = iext %7828
    %7830:i64 = sfill 32 %7829
    %7832:i64 = iadd %7830, %17
    %7844:ptr = ptroff %7826, %7832
    %7833:ptr = ptroff %7826, %11
    %7834:ctrl, %7835:i64 = load.4 %7827, %7833
    %7836:i64 = icmp slt %7830, %7835
    %7837:ctrl, %7838:ctrl = brcond %7834, %7836
    %7845:ctrl, %7846:i32 = load.1 %7837, %7844
    %7843:ctrl = call @throw_index_out_of_range_exception %7838
    unreachable %7843
    %7849:ctrl, %7850:i32 = load.1 %7822, %31
    %7851:ctrl, %7852:phisel = region %7849, %7845
    %7854:i32 = phi %7852, %7850, %7846
    %7855:ctrl, %7856:ctrl = brcond %7851, %7854
    %7859:ctrl, %7860:i32 = load.4 %7855, %7
    %7861:i32 = iadd %7860, %8
    %7862:ctrl = store.4 %7859, %7861, %7
    %7865:ctrl, %7866:i32 = load.4 %7856, %6
    %7867:i32 = iadd %7866, %8
    %7868:ctrl = store.4 %7865, %7867, %6
    %7869:ctrl, %7870:phisel = region %7862, %7868
    %7872:ctrl, %7873:ctrl = brcond %7869, %20
    %7876:ctrl, %7877:ptr = load.8 %7872, %12
    %7878:ctrl, %7879:i32 = load.4 %7876, %13
    %7880:i64 = iext %7879
    %7881:i64 = sfill 32 %7880
    %7883:i64 = iadd %7881, %17
    %7895:ptr = ptroff %7877, %7883
    %7884:ptr = ptroff %7877, %11
    %7885:ctrl, %7886:i64 = load.4 %7878, %7884
    %7887:i64 = icmp slt %7881, %7886
    %7888:ctrl, %7889:ctrl = brcond %7885, %7887
    %7896:ctrl, %7897:i32 = load.1 %7888, %7895
    %7894:ctrl = call @throw_index_out_of_range_exception %7889
    unreachable %7894
    %7900:ctrl, %7901:i32 = load.1 %7873, %30
    %7902:ctrl, %7903:phisel = region %7900, %7896
    %7905:i32 = phi %7903, %7901, %7897
    %7906:ctrl, %7907:ctrl = brcond %7902, %7905
    %7910:ctrl, %7911:i32 = load.4 %7906, %7
    %7912:i32 = iadd %7911, %8
    %7913:ctrl = store.4 %7910, %7912, %7
    %7916:ctrl, %7917:i32 = load.4 %7907, %6
    %7918:i32 = iadd %7917, %8
    %7919:ctrl = store.4 %7916, %7918, %6
    %7920:ctrl, %7921:phisel = region %7913, %7919
    %7923:ctrl, %7924:ctrl = brcond %7920, %20
    %7927:ctrl, %7928:ptr = load.8 %7923, %12
    %7929:ctrl, %7930:i32 = load.4 %7927, %13
    %7931:i64 = iext %7930
    %7932:i64 = sfill 32 %7931
    %7934:i64 = iadd %7932, %17
    %7946:ptr = ptroff %7928, %7934
    %7935:ptr = ptroff %7928, %11
    %7936:ctrl, %7937:i64 = load.4 %7929, %7935
    %7938:i64 = icmp slt %7932, %7937
    %7939:ctrl, %7940:ctrl = brcond %7936, %7938
    %7947:ctrl, %7948:i32 = load.1 %7939, %7946
    %7945:ctrl = call @throw_index_out_of_range_exception %7940
    unreachable %7945
    %7951:ctrl, %7952:ptr = load.8 %7924, %29
    %7953:ptr = ptroff %7952, %11
    %7954:ctrl, %7955:i32 = load.1 %7951, %7953
    %7956:ctrl, %7957:phisel = region %7954, %7947
    %7959:i32 = phi %7957, %7955, %7948
    %7960:ctrl, %7961:ctrl = brcond %7956, %7959
    %7964:ctrl, %7965:i32 = load.4 %7960, %7
    %7966:i32 = iadd %7965, %8
    %7967:ctrl = store.4 %7964, %7966, %7
    %7970:ctrl, %7971:i32 = load.4 %7961, %6
    %7972:i32 = iadd %7971, %8
    %7973:ctrl = store.4 %7970, %7972, %6
    %7974:ctrl, %7975:phisel = region %7967, %7973
    %7977:ctrl, %7978:ctrl = brcond %7974, %20
    %7981:ctrl, %7982:ptr = load.8 %7977, %12
    %7983:ctrl, %7984:i32 = load.4 %7981, %13
    %7985:i64 = iext %7984
    %7986:i64 = sfill 32 %7985
    %7988:i64 = iadd %7986, %17
    %8000:ptr = ptroff %7982, %7988
    %7989:ptr = ptroff %7982, %11
    %7990:ctrl, %7991:i64 = load.4 %7983, %7989
    %7992:i64 = icmp slt %7986, %7991
    %7993:ctrl, %7994:ctrl = brcond %7990, %7992
    %8001:ctrl, %8002:i32 = load.1 %7993, %8000
    %7999:ctrl = call @throw_index_out_of_range_exception %7994
    unreachable %7999
    %8005:ctrl, %8006:i32 = call @"System.Boolean Tests.Bool_No_Op::simple_func_bool()" %7978
    %8007:ctrl, %8008:phisel = region %8005, %8001
    %8010:i32 = phi %8008, %8006, %8002
    %8011:ctrl, %8012:ctrl = brcond %8007, %8010
    %8015:ctrl, %8016:i32 = load.4 %8011, %7
    %8017:i32 = iadd %8016, %8
    %8018:ctrl = store.4 %8015, %8017, %7
    %8021:ctrl, %8022:i32 = load.4 %8012, %6
    %8023:i32 = iadd %8022, %8
    %8024:ctrl = store.4 %8021, %8023, %6
    %8025:ctrl, %8026:phisel = region %8018, %8024
    %8028:ctrl, %8029:ctrl = brcond %8025, %20
    %8032:ctrl, %8033:ptr = load.8 %8028, %12
    %8034:ctrl, %8035:i32 = load.4 %8032, %13
    %8036:i64 = iext %8035
    %8037:i64 = sfill 32 %8036
    %8039:i64 = iadd %8037, %17
    %8051:ptr = ptroff %8033, %8039
    %8040:ptr = ptroff %8033, %11
    %8041:ctrl, %8042:i64 = load.4 %8034, %8040
    %8043:i64 = icmp slt %8037, %8042
    %8044:ctrl, %8045:ctrl = brcond %8041, %8043
    %8052:ctrl, %8053:i32 = load.1 %8044, %8051
    %8050:ctrl = call @throw_index_out_of_range_exception %8045
    unreachable %8050
    %8056:ctrl, %8057:ptr = load.8 %8029, %28
    %8058:ctrl, %8059:i32 = load.4 %8056, %13
    %8060:i64 = iext %8059
    %8061:i64 = sfill 32 %8060
    %8063:i64 = iadd %8061, %17
    %8075:ptr = ptroff %8057, %8063
    %8064:ptr = ptroff %8057, %11
    %8065:ctrl, %8066:i64 = load.4 %8058, %8064
    %8067:i64 = icmp slt %8061, %8066
    %8068:ctrl, %8069:ctrl = brcond %8065, %8067
    %8076:ctrl, %8077:i32 = load.1 %8068, %8075
    %8078:ctrl, %8079:phisel = region %8076, %8052
    %8081:i32 = phi %8079, %8077, %8053
    %8082:ctrl, %8083:ctrl = brcond %8078, %8081
    %8086:ctrl, %8087:i32 = load.4 %8082, %7
    %8088:i32 = iadd %8087, %8
    %8089:ctrl = store.4 %8086, %8088, %7
    %8092:ctrl, %8093:i32 = load.4 %8083, %6
    %8094:i32 = iadd %8093, %8
    %8095:ctrl = store.4 %8092, %8094, %6
    %8096:ctrl, %8097:phisel = region %8089, %8095
    %8099:ctrl, %8100:ctrl = brcond %8096, %20
    %8103:ctrl, %8104:ptr = load.8 %8099, %12
    %8105:ctrl, %8106:i32 = load.4 %8103, %13
    %8107:i64 = iext %8106
    %8108:i64 = sfill 32 %8107
    %8110:i64 = iadd %8108, %17
    %8122:ptr = ptroff %8104, %8110
    %8111:ptr = ptroff %8104, %11
    %8112:ctrl, %8113:i64 = load.4 %8105, %8111
    %8114:i64 = icmp slt %8108, %8113
    %8115:ctrl, %8116:ctrl = brcond %8112, %8114
    %8123:ctrl, %8124:i32 = load.1 %8115, %8122
    %8121:ctrl = call @throw_index_out_of_range_exception %8116
    unreachable %8121
    %8127:ctrl, %8128:ptr = load.8 %8100, %12
    %8129:ctrl, %8130:i32 = load.4 %8127, %13
    %8131:i64 = iext %8130
    %8132:i64 = sfill 32 %8131
    %8134:i64 = iadd %8132, %17
    %8146:ptr = ptroff %8128, %8134
    %8135:ptr = ptroff %8128, %11
    %8136:ctrl, %8137:i64 = load.4 %8129, %8135
    %8138:i64 = icmp slt %8132, %8137
    %8139:ctrl, %8140:ctrl = brcond %8136, %8138
    %8147:ctrl, %8148:i32 = load.1 %8139, %8146
    %8149:ctrl, %8150:phisel = region %8147, %8123
    %8151:i32 = phi %8150, %8148, %8124
    %8152:ctrl, %8153:ctrl = brcond %8149, %8151
    %8156:ctrl, %8157:i32 = load.4 %8152, %7
    %8158:i32 = iadd %8157, %8
    %8159:ctrl = store.4 %8156, %8158, %7
    %8162:ctrl, %8163:i32 = load.4 %8153, %6
    %8164:i32 = iadd %8163, %8
    %8165:ctrl = store.4 %8162, %8164, %6
    %8166:ctrl, %8167:phisel = region %8159, %8165
    %8168:ctrl, %8169:i32 = load.4 %8166, %7
    %8170:ctrl, %8171:i32 = load.4 %8168, %6
    %8181:i32 = shl %8169, %8
    %8173:i32 = isub %8181, %8171
    return %8170, %8173
    %8145:ctrl = call @throw_index_out_of_range_exception %8140
    unreachable %8145
    %8074:ctrl = call @throw_index_out_of_range_exception %8069
    unreachable %8074
    %7698:ctrl = call @throw_index_out_of_range_exception %7693
    unreachable %7698
    %7627:ctrl = call @throw_index_out_of_range_exception %7622
    unreachable %7627
    %7251:ctrl = call @throw_index_out_of_range_exception %7246
    unreachable %7251
    %7200:ctrl = call @throw_index_out_of_range_exception %7195
    unreachable %7200
    %6964:ctrl = call @throw_index_out_of_range_exception %6959
    unreachable %6964
    %6910:ctrl = call @throw_index_out_of_range_exception %6905
    unreachable %6910
    %6653:ctrl = call @throw_index_out_of_range_exception %6648
    unreachable %6653
    %6602:ctrl = call @throw_index_out_of_range_exception %6597
    unreachable %6602
    %6366:ctrl = call @throw_index_out_of_range_exception %6361
    unreachable %6366
    %6315:ctrl = call @throw_index_out_of_range_exception %6310
    unreachable %6315
    %6079:ctrl = call @throw_index_out_of_range_exception %6074
    unreachable %6079
    %6030:ctrl = call @throw_index_out_of_range_exception %6025
    unreachable %6030
    %5817:ctrl = call @throw_index_out_of_range_exception %5812
    unreachable %5817
    %5768:ctrl = call @throw_index_out_of_range_exception %5763
    unreachable %5768
    %5555:ctrl = call @throw_index_out_of_range_exception %5550
    unreachable %5555
    %5482:ctrl = call @throw_index_out_of_range_exception %5477
    unreachable %5482
    %5092:ctrl = call @throw_index_out_of_range_exception %5087
    unreachable %5092
    %5019:ctrl = call @throw_index_out_of_range_exception %5014
    unreachable %5019
    %4629:ctrl = call @throw_index_out_of_range_exception %4624
    unreachable %4629
    %4576:ctrl = call @throw_index_out_of_range_exception %4571
    unreachable %4576
    %4326:ctrl = call @throw_index_out_of_range_exception %4321
    unreachable %4326
    %4270:ctrl = call @throw_index_out_of_range_exception %4265
    unreachable %4270
    %3999:ctrl = call @throw_index_out_of_range_exception %3994
    unreachable %3999
    %3946:ctrl = call @throw_index_out_of_range_exception %3941
    unreachable %3946
    %3696:ctrl = call @throw_index_out_of_range_exception %3691
    unreachable %3696
    %3643:ctrl = call @throw_index_out_of_range_exception %3638
    unreachable %3643
    %3393:ctrl = call @throw_index_out_of_range_exception %3388
    unreachable %3393
    %3342:ctrl = call @throw_index_out_of_range_exception %3337
    unreachable %3342
    %3116:ctrl = call @throw_index_out_of_range_exception %3111
    unreachable %3116
    %3065:ctrl = call @throw_index_out_of_range_exception %3060
    unreachable %3065
    %2654:ctrl = call @throw_index_out_of_range_exception %2649
    unreachable %2654
    %2616:ctrl = call @throw_index_out_of_range_exception %2611
    unreachable %2616
    %2495:ctrl = call @throw_index_out_of_range_exception %2490
    unreachable %2495
    %2457:ctrl = call @throw_index_out_of_range_exception %2452
    unreachable %2457
    %2336:ctrl = call @throw_index_out_of_range_exception %2331
    unreachable %2336
    %2298:ctrl = call @throw_index_out_of_range_exception %2293
    unreachable %2298
    %2177:ctrl = call @throw_index_out_of_range_exception %2172
    unreachable %2177
    %2139:ctrl = call @throw_index_out_of_range_exception %2134
    unreachable %2139
    %2018:ctrl = call @throw_index_out_of_range_exception %2013
    unreachable %2018
    %1980:ctrl = call @throw_index_out_of_range_exception %1975
    unreachable %1980
    %1859:ctrl = call @throw_index_out_of_range_exception %1854
    unreachable %1859
    %1821:ctrl = call @throw_index_out_of_range_exception %1816
    unreachable %1821
    %1700:ctrl = call @throw_index_out_of_range_exception %1695
    unreachable %1700
    %1662:ctrl = call @throw_index_out_of_range_exception %1657
    unreachable %1662
    %1541:ctrl = call @throw_index_out_of_range_exception %1536
    unreachable %1541
    %1503:ctrl = call @throw_index_out_of_range_exception %1498
    unreachable %1503
    %1382:ctrl = call @throw_index_out_of_range_exception %1377
    unreachable %1382
    %1344:ctrl = call @throw_index_out_of_range_exception %1339
    unreachable %1344
    %1306:ctrl = call @throw_index_out_of_range_exception %1301
    unreachable %1306
    %1268:ctrl = call @throw_index_out_of_range_exception %1263
    unreachable %1268
    %1230:ctrl = call @throw_index_out_of_range_exception %1225
    unreachable %1230
    %1192:ctrl = call @throw_index_out_of_range_exception %1187
    unreachable %1192
    %1154:ctrl = call @throw_index_out_of_range_exception %1149
    unreachable %1154
    %1116:ctrl = call @throw_index_out_of_range_exception %1111
    unreachable %1116
    %1078:ctrl = call @throw_index_out_of_range_exception %1073
    unreachable %1078
    %1040:ctrl = call @throw_index_out_of_range_exception %1035
    unreachable %1040
    %1002:ctrl = call @throw_index_out_of_range_exception %997
    unreachable %1002
    %964:ctrl = call @throw_index_out_of_range_exception %959
    unreachable %964
    %926:ctrl = call @throw_index_out_of_range_exception %921
    unreachable %926
    %888:ctrl = call @throw_index_out_of_range_exception %883
    unreachable %888
    %850:ctrl = call @throw_index_out_of_range_exception %845
    unreachable %850
    %812:ctrl = call @throw_index_out_of_range_exception %807
    unreachable %812
    %112:ctrl = call @throw_index_out_of_range_exception %107
    unreachable %112
    %97:ctrl = call @throw_index_out_of_range_exception %92
    unreachable %97
    %82:ctrl = call @throw_index_out_of_range_exception %77
    unreachable %82
}
