# run: codegen

func @"System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)":i32(ptr, i32, i32, i32) {
    # check: function `System.Int32 System.Test::Loop2(System.Int32, System.Int32, System.Int32)`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 83 ec 10                     sub rsp, 0x10
    # nextln: 000008: 33 c0                           xor eax, eax
    # nextln: 00000a: 89 44 24 0c                     mov dword ptr [rsp + 0xc], eax
    # nextln: 00000e: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 000011: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 000015: 89 44 24 08                     mov dword ptr [rsp + 8], eax
    # nextln: 000019: 89 44 24 0c                     mov dword ptr [rsp + 0xc], eax
    # nextln: 00001d: 89 04 24                        mov dword ptr [rsp], eax
    # nextln: 000020: 8b 3c 24                        mov edi, dword ptr [rsp]
    # nextln: 000023: 3b fe                           cmp edi, esi
    # nextln: 000025: 0f 8d 7d 00 00 00               jge 0xa8
    # nextln: 00002b: 89 44 24 04                     mov dword ptr [rsp + 4], eax
    # nextln: 00002f: 8b 7c 24 04                     mov edi, dword ptr [rsp + 4]
    # nextln: 000033: 3b fa                           cmp edi, edx
    # nextln: 000035: 0f 8d 50 00 00 00               jge 0x8b
    # nextln: 00003b: 89 44 24 08                     mov dword ptr [rsp + 8], eax
    # nextln: 00003f: 8b 7c 24 08                     mov edi, dword ptr [rsp + 8]
    # nextln: 000043: 3b f9                           cmp edi, ecx
    # nextln: 000045: 0f 8d 20 00 00 00               jge 0x6b
    # nextln: 00004b: 8b 7c 24 0c                     mov edi, dword ptr [rsp + 0xc]
    # nextln: 00004f: 44 8b 44 24 08                  mov r8d, dword ptr [rsp + 8]
    # nextln: 000054: 41 03 f8                        add edi, r8d
    # nextln: 000057: 89 7c 24 0c                     mov dword ptr [rsp + 0xc], edi
    # nextln: 00005b: 8b 7c 24 08                     mov edi, dword ptr [rsp + 8]
    # nextln: 00005f: 83 c7 01                        add edi, 1
    # nextln: 000062: 89 7c 24 08                     mov dword ptr [rsp + 8], edi
    # nextln: 000066: e9 d4 ff ff ff                  jmp 0x3f
    # nextln: 00006b: 8b 7c 24 0c                     mov edi, dword ptr [rsp + 0xc]
    # nextln: 00006f: 44 8b 44 24 04                  mov r8d, dword ptr [rsp + 4]
    # nextln: 000074: 41 03 f8                        add edi, r8d
    # nextln: 000077: 89 7c 24 0c                     mov dword ptr [rsp + 0xc], edi
    # nextln: 00007b: 8b 7c 24 04                     mov edi, dword ptr [rsp + 4]
    # nextln: 00007f: 83 c7 01                        add edi, 1
    # nextln: 000082: 89 7c 24 04                     mov dword ptr [rsp + 4], edi
    # nextln: 000086: e9 a4 ff ff ff                  jmp 0x2f
    # nextln: 00008b: 8b 7c 24 0c                     mov edi, dword ptr [rsp + 0xc]
    # nextln: 00008f: 44 8b 04 24                     mov r8d, dword ptr [rsp]
    # nextln: 000093: 41 03 f8                        add edi, r8d
    # nextln: 000096: 89 7c 24 0c                     mov dword ptr [rsp + 0xc], edi
    # nextln: 00009a: 8b 3c 24                        mov edi, dword ptr [rsp]
    # nextln: 00009d: 83 c7 01                        add edi, 1
    # nextln: 0000a0: 89 3c 24                        mov dword ptr [rsp], edi
    # nextln: 0000a3: e9 78 ff ff ff                  jmp 0x20
    # nextln: 0000a8: 8b 44 24 0c                     mov eax, dword ptr [rsp + 0xc]
    # nextln: 0000ac: 48 83 c4 10                     add rsp, 0x10
    # nextln: 0000b0: 5d                              pop rbp
    # nextln: 0000b1: c3                              ret

    %0:ctrl, %1:ptr, %2:i32, %3:i32, %4:i32 = entry
    %7:ptr = stackslot 4:4
    %8:ptr = stackslot 4:4
    %10:ptr = stackslot 4:4
    %11:ptr = stackslot 4:4
    %9:i32 = iconst 1
    %12:i32 = iconst 0
    %13:ctrl = store.4 %0, %12, %7
    %14:ctrl = store.4 %13, %12, %8
    %15:ctrl = store.4 %14, %12, %10
    %16:ctrl = store.4 %15, %12, %11
    %19:ctrl = store.4 %16, %12, %7
    %20:ctrl = store.4 %19, %12, %8
    %74:ctrl, %75:phisel = region %20, %73
    %76:ctrl, %77:i32 = load.4 %74, %8
    %78:i32 = icmp slt %77, %2
    %79:ctrl, %80:ctrl = brcond %76, %78
    %83:ctrl = store.4 %79, %12, %10
    %53:ctrl, %54:phisel = region %83, %52
    %55:ctrl, %56:i32 = load.4 %53, %10
    %57:i32 = icmp slt %56, %3
    %58:ctrl, %59:ctrl = brcond %55, %57
    %21:ctrl = store.4 %58, %12, %11
    %22:ctrl, %23:phisel = region %21, %40
    %24:ctrl, %25:i32 = load.4 %22, %11
    %26:i32 = icmp slt %25, %4
    %27:ctrl, %28:ctrl = brcond %24, %26
    %31:ctrl, %32:i32 = load.4 %27, %7
    %33:ctrl, %34:i32 = load.4 %31, %11
    %35:i32 = iadd %32, %34
    %36:ctrl = store.4 %33, %35, %7
    %37:ctrl, %38:i32 = load.4 %36, %11
    %39:i32 = iadd %38, %9
    %40:ctrl = store.4 %37, %39, %11
    %43:ctrl, %44:i32 = load.4 %28, %7
    %45:ctrl, %46:i32 = load.4 %43, %10
    %47:i32 = iadd %44, %46
    %48:ctrl = store.4 %45, %47, %7
    %49:ctrl, %50:i32 = load.4 %48, %10
    %51:i32 = iadd %50, %9
    %52:ctrl = store.4 %49, %51, %10
    %64:ctrl, %65:i32 = load.4 %59, %7
    %66:ctrl, %67:i32 = load.4 %64, %8
    %68:i32 = iadd %65, %67
    %69:ctrl = store.4 %66, %68, %7
    %70:ctrl, %71:i32 = load.4 %69, %8
    %72:i32 = iadd %71, %9
    %73:ctrl = store.4 %70, %72, %8
    %86:ctrl, %87:i32 = load.4 %80, %7
    return %86, %87
}
