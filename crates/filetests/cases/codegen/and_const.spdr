# run: codegen

func @and_pos64:i64(i64) {
    # check: function `and_pos64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f8                        mov rax, rdi
    # nextln: 000007: 48 83 e0 05                     and rax, 5
    # nextln: 00000b: 5d                              pop rbp
    # nextln: 00000c: c3                              ret

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 5
    %val:i64 = and %a, %b
    return %c, %val
}

func @and_neg64:i64(i64) {
    # check: function `and_neg64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f8                        mov rax, rdi
    # nextln: 000007: 48 83 e0 fb                     and rax, 0xfffffffffffffffb
    # nextln: 00000b: 5d                              pop rbp
    # nextln: 00000c: c3                              ret

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 18446744073709551611
    %val:i64 = and %a, %b
    return %c, %val
}

func @and_pos_large64:i64(i64) {
    # check: function `and_pos_large64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 8b c7                           mov eax, edi
    # nextln: 000006: 5d                              pop rbp
    # nextln: 000007: c3                              ret

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 4294967295
    %val:i64 = and %a, %b
    return %c, %val
}

func @and_neg_large64:i64(i64) {
    # check: function `and_neg_large64`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 b8 01 00 00 00 ff ff ff ff   movabs rax, 0xffffffff00000001
    # nextln: 00000e: 48 23 c7                        and rax, rdi
    # nextln: 000011: 5d                              pop rbp
    # nextln: 000012: c3                              ret

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 18446744069414584321
    %val:i64 = and %a, %b
    return %c, %val
}

func @and_pos32:i32(i32) {
    # check: function `and_pos32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f8                        mov rax, rdi
    # nextln: 000007: 83 e0 05                        and eax, 5
    # nextln: 00000a: 5d                              pop rbp
    # nextln: 00000b: c3                              ret

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 5
    %val:i32 = and %a, %b
    return %c, %val
}

func @and_neg32:i32(i32) {
    # check: function `and_neg32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f8                        mov rax, rdi
    # nextln: 000007: 83 e0 fb                        and eax, 0xfffffffb
    # nextln: 00000a: 5d                              pop rbp
    # nextln: 00000b: c3                              ret

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 4294967291
    %val:i32 = and %a, %b
    return %c, %val
}

func @and_max32:i32(i32) {
    # check: function `and_max32`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 48 89 f8                        mov rax, rdi
    # nextln: 000007: 81 e0 ff ff ff 7f               and eax, 0x7fffffff
    # nextln: 00000d: 5d                              pop rbp
    # nextln: 00000e: c3                              ret

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 2147483647
    %val:i32 = and %a, %b
    return %c, %val
}
