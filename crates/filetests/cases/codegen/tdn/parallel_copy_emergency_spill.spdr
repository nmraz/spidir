# run: codegen

extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)":i32(ptr, i32)
extfunc @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)":i32(i64, i32)

func @"System.Boolean Tests.BitTest::Run()":i32() {
    # check: function `System.Boolean Tests.BitTest::Run()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 81 ec c8 00 00 00            sub rsp, 0xc8
    # nextln: 000014: 33 c0                           xor eax, eax
    # nextln: 000016: 48 8d 8c 24 b6 00 00 00         lea rcx, [rsp + 0xb6]
    # nextln: 00001e: 48 8d 94 24 b0 00 00 00         lea rdx, [rsp + 0xb0]
    # nextln: 000026: 33 db                           xor ebx, ebx
    # nextln: 000028: 48 8d 3c 24                     lea rdi, [rsp]
    # nextln: 00002c: 49 89 d0                        mov r8, rdx
    # nextln: 00002f: 48 89 fa                        mov rdx, rdi
    # nextln: 000032: 48 8d 74 24 08                  lea rsi, [rsp + 8]
    # nextln: 000037: 48 8d bc 24 a8 00 00 00         lea rdi, [rsp + 0xa8]
    # nextln: 00003f: 49 89 f2                        mov r10, rsi
    # nextln: 000042: 48 8d b4 24 b2 00 00 00         lea rsi, [rsp + 0xb2]
    # nextln: 00004a: 4c 8d 8c 24 ac 00 00 00         lea r9, [rsp + 0xac]
    # nextln: 000052: 4c 8d 9c 24 b4 00 00 00         lea r11, [rsp + 0xb4]
    # nextln: 00005a: 4c 8d a4 24 b7 00 00 00         lea r12, [rsp + 0xb7]
    # nextln: 000062: 88 9c 24 b7 00 00 00            mov byte ptr [rsp + 0xb7], bl
    # nextln: 000069: 88 9c 24 b6 00 00 00            mov byte ptr [rsp + 0xb6], bl
    # nextln: 000070: 4c 8d ac 24 b8 00 00 00         lea r13, [rsp + 0xb8]
    # nextln: 000078: 88 9c 24 b8 00 00 00            mov byte ptr [rsp + 0xb8], bl
    # nextln: 00007f: 66 89 9c 24 b4 00 00 00         mov word ptr [rsp + 0xb4], bx
    # nextln: 000087: 66 89 9c 24 b2 00 00 00         mov word ptr [rsp + 0xb2], bx
    # nextln: 00008f: 66 89 9c 24 b0 00 00 00         mov word ptr [rsp + 0xb0], bx
    # nextln: 000097: 89 9c 24 ac 00 00 00            mov dword ptr [rsp + 0xac], ebx
    # nextln: 00009e: 89 9c 24 a8 00 00 00            mov dword ptr [rsp + 0xa8], ebx
    # nextln: 0000a5: 48 89 44 24 08                  mov qword ptr [rsp + 8], rax
    # nextln: 0000aa: 48 89 04 24                     mov qword ptr [rsp], rax
    # nextln: 0000ae: 48 89 c8                        mov rax, rcx
    # nextln: 0000b1: b9 07 00 00 00                  mov ecx, 7
    # nextln: 0000b6: 49 89 ce                        mov r14, rcx
    # nextln: 0000b9: b9 08 00 00 00                  mov ecx, 8
    # nextln: 0000be: 4d 89 cf                        mov r15, r9
    # nextln: 0000c1: 49 89 f9                        mov r9, rdi
    # nextln: 0000c4: 4c 89 ef                        mov rdi, r13
    # nextln: 0000c7: 49 89 f5                        mov r13, rsi
    # nextln: 0000ca: 4c 89 fe                        mov rsi, r15
    # nextln: 0000cd: 4d 89 df                        mov r15, r11
    # nextln: 0000d0: 49 89 d3                        mov r11, rdx
    # nextln: 0000d3: 4c 89 fa                        mov rdx, r15
    # nextln: 0000d6: 41 bf 01 00 00 00               mov r15d, 1
    # nextln: 0000dc: 48 89 54 24 68                  mov qword ptr [rsp + 0x68], rdx
    # nextln: 0000e1: 4c 89 c2                        mov rdx, r8
    # nextln: 0000e4: 4d 89 e0                        mov r8, r12
    # nextln: 0000e7: 4d 89 f4                        mov r12, r14
    # nextln: 0000ea: 4d 89 ce                        mov r14, r9
    # nextln: 0000ed: 4d 89 d1                        mov r9, r10
    # nextln: 0000f0: 49 89 f2                        mov r10, rsi
    # nextln: 0000f3: 4c 89 ee                        mov rsi, r13
    # nextln: 0000f6: 49 89 c5                        mov r13, rax
    # nextln: 0000f9: 4c 89 f8                        mov rax, r15
    # nextln: 0000fc: 49 89 ff                        mov r15, rdi
    # nextln: 0000ff: 4c 89 df                        mov rdi, r11
    # nextln: 000102: 41 bb 20 00 00 00               mov r11d, 0x20
    # nextln: 000108: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 00010d: b8 0f 00 00 00                  mov eax, 0xf
    # nextln: 000112: 4c 89 4c 24 20                  mov qword ptr [rsp + 0x20], r9
    # nextln: 000117: 4d 89 e1                        mov r9, r12
    # nextln: 00011a: 48 89 94 24 a0 00 00 00         mov qword ptr [rsp + 0xa0], rdx
    # nextln: 000122: 48 89 f2                        mov rdx, rsi
    # nextln: 000125: 4c 89 d6                        mov rsi, r10
    # nextln: 000128: 4c 8b 94 24 a0 00 00 00         mov r10, qword ptr [rsp + 0xa0]
    # nextln: 000130: 4c 89 74 24 38                  mov qword ptr [rsp + 0x38], r14
    # nextln: 000135: 4c 8b 74 24 10                  mov r14, qword ptr [rsp + 0x10]
    # nextln: 00013a: 4d 89 c4                        mov r12, r8
    # nextln: 00013d: 4d 89 e8                        mov r8, r13
    # nextln: 000140: 4d 89 fd                        mov r13, r15
    # nextln: 000143: 49 89 c7                        mov r15, rax
    # nextln: 000146: b8 10 00 00 00                  mov eax, 0x10
    # nextln: 00014b: 4c 89 8c 24 98 00 00 00         mov qword ptr [rsp + 0x98], r9
    # nextln: 000153: 4c 89 84 24 80 00 00 00         mov qword ptr [rsp + 0x80], r8
    # nextln: 00015b: 4d 89 d0                        mov r8, r10
    # nextln: 00015e: 4c 8b 4c 24 20                  mov r9, qword ptr [rsp + 0x20]
    # nextln: 000163: 4c 8b 54 24 68                  mov r10, qword ptr [rsp + 0x68]
    # nextln: 000168: 48 89 54 24 58                  mov qword ptr [rsp + 0x58], rdx
    # nextln: 00016d: ba 03 00 00 00                  mov edx, 3
    # nextln: 000172: 4c 89 44 24 50                  mov qword ptr [rsp + 0x50], r8
    # nextln: 000177: 4d 89 c8                        mov r8, r9
    # nextln: 00017a: 4c 89 54 24 68                  mov qword ptr [rsp + 0x68], r10
    # nextln: 00017f: 49 89 f2                        mov r10, rsi
    # nextln: 000182: 4c 8b 4c 24 38                  mov r9, qword ptr [rsp + 0x38]
    # nextln: 000187: 48 89 7c 24 18                  mov qword ptr [rsp + 0x18], rdi
    # nextln: 00018c: 48 8b bc 24 98 00 00 00         mov rdi, qword ptr [rsp + 0x98]
    # nextln: 000194: be 40 00 00 00                  mov esi, 0x40
    # nextln: 000199: 48 89 bc 24 98 00 00 00         mov qword ptr [rsp + 0x98], rdi
    # nextln: 0001a1: 4c 89 84 24 a0 00 00 00         mov qword ptr [rsp + 0xa0], r8
    # nextln: 0001a9: 4d 89 d0                        mov r8, r10
    # nextln: 0001ac: 4c 8b 94 24 a0 00 00 00         mov r10, qword ptr [rsp + 0xa0]
    # nextln: 0001b4: bf 02 00 00 00                  mov edi, 2
    # nextln: 0001b9: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 0001be: 4d 89 c2                        mov r10, r8
    # nextln: 0001c1: 4d 63 c6                        movsxd r8, r14d
    # nextln: 0001c4: 4c 89 54 24 40                  mov qword ptr [rsp + 0x40], r10
    # nextln: 0001c9: 4d 89 ca                        mov r10, r9
    # nextln: 0001cc: 4c 63 cf                        movsxd r9, edi
    # nextln: 0001cf: 4c 89 54 24 38                  mov qword ptr [rsp + 0x38], r10
    # nextln: 0001d4: 41 ba 80 ff ff ff               mov r10d, 0xffffff80
    # nextln: 0001da: 44 88 94 24 b7 00 00 00         mov byte ptr [rsp + 0xb7], r10b
    # nextln: 0001e2: 41 ba 00 80 ff ff               mov r10d, 0xffff8000
    # nextln: 0001e8: 44 88 b4 24 b6 00 00 00         mov byte ptr [rsp + 0xb6], r14b
    # nextln: 0001f0: 40 88 bc 24 b8 00 00 00         mov byte ptr [rsp + 0xb8], dil
    # nextln: 0001f8: 66 44 89 94 24 b4 00 00 00      mov word ptr [rsp + 0xb4], r10w
    # nextln: 000201: 66 44 89 b4 24 b2 00 00 00      mov word ptr [rsp + 0xb2], r14w
    # nextln: 00020a: 66 89 bc 24 b0 00 00 00         mov word ptr [rsp + 0xb0], di
    # nextln: 000212: 44 89 b4 24 ac 00 00 00         mov dword ptr [rsp + 0xac], r14d
    # nextln: 00021a: 89 bc 24 a8 00 00 00            mov dword ptr [rsp + 0xa8], edi
    # nextln: 000221: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000226: 4c 8b 54 24 38                  mov r10, qword ptr [rsp + 0x38]
    # nextln: 00022b: 4c 89 44 24 08                  mov qword ptr [rsp + 8], r8
    # nextln: 000230: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000235: 4c 89 0c 24                     mov qword ptr [rsp], r9
    # nextln: 000239: 4d 89 c1                        mov r9, r8
    # nextln: 00023c: 49 89 f8                        mov r8, rdi
    # nextln: 00023f: 0f b6 bc 24 b7 00 00 00         movzx edi, byte ptr [rsp + 0xb7]
    # nextln: 000247: 40 0f be ff                     movsx edi, dil
    # nextln: 00024b: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 000250: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00025a: 48 89 54 24 48                  mov qword ptr [rsp + 0x48], rdx
    # nextln: 00025f: 4c 89 a4 24 90 00 00 00         mov qword ptr [rsp + 0x90], r12
    # nextln: 000267: 4c 8b a4 24 98 00 00 00         mov r12, qword ptr [rsp + 0x98]
    # nextln: 00026f: 4c 89 74 24 10                  mov qword ptr [rsp + 0x10], r14
    # nextln: 000274: 4c 8b b4 24 80 00 00 00         mov r14, qword ptr [rsp + 0x80]
    # nextln: 00027c: 4c 89 5c 24 30                  mov qword ptr [rsp + 0x30], r11
    # nextln: 000281: 4c 89 6c 24 78                  mov qword ptr [rsp + 0x78], r13
    # nextln: 000286: 4c 8b 6c 24 18                  mov r13, qword ptr [rsp + 0x18]
    # nextln: 00028b: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 000290: 4c 89 7c 24 70                  mov qword ptr [rsp + 0x70], r15
    # nextln: 000295: 4d 89 cf                        mov r15, r9
    # nextln: 000298: 48 89 44 24 60                  mov qword ptr [rsp + 0x60], rax
    # nextln: 00029d: 4c 89 54 24 38                  mov qword ptr [rsp + 0x38], r10
    # nextln: 0002a2: 48 89 8c 24 88 00 00 00         mov qword ptr [rsp + 0x88], rcx
    # nextln: 0002aa: 4c 89 e6                        mov rsi, r12
    # nextln: 0002ad: 41 ff d0                        call r8
    # nextln: 0002b0: 4c 89 e1                        mov rcx, r12
    # nextln: 0002b3: 4c 89 6c 24 18                  mov qword ptr [rsp + 0x18], r13
    # nextln: 0002b8: 4c 8b 94 24 90 00 00 00         mov r10, qword ptr [rsp + 0x90]
    # nextln: 0002c0: 4c 8b 4c 24 40                  mov r9, qword ptr [rsp + 0x40]
    # nextln: 0002c5: 4c 89 f2                        mov rdx, r14
    # nextln: 0002c8: 4c 8b 74 24 10                  mov r14, qword ptr [rsp + 0x10]
    # nextln: 0002cd: 4c 8b 64 24 78                  mov r12, qword ptr [rsp + 0x78]
    # nextln: 0002d2: 48 8b 7c 24 28                  mov rdi, qword ptr [rsp + 0x28]
    # nextln: 0002d7: 4c 89 fe                        mov rsi, r15
    # nextln: 0002da: 4c 8b 5c 24 60                  mov r11, qword ptr [rsp + 0x60]
    # nextln: 0002df: 4c 8b 7c 24 58                  mov r15, qword ptr [rsp + 0x58]
    # nextln: 0002e4: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 0002e9: 4d 89 f5                        mov r13, r14
    # nextln: 0002ec: 44 23 e8                        and r13d, eax
    # nextln: 0002ef: 48 89 7c 24 28                  mov qword ptr [rsp + 0x28], rdi
    # nextln: 0002f4: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 0002f9: 0f b6 84 24 b7 00 00 00         movzx eax, byte ptr [rsp + 0xb7]
    # nextln: 000301: 48 89 7c 24 38                  mov qword ptr [rsp + 0x38], rdi
    # nextln: 000306: 0f be f8                        movsx edi, al
    # nextln: 000309: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000313: 48 89 8c 24 98 00 00 00         mov qword ptr [rsp + 0x98], rcx
    # nextln: 00031b: 4c 89 5c 24 60                  mov qword ptr [rsp + 0x60], r11
    # nextln: 000320: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 000325: 4c 89 74 24 10                  mov qword ptr [rsp + 0x10], r14
    # nextln: 00032a: 4c 89 64 24 78                  mov qword ptr [rsp + 0x78], r12
    # nextln: 00032f: 4c 89 44 24 50                  mov qword ptr [rsp + 0x50], r8
    # nextln: 000334: 4c 89 4c 24 40                  mov qword ptr [rsp + 0x40], r9
    # nextln: 000339: 4c 8b a4 24 88 00 00 00         mov r12, qword ptr [rsp + 0x88]
    # nextln: 000341: 49 89 d6                        mov r14, rdx
    # nextln: 000344: 4c 89 94 24 90 00 00 00         mov qword ptr [rsp + 0x90], r10
    # nextln: 00034c: 4c 89 e6                        mov rsi, r12
    # nextln: 00034f: ff d0                           call rax
    # nextln: 000351: 44 23 e8                        and r13d, eax
    # nextln: 000354: 48 8b 8c 24 98 00 00 00         mov rcx, qword ptr [rsp + 0x98]
    # nextln: 00035c: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 000361: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 000366: 4c 8b 54 24 78                  mov r10, qword ptr [rsp + 0x78]
    # nextln: 00036b: 4c 8b 8c 24 90 00 00 00         mov r9, qword ptr [rsp + 0x90]
    # nextln: 000373: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 000378: 4c 89 a4 24 88 00 00 00         mov qword ptr [rsp + 0x88], r12
    # nextln: 000380: 4c 8b 64 24 10                  mov r12, qword ptr [rsp + 0x10]
    # nextln: 000385: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 00038a: 4c 89 b4 24 80 00 00 00         mov qword ptr [rsp + 0x80], r14
    # nextln: 000392: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 000397: 4c 8b 5c 24 60                  mov r11, qword ptr [rsp + 0x60]
    # nextln: 00039c: 0f b6 84 24 b6 00 00 00         movzx eax, byte ptr [rsp + 0xb6]
    # nextln: 0003a4: 48 89 7c 24 38                  mov qword ptr [rsp + 0x38], rdi
    # nextln: 0003a9: 0f be f8                        movsx edi, al
    # nextln: 0003ac: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0003b6: 4c 89 64 24 10                  mov qword ptr [rsp + 0x10], r12
    # nextln: 0003bb: 4c 89 8c 24 90 00 00 00         mov qword ptr [rsp + 0x90], r9
    # nextln: 0003c3: 4c 89 74 24 48                  mov qword ptr [rsp + 0x48], r14
    # nextln: 0003c8: 4d 89 de                        mov r14, r11
    # nextln: 0003cb: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 0003d0: 4c 8b a4 24 80 00 00 00         mov r12, qword ptr [rsp + 0x80]
    # nextln: 0003d8: 48 89 74 24 40                  mov qword ptr [rsp + 0x40], rsi
    # nextln: 0003dd: 4c 89 54 24 78                  mov qword ptr [rsp + 0x78], r10
    # nextln: 0003e2: 4c 89 44 24 50                  mov qword ptr [rsp + 0x50], r8
    # nextln: 0003e7: 4c 89 7c 24 58                  mov qword ptr [rsp + 0x58], r15
    # nextln: 0003ec: 49 89 cf                        mov r15, rcx
    # nextln: 0003ef: 48 89 de                        mov rsi, rbx
    # nextln: 0003f2: ff d0                           call rax
    # nextln: 0003f4: 44 23 e8                        and r13d, eax
    # nextln: 0003f7: 4c 8b 44 24 10                  mov r8, qword ptr [rsp + 0x10]
    # nextln: 0003fc: 4c 8b 94 24 90 00 00 00         mov r10, qword ptr [rsp + 0x90]
    # nextln: 000404: 4c 8b 4c 24 78                  mov r9, qword ptr [rsp + 0x78]
    # nextln: 000409: 48 8b bc 24 88 00 00 00         mov rdi, qword ptr [rsp + 0x88]
    # nextln: 000411: 4c 89 a4 24 80 00 00 00         mov qword ptr [rsp + 0x80], r12
    # nextln: 000419: 4d 89 f4                        mov r12, r14
    # nextln: 00041c: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 000421: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 000426: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 00042b: 4c 89 f9                        mov rcx, r15
    # nextln: 00042e: 4c 8b 7c 24 58                  mov r15, qword ptr [rsp + 0x58]
    # nextln: 000433: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 000438: 0f b6 84 24 b6 00 00 00         movzx eax, byte ptr [rsp + 0xb6]
    # nextln: 000440: 48 89 bc 24 88 00 00 00         mov qword ptr [rsp + 0x88], rdi
    # nextln: 000448: 0f be f8                        movsx edi, al
    # nextln: 00044b: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000455: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 00045a: 4c 89 64 24 60                  mov qword ptr [rsp + 0x60], r12
    # nextln: 00045f: 4c 8b a4 24 88 00 00 00         mov r12, qword ptr [rsp + 0x88]
    # nextln: 000467: 4c 89 94 24 90 00 00 00         mov qword ptr [rsp + 0x90], r10
    # nextln: 00046f: 48 89 74 24 50                  mov qword ptr [rsp + 0x50], rsi
    # nextln: 000474: 4c 89 4c 24 78                  mov qword ptr [rsp + 0x78], r9
    # nextln: 000479: 4c 89 7c 24 58                  mov qword ptr [rsp + 0x58], r15
    # nextln: 00047e: 49 89 d7                        mov r15, rdx
    # nextln: 000481: 4c 89 44 24 10                  mov qword ptr [rsp + 0x10], r8
    # nextln: 000486: 4c 89 74 24 48                  mov qword ptr [rsp + 0x48], r14
    # nextln: 00048b: 49 89 ce                        mov r14, rcx
    # nextln: 00048e: 4c 89 e6                        mov rsi, r12
    # nextln: 000491: ff d0                           call rax
    # nextln: 000493: 33 c9                           xor ecx, ecx
    # nextln: 000495: 3b c3                           cmp eax, ebx
    # nextln: 000497: 0f 94 c1                        sete cl
    # nextln: 00049a: 44 23 e9                        and r13d, ecx
    # nextln: 00049d: 4c 89 a4 24 88 00 00 00         mov qword ptr [rsp + 0x88], r12
    # nextln: 0004a5: 4c 8b 5c 24 70                  mov r11, qword ptr [rsp + 0x70]
    # nextln: 0004aa: 4c 89 7c 24 20                  mov qword ptr [rsp + 0x20], r15
    # nextln: 0004af: 4c 8b 7c 24 38                  mov r15, qword ptr [rsp + 0x38]
    # nextln: 0004b4: 4c 8b 54 24 60                  mov r10, qword ptr [rsp + 0x60]
    # nextln: 0004b9: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 0004be: 48 8b 8c 24 90 00 00 00         mov rcx, qword ptr [rsp + 0x90]
    # nextln: 0004c6: 4c 89 f2                        mov rdx, r14
    # nextln: 0004c9: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 0004ce: 4c 8b 64 24 58                  mov r12, qword ptr [rsp + 0x58]
    # nextln: 0004d3: 4c 8b 4c 24 10                  mov r9, qword ptr [rsp + 0x10]
    # nextln: 0004d8: 48 8b 7c 24 18                  mov rdi, qword ptr [rsp + 0x18]
    # nextln: 0004dd: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 0004e2: 0f b6 84 24 b6 00 00 00         movzx eax, byte ptr [rsp + 0xb6]
    # nextln: 0004ea: 48 89 7c 24 18                  mov qword ptr [rsp + 0x18], rdi
    # nextln: 0004ef: 0f be f8                        movsx edi, al
    # nextln: 0004f2: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0004fc: 4c 89 7c 24 38                  mov qword ptr [rsp + 0x38], r15
    # nextln: 000501: 4c 89 5c 24 70                  mov qword ptr [rsp + 0x70], r11
    # nextln: 000506: 4c 89 54 24 60                  mov qword ptr [rsp + 0x60], r10
    # nextln: 00050b: 4c 89 64 24 58                  mov qword ptr [rsp + 0x58], r12
    # nextln: 000510: 4c 89 4c 24 10                  mov qword ptr [rsp + 0x10], r9
    # nextln: 000515: 4d 89 c4                        mov r12, r8
    # nextln: 000518: 4d 89 f7                        mov r15, r14
    # nextln: 00051b: 49 89 f6                        mov r14, rsi
    # nextln: 00051e: 48 89 94 24 98 00 00 00         mov qword ptr [rsp + 0x98], rdx
    # nextln: 000526: 48 89 8c 24 90 00 00 00         mov qword ptr [rsp + 0x90], rcx
    # nextln: 00052e: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000533: ff d0                           call rax
    # nextln: 000535: 44 23 e8                        and r13d, eax
    # nextln: 000538: 48 8b 74 24 78                  mov rsi, qword ptr [rsp + 0x78]
    # nextln: 00053d: 4d 89 fa                        mov r10, r15
    # nextln: 000540: 4c 8b 7c 24 18                  mov r15, qword ptr [rsp + 0x18]
    # nextln: 000545: 48 8b 54 24 60                  mov rdx, qword ptr [rsp + 0x60]
    # nextln: 00054a: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 00054f: 4c 8b 44 24 58                  mov r8, qword ptr [rsp + 0x58]
    # nextln: 000554: 4c 89 f1                        mov rcx, r14
    # nextln: 000557: 4c 8b 74 24 10                  mov r14, qword ptr [rsp + 0x10]
    # nextln: 00055c: 4c 89 64 24 50                  mov qword ptr [rsp + 0x50], r12
    # nextln: 000561: 4c 8b 64 24 28                  mov r12, qword ptr [rsp + 0x28]
    # nextln: 000566: 4c 8b 5c 24 38                  mov r11, qword ptr [rsp + 0x38]
    # nextln: 00056b: 4c 8b 4c 24 70                  mov r9, qword ptr [rsp + 0x70]
    # nextln: 000570: 0f b6 84 24 b8 00 00 00         movzx eax, byte ptr [rsp + 0xb8]
    # nextln: 000578: 48 89 7c 24 20                  mov qword ptr [rsp + 0x20], rdi
    # nextln: 00057d: 0f be f8                        movsx edi, al
    # nextln: 000580: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00058a: 4c 89 54 24 48                  mov qword ptr [rsp + 0x48], r10
    # nextln: 00058f: 4c 89 64 24 28                  mov qword ptr [rsp + 0x28], r12
    # nextln: 000594: 48 89 74 24 78                  mov qword ptr [rsp + 0x78], rsi
    # nextln: 000599: 48 89 54 24 60                  mov qword ptr [rsp + 0x60], rdx
    # nextln: 00059e: 4c 89 44 24 58                  mov qword ptr [rsp + 0x58], r8
    # nextln: 0005a3: 4c 89 74 24 10                  mov qword ptr [rsp + 0x10], r14
    # nextln: 0005a8: 49 89 ce                        mov r14, rcx
    # nextln: 0005ab: 4c 89 5c 24 38                  mov qword ptr [rsp + 0x38], r11
    # nextln: 0005b0: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 0005b5: 4c 89 7c 24 18                  mov qword ptr [rsp + 0x18], r15
    # nextln: 0005ba: 4d 89 cf                        mov r15, r9
    # nextln: 0005bd: 48 89 de                        mov rsi, rbx
    # nextln: 0005c0: ff d0                           call rax
    # nextln: 0005c2: 33 c9                           xor ecx, ecx
    # nextln: 0005c4: 3b c3                           cmp eax, ebx
    # nextln: 0005c6: 0f 94 c1                        sete cl
    # nextln: 0005c9: 44 23 e9                        and r13d, ecx
    # nextln: 0005cc: 4c 89 e2                        mov rdx, r12
    # nextln: 0005cf: 48 8b b4 24 98 00 00 00         mov rsi, qword ptr [rsp + 0x98]
    # nextln: 0005d7: 4c 8b a4 24 88 00 00 00         mov r12, qword ptr [rsp + 0x88]
    # nextln: 0005df: 48 8b 4c 24 78                  mov rcx, qword ptr [rsp + 0x78]
    # nextln: 0005e4: 4c 89 7c 24 70                  mov qword ptr [rsp + 0x70], r15
    # nextln: 0005e9: 4c 8b bc 24 80 00 00 00         mov r15, qword ptr [rsp + 0x80]
    # nextln: 0005f1: 4c 8b 4c 24 60                  mov r9, qword ptr [rsp + 0x60]
    # nextln: 0005f6: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 0005fb: 4c 8b 5c 24 38                  mov r11, qword ptr [rsp + 0x38]
    # nextln: 000600: 4c 8b 54 24 58                  mov r10, qword ptr [rsp + 0x58]
    # nextln: 000605: 4d 89 f0                        mov r8, r14
    # nextln: 000608: 4c 8b b4 24 90 00 00 00         mov r14, qword ptr [rsp + 0x90]
    # nextln: 000610: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 00061a: 48 89 54 24 50                  mov qword ptr [rsp + 0x50], rdx
    # nextln: 00061f: 48 89 4c 24 78                  mov qword ptr [rsp + 0x78], rcx
    # nextln: 000624: 4c 89 4c 24 60                  mov qword ptr [rsp + 0x60], r9
    # nextln: 000629: 48 89 7c 24 48                  mov qword ptr [rsp + 0x48], rdi
    # nextln: 00062e: 4c 89 5c 24 38                  mov qword ptr [rsp + 0x38], r11
    # nextln: 000633: 4c 89 54 24 58                  mov qword ptr [rsp + 0x58], r10
    # nextln: 000638: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 00063d: 4c 89 f7                        mov rdi, r14
    # nextln: 000640: ff d0                           call rax
    # nextln: 000642: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 000647: 4c 89 f7                        mov rdi, r14
    # nextln: 00064a: 4c 8b 54 24 78                  mov r10, qword ptr [rsp + 0x78]
    # nextln: 00064f: 4c 8b 4c 24 48                  mov r9, qword ptr [rsp + 0x48]
    # nextln: 000654: 4c 8b 5c 24 60                  mov r11, qword ptr [rsp + 0x60]
    # nextln: 000659: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 00065e: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000663: 4c 8b 74 24 10                  mov r14, qword ptr [rsp + 0x10]
    # nextln: 000668: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 00066d: 44 23 e8                        and r13d, eax
    # nextln: 000670: 4c 89 5c 24 60                  mov qword ptr [rsp + 0x60], r11
    # nextln: 000675: 4c 89 44 24 40                  mov qword ptr [rsp + 0x40], r8
    # nextln: 00067a: 4c 8b 44 24 38                  mov r8, qword ptr [rsp + 0x38]
    # nextln: 00067f: 4d 89 d3                        mov r11, r10
    # nextln: 000682: 4c 8b 54 24 70                  mov r10, qword ptr [rsp + 0x70]
    # nextln: 000687: 4c 89 4c 24 48                  mov qword ptr [rsp + 0x48], r9
    # nextln: 00068c: 4c 8b 4c 24 28                  mov r9, qword ptr [rsp + 0x28]
    # nextln: 000691: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 00069b: 48 89 4c 24 30                  mov qword ptr [rsp + 0x30], rcx
    # nextln: 0006a0: 4c 89 4c 24 28                  mov qword ptr [rsp + 0x28], r9
    # nextln: 0006a5: 4c 89 44 24 38                  mov qword ptr [rsp + 0x38], r8
    # nextln: 0006aa: 4c 89 5c 24 78                  mov qword ptr [rsp + 0x78], r11
    # nextln: 0006af: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 0006b4: 48 89 74 24 50                  mov qword ptr [rsp + 0x50], rsi
    # nextln: 0006b9: 4c 89 54 24 70                  mov qword ptr [rsp + 0x70], r10
    # nextln: 0006be: 4c 89 e6                        mov rsi, r12
    # nextln: 0006c1: ff d0                           call rax
    # nextln: 0006c3: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 0006c8: 48 8b 7c 24 58                  mov rdi, qword ptr [rsp + 0x58]
    # nextln: 0006cd: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 0006d2: 4c 8b 4c 24 78                  mov r9, qword ptr [rsp + 0x78]
    # nextln: 0006d7: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 0006dc: 4c 8b 54 24 70                  mov r10, qword ptr [rsp + 0x70]
    # nextln: 0006e1: 4c 89 f1                        mov rcx, r14
    # nextln: 0006e4: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 0006e9: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 0006ee: 44 23 e8                        and r13d, eax
    # nextln: 0006f1: 4c 89 74 24 50                  mov qword ptr [rsp + 0x50], r14
    # nextln: 0006f6: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 0006fb: 49 89 f3                        mov r11, rsi
    # nextln: 0006fe: 4d 89 ce                        mov r14, r9
    # nextln: 000701: 4c 89 c0                        mov rax, r8
    # nextln: 000704: 4c 89 d6                        mov rsi, r10
    # nextln: 000707: 49 89 fa                        mov r10, rdi
    # nextln: 00070a: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 00070f: 4c 8b 4c 24 60                  mov r9, qword ptr [rsp + 0x60]
    # nextln: 000714: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 00071e: 48 89 54 24 30                  mov qword ptr [rsp + 0x30], rdx
    # nextln: 000723: 48 89 7c 24 40                  mov qword ptr [rsp + 0x40], rdi
    # nextln: 000728: 4c 89 54 24 58                  mov qword ptr [rsp + 0x58], r10
    # nextln: 00072d: 48 89 44 24 48                  mov qword ptr [rsp + 0x48], rax
    # nextln: 000732: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 000737: 48 89 74 24 70                  mov qword ptr [rsp + 0x70], rsi
    # nextln: 00073c: 4c 89 4c 24 60                  mov qword ptr [rsp + 0x60], r9
    # nextln: 000741: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 000746: 48 89 de                        mov rsi, rbx
    # nextln: 000749: 4c 89 ff                        mov rdi, r15
    # nextln: 00074c: 41 ff d0                        call r8
    # nextln: 00074f: 44 23 e8                        and r13d, eax
    # nextln: 000752: 4c 8b 5c 24 20                  mov r11, qword ptr [rsp + 0x20]
    # nextln: 000757: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 00075c: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000761: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 000766: 4c 8b 44 24 58                  mov r8, qword ptr [rsp + 0x58]
    # nextln: 00076b: 48 8b 44 24 48                  mov rax, qword ptr [rsp + 0x48]
    # nextln: 000770: 48 8b 7c 24 60                  mov rdi, qword ptr [rsp + 0x60]
    # nextln: 000775: 4c 8b 4c 24 50                  mov r9, qword ptr [rsp + 0x50]
    # nextln: 00077a: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000784: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 000789: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 00078e: 4c 89 44 24 58                  mov qword ptr [rsp + 0x58], r8
    # nextln: 000793: 48 89 44 24 48                  mov qword ptr [rsp + 0x48], rax
    # nextln: 000798: 48 89 7c 24 60                  mov qword ptr [rsp + 0x60], rdi
    # nextln: 00079d: 4c 89 4c 24 50                  mov qword ptr [rsp + 0x50], r9
    # nextln: 0007a2: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 0007a7: 4c 89 5c 24 20                  mov qword ptr [rsp + 0x20], r11
    # nextln: 0007ac: 4c 89 ff                        mov rdi, r15
    # nextln: 0007af: 4c 89 e6                        mov rsi, r12
    # nextln: 0007b2: 41 ff d2                        call r10
    # nextln: 0007b5: 48 8b 54 24 60                  mov rdx, qword ptr [rsp + 0x60]
    # nextln: 0007ba: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 0007bf: 4c 8b 64 24 18                  mov r12, qword ptr [rsp + 0x18]
    # nextln: 0007c4: 4c 8b 54 24 38                  mov r10, qword ptr [rsp + 0x38]
    # nextln: 0007c9: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 0007ce: 48 8b 7c 24 58                  mov rdi, qword ptr [rsp + 0x58]
    # nextln: 0007d3: 48 8b 74 24 70                  mov rsi, qword ptr [rsp + 0x70]
    # nextln: 0007d8: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 0007dd: 33 c9                           xor ecx, ecx
    # nextln: 0007df: 3b c3                           cmp eax, ebx
    # nextln: 0007e1: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 0007e6: 0f 94 c1                        sete cl
    # nextln: 0007e9: 44 23 e9                        and r13d, ecx
    # nextln: 0007ec: 4c 89 c9                        mov rcx, r9
    # nextln: 0007ef: 4c 89 64 24 18                  mov qword ptr [rsp + 0x18], r12
    # nextln: 0007f4: 4d 89 d4                        mov r12, r10
    # nextln: 0007f7: 4d 89 da                        mov r10, r11
    # nextln: 0007fa: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 0007ff: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 000804: 4c 89 44 24 48                  mov qword ptr [rsp + 0x48], r8
    # nextln: 000809: 49 89 f8                        mov r8, rdi
    # nextln: 00080c: 4c 8b 4c 24 20                  mov r9, qword ptr [rsp + 0x20]
    # nextln: 000811: 48 89 d7                        mov rdi, rdx
    # nextln: 000814: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 000819: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000823: 4c 89 44 24 58                  mov qword ptr [rsp + 0x58], r8
    # nextln: 000828: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 00082d: 4c 89 4c 24 20                  mov qword ptr [rsp + 0x20], r9
    # nextln: 000832: 48 89 54 24 50                  mov qword ptr [rsp + 0x50], rdx
    # nextln: 000837: 4c 89 54 24 28                  mov qword ptr [rsp + 0x28], r10
    # nextln: 00083c: 48 89 7c 24 60                  mov qword ptr [rsp + 0x60], rdi
    # nextln: 000841: 48 89 74 24 70                  mov qword ptr [rsp + 0x70], rsi
    # nextln: 000846: 4c 89 64 24 38                  mov qword ptr [rsp + 0x38], r12
    # nextln: 00084b: 49 89 cc                        mov r12, rcx
    # nextln: 00084e: 4c 89 e6                        mov rsi, r12
    # nextln: 000851: 4c 89 ff                        mov rdi, r15
    # nextln: 000854: ff d0                           call rax
    # nextln: 000856: 4d 89 e1                        mov r9, r12
    # nextln: 000859: 4c 8b 64 24 38                  mov r12, qword ptr [rsp + 0x38]
    # nextln: 00085e: 4c 8b 7c 24 50                  mov r15, qword ptr [rsp + 0x50]
    # nextln: 000863: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000868: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 00086d: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 000872: 48 8b 74 24 60                  mov rsi, qword ptr [rsp + 0x60]
    # nextln: 000877: 48 8b 7c 24 28                  mov rdi, qword ptr [rsp + 0x28]
    # nextln: 00087c: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 000881: 48 8b 4c 24 70                  mov rcx, qword ptr [rsp + 0x70]
    # nextln: 000886: 44 23 e8                        and r13d, eax
    # nextln: 000889: 4c 89 5c 24 48                  mov qword ptr [rsp + 0x48], r11
    # nextln: 00088e: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000893: 4c 89 a4 24 a0 00 00 00         mov qword ptr [rsp + 0xa0], r12
    # nextln: 00089b: 49 89 f4                        mov r12, rsi
    # nextln: 00089e: 48 8b b4 24 a0 00 00 00         mov rsi, qword ptr [rsp + 0xa0]
    # nextln: 0008a6: 4c 89 c8                        mov rax, r9
    # nextln: 0008a9: 4d 89 fb                        mov r11, r15
    # nextln: 0008ac: 49 89 ff                        mov r15, rdi
    # nextln: 0008af: 4c 89 c7                        mov rdi, r8
    # nextln: 0008b2: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 0008b7: 4c 8b 4c 24 58                  mov r9, qword ptr [rsp + 0x58]
    # nextln: 0008bc: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0008c6: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 0008cb: 4c 89 7c 24 28                  mov qword ptr [rsp + 0x28], r15
    # nextln: 0008d0: 4c 89 5c 24 50                  mov qword ptr [rsp + 0x50], r11
    # nextln: 0008d5: 48 89 4c 24 70                  mov qword ptr [rsp + 0x70], rcx
    # nextln: 0008da: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 0008df: 4c 89 64 24 60                  mov qword ptr [rsp + 0x60], r12
    # nextln: 0008e4: 48 89 7c 24 40                  mov qword ptr [rsp + 0x40], rdi
    # nextln: 0008e9: 4d 89 cf                        mov r15, r9
    # nextln: 0008ec: 49 89 c4                        mov r12, rax
    # nextln: 0008ef: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 0008f4: 48 89 de                        mov rsi, rbx
    # nextln: 0008f7: 4c 89 f7                        mov rdi, r14
    # nextln: 0008fa: 41 ff d2                        call r10
    # nextln: 0008fd: 4c 8b 5c 24 20                  mov r11, qword ptr [rsp + 0x20]
    # nextln: 000902: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000907: 48 8b 7c 24 60                  mov rdi, qword ptr [rsp + 0x60]
    # nextln: 00090c: 4c 8b 54 24 10                  mov r10, qword ptr [rsp + 0x10]
    # nextln: 000911: 4c 8b 44 24 70                  mov r8, qword ptr [rsp + 0x70]
    # nextln: 000916: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 00091b: 48 8b 54 24 48                  mov rdx, qword ptr [rsp + 0x48]
    # nextln: 000920: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 000925: 33 c9                           xor ecx, ecx
    # nextln: 000927: 3b c3                           cmp eax, ebx
    # nextln: 000929: 48 8b 44 24 38                  mov rax, qword ptr [rsp + 0x38]
    # nextln: 00092e: 0f 94 c1                        sete cl
    # nextln: 000931: 44 23 e9                        and r13d, ecx
    # nextln: 000934: 48 89 f9                        mov rcx, rdi
    # nextln: 000937: 4c 89 4c 24 18                  mov qword ptr [rsp + 0x18], r9
    # nextln: 00093c: 4d 89 f9                        mov r9, r15
    # nextln: 00093f: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000944: 4d 89 f7                        mov r15, r14
    # nextln: 000947: 4d 89 de                        mov r14, r11
    # nextln: 00094a: 4d 89 e3                        mov r11, r12
    # nextln: 00094d: 4d 89 d4                        mov r12, r10
    # nextln: 000950: 4d 89 c2                        mov r10, r8
    # nextln: 000953: 49 89 f0                        mov r8, rsi
    # nextln: 000956: 48 89 c6                        mov rsi, rax
    # nextln: 000959: 0f b7 84 24 b4 00 00 00         movzx eax, word ptr [rsp + 0xb4]
    # nextln: 000961: 48 89 7c 24 40                  mov qword ptr [rsp + 0x40], rdi
    # nextln: 000966: 0f bf f8                        movsx edi, ax
    # nextln: 000969: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000973: 4c 89 44 24 28                  mov qword ptr [rsp + 0x28], r8
    # nextln: 000978: 48 89 54 24 48                  mov qword ptr [rsp + 0x48], rdx
    # nextln: 00097d: 4c 89 5c 24 30                  mov qword ptr [rsp + 0x30], r11
    # nextln: 000982: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000987: 4c 89 74 24 20                  mov qword ptr [rsp + 0x20], r14
    # nextln: 00098c: 4c 89 64 24 10                  mov qword ptr [rsp + 0x10], r12
    # nextln: 000991: 49 89 cc                        mov r12, rcx
    # nextln: 000994: 4c 89 7c 24 50                  mov qword ptr [rsp + 0x50], r15
    # nextln: 000999: 4d 89 cf                        mov r15, r9
    # nextln: 00099c: 4d 89 d6                        mov r14, r10
    # nextln: 00099f: 4c 89 f6                        mov rsi, r14
    # nextln: 0009a2: ff d0                           call rax
    # nextln: 0009a4: 44 23 e8                        and r13d, eax
    # nextln: 0009a7: 4c 89 f8                        mov rax, r15
    # nextln: 0009aa: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0009af: 48 8b 4c 24 48                  mov rcx, qword ptr [rsp + 0x48]
    # nextln: 0009b4: 4d 89 f0                        mov r8, r14
    # nextln: 0009b7: 4c 8b 74 24 20                  mov r14, qword ptr [rsp + 0x20]
    # nextln: 0009bc: 4c 8b 5c 24 30                  mov r11, qword ptr [rsp + 0x30]
    # nextln: 0009c1: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0009c6: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 0009cb: 4c 8b 54 24 10                  mov r10, qword ptr [rsp + 0x10]
    # nextln: 0009d0: 4c 8b 7c 24 40                  mov r15, qword ptr [rsp + 0x40]
    # nextln: 0009d5: 0f b7 bc 24 b4 00 00 00         movzx edi, word ptr [rsp + 0xb4]
    # nextln: 0009dd: 0f bf ff                        movsx edi, di
    # nextln: 0009e0: 48 89 44 24 58                  mov qword ptr [rsp + 0x58], rax
    # nextln: 0009e5: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0009ef: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 0009f4: 48 89 4c 24 48                  mov qword ptr [rsp + 0x48], rcx
    # nextln: 0009f9: 4c 89 74 24 20                  mov qword ptr [rsp + 0x20], r14
    # nextln: 0009fe: 4c 89 44 24 70                  mov qword ptr [rsp + 0x70], r8
    # nextln: 000a03: 4c 89 5c 24 30                  mov qword ptr [rsp + 0x30], r11
    # nextln: 000a08: 4c 89 54 24 10                  mov qword ptr [rsp + 0x10], r10
    # nextln: 000a0d: 4c 89 4c 24 18                  mov qword ptr [rsp + 0x18], r9
    # nextln: 000a12: 4c 89 7c 24 40                  mov qword ptr [rsp + 0x40], r15
    # nextln: 000a17: 49 89 f7                        mov r15, rsi
    # nextln: 000a1a: 4c 8b 74 24 58                  mov r14, qword ptr [rsp + 0x58]
    # nextln: 000a1f: 4c 89 e6                        mov rsi, r12
    # nextln: 000a22: ff d0                           call rax
    # nextln: 000a24: 44 23 e8                        and r13d, eax
    # nextln: 000a27: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000a2c: 4c 89 fa                        mov rdx, r15
    # nextln: 000a2f: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 000a34: 4c 8b 44 24 30                  mov r8, qword ptr [rsp + 0x30]
    # nextln: 000a39: 4c 8b 7c 24 40                  mov r15, qword ptr [rsp + 0x40]
    # nextln: 000a3e: 4c 89 f7                        mov rdi, r14
    # nextln: 000a41: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000a46: 48 8b 74 24 70                  mov rsi, qword ptr [rsp + 0x70]
    # nextln: 000a4b: 4c 8b 74 24 10                  mov r14, qword ptr [rsp + 0x10]
    # nextln: 000a50: 4c 8b 5c 24 50                  mov r11, qword ptr [rsp + 0x50]
    # nextln: 000a55: 0f b7 84 24 b2 00 00 00         movzx eax, word ptr [rsp + 0xb2]
    # nextln: 000a5d: 48 89 7c 24 58                  mov qword ptr [rsp + 0x58], rdi
    # nextln: 000a62: 0f bf f8                        movsx edi, ax
    # nextln: 000a65: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000a6f: 4c 89 44 24 30                  mov qword ptr [rsp + 0x30], r8
    # nextln: 000a74: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000a79: 4c 89 4c 24 18                  mov qword ptr [rsp + 0x18], r9
    # nextln: 000a7e: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 000a83: 4c 89 7c 24 40                  mov qword ptr [rsp + 0x40], r15
    # nextln: 000a88: 4c 8b 7c 24 48                  mov r15, qword ptr [rsp + 0x48]
    # nextln: 000a8d: 4c 89 5c 24 50                  mov qword ptr [rsp + 0x50], r11
    # nextln: 000a92: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000a97: 48 89 74 24 70                  mov qword ptr [rsp + 0x70], rsi
    # nextln: 000a9c: 48 89 de                        mov rsi, rbx
    # nextln: 000a9f: ff d0                           call rax
    # nextln: 000aa1: 44 23 e8                        and r13d, eax
    # nextln: 000aa4: 4c 8b 44 24 30                  mov r8, qword ptr [rsp + 0x30]
    # nextln: 000aa9: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000aae: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 000ab3: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 000ab8: 4c 89 7c 24 48                  mov qword ptr [rsp + 0x48], r15
    # nextln: 000abd: 4c 8b 7c 24 40                  mov r15, qword ptr [rsp + 0x40]
    # nextln: 000ac2: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000ac7: 4d 89 f1                        mov r9, r14
    # nextln: 000aca: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 000acf: 48 8b 74 24 70                  mov rsi, qword ptr [rsp + 0x70]
    # nextln: 000ad4: 48 8b 7c 24 58                  mov rdi, qword ptr [rsp + 0x58]
    # nextln: 000ad9: 0f b7 84 24 b2 00 00 00         movzx eax, word ptr [rsp + 0xb2]
    # nextln: 000ae1: 48 89 7c 24 58                  mov qword ptr [rsp + 0x58], rdi
    # nextln: 000ae6: 0f bf f8                        movsx edi, ax
    # nextln: 000ae9: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000af3: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 000af8: 48 89 74 24 70                  mov qword ptr [rsp + 0x70], rsi
    # nextln: 000afd: 4c 89 44 24 30                  mov qword ptr [rsp + 0x30], r8
    # nextln: 000b02: 4c 89 7c 24 40                  mov qword ptr [rsp + 0x40], r15
    # nextln: 000b07: 49 89 cf                        mov r15, rcx
    # nextln: 000b0a: 4c 89 4c 24 10                  mov qword ptr [rsp + 0x10], r9
    # nextln: 000b0f: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 000b14: 4c 89 74 24 50                  mov qword ptr [rsp + 0x50], r14
    # nextln: 000b19: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000b1e: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 000b23: 4c 89 e6                        mov rsi, r12
    # nextln: 000b26: ff d0                           call rax
    # nextln: 000b28: 33 c9                           xor ecx, ecx
    # nextln: 000b2a: 3b c3                           cmp eax, ebx
    # nextln: 000b2c: 0f 94 c1                        sete cl
    # nextln: 000b2f: 44 23 e9                        and r13d, ecx
    # nextln: 000b32: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000b37: 4c 8b 4c 24 10                  mov r9, qword ptr [rsp + 0x10]
    # nextln: 000b3c: 4c 8b 44 24 30                  mov r8, qword ptr [rsp + 0x30]
    # nextln: 000b41: 4c 89 fe                        mov rsi, r15
    # nextln: 000b44: 48 8b 44 24 50                  mov rax, qword ptr [rsp + 0x50]
    # nextln: 000b49: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 000b4e: 4c 89 f1                        mov rcx, r14
    # nextln: 000b51: 4c 8b 74 24 40                  mov r14, qword ptr [rsp + 0x40]
    # nextln: 000b56: 4c 8b 7c 24 58                  mov r15, qword ptr [rsp + 0x58]
    # nextln: 000b5b: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000b60: 0f b7 bc 24 b2 00 00 00         movzx edi, word ptr [rsp + 0xb2]
    # nextln: 000b68: 0f bf ff                        movsx edi, di
    # nextln: 000b6b: 48 89 44 24 50                  mov qword ptr [rsp + 0x50], rax
    # nextln: 000b70: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000b7a: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 000b7f: 4c 89 74 24 40                  mov qword ptr [rsp + 0x40], r14
    # nextln: 000b84: 4d 89 c6                        mov r14, r8
    # nextln: 000b87: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000b8c: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 000b91: 48 89 4c 24 48                  mov qword ptr [rsp + 0x48], rcx
    # nextln: 000b96: 4c 89 54 24 20                  mov qword ptr [rsp + 0x20], r10
    # nextln: 000b9b: 4c 89 4c 24 10                  mov qword ptr [rsp + 0x10], r9
    # nextln: 000ba0: 4c 89 f6                        mov rsi, r14
    # nextln: 000ba3: ff d0                           call rax
    # nextln: 000ba5: 44 23 e8                        and r13d, eax
    # nextln: 000ba8: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 000bad: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000bb2: 4c 8b 4c 24 20                  mov r9, qword ptr [rsp + 0x20]
    # nextln: 000bb7: 4c 8b 54 24 18                  mov r10, qword ptr [rsp + 0x18]
    # nextln: 000bbc: 48 8b 7c 24 50                  mov rdi, qword ptr [rsp + 0x50]
    # nextln: 000bc1: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 000bc6: 4c 89 f6                        mov rsi, r14
    # nextln: 000bc9: 4c 8b 74 24 70                  mov r14, qword ptr [rsp + 0x70]
    # nextln: 000bce: 4c 8b 44 24 10                  mov r8, qword ptr [rsp + 0x10]
    # nextln: 000bd3: 0f b7 84 24 b0 00 00 00         movzx eax, word ptr [rsp + 0xb0]
    # nextln: 000bdb: 48 89 7c 24 50                  mov qword ptr [rsp + 0x50], rdi
    # nextln: 000be0: 0f bf f8                        movsx edi, ax
    # nextln: 000be3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000bed: 48 89 74 24 30                  mov qword ptr [rsp + 0x30], rsi
    # nextln: 000bf2: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000bf7: 4c 89 4c 24 20                  mov qword ptr [rsp + 0x20], r9
    # nextln: 000bfc: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 000c01: 4c 89 54 24 18                  mov qword ptr [rsp + 0x18], r10
    # nextln: 000c06: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 000c0b: 4c 89 44 24 10                  mov qword ptr [rsp + 0x10], r8
    # nextln: 000c10: 48 89 de                        mov rsi, rbx
    # nextln: 000c13: ff d0                           call rax
    # nextln: 000c15: 33 c9                           xor ecx, ecx
    # nextln: 000c17: 3b c3                           cmp eax, ebx
    # nextln: 000c19: 0f 94 c1                        sete cl
    # nextln: 000c1c: 44 23 e9                        and r13d, ecx
    # nextln: 000c1f: 4c 8b 44 24 30                  mov r8, qword ptr [rsp + 0x30]
    # nextln: 000c24: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000c29: 4c 8b 54 24 28                  mov r10, qword ptr [rsp + 0x28]
    # nextln: 000c2e: 4c 8b 4c 24 50                  mov r9, qword ptr [rsp + 0x50]
    # nextln: 000c33: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 000c38: 48 8b 44 24 48                  mov rax, qword ptr [rsp + 0x48]
    # nextln: 000c3d: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 000c42: 4c 8b 5c 24 10                  mov r11, qword ptr [rsp + 0x10]
    # nextln: 000c47: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000c51: 48 89 44 24 48                  mov qword ptr [rsp + 0x48], rax
    # nextln: 000c56: 4c 89 44 24 30                  mov qword ptr [rsp + 0x30], r8
    # nextln: 000c5b: 4c 89 4c 24 50                  mov qword ptr [rsp + 0x50], r9
    # nextln: 000c60: 4c 89 5c 24 10                  mov qword ptr [rsp + 0x10], r11
    # nextln: 000c65: 48 89 7c 24 40                  mov qword ptr [rsp + 0x40], rdi
    # nextln: 000c6a: 4c 89 54 24 28                  mov qword ptr [rsp + 0x28], r10
    # nextln: 000c6f: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 000c74: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 000c79: 48 8b 7c 24 68                  mov rdi, qword ptr [rsp + 0x68]
    # nextln: 000c7e: 4c 89 f6                        mov rsi, r14
    # nextln: 000c81: ff d1                           call rcx
    # nextln: 000c83: 4c 8b 4c 24 38                  mov r9, qword ptr [rsp + 0x38]
    # nextln: 000c88: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000c8d: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 000c92: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 000c97: 4c 8b 54 24 28                  mov r10, qword ptr [rsp + 0x28]
    # nextln: 000c9c: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 000ca1: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000ca6: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000cab: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 000cb0: 44 23 e8                        and r13d, eax
    # nextln: 000cb3: 4c 89 c8                        mov rax, r9
    # nextln: 000cb6: 4d 89 c1                        mov r9, r8
    # nextln: 000cb9: 49 89 d0                        mov r8, rdx
    # nextln: 000cbc: 4c 89 d2                        mov rdx, r10
    # nextln: 000cbf: 4d 89 da                        mov r10, r11
    # nextln: 000cc2: 49 89 f3                        mov r11, rsi
    # nextln: 000cc5: 48 89 c6                        mov rsi, rax
    # nextln: 000cc8: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000cd2: 48 89 7c 24 48                  mov qword ptr [rsp + 0x48], rdi
    # nextln: 000cd7: 4c 89 5c 24 30                  mov qword ptr [rsp + 0x30], r11
    # nextln: 000cdc: 4c 89 54 24 18                  mov qword ptr [rsp + 0x18], r10
    # nextln: 000ce1: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 000ce6: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 000ceb: 4c 89 4c 24 40                  mov qword ptr [rsp + 0x40], r9
    # nextln: 000cf0: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 000cf5: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000cfa: 48 8b 7c 24 68                  mov rdi, qword ptr [rsp + 0x68]
    # nextln: 000cff: 4c 89 e6                        mov rsi, r12
    # nextln: 000d02: ff d0                           call rax
    # nextln: 000d04: 48 8b 4c 24 20                  mov rcx, qword ptr [rsp + 0x20]
    # nextln: 000d09: 44 23 e8                        and r13d, eax
    # nextln: 000d0c: 4c 8b 4c 24 40                  mov r9, qword ptr [rsp + 0x40]
    # nextln: 000d11: 4c 8b 54 24 48                  mov r10, qword ptr [rsp + 0x48]
    # nextln: 000d16: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000d1b: 48 8b 7c 24 28                  mov rdi, qword ptr [rsp + 0x28]
    # nextln: 000d20: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000d25: 4c 8b 5c 24 10                  mov r11, qword ptr [rsp + 0x10]
    # nextln: 000d2a: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 000d2f: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000d39: 4c 89 5c 24 10                  mov qword ptr [rsp + 0x10], r11
    # nextln: 000d3e: 4c 89 4c 24 40                  mov qword ptr [rsp + 0x40], r9
    # nextln: 000d43: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 000d48: 48 89 4c 24 20                  mov qword ptr [rsp + 0x20], rcx
    # nextln: 000d4d: 48 89 7c 24 28                  mov qword ptr [rsp + 0x28], rdi
    # nextln: 000d52: 48 89 74 24 30                  mov qword ptr [rsp + 0x30], rsi
    # nextln: 000d57: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 000d5c: 4c 89 54 24 48                  mov qword ptr [rsp + 0x48], r10
    # nextln: 000d61: 48 89 de                        mov rsi, rbx
    # nextln: 000d64: 4c 89 ff                        mov rdi, r15
    # nextln: 000d67: 41 ff d0                        call r8
    # nextln: 000d6a: 44 23 e8                        and r13d, eax
    # nextln: 000d6d: 48 8b 7c 24 10                  mov rdi, qword ptr [rsp + 0x10]
    # nextln: 000d72: 48 8b 44 24 40                  mov rax, qword ptr [rsp + 0x40]
    # nextln: 000d77: 4c 8b 54 24 48                  mov r10, qword ptr [rsp + 0x48]
    # nextln: 000d7c: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 000d81: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000d86: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 000d8b: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 000d90: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 000d95: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000d9f: 48 89 7c 24 10                  mov qword ptr [rsp + 0x10], rdi
    # nextln: 000da4: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000da9: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000dae: 4c 89 54 24 48                  mov qword ptr [rsp + 0x48], r10
    # nextln: 000db3: 4c 89 4c 24 30                  mov qword ptr [rsp + 0x30], r9
    # nextln: 000db8: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 000dbd: 48 89 44 24 40                  mov qword ptr [rsp + 0x40], rax
    # nextln: 000dc2: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 000dc7: 4c 89 e6                        mov rsi, r12
    # nextln: 000dca: 4c 89 ff                        mov rdi, r15
    # nextln: 000dcd: 41 ff d0                        call r8
    # nextln: 000dd0: 4d 89 f4                        mov r12, r14
    # nextln: 000dd3: 4c 8b 5c 24 38                  mov r11, qword ptr [rsp + 0x38]
    # nextln: 000dd8: 4c 8b 44 24 28                  mov r8, qword ptr [rsp + 0x28]
    # nextln: 000ddd: 48 8b 4c 24 20                  mov rcx, qword ptr [rsp + 0x20]
    # nextln: 000de2: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000de7: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 000dec: 4c 8b 54 24 48                  mov r10, qword ptr [rsp + 0x48]
    # nextln: 000df1: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 000df6: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000dfb: 45 33 f6                        xor r14d, r14d
    # nextln: 000dfe: 3b c3                           cmp eax, ebx
    # nextln: 000e00: 41 0f 94 c6                     sete r14b
    # nextln: 000e04: 45 23 ee                        and r13d, r14d
    # nextln: 000e07: 4c 89 d0                        mov rax, r10
    # nextln: 000e0a: 49 89 f2                        mov r10, rsi
    # nextln: 000e0d: 4c 89 de                        mov rsi, r11
    # nextln: 000e10: 49 89 fb                        mov r11, rdi
    # nextln: 000e13: 4c 89 c7                        mov rdi, r8
    # nextln: 000e16: 4d 89 c8                        mov r8, r9
    # nextln: 000e19: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000e23: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 000e28: 48 89 4c 24 20                  mov qword ptr [rsp + 0x20], rcx
    # nextln: 000e2d: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000e32: 48 89 7c 24 28                  mov qword ptr [rsp + 0x28], rdi
    # nextln: 000e37: 4c 89 5c 24 40                  mov qword ptr [rsp + 0x40], r11
    # nextln: 000e3c: 4d 89 d6                        mov r14, r10
    # nextln: 000e3f: 48 89 44 24 48                  mov qword ptr [rsp + 0x48], rax
    # nextln: 000e44: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 000e49: 4c 89 f6                        mov rsi, r14
    # nextln: 000e4c: 4c 89 ff                        mov rdi, r15
    # nextln: 000e4f: 41 ff d1                        call r9
    # nextln: 000e52: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000e57: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 000e5c: 4c 8b 7c 24 40                  mov r15, qword ptr [rsp + 0x40]
    # nextln: 000e61: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 000e66: 4c 8b 4c 24 28                  mov r9, qword ptr [rsp + 0x28]
    # nextln: 000e6b: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 000e70: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 000e75: 44 23 e8                        and r13d, eax
    # nextln: 000e78: 48 89 f0                        mov rax, rsi
    # nextln: 000e7b: 4c 89 ce                        mov rsi, r9
    # nextln: 000e7e: 4d 89 c1                        mov r9, r8
    # nextln: 000e81: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000e8b: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 000e90: 48 89 7c 24 38                  mov qword ptr [rsp + 0x38], rdi
    # nextln: 000e95: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 000e9a: 48 89 44 24 48                  mov qword ptr [rsp + 0x48], rax
    # nextln: 000e9f: 4c 89 4c 24 18                  mov qword ptr [rsp + 0x18], r9
    # nextln: 000ea4: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 000ea9: 48 89 de                        mov rsi, rbx
    # nextln: 000eac: 4c 89 e7                        mov rdi, r12
    # nextln: 000eaf: 41 ff d0                        call r8
    # nextln: 000eb2: 4c 8b 64 24 48                  mov r12, qword ptr [rsp + 0x48]
    # nextln: 000eb7: 48 8b 4c 24 20                  mov rcx, qword ptr [rsp + 0x20]
    # nextln: 000ebc: 4c 8b 44 24 28                  mov r8, qword ptr [rsp + 0x28]
    # nextln: 000ec1: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 000ec6: 48 8b 7c 24 18                  mov rdi, qword ptr [rsp + 0x18]
    # nextln: 000ecb: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 000ed0: 45 33 c9                        xor r9d, r9d
    # nextln: 000ed3: 3b c3                           cmp eax, ebx
    # nextln: 000ed5: 41 0f 94 c1                     sete r9b
    # nextln: 000ed9: 45 23 e9                        and r13d, r9d
    # nextln: 000edc: 48 89 f8                        mov rax, rdi
    # nextln: 000edf: 8b bc 24 ac 00 00 00            mov edi, dword ptr [rsp + 0xac]
    # nextln: 000ee6: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000ef0: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 000ef5: 48 89 4c 24 20                  mov qword ptr [rsp + 0x20], rcx
    # nextln: 000efa: 4c 89 44 24 28                  mov qword ptr [rsp + 0x28], r8
    # nextln: 000eff: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000f04: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 000f09: 48 89 de                        mov rsi, rbx
    # nextln: 000f0c: 41 ff d1                        call r9
    # nextln: 000f0f: 44 23 e8                        and r13d, eax
    # nextln: 000f12: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000f17: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 000f1c: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000f21: 4c 8b 44 24 38                  mov r8, qword ptr [rsp + 0x38]
    # nextln: 000f26: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000f2b: 8b bc 24 ac 00 00 00            mov edi, dword ptr [rsp + 0xac]
    # nextln: 000f32: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000f3c: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 000f41: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 000f46: 4c 89 44 24 38                  mov qword ptr [rsp + 0x38], r8
    # nextln: 000f4b: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 000f50: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 000f55: 4c 89 f6                        mov rsi, r14
    # nextln: 000f58: 41 ff d1                        call r9
    # nextln: 000f5b: 44 23 e8                        and r13d, eax
    # nextln: 000f5e: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000f63: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 000f68: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000f6d: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000f72: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 000f77: 8b bc 24 a8 00 00 00            mov edi, dword ptr [rsp + 0xa8]
    # nextln: 000f7e: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000f88: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 000f8d: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 000f92: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 000f97: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 000f9c: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 000fa1: 48 89 de                        mov rsi, rbx
    # nextln: 000fa4: 41 ff d1                        call r9
    # nextln: 000fa7: 33 c9                           xor ecx, ecx
    # nextln: 000fa9: 3b c3                           cmp eax, ebx
    # nextln: 000fab: 0f 94 c1                        sete cl
    # nextln: 000fae: 44 23 e9                        and r13d, ecx
    # nextln: 000fb1: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000fb6: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 000fbb: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000fc0: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000fc5: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 000fca: 8b bc 24 ac 00 00 00            mov edi, dword ptr [rsp + 0xac]
    # nextln: 000fd1: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000fdb: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 000fe0: 4c 89 44 24 20                  mov qword ptr [rsp + 0x20], r8
    # nextln: 000fe5: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 000fea: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 000fef: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 000ff4: 48 89 de                        mov rsi, rbx
    # nextln: 000ff7: 41 ff d1                        call r9
    # nextln: 000ffa: 33 c9                           xor ecx, ecx
    # nextln: 000ffc: 3b c3                           cmp eax, ebx
    # nextln: 000ffe: 0f 94 c1                        sete cl
    # nextln: 001001: 44 23 e9                        and r13d, ecx
    # nextln: 001004: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 001009: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 00100e: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 001013: 48 8b 44 24 38                  mov rax, qword ptr [rsp + 0x38]
    # nextln: 001018: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 00101d: 8b bc 24 ac 00 00 00            mov edi, dword ptr [rsp + 0xac]
    # nextln: 001024: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 00102e: 48 89 54 24 28                  mov qword ptr [rsp + 0x28], rdx
    # nextln: 001033: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 001038: 48 89 44 24 38                  mov qword ptr [rsp + 0x38], rax
    # nextln: 00103d: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 001042: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 001047: 4c 89 f6                        mov rsi, r14
    # nextln: 00104a: 41 ff d1                        call r9
    # nextln: 00104d: 33 c9                           xor ecx, ecx
    # nextln: 00104f: 3b c3                           cmp eax, ebx
    # nextln: 001051: 0f 94 c1                        sete cl
    # nextln: 001054: 44 23 e9                        and r13d, ecx
    # nextln: 001057: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 00105c: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 001061: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 001066: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 00106b: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 001070: 8b bc 24 a8 00 00 00            mov edi, dword ptr [rsp + 0xa8]
    # nextln: 001077: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 001081: 48 89 74 24 28                  mov qword ptr [rsp + 0x28], rsi
    # nextln: 001086: 48 89 54 24 38                  mov qword ptr [rsp + 0x38], rdx
    # nextln: 00108b: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 001090: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 001095: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 00109a: 48 89 de                        mov rsi, rbx
    # nextln: 00109d: 41 ff d1                        call r9
    # nextln: 0010a0: 44 23 e8                        and r13d, eax
    # nextln: 0010a3: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 0010a8: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 0010ad: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 0010b2: 48 8b 74 24 10                  mov rsi, qword ptr [rsp + 0x10]
    # nextln: 0010b7: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 0010bc: 8b bc 24 ac 00 00 00            mov edi, dword ptr [rsp + 0xac]
    # nextln: 0010c3: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 0010cd: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 0010d2: 48 89 54 24 20                  mov qword ptr [rsp + 0x20], rdx
    # nextln: 0010d7: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 0010dc: 48 89 74 24 10                  mov qword ptr [rsp + 0x10], rsi
    # nextln: 0010e1: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 0010e6: 48 89 de                        mov rsi, rbx
    # nextln: 0010e9: 41 ff d1                        call r9
    # nextln: 0010ec: 33 c9                           xor ecx, ecx
    # nextln: 0010ee: 3b c3                           cmp eax, ebx
    # nextln: 0010f0: 0f 94 c1                        sete cl
    # nextln: 0010f3: 44 23 e9                        and r13d, ecx
    # nextln: 0010f6: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0010fb: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 001100: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 001105: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 00110a: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 00110f: 8b bc 24 ac 00 00 00            mov edi, dword ptr [rsp + 0xac]
    # nextln: 001116: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 001120: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 001125: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 00112a: 48 89 44 24 20                  mov qword ptr [rsp + 0x20], rax
    # nextln: 00112f: 48 89 4c 24 28                  mov qword ptr [rsp + 0x28], rcx
    # nextln: 001134: 48 89 74 24 38                  mov qword ptr [rsp + 0x38], rsi
    # nextln: 001139: 4c 89 f6                        mov rsi, r14
    # nextln: 00113c: 41 ff d1                        call r9
    # nextln: 00113f: 33 c9                           xor ecx, ecx
    # nextln: 001141: 3b c3                           cmp eax, ebx
    # nextln: 001143: 0f 94 c1                        sete cl
    # nextln: 001146: 44 23 e9                        and r13d, ecx
    # nextln: 001149: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 00114e: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 001153: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 001158: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 00115d: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 001162: 8b bc 24 a8 00 00 00            mov edi, dword ptr [rsp + 0xa8]
    # nextln: 001169: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 001173: 48 89 74 24 20                  mov qword ptr [rsp + 0x20], rsi
    # nextln: 001178: 4c 89 44 24 18                  mov qword ptr [rsp + 0x18], r8
    # nextln: 00117d: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 001182: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 001187: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 00118c: 48 89 de                        mov rsi, rbx
    # nextln: 00118f: 41 ff d1                        call r9
    # nextln: 001192: 33 c9                           xor ecx, ecx
    # nextln: 001194: 41 3b c4                        cmp eax, r12d
    # nextln: 001197: 4c 8b 64 24 20                  mov r12, qword ptr [rsp + 0x20]
    # nextln: 00119c: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 0011a1: 48 8b 44 24 38                  mov rax, qword ptr [rsp + 0x38]
    # nextln: 0011a6: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 0011ab: 48 8b 7c 24 10                  mov rdi, qword ptr [rsp + 0x10]
    # nextln: 0011b0: 0f 94 c1                        sete cl
    # nextln: 0011b3: 44 23 e9                        and r13d, ecx
    # nextln: 0011b6: 48 89 c1                        mov rcx, rax
    # nextln: 0011b9: 48 89 d0                        mov rax, rdx
    # nextln: 0011bc: 48 89 f2                        mov rdx, rsi
    # nextln: 0011bf: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 0011c9: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 0011ce: 48 89 4c 24 38                  mov qword ptr [rsp + 0x38], rcx
    # nextln: 0011d3: 48 89 7c 24 10                  mov qword ptr [rsp + 0x10], rdi
    # nextln: 0011d8: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 0011dd: 48 89 de                        mov rsi, rbx
    # nextln: 0011e0: 4c 89 ff                        mov rdi, r15
    # nextln: 0011e3: 41 ff d0                        call r8
    # nextln: 0011e6: 44 23 e8                        and r13d, eax
    # nextln: 0011e9: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 0011ee: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 0011f3: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0011f8: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0011fd: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 001207: 48 89 44 24 28                  mov qword ptr [rsp + 0x28], rax
    # nextln: 00120c: 48 89 7c 24 38                  mov qword ptr [rsp + 0x38], rdi
    # nextln: 001211: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 001216: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 00121b: 4c 89 ff                        mov rdi, r15
    # nextln: 00121e: 4c 89 f6                        mov rsi, r14
    # nextln: 001221: 41 ff d0                        call r8
    # nextln: 001224: 4d 89 e7                        mov r15, r12
    # nextln: 001227: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 00122c: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 001231: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 001236: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 00123b: 44 23 e8                        and r13d, eax
    # nextln: 00123e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 001248: 49 89 cc                        mov r12, rcx
    # nextln: 00124b: 48 89 74 24 18                  mov qword ptr [rsp + 0x18], rsi
    # nextln: 001250: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 001255: 48 89 de                        mov rsi, rbx
    # nextln: 001258: ff d0                           call rax
    # nextln: 00125a: 33 c9                           xor ecx, ecx
    # nextln: 00125c: 3b c3                           cmp eax, ebx
    # nextln: 00125e: 0f 94 c1                        sete cl
    # nextln: 001261: 44 23 e9                        and r13d, ecx
    # nextln: 001264: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001269: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 00126e: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 001273: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 00127d: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 001282: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 001287: 48 89 de                        mov rsi, rbx
    # nextln: 00128a: ff d2                           call rdx
    # nextln: 00128c: 44 23 e8                        and r13d, eax
    # nextln: 00128f: 48 8b 44 24 10                  mov rax, qword ptr [rsp + 0x10]
    # nextln: 001294: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 001299: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 00129e: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0012a8: 48 89 4c 24 18                  mov qword ptr [rsp + 0x18], rcx
    # nextln: 0012ad: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 0012b2: 4c 89 f6                        mov rsi, r14
    # nextln: 0012b5: ff d2                           call rdx
    # nextln: 0012b7: 33 c9                           xor ecx, ecx
    # nextln: 0012b9: 3b c3                           cmp eax, ebx
    # nextln: 0012bb: 0f 94 c1                        sete cl
    # nextln: 0012be: 44 23 e9                        and r13d, ecx
    # nextln: 0012c1: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0012c6: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0012cb: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 0012d0: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 0012da: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 0012df: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 0012e4: 4c 89 e6                        mov rsi, r12
    # nextln: 0012e7: ff d2                           call rdx
    # nextln: 0012e9: 44 23 e8                        and r13d, eax
    # nextln: 0012ec: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 0012f1: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 0012f6: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 0012fa: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 001304: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 001309: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 00130e: 48 89 de                        mov rsi, rbx
    # nextln: 001311: ff d2                           call rdx
    # nextln: 001313: 33 c9                           xor ecx, ecx
    # nextln: 001315: 3b c3                           cmp eax, ebx
    # nextln: 001317: 0f 94 c1                        sete cl
    # nextln: 00131a: 44 23 e9                        and r13d, ecx
    # nextln: 00131d: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 001322: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 001327: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 001331: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 001336: 48 89 54 24 18                  mov qword ptr [rsp + 0x18], rdx
    # nextln: 00133b: 48 89 de                        mov rsi, rbx
    # nextln: 00133e: 4c 89 ff                        mov rdi, r15
    # nextln: 001341: ff d0                           call rax
    # nextln: 001343: 44 23 e8                        and r13d, eax
    # nextln: 001346: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 00134b: 48 8b 54 24 10                  mov rdx, qword ptr [rsp + 0x10]
    # nextln: 001350: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 00135a: 48 89 54 24 10                  mov qword ptr [rsp + 0x10], rdx
    # nextln: 00135f: 48 89 44 24 18                  mov qword ptr [rsp + 0x18], rax
    # nextln: 001364: 4c 89 ff                        mov rdi, r15
    # nextln: 001367: 4c 89 f6                        mov rsi, r14
    # nextln: 00136a: ff d1                           call rcx
    # nextln: 00136c: 48 8b 4c 24 10                  mov rcx, qword ptr [rsp + 0x10]
    # nextln: 001371: 4c 8b 74 24 18                  mov r14, qword ptr [rsp + 0x18]
    # nextln: 001376: 4c 89 e6                        mov rsi, r12
    # nextln: 001379: 49 89 c4                        mov r12, rax
    # nextln: 00137c: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 001386: 48 89 4c 24 10                  mov qword ptr [rsp + 0x10], rcx
    # nextln: 00138b: 4c 89 ff                        mov rdi, r15
    # nextln: 00138e: ff d0                           call rax
    # nextln: 001390: 4c 8b 7c 24 10                  mov r15, qword ptr [rsp + 0x10]
    # nextln: 001395: 33 c9                           xor ecx, ecx
    # nextln: 001397: 44 3b e3                        cmp r12d, ebx
    # nextln: 00139a: 0f 94 c1                        sete cl
    # nextln: 00139d: 44 23 e9                        and r13d, ecx
    # nextln: 0013a0: 44 23 e8                        and r13d, eax
    # nextln: 0013a3: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 0013ad: 4c 89 f7                        mov rdi, r14
    # nextln: 0013b0: 48 89 de                        mov rsi, rbx
    # nextln: 0013b3: ff d0                           call rax
    # nextln: 0013b5: 33 c9                           xor ecx, ecx
    # nextln: 0013b7: 3b c3                           cmp eax, ebx
    # nextln: 0013b9: 0f 94 c1                        sete cl
    # nextln: 0013bc: 44 23 e9                        and r13d, ecx
    # nextln: 0013bf: 45 85 ed                        test r13d, r13d
    # nextln: 0013c2: 0f 84 15 00 00 00               je 0x13dd
    # nextln: 0013c8: 4c 89 f8                        mov rax, r15
    # nextln: 0013cb: 48 81 c4 c8 00 00 00            add rsp, 0xc8
    # nextln: 0013d2: 5b                              pop rbx
    # nextln: 0013d3: 41 5c                           pop r12
    # nextln: 0013d5: 41 5d                           pop r13
    # nextln: 0013d7: 41 5e                           pop r14
    # nextln: 0013d9: 41 5f                           pop r15
    # nextln: 0013db: 5d                              pop rbp
    # nextln: 0013dc: c3                              ret
    # nextln: 0013dd: 48 89 d8                        mov rax, rbx
    # nextln: 0013e0: 48 81 c4 c8 00 00 00            add rsp, 0xc8
    # nextln: 0013e7: 5b                              pop rbx
    # nextln: 0013e8: 41 5c                           pop r12
    # nextln: 0013ea: 41 5d                           pop r13
    # nextln: 0013ec: 41 5e                           pop r14
    # nextln: 0013ee: 41 5f                           pop r15
    # nextln: 0013f0: 5d                              pop rbp
    # nextln: 0013f1: c3                              ret

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i32 = iconst 1
    %5:i64 = iext %4
    %6:i64 = sfill 32 %5
    %7:i32 = iconst 3
    %8:ptr = stackslot 8:8
    %9:i32 = iconst 64
    %10:ptr = stackslot 8:8
    %11:i32 = iconst 32
    %12:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %14:ptr = stackslot 2:2
    %15:ptr = stackslot 2:2
    %16:i32 = iconst 16
    %17:ptr = stackslot 2:2
    %18:i32 = iconst 15
    %19:ptr = stackslot 1:1
    %20:ptr = stackslot 1:1
    %21:i32 = iconst 8
    %22:ptr = stackslot 1:1
    %23:ctrl = store.1 %1, %3, %22
    %24:ctrl = store.1 %23, %3, %20
    %25:ctrl = store.1 %24, %3, %19
    %26:ctrl = store.2 %25, %3, %17
    %27:ctrl = store.2 %26, %3, %15
    %28:ctrl = store.2 %27, %3, %14
    %29:ctrl = store.4 %28, %3, %13
    %30:ctrl = store.4 %29, %3, %12
    %31:i32 = iconst 7
    %32:i32 = iconst 2
    %33:i64 = iext %32
    %34:i64 = sfill 32 %33
    %35:i32 = iconst 4294934528
    %36:i32 = iconst 4294967168
    %37:i64 = iconst 0
    %38:ctrl = store.8 %30, %37, %10
    %39:ctrl = store.8 %38, %37, %8
    %40:ctrl, %41:phisel = region %39
    %42:ctrl = store.1 %40, %36, %22
    %43:ctrl = store.1 %42, %4, %20
    %44:ctrl = store.1 %43, %32, %19
    %45:ctrl = store.2 %44, %35, %17
    %46:ctrl = store.2 %45, %4, %15
    %47:ctrl = store.2 %46, %32, %14
    %48:ctrl = store.4 %47, %4, %13
    %49:ctrl = store.4 %48, %32, %12
    %50:ctrl = store.8 %49, %6, %10
    %51:ctrl = store.8 %50, %34, %8
    %52:ctrl, %53:i32 = load.1 %51, %22
    %54:i32 = sfill 8 %53
    %55:ctrl, %56:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %52, %54, %31
    %57:ctrl, %58:i32 = load.1 %55, %22
    %59:i32 = sfill 8 %58
    %60:ctrl, %61:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %57, %59, %21
    %62:ctrl, %63:i32 = load.1 %60, %20
    %64:i32 = sfill 8 %63
    %65:ctrl, %66:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %62, %64, %3
    %67:ctrl, %68:i32 = load.1 %65, %20
    %69:i32 = sfill 8 %68
    %70:ctrl, %71:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %67, %69, %21
    %72:ctrl, %73:i32 = load.1 %70, %20
    %74:i32 = sfill 8 %73
    %75:ctrl, %76:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %72, %74, %11
    %77:ctrl, %78:i32 = load.1 %75, %19
    %79:i32 = sfill 8 %78
    %80:ctrl, %81:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %77, %79, %3
    %82:ctrl, %83:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %80, %22, %31
    %84:ctrl, %85:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %82, %22, %21
    %86:ctrl, %87:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %84, %20, %3
    %88:ctrl, %89:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %86, %20, %21
    %90:ctrl, %91:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %88, %20, %11
    %92:ctrl, %93:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %90, %19, %3
    %94:ctrl, %95:i32 = load.2 %92, %17
    %96:i32 = sfill 16 %95
    %97:ctrl, %98:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %94, %96, %18
    %99:ctrl, %100:i32 = load.2 %97, %17
    %101:i32 = sfill 16 %100
    %102:ctrl, %103:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %99, %101, %16
    %104:ctrl, %105:i32 = load.2 %102, %15
    %106:i32 = sfill 16 %105
    %107:ctrl, %108:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %104, %106, %3
    %109:ctrl, %110:i32 = load.2 %107, %15
    %111:i32 = sfill 16 %110
    %112:ctrl, %113:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %109, %111, %16
    %114:ctrl, %115:i32 = load.2 %112, %15
    %116:i32 = sfill 16 %115
    %117:ctrl, %118:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %114, %116, %11
    %119:ctrl, %120:i32 = load.2 %117, %14
    %121:i32 = sfill 16 %120
    %122:ctrl, %123:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %119, %121, %3
    %124:ctrl, %125:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %122, %17, %18
    %126:ctrl, %127:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %124, %17, %16
    %128:ctrl, %129:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %126, %15, %3
    %130:ctrl, %131:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %128, %15, %16
    %132:ctrl, %133:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %130, %15, %11
    %134:ctrl, %135:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %132, %14, %3
    %136:ctrl, %137:i32 = load.4 %134, %13
    %138:ctrl, %139:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %136, %137, %3
    %140:ctrl, %141:i32 = load.4 %138, %13
    %142:ctrl, %143:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %140, %141, %11
    %144:ctrl, %145:i32 = load.4 %142, %12
    %146:ctrl, %147:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %144, %145, %3
    %148:ctrl, %149:i32 = load.4 %146, %13
    %150:ctrl, %151:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %148, %149, %3
    %152:ctrl, %153:i32 = load.4 %150, %13
    %154:ctrl, %155:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %152, %153, %11
    %156:ctrl, %157:i32 = load.4 %154, %12
    %158:ctrl, %159:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %156, %157, %3
    %160:ctrl, %161:i32 = load.4 %158, %13
    %162:ctrl, %163:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %160, %161, %3
    %164:ctrl, %165:i32 = load.4 %162, %13
    %166:ctrl, %167:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %164, %165, %11
    %168:ctrl, %169:i32 = load.4 %166, %12
    %170:ctrl, %171:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %168, %169, %3
    %172:ctrl, %173:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %170, %13, %3
    %174:ctrl, %175:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %172, %13, %11
    %176:ctrl, %177:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %174, %12, %3
    %178:ctrl, %179:i64 = load.8 %176, %10
    %180:ctrl, %181:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %178, %179, %3
    %182:ctrl, %183:i64 = load.8 %180, %10
    %184:ctrl, %185:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %182, %183, %11
    %186:ctrl, %187:i64 = load.8 %184, %10
    %188:ctrl, %189:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %186, %187, %9
    %190:ctrl, %191:i64 = load.8 %188, %8
    %192:ctrl, %193:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %190, %191, %3
    %194:ctrl, %195:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %192, %10, %3
    %196:ctrl, %197:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %194, %10, %11
    %198:ctrl, %199:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %196, %10, %9
    %200:ctrl, %201:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %198, %8, %3
    %202:i32 = icmp eq %201, %3
    %203:i32 = icmp eq %197, %3
    %204:i32 = icmp eq %193, %3
    %205:i32 = icmp eq %185, %3
    %206:i32 = icmp eq %177, %3
    %207:i32 = icmp eq %171, %7
    %208:i32 = icmp eq %167, %3
    %209:i32 = icmp eq %163, %3
    %210:i32 = icmp eq %155, %3
    %211:i32 = icmp eq %151, %3
    %212:i32 = icmp eq %147, %3
    %213:i32 = icmp eq %135, %3
    %214:i32 = icmp eq %131, %3
    %215:i32 = icmp eq %123, %3
    %216:i32 = icmp eq %113, %3
    %217:i32 = icmp eq %93, %3
    %218:i32 = icmp eq %89, %3
    %219:i32 = icmp eq %81, %3
    %220:i32 = icmp eq %71, %3
    %221:i32 = and %4, %56
    %222:i32 = and %221, %61
    %223:i32 = and %222, %66
    %224:i32 = and %223, %220
    %225:i32 = and %224, %76
    %226:i32 = and %225, %219
    %227:i32 = and %226, %83
    %228:i32 = and %227, %85
    %229:i32 = and %228, %87
    %230:i32 = and %229, %218
    %231:i32 = and %230, %91
    %232:i32 = and %231, %217
    %233:i32 = and %232, %98
    %234:i32 = and %233, %103
    %235:i32 = and %234, %108
    %236:i32 = and %235, %216
    %237:i32 = and %236, %118
    %238:i32 = and %237, %215
    %239:i32 = and %238, %125
    %240:i32 = and %239, %127
    %241:i32 = and %240, %129
    %242:i32 = and %241, %214
    %243:i32 = and %242, %133
    %244:i32 = and %243, %213
    %245:i32 = and %244, %139
    %246:i32 = and %245, %143
    %247:i32 = and %246, %212
    %248:i32 = and %247, %211
    %249:i32 = and %248, %210
    %250:i32 = and %249, %159
    %251:i32 = and %250, %209
    %252:i32 = and %251, %208
    %253:i32 = and %252, %207
    %254:i32 = and %253, %173
    %255:i32 = and %254, %175
    %256:i32 = and %255, %206
    %257:i32 = and %256, %181
    %258:i32 = and %257, %205
    %259:i32 = and %258, %189
    %260:i32 = and %259, %204
    %261:i32 = and %260, %195
    %262:i32 = and %261, %203
    %263:i32 = and %262, %199
    %264:i32 = and %263, %202
    %265:ctrl, %266:ctrl = brcond %200, %264
    %267:ctrl, %268:phisel = region %265
    return %267, %4
    %269:ctrl, %270:phisel = region %266
    return %269, %3
}
