# run: canonicalize

func @add32:i32(i32, i32) {
    # check:  func @add32:i32(i32, i32) {
    # nextln:     %0:ctrl, %1:i32, %2:i32 = entry
    # nextln:     %3:i32 = iadd %1, %2
    # nextln:     return %0, %3
    # nextln: }

    %c:ctrl, %a:i32, %b:i32 = entry
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @add_fold32:i32() {
    # check:  func @add_fold32:i32() {
    # nextln:     %0:ctrl = entry
    # nextln:     %4:i32 = iconst 12
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 7
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @add_fold_neg32:i32() {
    # check:  func @add_fold_neg32:i32() {
    # nextln:     %0:ctrl = entry
    # nextln:     %4:i32 = iconst 4294967294
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 4294967289
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @add_fold_wrap32:i32() {
    # check:  func @add_fold_wrap32:i32() {
    # nextln:     %0:ctrl = entry
    # nextln:     %4:i32 = iconst 4294967282
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl = entry
    %a:i32 = iconst 4294967289
    %b:i32 = iconst 4294967289
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @addz32:i32(i32) {
    # check:  func @addz32:i32(i32) {
    # nextln:     %0:ctrl, %1:i32 = entry
    # nextln:     return %0, %1
    # nextln: }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 0
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @zadd32:i32(i32) {
    # check:  func @zadd32:i32(i32) {
    # nextln:     %0:ctrl, %1:i32 = entry
    # nextln:     return %0, %1
    # nextln: }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 0
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @addc32:i32(i32) {
    # check:  func @addc32:i32(i32) {
    # nextln:     %0:ctrl, %1:i32 = entry
    # nextln:     %2:i32 = iconst 5
    # nextln:     %3:i32 = iadd %1, %2
    # nextln:     return %0, %3
    # nextln: }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 5
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @cadd32:i32(i32) {
    # check:  func @cadd32:i32(i32) {
    # nextln:     %0:ctrl, %1:i32 = entry
    # nextln:     %2:i32 = iconst 5
    # nextln:     %4:i32 = iadd %1, %2
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 5
    %r:i32 = iadd %a, %b
    return %c, %r
}

func @add64:i64(i64, i64) {
    # check:  func @add64:i64(i64, i64) {
    # nextln:     %0:ctrl, %1:i64, %2:i64 = entry
    # nextln:     %3:i64 = iadd %1, %2
    # nextln:     return %0, %3
    # nextln: }

    %c:ctrl, %a:i64, %b:i64 = entry
    %r:i64 = iadd %a, %b
    return %c, %r
}

func @add_fold64:i64() {
    # check:  func @add_fold64:i64() {
    # nextln:     %0:ctrl = entry
    # nextln:     %4:i64 = iconst 12
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 7
    %r:i64 = iadd %a, %b
    return %c, %r
}

func @add_fold_neg64:i64() {
    # check:  func @add_fold_neg64:i64() {
    # nextln:     %0:ctrl = entry
    # nextln:     %4:i64 = iconst 18446744073709551614
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 18446744073709551609
    %r:i64 = iadd %a, %b
    return %c, %r
}

func @add_fold_wrap64:i64() {
    # check:  func @add_fold_wrap64:i64() {
    # nextln:     %0:ctrl = entry
    # nextln:     %4:i64 = iconst 18446744073709551602
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl = entry
    %a:i64 = iconst 18446744073709551609
    %b:i64 = iconst 18446744073709551609
    %r:i64 = iadd %a, %b
    return %c, %r
}

func @addz64:i64(i64) {
    # check:  func @addz64:i64(i64) {
    # nextln:     %0:ctrl, %1:i64 = entry
    # nextln:     return %0, %1
    # nextln: }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 0
    %r:i64 = iadd %a, %b
    return %c, %r
}

func @zadd64:i64(i64) {
    # check:  func @zadd64:i64(i64) {
    # nextln:     %0:ctrl, %1:i64 = entry
    # nextln:     return %0, %1
    # nextln: }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 0
    %r:i64 = iadd %a, %b
    return %c, %r
}

func @addc64:i64(i64) {
    # check:  func @addc64:i64(i64) {
    # nextln:     %0:ctrl, %1:i64 = entry
    # nextln:     %2:i64 = iconst 5
    # nextln:     %3:i64 = iadd %1, %2
    # nextln:     return %0, %3
    # nextln: }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 5
    %r:i64 = iadd %a, %b
    return %c, %r
}

func @cadd64:i64(i64) {
    # check:  func @cadd64:i64(i64) {
    # nextln:     %0:ctrl, %1:i64 = entry
    # nextln:     %2:i64 = iconst 5
    # nextln:     %4:i64 = iadd %1, %2
    # nextln:     return %0, %4
    # nextln: }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 5
    %r:i64 = iadd %a, %b
    return %c, %r
}
