# run: canonicalize

func @xor32:i32(i32, i32) {
    # check:   func @xor32:i32(i32, i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32, $(entry2=$val):i32 = entry
    # dag:         $(xor0=$val):i32 = xor $entry1, $entry2
    # dag:         return $entry0, $xor0
    # nextln:  }

    %c:ctrl, %a:i32, %b:i32 = entry
    %r:i32 = xor %a, %b
    return %c, %r
}

func @xor_fold32:i32() {
    # check:   func @xor_fold32:i32() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i32 = iconst 2
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i32 = iconst 5
    %b:i32 = iconst 7
    %r:i32 = xor %a, %b
    return %c, %r
}

func @xorz32:i32(i32) {
    # check:   func @xorz32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 0
    %r:i32 = xor %a, %b
    return %c, %r
}

func @zxor32:i32(i32) {
    # check:   func @zxor32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 0
    %r:i32 = xor %a, %b
    return %c, %r
}

func @xorc32:i32(i32) {
    # check:   func @xorc32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(xor0=$val):i32 = xor $entry1, $iconst0
    # dag:         return $entry0, $xor0
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %b:i32 = iconst 5
    %r:i32 = xor %a, %b
    return %c, %r
}

func @cxor32:i32(i32) {
    # check:   func @cxor32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 5
    # dag:         $(xor0=$val):i32 = xor $entry1, $iconst0
    # dag:         return $entry0, $xor0
    # nextln:  }

    %c:ctrl, %b:i32 = entry
    %a:i32 = iconst 5
    %r:i32 = xor %a, %b
    return %c, %r
}

func @xor_self32:i32(i32) {
    # check:   func @xor_self32:i32(i32) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i32 = entry
    # dag:         $(iconst0=$val):i32 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %a:i32 = entry
    %r:i32 = xor %a, %a
    return %c, %r
}

func @xor64:i64(i64, i64) {
    # check:   func @xor64:i64(i64, i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64, $(entry2=$val):i64 = entry
    # dag:         $(xor0=$val):i64 = xor $entry1, $entry2
    # dag:         return $entry0, $xor0
    # nextln:  }

    %c:ctrl, %a:i64, %b:i64 = entry
    %r:i64 = xor %a, %b
    return %c, %r
}

func @xor_fold64:i64() {
    # check:   func @xor_fold64:i64() {
    # nextln:      $(entry0=$val):ctrl = entry
    # dag:         $(iconst0=$val):i64 = iconst 2
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl = entry
    %a:i64 = iconst 5
    %b:i64 = iconst 7
    %r:i64 = xor %a, %b
    return %c, %r
}

func @xorz64:i64(i64) {
    # check:   func @xorz64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 0
    %r:i64 = xor %a, %b
    return %c, %r
}

func @zxor64:i64(i64) {
    # check:   func @zxor64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         return $entry0, $entry1
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 0
    %r:i64 = xor %a, %b
    return %c, %r
}

func @xorc64:i64(i64) {
    # check:   func @xorc64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(xor0=$val):i64 = xor $entry1, $iconst0
    # dag:         return $entry0, $xor0
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %b:i64 = iconst 5
    %r:i64 = xor %a, %b
    return %c, %r
}

func @cxor64:i64(i64) {
    # check:   func @cxor64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 5
    # dag:         $(xor0=$val):i64 = xor $entry1, $iconst0
    # dag:         return $entry0, $xor0
    # nextln:  }

    %c:ctrl, %b:i64 = entry
    %a:i64 = iconst 5
    %r:i64 = xor %a, %b
    return %c, %r
}

func @xor_self64:i64(i64) {
    # check:   func @xor_self64:i64(i64) {
    # nextln:      $(entry0=$val):ctrl, $(entry1=$val):i64 = entry
    # dag:         $(iconst0=$val):i64 = iconst 0
    # dag:         return $entry0, $iconst0
    # nextln:  }

    %c:ctrl, %a:i64 = entry
    %r:i64 = xor %a, %a
    return %c, %r
}
