# run: isel-regalloc

# These tests are here to make sure we don't copy from $rdi into $rax again after performing the
# cdq/cqo. See d06e1a6 and the explanation in `RegAllocContext::probe_phys_reservation` for more
# details.

func @sdiv64:i64(i64, i64) {
    # check: function `sdiv64`:
    # nextln: clobbers: rax, rdx
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax:gpr = $$rdi
    # nextln: 0000:     $$rdx = ConvertWord(S64) $$rax
    # nextln: 0001:     $$rax, $$rdx = Div(S64, Idiv) $$rax, $$rdx, $$rsi
    # nextln: 0002:     Ret $$rax

    %c:ctrl, %a:i64, %b:i64 = entry
    %c2:ctrl, %val:i64 = sdiv %c, %a, %b
    return %c2, %val
}

func @sdiv32:i32(i32, i32) {
    # check: function `sdiv32`:
    # nextln: clobbers: rax, rdx
    # nextln: frame: size 0, align 0
    # nextln:       block0:
    # nextln:           $$rax:gpr = $$rdi
    # nextln: 0000:     $$rdx = ConvertWord(S32) $$rax
    # nextln: 0001:     $$rax, $$rdx = Div(S32, Idiv) $$rax, $$rdx, $$rsi
    # nextln: 0002:     Ret $$rax

    %c:ctrl, %a:i32, %b:i32 = entry
    %c2:ctrl, %val:i32 = sdiv %c, %a, %b
    return %c2, %val
}
