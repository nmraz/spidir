# run: codegen

extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)":i32(ptr, i32)
extfunc @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)":i32(i32, i32)
extfunc @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)":i32(ptr, i32)
extfunc @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)":i32(i64, i32)

func @"System.Boolean Tests.BitTest::Run()":i32() {
    # check: function `System.Boolean Tests.BitTest::Run()`:
    # nextln: 000000: 55                              push rbp
    # nextln: 000001: 48 89 e5                        mov rbp, rsp
    # nextln: 000004: 41 57                           push r15
    # nextln: 000006: 41 56                           push r14
    # nextln: 000008: 41 55                           push r13
    # nextln: 00000a: 41 54                           push r12
    # nextln: 00000c: 53                              push rbx
    # nextln: 00000d: 48 81 ec d8 00 00 00            sub rsp, 0xd8
    # nextln: 000014: 33 c9                           xor ecx, ecx
    # nextln: 000016: 48 8d 84 24 be 00 00 00         lea rax, [rsp + 0xbe]
    # nextln: 00001e: 48 8d 94 24 b8 00 00 00         lea rdx, [rsp + 0xb8]
    # nextln: 000026: 48 89 d7                        mov rdi, rdx
    # nextln: 000029: 48 89 c2                        mov rdx, rax
    # nextln: 00002c: 33 c0                           xor eax, eax
    # nextln: 00002e: 48 89 e6                        mov rsi, rsp
    # nextln: 000031: 49 89 f9                        mov r9, rdi
    # nextln: 000034: 48 89 f7                        mov rdi, rsi
    # nextln: 000037: 4c 8d 44 24 08                  lea r8, [rsp + 8]
    # nextln: 00003c: 48 8d b4 24 b0 00 00 00         lea rsi, [rsp + 0xb0]
    # nextln: 000044: 4d 89 c3                        mov r11, r8
    # nextln: 000047: 4c 8d 84 24 ba 00 00 00         lea r8, [rsp + 0xba]
    # nextln: 00004f: 4c 8d 94 24 b4 00 00 00         lea r10, [rsp + 0xb4]
    # nextln: 000057: 48 8d 9c 24 bc 00 00 00         lea rbx, [rsp + 0xbc]
    # nextln: 00005f: 4c 8d a4 24 bf 00 00 00         lea r12, [rsp + 0xbf]
    # nextln: 000067: 88 84 24 bf 00 00 00            mov byte ptr [rsp + 0xbf], al
    # nextln: 00006e: 88 84 24 be 00 00 00            mov byte ptr [rsp + 0xbe], al
    # nextln: 000075: 4c 8d ac 24 c0 00 00 00         lea r13, [rsp + 0xc0]
    # nextln: 00007d: 88 84 24 c0 00 00 00            mov byte ptr [rsp + 0xc0], al
    # nextln: 000084: 66 89 84 24 bc 00 00 00         mov word ptr [rsp + 0xbc], ax
    # nextln: 00008c: 66 89 84 24 ba 00 00 00         mov word ptr [rsp + 0xba], ax
    # nextln: 000094: 66 89 84 24 b8 00 00 00         mov word ptr [rsp + 0xb8], ax
    # nextln: 00009c: 89 84 24 b4 00 00 00            mov dword ptr [rsp + 0xb4], eax
    # nextln: 0000a3: 89 84 24 b0 00 00 00            mov dword ptr [rsp + 0xb0], eax
    # nextln: 0000aa: 48 89 4c 24 08                  mov qword ptr [rsp + 8], rcx
    # nextln: 0000af: 48 89 0c 24                     mov qword ptr [rsp], rcx
    # nextln: 0000b3: 48 89 d1                        mov rcx, rdx
    # nextln: 0000b6: ba 07 00 00 00                  mov edx, 7
    # nextln: 0000bb: 49 89 d6                        mov r14, rdx
    # nextln: 0000be: ba 08 00 00 00                  mov edx, 8
    # nextln: 0000c3: 4d 89 cf                        mov r15, r9
    # nextln: 0000c6: 4d 89 d9                        mov r9, r11
    # nextln: 0000c9: 4d 89 eb                        mov r11, r13
    # nextln: 0000cc: 4d 89 c5                        mov r13, r8
    # nextln: 0000cf: 4d 89 f8                        mov r8, r15
    # nextln: 0000d2: 49 89 df                        mov r15, rbx
    # nextln: 0000d5: 48 89 fb                        mov rbx, rdi
    # nextln: 0000d8: 4c 89 d7                        mov rdi, r10
    # nextln: 0000db: 49 89 f2                        mov r10, rsi
    # nextln: 0000de: 4c 89 fe                        mov rsi, r15
    # nextln: 0000e1: 41 bf 01 00 00 00               mov r15d, 1
    # nextln: 0000e7: 48 89 74 24 70                  mov qword ptr [rsp + 0x70], rsi
    # nextln: 0000ec: 4c 89 9c 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r11
    # nextln: 0000f4: 4d 89 cb                        mov r11, r9
    # nextln: 0000f7: 4c 8b 8c 24 a8 00 00 00         mov r9, qword ptr [rsp + 0xa8]
    # nextln: 0000ff: 4c 89 fe                        mov rsi, r15
    # nextln: 000102: 4d 89 d7                        mov r15, r10
    # nextln: 000105: 4d 89 ea                        mov r10, r13
    # nextln: 000108: 49 89 cd                        mov r13, rcx
    # nextln: 00010b: 4c 89 e1                        mov rcx, r12
    # nextln: 00010e: 4d 89 c4                        mov r12, r8
    # nextln: 000111: 49 89 f8                        mov r8, rdi
    # nextln: 000114: 48 89 df                        mov rdi, rbx
    # nextln: 000117: bb 20 00 00 00                  mov ebx, 0x20
    # nextln: 00011c: 48 89 8c 24 98 00 00 00         mov qword ptr [rsp + 0x98], rcx
    # nextln: 000124: b9 0f 00 00 00                  mov ecx, 0xf
    # nextln: 000129: 4c 89 54 24 60                  mov qword ptr [rsp + 0x60], r10
    # nextln: 00012e: 4c 8b 54 24 70                  mov r10, qword ptr [rsp + 0x70]
    # nextln: 000133: 4c 89 5c 24 28                  mov qword ptr [rsp + 0x28], r11
    # nextln: 000138: 4d 89 f3                        mov r11, r14
    # nextln: 00013b: 49 89 f6                        mov r14, rsi
    # nextln: 00013e: 4c 89 ee                        mov rsi, r13
    # nextln: 000141: 4d 89 cd                        mov r13, r9
    # nextln: 000144: 4d 89 e1                        mov r9, r12
    # nextln: 000147: 4c 8b a4 24 98 00 00 00         mov r12, qword ptr [rsp + 0x98]
    # nextln: 00014f: 4c 89 44 24 48                  mov qword ptr [rsp + 0x48], r8
    # nextln: 000154: 4d 89 f8                        mov r8, r15
    # nextln: 000157: 49 89 cf                        mov r15, rcx
    # nextln: 00015a: b9 10 00 00 00                  mov ecx, 0x10
    # nextln: 00015f: 48 89 b4 24 88 00 00 00         mov qword ptr [rsp + 0x88], rsi
    # nextln: 000167: 4d 89 ca                        mov r10, r9
    # nextln: 00016a: 4d 89 d9                        mov r9, r11
    # nextln: 00016d: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 000172: be 03 00 00 00                  mov esi, 3
    # nextln: 000177: 48 89 7c 24 20                  mov qword ptr [rsp + 0x20], rdi
    # nextln: 00017c: 4c 89 cf                        mov rdi, r9
    # nextln: 00017f: 4d 89 d9                        mov r9, r11
    # nextln: 000182: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 000187: 4c 89 54 24 58                  mov qword ptr [rsp + 0x58], r10
    # nextln: 00018c: 4d 89 c2                        mov r10, r8
    # nextln: 00018f: 41 b8 40 00 00 00               mov r8d, 0x40
    # nextln: 000195: 48 89 bc 24 a0 00 00 00         mov qword ptr [rsp + 0xa0], rdi
    # nextln: 00019d: 4c 89 8c 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r9
    # nextln: 0001a5: 4d 89 d9                        mov r9, r11
    # nextln: 0001a8: 4c 8b 9c 24 a8 00 00 00         mov r11, qword ptr [rsp + 0xa8]
    # nextln: 0001b0: bf 02 00 00 00                  mov edi, 2
    # nextln: 0001b5: 4c 89 54 24 40                  mov qword ptr [rsp + 0x40], r10
    # nextln: 0001ba: 4d 63 d6                        movsxd r10, r14d
    # nextln: 0001bd: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 0001c2: 4c 63 cf                        movsxd r9, edi
    # nextln: 0001c5: 41 bb 80 ff ff ff               mov r11d, 0xffffff80
    # nextln: 0001cb: 44 88 9c 24 bf 00 00 00         mov byte ptr [rsp + 0xbf], r11b
    # nextln: 0001d3: 41 bb 00 80 ff ff               mov r11d, 0xffff8000
    # nextln: 0001d9: 44 88 b4 24 be 00 00 00         mov byte ptr [rsp + 0xbe], r14b
    # nextln: 0001e1: 40 88 bc 24 c0 00 00 00         mov byte ptr [rsp + 0xc0], dil
    # nextln: 0001e9: 66 44 89 9c 24 bc 00 00 00      mov word ptr [rsp + 0xbc], r11w
    # nextln: 0001f2: 66 44 89 b4 24 ba 00 00 00      mov word ptr [rsp + 0xba], r14w
    # nextln: 0001fb: 66 89 bc 24 b8 00 00 00         mov word ptr [rsp + 0xb8], di
    # nextln: 000203: 44 89 b4 24 b4 00 00 00         mov dword ptr [rsp + 0xb4], r14d
    # nextln: 00020b: 89 bc 24 b0 00 00 00            mov dword ptr [rsp + 0xb0], edi
    # nextln: 000212: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 000217: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 00021c: 4c 89 54 24 08                  mov qword ptr [rsp + 8], r10
    # nextln: 000221: 49 89 fa                        mov r10, rdi
    # nextln: 000224: 48 8b 7c 24 28                  mov rdi, qword ptr [rsp + 0x28]
    # nextln: 000229: 4c 89 0c 24                     mov qword ptr [rsp], r9
    # nextln: 00022d: 49 89 f9                        mov r9, rdi
    # nextln: 000230: 0f b6 bc 24 bf 00 00 00         movzx edi, byte ptr [rsp + 0xbf]
    # nextln: 000238: 40 0f be ff                     movsx edi, dil
    # nextln: 00023c: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000246: 48 89 44 24 10                  mov qword ptr [rsp + 0x10], rax
    # nextln: 00024b: 4c 8b 64 24 20                  mov r12, qword ptr [rsp + 0x20]
    # nextln: 000250: 48 89 94 24 90 00 00 00         mov qword ptr [rsp + 0x90], rdx
    # nextln: 000258: 48 89 5c 24 38                  mov qword ptr [rsp + 0x38], rbx
    # nextln: 00025d: 48 8b 9c 24 a0 00 00 00         mov rbx, qword ptr [rsp + 0xa0]
    # nextln: 000265: 4c 89 44 24 30                  mov qword ptr [rsp + 0x30], r8
    # nextln: 00026a: 48 89 74 24 50                  mov qword ptr [rsp + 0x50], rsi
    # nextln: 00026f: 4c 89 7c 24 78                  mov qword ptr [rsp + 0x78], r15
    # nextln: 000274: 4d 89 f7                        mov r15, r14
    # nextln: 000277: 49 89 ce                        mov r14, rcx
    # nextln: 00027a: 48 89 de                        mov rsi, rbx
    # nextln: 00027d: 41 ff d1                        call r9
    # nextln: 000280: 4d 89 f3                        mov r11, r14
    # nextln: 000283: 4c 8b 94 24 98 00 00 00         mov r10, qword ptr [rsp + 0x98]
    # nextln: 00028b: 48 89 d9                        mov rcx, rbx
    # nextln: 00028e: 48 8b bc 24 90 00 00 00         mov rdi, qword ptr [rsp + 0x90]
    # nextln: 000296: 48 8b 94 24 88 00 00 00         mov rdx, qword ptr [rsp + 0x88]
    # nextln: 00029e: 4d 89 fc                        mov r12, r15
    # nextln: 0002a1: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 0002a6: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 0002ab: 4c 89 eb                        mov rbx, r13
    # nextln: 0002ae: 4c 8b 44 24 58                  mov r8, qword ptr [rsp + 0x58]
    # nextln: 0002b3: 4c 8b 4c 24 48                  mov r9, qword ptr [rsp + 0x48]
    # nextln: 0002b8: 4c 8b 7c 24 78                  mov r15, qword ptr [rsp + 0x78]
    # nextln: 0002bd: 4d 89 e5                        mov r13, r12
    # nextln: 0002c0: 44 23 e8                        and r13d, eax
    # nextln: 0002c3: 0f b6 84 24 bf 00 00 00         movzx eax, byte ptr [rsp + 0xbf]
    # nextln: 0002cb: 0f be f8                        movsx edi, al
    # nextln: 0002ce: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0002d8: 4c 89 5c 24 68                  mov qword ptr [rsp + 0x68], r11
    # nextln: 0002dd: 48 89 9c 24 80 00 00 00         mov qword ptr [rsp + 0x80], rbx
    # nextln: 0002e5: 48 8b 9c 24 90 00 00 00         mov rbx, qword ptr [rsp + 0x90]
    # nextln: 0002ed: 4d 89 e6                        mov r14, r12
    # nextln: 0002f0: 49 89 d4                        mov r12, rdx
    # nextln: 0002f3: 49 89 cf                        mov r15, rcx
    # nextln: 0002f6: 48 89 de                        mov rsi, rbx
    # nextln: 0002f9: ff d0                           call rax
    # nextln: 0002fb: 44 23 e8                        and r13d, eax
    # nextln: 0002fe: 4d 89 f9                        mov r9, r15
    # nextln: 000301: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 000306: 4c 8b 84 24 98 00 00 00         mov r8, qword ptr [rsp + 0x98]
    # nextln: 00030e: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000313: 4c 8b 7c 24 78                  mov r15, qword ptr [rsp + 0x78]
    # nextln: 000318: 48 8b 5c 24 68                  mov rbx, qword ptr [rsp + 0x68]
    # nextln: 00031d: 48 8b 54 24 58                  mov rdx, qword ptr [rsp + 0x58]
    # nextln: 000322: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 000327: 4d 89 f3                        mov r11, r14
    # nextln: 00032a: 4c 8b 74 24 60                  mov r14, qword ptr [rsp + 0x60]
    # nextln: 00032f: 4c 8b 94 24 80 00 00 00         mov r10, qword ptr [rsp + 0x80]
    # nextln: 000337: 48 8b 7c 24 30                  mov rdi, qword ptr [rsp + 0x30]
    # nextln: 00033c: 0f b6 84 24 be 00 00 00         movzx eax, byte ptr [rsp + 0xbe]
    # nextln: 000344: 0f be f8                        movsx edi, al
    # nextln: 000347: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 000351: 4d 89 ce                        mov r14, r9
    # nextln: 000354: 49 89 cf                        mov r15, rcx
    # nextln: 000357: 48 8b 5c 24 10                  mov rbx, qword ptr [rsp + 0x10]
    # nextln: 00035c: 4c 8b a4 24 88 00 00 00         mov r12, qword ptr [rsp + 0x88]
    # nextln: 000364: 4c 89 5c 24 18                  mov qword ptr [rsp + 0x18], r11
    # nextln: 000369: 48 89 de                        mov rsi, rbx
    # nextln: 00036c: ff d0                           call rax
    # nextln: 00036e: 44 23 e8                        and r13d, eax
    # nextln: 000371: 4c 89 f1                        mov rcx, r14
    # nextln: 000374: 4c 8b 5c 24 68                  mov r11, qword ptr [rsp + 0x68]
    # nextln: 000379: 48 8b 5c 24 18                  mov rbx, qword ptr [rsp + 0x18]
    # nextln: 00037e: 4c 8b 8c 24 80 00 00 00         mov r9, qword ptr [rsp + 0x80]
    # nextln: 000386: 4c 89 fa                        mov rdx, r15
    # nextln: 000389: 48 8b 74 24 58                  mov rsi, qword ptr [rsp + 0x58]
    # nextln: 00038e: 4c 8b 74 24 78                  mov r14, qword ptr [rsp + 0x78]
    # nextln: 000393: 4c 8b 7c 24 60                  mov r15, qword ptr [rsp + 0x60]
    # nextln: 000398: 4c 8b 94 24 98 00 00 00         mov r10, qword ptr [rsp + 0x98]
    # nextln: 0003a0: 48 8b bc 24 90 00 00 00         mov rdi, qword ptr [rsp + 0x90]
    # nextln: 0003a8: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 0003ad: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 0003b2: 0f b6 84 24 be 00 00 00         movzx eax, byte ptr [rsp + 0xbe]
    # nextln: 0003ba: 0f be f8                        movsx edi, al
    # nextln: 0003bd: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 0003c7: 48 8b 9c 24 90 00 00 00         mov rbx, qword ptr [rsp + 0x90]
    # nextln: 0003cf: 4d 89 c7                        mov r15, r8
    # nextln: 0003d2: 49 89 ce                        mov r14, rcx
    # nextln: 0003d5: 49 89 d4                        mov r12, rdx
    # nextln: 0003d8: 48 89 de                        mov rsi, rbx
    # nextln: 0003db: ff d0                           call rax
    # nextln: 0003dd: 33 c9                           xor ecx, ecx
    # nextln: 0003df: 85 c0                           test eax, eax
    # nextln: 0003e1: 0f 94 c1                        sete cl
    # nextln: 0003e4: 44 23 e9                        and r13d, ecx
    # nextln: 0003e7: 4c 89 f2                        mov rdx, r14
    # nextln: 0003ea: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 0003ef: 4c 8b 4c 24 68                  mov r9, qword ptr [rsp + 0x68]
    # nextln: 0003f4: 48 8b 8c 24 98 00 00 00         mov rcx, qword ptr [rsp + 0x98]
    # nextln: 0003fc: 4d 89 f8                        mov r8, r15
    # nextln: 0003ff: 48 8b 5c 24 60                  mov rbx, qword ptr [rsp + 0x60]
    # nextln: 000404: 48 8b 74 24 58                  mov rsi, qword ptr [rsp + 0x58]
    # nextln: 000409: 4c 8b 7c 24 30                  mov r15, qword ptr [rsp + 0x30]
    # nextln: 00040e: 4c 8b 94 24 80 00 00 00         mov r10, qword ptr [rsp + 0x80]
    # nextln: 000416: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 00041b: 4c 8b 64 24 78                  mov r12, qword ptr [rsp + 0x78]
    # nextln: 000420: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 000425: 0f b6 84 24 be 00 00 00         movzx eax, byte ptr [rsp + 0xbe]
    # nextln: 00042d: 0f be f8                        movsx edi, al
    # nextln: 000430: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00043a: 4d 89 c4                        mov r12, r8
    # nextln: 00043d: 4d 89 d7                        mov r15, r10
    # nextln: 000440: 48 89 f3                        mov rbx, rsi
    # nextln: 000443: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 000448: ff d0                           call rax
    # nextln: 00044a: 44 23 e8                        and r13d, eax
    # nextln: 00044d: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 000452: 4c 89 fe                        mov rsi, r15
    # nextln: 000455: 4c 8b 7c 24 10                  mov r15, qword ptr [rsp + 0x10]
    # nextln: 00045a: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 00045f: 4c 8b 54 24 78                  mov r10, qword ptr [rsp + 0x78]
    # nextln: 000464: 4c 89 e1                        mov rcx, r12
    # nextln: 000467: 4c 8b 64 24 30                  mov r12, qword ptr [rsp + 0x30]
    # nextln: 00046c: 48 8b bc 24 88 00 00 00         mov rdi, qword ptr [rsp + 0x88]
    # nextln: 000474: 4c 89 f3                        mov rbx, r14
    # nextln: 000477: 4c 8b 74 24 20                  mov r14, qword ptr [rsp + 0x20]
    # nextln: 00047c: 4c 8b 5c 24 60                  mov r11, qword ptr [rsp + 0x60]
    # nextln: 000481: 4c 8b 4c 24 40                  mov r9, qword ptr [rsp + 0x40]
    # nextln: 000486: 0f b6 84 24 c0 00 00 00         movzx eax, byte ptr [rsp + 0xc0]
    # nextln: 00048e: 0f be f8                        movsx edi, al
    # nextln: 000491: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" + 0
    # nextln: 00049b: 4d 89 fc                        mov r12, r15
    # nextln: 00049e: 4c 8b bc 24 98 00 00 00         mov r15, qword ptr [rsp + 0x98]
    # nextln: 0004a6: 48 8b 9c 24 88 00 00 00         mov rbx, qword ptr [rsp + 0x88]
    # nextln: 0004ae: 4c 8b b4 24 a0 00 00 00         mov r14, qword ptr [rsp + 0xa0]
    # nextln: 0004b6: 4c 89 e6                        mov rsi, r12
    # nextln: 0004b9: ff d0                           call rax
    # nextln: 0004bb: 33 c9                           xor ecx, ecx
    # nextln: 0004bd: 85 c0                           test eax, eax
    # nextln: 0004bf: 0f 94 c1                        sete cl
    # nextln: 0004c2: 44 23 e9                        and r13d, ecx
    # nextln: 0004c5: 48 8b 44 24 40                  mov rax, qword ptr [rsp + 0x40]
    # nextln: 0004ca: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 0004cf: 4c 8b 54 24 78                  mov r10, qword ptr [rsp + 0x78]
    # nextln: 0004d4: 4c 8b 4c 24 60                  mov r9, qword ptr [rsp + 0x60]
    # nextln: 0004d9: 48 8b b4 24 80 00 00 00         mov rsi, qword ptr [rsp + 0x80]
    # nextln: 0004e1: 48 8b 7c 24 58                  mov rdi, qword ptr [rsp + 0x58]
    # nextln: 0004e6: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 0004eb: 4c 89 e2                        mov rdx, r12
    # nextln: 0004ee: 4c 8b a4 24 90 00 00 00         mov r12, qword ptr [rsp + 0x90]
    # nextln: 0004f6: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000500: 4c 89 f6                        mov rsi, r14
    # nextln: 000503: 4c 89 ff                        mov rdi, r15
    # nextln: 000506: 41 ff d0                        call r8
    # nextln: 000509: 4c 89 ff                        mov rdi, r15
    # nextln: 00050c: 4c 8b 54 24 40                  mov r10, qword ptr [rsp + 0x40]
    # nextln: 000511: 4c 8b 44 24 60                  mov r8, qword ptr [rsp + 0x60]
    # nextln: 000516: 4c 8b 4c 24 28                  mov r9, qword ptr [rsp + 0x28]
    # nextln: 00051b: 4c 8b 7c 24 10                  mov r15, qword ptr [rsp + 0x10]
    # nextln: 000520: 48 8b 54 24 58                  mov rdx, qword ptr [rsp + 0x58]
    # nextln: 000525: 48 8b 4c 24 38                  mov rcx, qword ptr [rsp + 0x38]
    # nextln: 00052a: 4c 8b 74 24 18                  mov r14, qword ptr [rsp + 0x18]
    # nextln: 00052f: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000534: 4c 8b 5c 24 68                  mov r11, qword ptr [rsp + 0x68]
    # nextln: 000539: 44 23 e8                        and r13d, eax
    # nextln: 00053c: 4d 89 da                        mov r10, r11
    # nextln: 00053f: 48 8b 54 24 48                  mov rdx, qword ptr [rsp + 0x48]
    # nextln: 000544: 49 89 f3                        mov r11, rsi
    # nextln: 000547: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 00054c: 4c 8b 8c 24 80 00 00 00         mov r9, qword ptr [rsp + 0x80]
    # nextln: 000554: 4c 89 c0                        mov rax, r8
    # nextln: 000557: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000561: 4c 89 e6                        mov rsi, r12
    # nextln: 000564: 41 ff d0                        call r8
    # nextln: 000567: 4c 8b 84 24 80 00 00 00         mov r8, qword ptr [rsp + 0x80]
    # nextln: 00056f: 4c 89 f1                        mov rcx, r14
    # nextln: 000572: 4c 8b 74 24 50                  mov r14, qword ptr [rsp + 0x50]
    # nextln: 000577: 48 8b 54 24 38                  mov rdx, qword ptr [rsp + 0x38]
    # nextln: 00057c: 48 8b 7c 24 78                  mov rdi, qword ptr [rsp + 0x78]
    # nextln: 000581: 4c 8b 54 24 68                  mov r10, qword ptr [rsp + 0x68]
    # nextln: 000586: 4c 8b 4c 24 28                  mov r9, qword ptr [rsp + 0x28]
    # nextln: 00058b: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000590: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 000595: 44 23 e8                        and r13d, eax
    # nextln: 000598: 48 8b 44 24 60                  mov rax, qword ptr [rsp + 0x60]
    # nextln: 00059d: 49 89 f9                        mov r9, rdi
    # nextln: 0005a0: 4c 89 f7                        mov rdi, r14
    # nextln: 0005a3: 4d 89 c6                        mov r14, r8
    # nextln: 0005a6: 4c 89 94 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r10
    # nextln: 0005ae: 49 89 f2                        mov r10, rsi
    # nextln: 0005b1: 4c 89 de                        mov rsi, r11
    # nextln: 0005b4: 4c 8b 9c 24 a8 00 00 00         mov r11, qword ptr [rsp + 0xa8]
    # nextln: 0005bc: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0005c6: 4c 89 fe                        mov rsi, r15
    # nextln: 0005c9: 48 89 df                        mov rdi, rbx
    # nextln: 0005cc: 41 ff d0                        call r8
    # nextln: 0005cf: 44 23 e8                        and r13d, eax
    # nextln: 0005d2: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 0005d7: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 0005dc: 4c 8b 54 24 30                  mov r10, qword ptr [rsp + 0x30]
    # nextln: 0005e1: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0005e6: 48 8b 7c 24 58                  mov rdi, qword ptr [rsp + 0x58]
    # nextln: 0005eb: 4c 8b 5c 24 78                  mov r11, qword ptr [rsp + 0x78]
    # nextln: 0005f0: 4c 8b 4c 24 68                  mov r9, qword ptr [rsp + 0x68]
    # nextln: 0005f5: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 0005fa: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000604: 4c 89 e6                        mov rsi, r12
    # nextln: 000607: 48 89 df                        mov rdi, rbx
    # nextln: 00060a: ff d0                           call rax
    # nextln: 00060c: 4c 8b 4c 24 40                  mov r9, qword ptr [rsp + 0x40]
    # nextln: 000611: 4c 8b 5c 24 38                  mov r11, qword ptr [rsp + 0x38]
    # nextln: 000616: 48 8b 74 24 78                  mov rsi, qword ptr [rsp + 0x78]
    # nextln: 00061b: 4c 8b 54 24 30                  mov r10, qword ptr [rsp + 0x30]
    # nextln: 000620: 48 8b 54 24 68                  mov rdx, qword ptr [rsp + 0x68]
    # nextln: 000625: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 00062a: 48 8b 7c 24 60                  mov rdi, qword ptr [rsp + 0x60]
    # nextln: 00062f: 4c 8b 64 24 20                  mov r12, qword ptr [rsp + 0x20]
    # nextln: 000634: 33 c9                           xor ecx, ecx
    # nextln: 000636: 85 c0                           test eax, eax
    # nextln: 000638: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 00063d: 0f 94 c1                        sete cl
    # nextln: 000640: 44 23 e9                        and r13d, ecx
    # nextln: 000643: 48 8b 4c 24 58                  mov rcx, qword ptr [rsp + 0x58]
    # nextln: 000648: 4d 89 d1                        mov r9, r10
    # nextln: 00064b: 4c 89 e2                        mov rdx, r12
    # nextln: 00064e: 4c 8b 64 24 28                  mov r12, qword ptr [rsp + 0x28]
    # nextln: 000653: 4d 89 c2                        mov r10, r8
    # nextln: 000656: 49 89 f0                        mov r8, rsi
    # nextln: 000659: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 00065e: 49 bb 00 00 00 00 00 00 00 00   movabs r11, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 000668: 4c 8b 64 24 38                  mov r12, qword ptr [rsp + 0x38]
    # nextln: 00066d: 48 89 df                        mov rdi, rbx
    # nextln: 000670: 4c 89 e6                        mov rsi, r12
    # nextln: 000673: 41 ff d3                        call r11
    # nextln: 000676: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 00067b: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 000680: 48 8b 5c 24 40                  mov rbx, qword ptr [rsp + 0x40]
    # nextln: 000685: 4c 8b 54 24 50                  mov r10, qword ptr [rsp + 0x50]
    # nextln: 00068a: 4c 8b 5c 24 68                  mov r11, qword ptr [rsp + 0x68]
    # nextln: 00068f: 48 8b 7c 24 60                  mov rdi, qword ptr [rsp + 0x60]
    # nextln: 000694: 48 8b 74 24 48                  mov rsi, qword ptr [rsp + 0x48]
    # nextln: 000699: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 00069e: 48 8b 4c 24 78                  mov rcx, qword ptr [rsp + 0x78]
    # nextln: 0006a3: 4c 8b 64 24 28                  mov r12, qword ptr [rsp + 0x28]
    # nextln: 0006a8: 44 23 e8                        and r13d, eax
    # nextln: 0006ab: 4c 89 cf                        mov rdi, r9
    # nextln: 0006ae: 48 89 f0                        mov rax, rsi
    # nextln: 0006b1: 48 8b 74 24 58                  mov rsi, qword ptr [rsp + 0x58]
    # nextln: 0006b6: 4d 89 d9                        mov r9, r11
    # nextln: 0006b9: 4d 89 e2                        mov r10, r12
    # nextln: 0006bc: 4d 89 c4                        mov r12, r8
    # nextln: 0006bf: 49 89 d8                        mov r8, rbx
    # nextln: 0006c2: 48 8b 5c 24 38                  mov rbx, qword ptr [rsp + 0x38]
    # nextln: 0006c7: 49 bb 00 00 00 00 00 00 00 00   movabs r11, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" + 0
    # nextln: 0006d1: 4c 8b 64 24 60                  mov r12, qword ptr [rsp + 0x60]
    # nextln: 0006d6: 4c 89 fe                        mov rsi, r15
    # nextln: 0006d9: 4c 89 f7                        mov rdi, r14
    # nextln: 0006dc: 41 ff d3                        call r11
    # nextln: 0006df: 4c 8b 54 24 18                  mov r10, qword ptr [rsp + 0x18]
    # nextln: 0006e4: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 0006e9: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 0006ee: 4c 8b 74 24 58                  mov r14, qword ptr [rsp + 0x58]
    # nextln: 0006f3: 4c 8b 44 24 68                  mov r8, qword ptr [rsp + 0x68]
    # nextln: 0006f8: 48 8b 7c 24 30                  mov rdi, qword ptr [rsp + 0x30]
    # nextln: 0006fd: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 000702: 4c 8b 4c 24 78                  mov r9, qword ptr [rsp + 0x78]
    # nextln: 000707: 33 c9                           xor ecx, ecx
    # nextln: 000709: 85 c0                           test eax, eax
    # nextln: 00070b: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000710: 0f 94 c1                        sete cl
    # nextln: 000713: 44 23 e9                        and r13d, ecx
    # nextln: 000716: 49 89 d8                        mov r8, rbx
    # nextln: 000719: 4c 89 d3                        mov rbx, r10
    # nextln: 00071c: 49 89 c2                        mov r10, rax
    # nextln: 00071f: 48 89 d0                        mov rax, rdx
    # nextln: 000722: 48 89 f2                        mov rdx, rsi
    # nextln: 000725: 4c 89 e6                        mov rsi, r12
    # nextln: 000728: 4d 89 f4                        mov r12, r14
    # nextln: 00072b: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 000730: 48 89 f9                        mov rcx, rdi
    # nextln: 000733: 0f b7 bc 24 bc 00 00 00         movzx edi, word ptr [rsp + 0xbc]
    # nextln: 00073b: 0f bf ff                        movsx edi, di
    # nextln: 00073e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000748: 49 89 ce                        mov r14, rcx
    # nextln: 00074b: 4c 89 cb                        mov rbx, r9
    # nextln: 00074e: 4c 8b 64 24 68                  mov r12, qword ptr [rsp + 0x68]
    # nextln: 000753: 48 89 de                        mov rsi, rbx
    # nextln: 000756: ff d0                           call rax
    # nextln: 000758: 44 23 e8                        and r13d, eax
    # nextln: 00075b: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000760: 4c 89 f6                        mov rsi, r14
    # nextln: 000763: 4c 8b 74 24 58                  mov r14, qword ptr [rsp + 0x58]
    # nextln: 000768: 48 8b 4c 24 60                  mov rcx, qword ptr [rsp + 0x60]
    # nextln: 00076d: 4c 8b 4c 24 38                  mov r9, qword ptr [rsp + 0x38]
    # nextln: 000772: 48 8b 7c 24 48                  mov rdi, qword ptr [rsp + 0x48]
    # nextln: 000777: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 00077c: 49 89 d8                        mov r8, rbx
    # nextln: 00077f: 48 8b 5c 24 28                  mov rbx, qword ptr [rsp + 0x28]
    # nextln: 000784: 4c 8b 5c 24 18                  mov r11, qword ptr [rsp + 0x18]
    # nextln: 000789: 0f b7 84 24 bc 00 00 00         movzx eax, word ptr [rsp + 0xbc]
    # nextln: 000791: 0f bf f8                        movsx edi, ax
    # nextln: 000794: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 00079e: 48 89 cb                        mov rbx, rcx
    # nextln: 0007a1: 49 89 d6                        mov r14, rdx
    # nextln: 0007a4: 4c 89 e6                        mov rsi, r12
    # nextln: 0007a7: ff d0                           call rax
    # nextln: 0007a9: 44 23 e8                        and r13d, eax
    # nextln: 0007ac: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 0007b1: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 0007b6: 4d 89 f0                        mov r8, r14
    # nextln: 0007b9: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 0007be: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 0007c3: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0007c8: 48 89 df                        mov rdi, rbx
    # nextln: 0007cb: 48 8b 5c 24 58                  mov rbx, qword ptr [rsp + 0x58]
    # nextln: 0007d0: 48 8b 54 24 78                  mov rdx, qword ptr [rsp + 0x78]
    # nextln: 0007d5: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 0007da: 0f b7 84 24 ba 00 00 00         movzx eax, word ptr [rsp + 0xba]
    # nextln: 0007e2: 0f bf f8                        movsx edi, ax
    # nextln: 0007e5: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0007ef: 48 89 f3                        mov rbx, rsi
    # nextln: 0007f2: 4d 89 ce                        mov r14, r9
    # nextln: 0007f5: 4c 89 fe                        mov rsi, r15
    # nextln: 0007f8: ff d0                           call rax
    # nextln: 0007fa: 44 23 e8                        and r13d, eax
    # nextln: 0007fd: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000802: 4d 89 f2                        mov r10, r14
    # nextln: 000805: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 00080a: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 00080f: 49 89 d9                        mov r9, rbx
    # nextln: 000812: 48 8b 5c 24 58                  mov rbx, qword ptr [rsp + 0x58]
    # nextln: 000817: 4c 8b 74 24 48                  mov r14, qword ptr [rsp + 0x48]
    # nextln: 00081c: 48 8b 4c 24 50                  mov rcx, qword ptr [rsp + 0x50]
    # nextln: 000821: 48 8b 54 24 78                  mov rdx, qword ptr [rsp + 0x78]
    # nextln: 000826: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 00082b: 0f b7 bc 24 ba 00 00 00         movzx edi, word ptr [rsp + 0xba]
    # nextln: 000833: 0f bf ff                        movsx edi, di
    # nextln: 000836: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000840: 49 89 f6                        mov r14, rsi
    # nextln: 000843: 48 89 cb                        mov rbx, rcx
    # nextln: 000846: 4c 89 e6                        mov rsi, r12
    # nextln: 000849: ff d0                           call rax
    # nextln: 00084b: 33 c9                           xor ecx, ecx
    # nextln: 00084d: 85 c0                           test eax, eax
    # nextln: 00084f: 0f 94 c1                        sete cl
    # nextln: 000852: 44 23 e9                        and r13d, ecx
    # nextln: 000855: 4c 8b 4c 24 18                  mov r9, qword ptr [rsp + 0x18]
    # nextln: 00085a: 48 8b 4c 24 58                  mov rcx, qword ptr [rsp + 0x58]
    # nextln: 00085f: 4c 89 f6                        mov rsi, r14
    # nextln: 000862: 4c 8b 5c 24 28                  mov r11, qword ptr [rsp + 0x28]
    # nextln: 000867: 48 89 d8                        mov rax, rbx
    # nextln: 00086a: 48 8b 5c 24 48                  mov rbx, qword ptr [rsp + 0x48]
    # nextln: 00086f: 4c 8b 44 24 38                  mov r8, qword ptr [rsp + 0x38]
    # nextln: 000874: 48 8b 54 24 40                  mov rdx, qword ptr [rsp + 0x40]
    # nextln: 000879: 4c 8b 74 24 60                  mov r14, qword ptr [rsp + 0x60]
    # nextln: 00087e: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 000883: 0f b7 bc 24 ba 00 00 00         movzx edi, word ptr [rsp + 0xba]
    # nextln: 00088b: 0f bf ff                        movsx edi, di
    # nextln: 00088e: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 000898: 4c 89 c3                        mov rbx, r8
    # nextln: 00089b: 48 89 de                        mov rsi, rbx
    # nextln: 00089e: ff d0                           call rax
    # nextln: 0008a0: 44 23 e8                        and r13d, eax
    # nextln: 0008a3: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 0008a8: 4c 8b 4c 24 20                  mov r9, qword ptr [rsp + 0x20]
    # nextln: 0008ad: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 0008b2: 48 89 da                        mov rdx, rbx
    # nextln: 0008b5: 48 8b 5c 24 78                  mov rbx, qword ptr [rsp + 0x78]
    # nextln: 0008ba: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 0008bf: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 0008c4: 48 8b 44 24 50                  mov rax, qword ptr [rsp + 0x50]
    # nextln: 0008c9: 4c 8b 54 24 40                  mov r10, qword ptr [rsp + 0x40]
    # nextln: 0008ce: 0f b7 bc 24 b8 00 00 00         movzx edi, word ptr [rsp + 0xb8]
    # nextln: 0008d6: 0f bf ff                        movsx edi, di
    # nextln: 0008d9: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" + 0
    # nextln: 0008e3: 4c 89 fe                        mov rsi, r15
    # nextln: 0008e6: ff d0                           call rax
    # nextln: 0008e8: 33 c9                           xor ecx, ecx
    # nextln: 0008ea: 85 c0                           test eax, eax
    # nextln: 0008ec: 0f 94 c1                        sete cl
    # nextln: 0008ef: 44 23 e9                        and r13d, ecx
    # nextln: 0008f2: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 0008f7: 4c 8b 54 24 20                  mov r10, qword ptr [rsp + 0x20]
    # nextln: 0008fc: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000901: 4c 8b 44 24 18                  mov r8, qword ptr [rsp + 0x18]
    # nextln: 000906: 4c 8b 5c 24 38                  mov r11, qword ptr [rsp + 0x38]
    # nextln: 00090b: 48 8b 44 24 48                  mov rax, qword ptr [rsp + 0x48]
    # nextln: 000910: 48 8b 74 24 50                  mov rsi, qword ptr [rsp + 0x50]
    # nextln: 000915: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 00091a: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000924: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 000929: 48 89 de                        mov rsi, rbx
    # nextln: 00092c: ff d1                           call rcx
    # nextln: 00092e: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 000933: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000938: 4c 8b 44 24 38                  mov r8, qword ptr [rsp + 0x38]
    # nextln: 00093d: 4c 8b 4c 24 48                  mov r9, qword ptr [rsp + 0x48]
    # nextln: 000942: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 000947: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 00094c: 48 8b 5c 24 58                  mov rbx, qword ptr [rsp + 0x58]
    # nextln: 000951: 48 8b 54 24 50                  mov rdx, qword ptr [rsp + 0x50]
    # nextln: 000956: 4c 8b 54 24 28                  mov r10, qword ptr [rsp + 0x28]
    # nextln: 00095b: 44 23 e8                        and r13d, eax
    # nextln: 00095e: 48 89 f8                        mov rax, rdi
    # nextln: 000961: 4c 89 84 24 a8 00 00 00         mov qword ptr [rsp + 0xa8], r8
    # nextln: 000969: 4d 89 c8                        mov r8, r9
    # nextln: 00096c: 4c 8b 8c 24 a8 00 00 00         mov r9, qword ptr [rsp + 0xa8]
    # nextln: 000974: 48 89 f7                        mov rdi, rsi
    # nextln: 000977: 4c 89 de                        mov rsi, r11
    # nextln: 00097a: 49 89 d3                        mov r11, rdx
    # nextln: 00097d: 4c 89 d2                        mov rdx, r10
    # nextln: 000980: 49 ba 00 00 00 00 00 00 00 00   movabs r10, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 00098a: 48 8b 7c 24 70                  mov rdi, qword ptr [rsp + 0x70]
    # nextln: 00098f: 4c 89 e6                        mov rsi, r12
    # nextln: 000992: 41 ff d2                        call r10
    # nextln: 000995: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 00099a: 44 23 e8                        and r13d, eax
    # nextln: 00099d: 48 8b 44 24 40                  mov rax, qword ptr [rsp + 0x40]
    # nextln: 0009a2: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 0009a7: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 0009ac: 48 8b 74 24 38                  mov rsi, qword ptr [rsp + 0x38]
    # nextln: 0009b1: 4c 8b 54 24 50                  mov r10, qword ptr [rsp + 0x50]
    # nextln: 0009b6: 4c 8b 4c 24 30                  mov r9, qword ptr [rsp + 0x30]
    # nextln: 0009bb: 4c 8b 5c 24 48                  mov r11, qword ptr [rsp + 0x48]
    # nextln: 0009c0: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 0009ca: 4c 89 fe                        mov rsi, r15
    # nextln: 0009cd: 4c 89 f7                        mov rdi, r14
    # nextln: 0009d0: 41 ff d0                        call r8
    # nextln: 0009d3: 44 23 e8                        and r13d, eax
    # nextln: 0009d6: 4c 8b 54 24 40                  mov r10, qword ptr [rsp + 0x40]
    # nextln: 0009db: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 0009e0: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 0009e5: 4c 8b 4c 24 38                  mov r9, qword ptr [rsp + 0x38]
    # nextln: 0009ea: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 0009ef: 4c 8b 5c 24 30                  mov r11, qword ptr [rsp + 0x30]
    # nextln: 0009f4: 48 8b 44 24 50                  mov rax, qword ptr [rsp + 0x50]
    # nextln: 0009f9: 48 8b 7c 24 18                  mov rdi, qword ptr [rsp + 0x18]
    # nextln: 0009fe: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000a08: 4c 89 e6                        mov rsi, r12
    # nextln: 000a0b: 4c 89 f7                        mov rdi, r14
    # nextln: 000a0e: ff d2                           call rdx
    # nextln: 000a10: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000a15: 4c 8b 44 24 48                  mov r8, qword ptr [rsp + 0x48]
    # nextln: 000a1a: 4c 8b 54 24 30                  mov r10, qword ptr [rsp + 0x30]
    # nextln: 000a1f: 48 8b 7c 24 38                  mov rdi, qword ptr [rsp + 0x38]
    # nextln: 000a24: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000a29: 4c 8b 4c 24 50                  mov r9, qword ptr [rsp + 0x50]
    # nextln: 000a2e: 4c 8b 5c 24 40                  mov r11, qword ptr [rsp + 0x40]
    # nextln: 000a33: 49 89 dc                        mov r12, rbx
    # nextln: 000a36: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 000a3b: 33 db                           xor ebx, ebx
    # nextln: 000a3d: 85 c0                           test eax, eax
    # nextln: 000a3f: 0f 94 c3                        sete bl
    # nextln: 000a42: 44 23 eb                        and r13d, ebx
    # nextln: 000a45: 4c 89 c8                        mov rax, r9
    # nextln: 000a48: 4c 89 c3                        mov rbx, r8
    # nextln: 000a4b: 4d 89 d8                        mov r8, r11
    # nextln: 000a4e: 4d 89 d3                        mov r11, r10
    # nextln: 000a51: 49 89 f2                        mov r10, rsi
    # nextln: 000a54: 48 89 de                        mov rsi, rbx
    # nextln: 000a57: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000a61: 48 89 fb                        mov rbx, rdi
    # nextln: 000a64: 48 89 de                        mov rsi, rbx
    # nextln: 000a67: 4c 89 f7                        mov rdi, r14
    # nextln: 000a6a: 41 ff d1                        call r9
    # nextln: 000a6d: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000a72: 4c 8b 4c 24 20                  mov r9, qword ptr [rsp + 0x20]
    # nextln: 000a77: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000a7c: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000a81: 49 89 de                        mov r14, rbx
    # nextln: 000a84: 48 8b 5c 24 48                  mov rbx, qword ptr [rsp + 0x48]
    # nextln: 000a89: 4c 8b 44 24 50                  mov r8, qword ptr [rsp + 0x50]
    # nextln: 000a8e: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000a93: 44 23 e8                        and r13d, eax
    # nextln: 000a96: 4c 89 c0                        mov rax, r8
    # nextln: 000a99: 49 89 f8                        mov r8, rdi
    # nextln: 000a9c: 48 89 f7                        mov rdi, rsi
    # nextln: 000a9f: 4c 89 ce                        mov rsi, r9
    # nextln: 000aa2: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" + 0
    # nextln: 000aac: 4c 89 e7                        mov rdi, r12
    # nextln: 000aaf: 4c 89 fe                        mov rsi, r15
    # nextln: 000ab2: 41 ff d1                        call r9
    # nextln: 000ab5: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000aba: 48 8b 7c 24 20                  mov rdi, qword ptr [rsp + 0x20]
    # nextln: 000abf: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000ac4: 4c 8b 64 24 50                  mov r12, qword ptr [rsp + 0x50]
    # nextln: 000ac9: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000ace: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000ad3: 45 33 c9                        xor r9d, r9d
    # nextln: 000ad6: 85 c0                           test eax, eax
    # nextln: 000ad8: 41 0f 94 c1                     sete r9b
    # nextln: 000adc: 45 23 e9                        and r13d, r9d
    # nextln: 000adf: 48 89 f8                        mov rax, rdi
    # nextln: 000ae2: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000ae9: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000af3: 4c 89 fe                        mov rsi, r15
    # nextln: 000af6: 41 ff d1                        call r9
    # nextln: 000af9: 44 23 e8                        and r13d, eax
    # nextln: 000afc: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000b01: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000b06: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000b0b: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000b10: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 000b15: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000b1c: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000b26: 4c 89 f6                        mov rsi, r14
    # nextln: 000b29: 41 ff d1                        call r9
    # nextln: 000b2c: 44 23 e8                        and r13d, eax
    # nextln: 000b2f: 4c 8b 44 24 40                  mov r8, qword ptr [rsp + 0x40]
    # nextln: 000b34: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000b39: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 000b3e: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000b43: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000b48: 8b bc 24 b0 00 00 00            mov edi, dword ptr [rsp + 0xb0]
    # nextln: 000b4f: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" + 0
    # nextln: 000b59: 4c 89 fe                        mov rsi, r15
    # nextln: 000b5c: 41 ff d1                        call r9
    # nextln: 000b5f: 33 c9                           xor ecx, ecx
    # nextln: 000b61: 85 c0                           test eax, eax
    # nextln: 000b63: 0f 94 c1                        sete cl
    # nextln: 000b66: 44 23 e9                        and r13d, ecx
    # nextln: 000b69: 48 8b 4c 24 28                  mov rcx, qword ptr [rsp + 0x28]
    # nextln: 000b6e: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000b73: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000b78: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000b7d: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 000b82: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000b89: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000b93: 4c 89 fe                        mov rsi, r15
    # nextln: 000b96: 41 ff d1                        call r9
    # nextln: 000b99: 33 c9                           xor ecx, ecx
    # nextln: 000b9b: 85 c0                           test eax, eax
    # nextln: 000b9d: 0f 94 c1                        sete cl
    # nextln: 000ba0: 44 23 e9                        and r13d, ecx
    # nextln: 000ba3: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 000ba8: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000bad: 48 8b 4c 24 40                  mov rcx, qword ptr [rsp + 0x40]
    # nextln: 000bb2: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000bb7: 48 8b 74 24 18                  mov rsi, qword ptr [rsp + 0x18]
    # nextln: 000bbc: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000bc3: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000bcd: 4c 89 f6                        mov rsi, r14
    # nextln: 000bd0: 41 ff d1                        call r9
    # nextln: 000bd3: 33 c9                           xor ecx, ecx
    # nextln: 000bd5: 85 c0                           test eax, eax
    # nextln: 000bd7: 0f 94 c1                        sete cl
    # nextln: 000bda: 44 23 e9                        and r13d, ecx
    # nextln: 000bdd: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000be2: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000be7: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000bec: 48 8b 4c 24 40                  mov rcx, qword ptr [rsp + 0x40]
    # nextln: 000bf1: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000bf6: 8b bc 24 b0 00 00 00            mov edi, dword ptr [rsp + 0xb0]
    # nextln: 000bfd: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" + 0
    # nextln: 000c07: 4c 89 fe                        mov rsi, r15
    # nextln: 000c0a: 41 ff d1                        call r9
    # nextln: 000c0d: 44 23 e8                        and r13d, eax
    # nextln: 000c10: 48 8b 54 24 40                  mov rdx, qword ptr [rsp + 0x40]
    # nextln: 000c15: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 000c1a: 48 8b 74 24 30                  mov rsi, qword ptr [rsp + 0x30]
    # nextln: 000c1f: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000c24: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000c29: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000c30: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 000c3a: 4c 89 fe                        mov rsi, r15
    # nextln: 000c3d: 41 ff d1                        call r9
    # nextln: 000c40: 33 c9                           xor ecx, ecx
    # nextln: 000c42: 85 c0                           test eax, eax
    # nextln: 000c44: 0f 94 c1                        sete cl
    # nextln: 000c47: 44 23 e9                        and r13d, ecx
    # nextln: 000c4a: 48 8b 54 24 18                  mov rdx, qword ptr [rsp + 0x18]
    # nextln: 000c4f: 48 8b 4c 24 40                  mov rcx, qword ptr [rsp + 0x40]
    # nextln: 000c54: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000c59: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000c5e: 48 8b 44 24 30                  mov rax, qword ptr [rsp + 0x30]
    # nextln: 000c63: 8b bc 24 b4 00 00 00            mov edi, dword ptr [rsp + 0xb4]
    # nextln: 000c6a: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 000c74: 4c 89 f6                        mov rsi, r14
    # nextln: 000c77: 41 ff d1                        call r9
    # nextln: 000c7a: 33 c9                           xor ecx, ecx
    # nextln: 000c7c: 85 c0                           test eax, eax
    # nextln: 000c7e: 0f 94 c1                        sete cl
    # nextln: 000c81: 44 23 e9                        and r13d, ecx
    # nextln: 000c84: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000c89: 48 8b 54 24 40                  mov rdx, qword ptr [rsp + 0x40]
    # nextln: 000c8e: 48 8b 74 24 28                  mov rsi, qword ptr [rsp + 0x28]
    # nextln: 000c93: 48 8b 4c 24 30                  mov rcx, qword ptr [rsp + 0x30]
    # nextln: 000c98: 4c 8b 44 24 20                  mov r8, qword ptr [rsp + 0x20]
    # nextln: 000c9d: 8b bc 24 b0 00 00 00            mov edi, dword ptr [rsp + 0xb0]
    # nextln: 000ca4: 49 b9 00 00 00 00 00 00 00 00   movabs r9, 0  # RELOC_ABS64 -> @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" + 0
    # nextln: 000cae: 4c 89 fe                        mov rsi, r15
    # nextln: 000cb1: 41 ff d1                        call r9
    # nextln: 000cb4: 33 c9                           xor ecx, ecx
    # nextln: 000cb6: 41 3b c4                        cmp eax, r12d
    # nextln: 000cb9: 4c 8b 64 24 18                  mov r12, qword ptr [rsp + 0x18]
    # nextln: 000cbe: 48 8b 54 24 28                  mov rdx, qword ptr [rsp + 0x28]
    # nextln: 000cc3: 48 8b 44 24 30                  mov rax, qword ptr [rsp + 0x30]
    # nextln: 000cc8: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 000ccd: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000cd2: 0f 94 c1                        sete cl
    # nextln: 000cd5: 44 23 e9                        and r13d, ecx
    # nextln: 000cd8: 48 89 f1                        mov rcx, rsi
    # nextln: 000cdb: 48 89 fe                        mov rsi, rdi
    # nextln: 000cde: 48 89 d7                        mov rdi, rdx
    # nextln: 000ce1: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 000ceb: 48 89 df                        mov rdi, rbx
    # nextln: 000cee: 4c 89 fe                        mov rsi, r15
    # nextln: 000cf1: ff d2                           call rdx
    # nextln: 000cf3: 44 23 e8                        and r13d, eax
    # nextln: 000cf6: 48 8b 44 24 28                  mov rax, qword ptr [rsp + 0x28]
    # nextln: 000cfb: 48 8b 7c 24 30                  mov rdi, qword ptr [rsp + 0x30]
    # nextln: 000d00: 48 8b 54 24 20                  mov rdx, qword ptr [rsp + 0x20]
    # nextln: 000d05: 48 8b 74 24 40                  mov rsi, qword ptr [rsp + 0x40]
    # nextln: 000d0a: 48 b9 00 00 00 00 00 00 00 00   movabs rcx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 000d14: 4c 89 f6                        mov rsi, r14
    # nextln: 000d17: 48 89 df                        mov rdi, rbx
    # nextln: 000d1a: ff d1                           call rcx
    # nextln: 000d1c: 4c 89 e1                        mov rcx, r12
    # nextln: 000d1f: 48 8b 74 24 20                  mov rsi, qword ptr [rsp + 0x20]
    # nextln: 000d24: 48 8b 5c 24 28                  mov rbx, qword ptr [rsp + 0x28]
    # nextln: 000d29: 48 8b 54 24 30                  mov rdx, qword ptr [rsp + 0x30]
    # nextln: 000d2e: 48 8b 7c 24 40                  mov rdi, qword ptr [rsp + 0x40]
    # nextln: 000d33: 44 23 e8                        and r13d, eax
    # nextln: 000d36: 48 89 f0                        mov rax, rsi
    # nextln: 000d39: 49 b8 00 00 00 00 00 00 00 00   movabs r8, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" + 0
    # nextln: 000d43: 49 89 d4                        mov r12, rdx
    # nextln: 000d46: 4c 89 fe                        mov rsi, r15
    # nextln: 000d49: 41 ff d0                        call r8
    # nextln: 000d4c: 33 c9                           xor ecx, ecx
    # nextln: 000d4e: 85 c0                           test eax, eax
    # nextln: 000d50: 0f 94 c1                        sete cl
    # nextln: 000d53: 44 23 e9                        and r13d, ecx
    # nextln: 000d56: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000d5b: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000d60: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000d65: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 000d6f: 4c 89 fe                        mov rsi, r15
    # nextln: 000d72: ff d2                           call rdx
    # nextln: 000d74: 44 23 e8                        and r13d, eax
    # nextln: 000d77: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000d7c: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000d81: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000d86: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 000d90: 4c 89 f6                        mov rsi, r14
    # nextln: 000d93: ff d2                           call rdx
    # nextln: 000d95: 33 c9                           xor ecx, ecx
    # nextln: 000d97: 85 c0                           test eax, eax
    # nextln: 000d99: 0f 94 c1                        sete cl
    # nextln: 000d9c: 44 23 e9                        and r13d, ecx
    # nextln: 000d9f: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000da4: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000da9: 48 8b 7c 24 08                  mov rdi, qword ptr [rsp + 8]
    # nextln: 000dae: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 000db8: 4c 89 e6                        mov rsi, r12
    # nextln: 000dbb: ff d2                           call rdx
    # nextln: 000dbd: 44 23 e8                        and r13d, eax
    # nextln: 000dc0: 48 8b 44 24 18                  mov rax, qword ptr [rsp + 0x18]
    # nextln: 000dc5: 48 8b 4c 24 20                  mov rcx, qword ptr [rsp + 0x20]
    # nextln: 000dca: 48 8b 3c 24                     mov rdi, qword ptr [rsp]
    # nextln: 000dce: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" + 0
    # nextln: 000dd8: 4c 89 fe                        mov rsi, r15
    # nextln: 000ddb: ff d2                           call rdx
    # nextln: 000ddd: 33 c9                           xor ecx, ecx
    # nextln: 000ddf: 85 c0                           test eax, eax
    # nextln: 000de1: 0f 94 c1                        sete cl
    # nextln: 000de4: 44 23 e9                        and r13d, ecx
    # nextln: 000de7: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000dec: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000df1: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000dfb: 4c 89 fe                        mov rsi, r15
    # nextln: 000dfe: 48 89 df                        mov rdi, rbx
    # nextln: 000e01: ff d2                           call rdx
    # nextln: 000e03: 44 23 e8                        and r13d, eax
    # nextln: 000e06: 48 8b 44 24 20                  mov rax, qword ptr [rsp + 0x20]
    # nextln: 000e0b: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000e10: 48 ba 00 00 00 00 00 00 00 00   movabs rdx, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000e1a: 48 89 df                        mov rdi, rbx
    # nextln: 000e1d: 4c 89 f6                        mov rsi, r14
    # nextln: 000e20: ff d2                           call rdx
    # nextln: 000e22: 48 8b 4c 24 18                  mov rcx, qword ptr [rsp + 0x18]
    # nextln: 000e27: 4c 8b 74 24 20                  mov r14, qword ptr [rsp + 0x20]
    # nextln: 000e2c: 4c 89 e6                        mov rsi, r12
    # nextln: 000e2f: 49 89 c4                        mov r12, rax
    # nextln: 000e32: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000e3c: 48 89 df                        mov rdi, rbx
    # nextln: 000e3f: ff d0                           call rax
    # nextln: 000e41: 48 8b 5c 24 18                  mov rbx, qword ptr [rsp + 0x18]
    # nextln: 000e46: 33 c9                           xor ecx, ecx
    # nextln: 000e48: 45 85 e4                        test r12d, r12d
    # nextln: 000e4b: 0f 94 c1                        sete cl
    # nextln: 000e4e: 44 23 e9                        and r13d, ecx
    # nextln: 000e51: 44 23 e8                        and r13d, eax
    # nextln: 000e54: 48 b8 00 00 00 00 00 00 00 00   movabs rax, 0  # RELOC_ABS64 -> @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" + 0
    # nextln: 000e5e: 4c 89 fe                        mov rsi, r15
    # nextln: 000e61: 4c 89 f7                        mov rdi, r14
    # nextln: 000e64: ff d0                           call rax
    # nextln: 000e66: 33 c9                           xor ecx, ecx
    # nextln: 000e68: 85 c0                           test eax, eax
    # nextln: 000e6a: 0f 94 c1                        sete cl
    # nextln: 000e6d: 44 23 e9                        and r13d, ecx
    # nextln: 000e70: 45 85 ed                        test r13d, r13d
    # nextln: 000e73: 0f 84 15 00 00 00               je 0xe8e
    # nextln: 000e79: 48 89 d8                        mov rax, rbx
    # nextln: 000e7c: 48 81 c4 d8 00 00 00            add rsp, 0xd8
    # nextln: 000e83: 5b                              pop rbx
    # nextln: 000e84: 41 5c                           pop r12
    # nextln: 000e86: 41 5d                           pop r13
    # nextln: 000e88: 41 5e                           pop r14
    # nextln: 000e8a: 41 5f                           pop r15
    # nextln: 000e8c: 5d                              pop rbp
    # nextln: 000e8d: c3                              ret
    # nextln: 000e8e: 4c 89 f8                        mov rax, r15
    # nextln: 000e91: 48 81 c4 d8 00 00 00            add rsp, 0xd8
    # nextln: 000e98: 5b                              pop rbx
    # nextln: 000e99: 41 5c                           pop r12
    # nextln: 000e9b: 41 5d                           pop r13
    # nextln: 000e9d: 41 5e                           pop r14
    # nextln: 000e9f: 41 5f                           pop r15
    # nextln: 000ea1: 5d                              pop rbp
    # nextln: 000ea2: c3                              ret

    %0:ctrl = entry
    %1:ctrl, %2:phisel = region %0
    %3:i32 = iconst 0
    %4:i32 = iconst 1
    %5:i64 = iext %4
    %6:i64 = sfill 32 %5
    %7:i32 = iconst 3
    %8:ptr = stackslot 8:8
    %9:i32 = iconst 64
    %10:ptr = stackslot 8:8
    %11:i32 = iconst 32
    %12:ptr = stackslot 4:4
    %13:ptr = stackslot 4:4
    %14:ptr = stackslot 2:2
    %15:ptr = stackslot 2:2
    %16:i32 = iconst 16
    %17:ptr = stackslot 2:2
    %18:i32 = iconst 15
    %19:ptr = stackslot 1:1
    %20:ptr = stackslot 1:1
    %21:i32 = iconst 8
    %22:ptr = stackslot 1:1
    %23:ctrl = store.1 %1, %3, %22
    %24:ctrl = store.1 %23, %3, %20
    %25:ctrl = store.1 %24, %3, %19
    %26:ctrl = store.2 %25, %3, %17
    %27:ctrl = store.2 %26, %3, %15
    %28:ctrl = store.2 %27, %3, %14
    %29:ctrl = store.4 %28, %3, %13
    %30:ctrl = store.4 %29, %3, %12
    %31:i32 = iconst 7
    %32:i32 = iconst 2
    %33:i64 = iext %32
    %34:i64 = sfill 32 %33
    %35:i32 = iconst 4294934528
    %36:i32 = iconst 4294967168
    %37:i64 = iconst 0
    %38:ctrl = store.8 %30, %37, %10
    %39:ctrl = store.8 %38, %37, %8
    %40:ctrl, %41:phisel = region %39
    %42:ctrl = store.1 %40, %36, %22
    %43:ctrl = store.1 %42, %4, %20
    %44:ctrl = store.1 %43, %32, %19
    %45:ctrl = store.2 %44, %35, %17
    %46:ctrl = store.2 %45, %4, %15
    %47:ctrl = store.2 %46, %32, %14
    %48:ctrl = store.4 %47, %4, %13
    %49:ctrl = store.4 %48, %32, %12
    %50:ctrl = store.8 %49, %6, %10
    %51:ctrl = store.8 %50, %34, %8
    %52:ctrl, %53:i32 = load.1 %51, %22
    %54:i32 = sfill 8 %53
    %55:ctrl, %56:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %52, %54, %31
    %57:ctrl, %58:i32 = load.1 %55, %22
    %59:i32 = sfill 8 %58
    %60:ctrl, %61:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %57, %59, %21
    %62:ctrl, %63:i32 = load.1 %60, %20
    %64:i32 = sfill 8 %63
    %65:ctrl, %66:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %62, %64, %3
    %67:ctrl, %68:i32 = load.1 %65, %20
    %69:i32 = sfill 8 %68
    %70:ctrl, %71:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %67, %69, %21
    %72:ctrl, %73:i32 = load.1 %70, %20
    %74:i32 = sfill 8 %73
    %75:ctrl, %76:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %72, %74, %11
    %77:ctrl, %78:i32 = load.1 %75, %19
    %79:i32 = sfill 8 %78
    %80:ctrl, %81:i32 = call @"System.Boolean Tests.BitTest::I1_BT_reg_reg(System.SByte, System.Int32)" %77, %79, %3
    %82:ctrl, %83:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %80, %22, %31
    %84:ctrl, %85:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %82, %22, %21
    %86:ctrl, %87:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %84, %20, %3
    %88:ctrl, %89:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %86, %20, %21
    %90:ctrl, %91:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %88, %20, %11
    %92:ctrl, %93:i32 = call @"System.Boolean Tests.BitTest::I1_BT_mem_reg(System.SByte&, System.Int32)" %90, %19, %3
    %94:ctrl, %95:i32 = load.2 %92, %17
    %96:i32 = sfill 16 %95
    %97:ctrl, %98:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %94, %96, %18
    %99:ctrl, %100:i32 = load.2 %97, %17
    %101:i32 = sfill 16 %100
    %102:ctrl, %103:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %99, %101, %16
    %104:ctrl, %105:i32 = load.2 %102, %15
    %106:i32 = sfill 16 %105
    %107:ctrl, %108:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %104, %106, %3
    %109:ctrl, %110:i32 = load.2 %107, %15
    %111:i32 = sfill 16 %110
    %112:ctrl, %113:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %109, %111, %16
    %114:ctrl, %115:i32 = load.2 %112, %15
    %116:i32 = sfill 16 %115
    %117:ctrl, %118:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %114, %116, %11
    %119:ctrl, %120:i32 = load.2 %117, %14
    %121:i32 = sfill 16 %120
    %122:ctrl, %123:i32 = call @"System.Boolean Tests.BitTest::I2_BT_reg_reg(System.Int16, System.Int32)" %119, %121, %3
    %124:ctrl, %125:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %122, %17, %18
    %126:ctrl, %127:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %124, %17, %16
    %128:ctrl, %129:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %126, %15, %3
    %130:ctrl, %131:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %128, %15, %16
    %132:ctrl, %133:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %130, %15, %11
    %134:ctrl, %135:i32 = call @"System.Boolean Tests.BitTest::I2_BT_mem_reg(System.Int16&, System.Int32)" %132, %14, %3
    %136:ctrl, %137:i32 = load.4 %134, %13
    %138:ctrl, %139:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %136, %137, %3
    %140:ctrl, %141:i32 = load.4 %138, %13
    %142:ctrl, %143:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %140, %141, %11
    %144:ctrl, %145:i32 = load.4 %142, %12
    %146:ctrl, %147:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg(System.Int32, System.Int32)" %144, %145, %3
    %148:ctrl, %149:i32 = load.4 %146, %13
    %150:ctrl, %151:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %148, %149, %3
    %152:ctrl, %153:i32 = load.4 %150, %13
    %154:ctrl, %155:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %152, %153, %11
    %156:ctrl, %157:i32 = load.4 %154, %12
    %158:ctrl, %159:i32 = call @"System.Boolean Tests.BitTest::I4_BT_reg_reg_EQ(System.Int32, System.Int32)" %156, %157, %3
    %160:ctrl, %161:i32 = load.4 %158, %13
    %162:ctrl, %163:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %160, %161, %3
    %164:ctrl, %165:i32 = load.4 %162, %13
    %166:ctrl, %167:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %164, %165, %11
    %168:ctrl, %169:i32 = load.4 %166, %12
    %170:ctrl, %171:i32 = call @"System.Int32 Tests.BitTest::I4_BT_reg_reg_JCC(System.Int32, System.Int32)" %168, %169, %3
    %172:ctrl, %173:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %170, %13, %3
    %174:ctrl, %175:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %172, %13, %11
    %176:ctrl, %177:i32 = call @"System.Boolean Tests.BitTest::I4_BT_mem_reg(System.Int32&, System.Int32)" %174, %12, %3
    %178:ctrl, %179:i64 = load.8 %176, %10
    %180:ctrl, %181:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %178, %179, %3
    %182:ctrl, %183:i64 = load.8 %180, %10
    %184:ctrl, %185:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %182, %183, %11
    %186:ctrl, %187:i64 = load.8 %184, %10
    %188:ctrl, %189:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %186, %187, %9
    %190:ctrl, %191:i64 = load.8 %188, %8
    %192:ctrl, %193:i32 = call @"System.Boolean Tests.BitTest::I8_BT_reg_reg(System.Int64, System.Int32)" %190, %191, %3
    %194:ctrl, %195:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %192, %10, %3
    %196:ctrl, %197:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %194, %10, %11
    %198:ctrl, %199:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %196, %10, %9
    %200:ctrl, %201:i32 = call @"System.Boolean Tests.BitTest::I8_BT_mem_reg(System.Int64&, System.Int32)" %198, %8, %3
    %202:i32 = icmp eq %201, %3
    %203:i32 = icmp eq %197, %3
    %204:i32 = icmp eq %193, %3
    %205:i32 = icmp eq %185, %3
    %206:i32 = icmp eq %177, %3
    %207:i32 = icmp eq %171, %7
    %208:i32 = icmp eq %167, %3
    %209:i32 = icmp eq %163, %3
    %210:i32 = icmp eq %155, %3
    %211:i32 = icmp eq %151, %3
    %212:i32 = icmp eq %147, %3
    %213:i32 = icmp eq %135, %3
    %214:i32 = icmp eq %131, %3
    %215:i32 = icmp eq %123, %3
    %216:i32 = icmp eq %113, %3
    %217:i32 = icmp eq %93, %3
    %218:i32 = icmp eq %89, %3
    %219:i32 = icmp eq %81, %3
    %220:i32 = icmp eq %71, %3
    %221:i32 = and %4, %56
    %222:i32 = and %221, %61
    %223:i32 = and %222, %66
    %224:i32 = and %223, %220
    %225:i32 = and %224, %76
    %226:i32 = and %225, %219
    %227:i32 = and %226, %83
    %228:i32 = and %227, %85
    %229:i32 = and %228, %87
    %230:i32 = and %229, %218
    %231:i32 = and %230, %91
    %232:i32 = and %231, %217
    %233:i32 = and %232, %98
    %234:i32 = and %233, %103
    %235:i32 = and %234, %108
    %236:i32 = and %235, %216
    %237:i32 = and %236, %118
    %238:i32 = and %237, %215
    %239:i32 = and %238, %125
    %240:i32 = and %239, %127
    %241:i32 = and %240, %129
    %242:i32 = and %241, %214
    %243:i32 = and %242, %133
    %244:i32 = and %243, %213
    %245:i32 = and %244, %139
    %246:i32 = and %245, %143
    %247:i32 = and %246, %212
    %248:i32 = and %247, %211
    %249:i32 = and %248, %210
    %250:i32 = and %249, %159
    %251:i32 = and %250, %209
    %252:i32 = and %251, %208
    %253:i32 = and %252, %207
    %254:i32 = and %253, %173
    %255:i32 = and %254, %175
    %256:i32 = and %255, %206
    %257:i32 = and %256, %181
    %258:i32 = and %257, %205
    %259:i32 = and %258, %189
    %260:i32 = and %259, %204
    %261:i32 = and %260, %195
    %262:i32 = and %261, %203
    %263:i32 = and %262, %199
    %264:i32 = and %263, %202
    %265:ctrl, %266:ctrl = brcond %200, %264
    %267:ctrl, %268:phisel = region %265
    return %267, %4
    %269:ctrl, %270:phisel = region %266
    return %269, %3
}
