WHITESPACE = _{ " " | "\t" }

line_end = _{ ("#" ~ (!"\n" ~ ANY)* ~ "\n") | "\n" }

quoted_ident_letter = @{ "\\\"" | (!"\"" ~ ANY) }
quoted_ident        = @{ "\"" ~ quoted_ident_letter+ ~ "\"" }

// Note: keep the unquoted variation in sync with `is_unquoted_ident_char` in
// the writer.
ident = @{ ("_" | "-" | ASCII_ALPHANUMERIC)+ | quoted_ident }

integer = @{ "-"? ~ ASCII_DIGIT+ }
float   = @{
    "-"? ~ ((ASCII_DIGIT+ ~ ("." ~ (ASCII_DIGIT*))?) | ("." ~ ASCII_DIGIT+))
}

valname  = @{ "%" ~ ident }
funcname = @{ "@" ~ ident }

type = { "i32" | "i64" | "f64" | "ptr" }

param_types       = { (type ~ ("," ~ type)*)? }
signature         = { funcname ~ (":" ~ type)? ~ "(" ~ param_types ~ ")" }
callind_signature = { type? ~ "(" ~ param_types ~ ")" }

extfunc = { "extfunc" ~ signature }

valkind = { "ctrl" | "phisel" | type }

icmpkind = { "eq" | "ne" | "slt" | "sle" | "ult" | "ule" }
memsize  = { "1" | "2" | "4" | "8" }

iconst_nodekind    =  { "iconst" ~ integer }
fconst_nodekind    =  { "fconst" ~ float }
sfill_nodekind     =  { "sfill" ~ integer }
icmp_nodekind      =  { "icmp" ~ icmpkind }
load_nodekind      = ${ "load." ~ memsize }
store_nodekind     = ${ "store." ~ memsize }
stackslot_nodekind =  { "stackslot" ~ integer ~ ":" ~ integer }
call_nodekind      =  { "call" ~ funcname }
callind_nodekind   =  { "callind" ~ callind_signature }
nodekind           =  {
    "entry"
  | "return"
  | "region"
  | "unreachable"
  | "phi"
  | iconst_nodekind
  | fconst_nodekind
  | "iadd"
  | "isub"
  | "and"
  | "or"
  | "xor"
  | "shl"
  | "lshr"
  | "ashr"
  | "imul"
  | "sdiv"
  | "udiv"
  | "srem"
  | "urem"
  | "iext"
  | "itrunc"
  | sfill_nodekind
  | icmp_nodekind
  | "ptroff"
  | load_nodekind
  | store_nodekind
  | stackslot_nodekind
  | "brcond"
  | call_nodekind
  | callind_nodekind
}

valdef = {
    valname ~ ":" ~ valkind
}

node = {
    (valdef ~ ("," ~ valdef)* ~ "=")? ~ nodekind ~ (valname ~ ("," ~ valname)*)?
}

graph = { ((node ~ line_end) | line_end)* }

func = {
    "func" ~ signature ~ "{" ~ line_end ~ graph ~ "}"
}

module_item = _{ extfunc | func }

module = {
    SOI ~ line_end* ~ (module_item ~ (line_end+ ~ module_item)*)? ~ line_end* ~ EOI
}
